/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client;

import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.models.components.AddCredentialRequest;
import com.glean.api_client.models.components.ClientConfig;
import com.glean.api_client.models.components.DeleteQueryHistoryRequest;
import com.glean.api_client.models.components.DeleteQueryHistoryResponse;
import com.glean.api_client.models.components.EmailRequest;
import com.glean.api_client.models.components.InviteRequest;
import com.glean.api_client.models.components.PublicConfigRequest;
import com.glean.api_client.models.components.RemoveCredentialRequest;
import com.glean.api_client.models.errors.APIException;
import com.glean.api_client.models.operations.AddcredentialRequest;
import com.glean.api_client.models.operations.AddcredentialRequestBuilder;
import com.glean.api_client.models.operations.AddcredentialResponse;
import com.glean.api_client.models.operations.DeletequeryhistoryRequest;
import com.glean.api_client.models.operations.DeletequeryhistoryRequestBuilder;
import com.glean.api_client.models.operations.DeletequeryhistoryResponse;
import com.glean.api_client.models.operations.InviteRequestBuilder;
import com.glean.api_client.models.operations.InviteResponse;
import com.glean.api_client.models.operations.PublicconfigRequest;
import com.glean.api_client.models.operations.PublicconfigRequestBuilder;
import com.glean.api_client.models.operations.PublicconfigResponse;
import com.glean.api_client.models.operations.RemovecredentialRequest;
import com.glean.api_client.models.operations.RemovecredentialRequestBuilder;
import com.glean.api_client.models.operations.RemovecredentialResponse;
import com.glean.api_client.models.operations.SDKMethodInterfaces.*;
import com.glean.api_client.models.operations.SupportEmailRequest;
import com.glean.api_client.models.operations.SupportEmailRequestBuilder;
import com.glean.api_client.models.operations.SupportEmailResponse;
import com.glean.api_client.utils.HTTPClient;
import com.glean.api_client.utils.HTTPRequest;
import com.glean.api_client.utils.Hook.AfterErrorContextImpl;
import com.glean.api_client.utils.Hook.AfterSuccessContextImpl;
import com.glean.api_client.utils.Hook.BeforeRequestContextImpl;
import com.glean.api_client.utils.SerializedBody;
import com.glean.api_client.utils.Utils.JsonShape;
import com.glean.api_client.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;

public class User implements
            MethodCallAddcredential,
            MethodCallDeletequeryhistory,
            MethodCallInvite,
            MethodCallPublicconfig,
            MethodCallRemovecredential,
            MethodCallSupportEmail {

    private final SDKConfiguration sdkConfiguration;

    User(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create credentials
     * 
     * <p>API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
     * 
     * @return The call builder
     */
    public AddcredentialRequestBuilder addCredential() {
        return new AddcredentialRequestBuilder(this);
    }

    /**
     * Create credentials
     * 
     * <p>API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
     * 
     * @param addCredentialRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddcredentialResponse addCredential(
            AddCredentialRequest addCredentialRequest) throws Exception {
        return addCredential(Optional.empty(), Optional.empty(), addCredentialRequest);
    }
    
    /**
     * Create credentials
     * 
     * <p>API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param addCredentialRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddcredentialResponse addCredential(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            AddCredentialRequest addCredentialRequest) throws Exception {
        AddcredentialRequest request =
            AddcredentialRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .addCredentialRequest(addCredentialRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/addcredential");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "addCredentialRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "addcredential", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "addcredential",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "addcredential",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "addcredential",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AddcredentialResponse.Builder _resBuilder = 
            AddcredentialResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        AddcredentialResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete query history
     * 
     * <p>Remove one or more queries from a user's query history.
     * 
     * @return The call builder
     */
    public DeletequeryhistoryRequestBuilder deleteQueryHistory() {
        return new DeletequeryhistoryRequestBuilder(this);
    }

    /**
     * Delete query history
     * 
     * <p>Remove one or more queries from a user's query history.
     * 
     * @param deleteQueryHistoryRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletequeryhistoryResponse deleteQueryHistory(
            DeleteQueryHistoryRequest deleteQueryHistoryRequest) throws Exception {
        return deleteQueryHistory(Optional.empty(), Optional.empty(), deleteQueryHistoryRequest);
    }
    
    /**
     * Delete query history
     * 
     * <p>Remove one or more queries from a user's query history.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param deleteQueryHistoryRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletequeryhistoryResponse deleteQueryHistory(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            DeleteQueryHistoryRequest deleteQueryHistoryRequest) throws Exception {
        DeletequeryhistoryRequest request =
            DeletequeryhistoryRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .deleteQueryHistoryRequest(deleteQueryHistoryRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/deletequeryhistory");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "deleteQueryHistoryRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "deletequeryhistory", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletequeryhistory",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "deletequeryhistory",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletequeryhistory",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeletequeryhistoryResponse.Builder _resBuilder = 
            DeletequeryhistoryResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeletequeryhistoryResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                DeleteQueryHistoryResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<DeleteQueryHistoryResponse>() {});
                _res.withDeleteQueryHistoryResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Send invitation
     * 
     * <p>Invites people to Glean via email or Slack
     * 
     * @return The call builder
     */
    public InviteRequestBuilder invite() {
        return new InviteRequestBuilder(this);
    }

    /**
     * Send invitation
     * 
     * <p>Invites people to Glean via email or Slack
     * 
     * @param inviteRequest A request to send an invite to the specified user[s]
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InviteResponse invite(
            InviteRequest inviteRequest) throws Exception {
        return invite(Optional.empty(), Optional.empty(), inviteRequest);
    }
    
    /**
     * Send invitation
     * 
     * <p>Invites people to Glean via email or Slack
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param inviteRequest A request to send an invite to the specified user[s]
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InviteResponse invite(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            InviteRequest inviteRequest) throws Exception {
        com.glean.api_client.models.operations.InviteRequest request =
            com.glean.api_client.models.operations.InviteRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .inviteRequest(inviteRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/invite");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "inviteRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "invite", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "invite",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "invite",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "invite",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        InviteResponse.Builder _resBuilder = 
            InviteResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        InviteResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Read public client configuration
     * 
     * <p>Read configuration information such as the company name, logo and etc that is public and is not considered as PII.
     * 
     * @return The call builder
     */
    public PublicconfigRequestBuilder getPublicConfig() {
        return new PublicconfigRequestBuilder(this);
    }

    /**
     * Read public client configuration
     * 
     * <p>Read configuration information such as the company name, logo and etc that is public and is not considered as PII.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PublicconfigResponse getPublicConfigDirect() throws Exception {
        return getPublicConfig(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Read public client configuration
     * 
     * <p>Read configuration information such as the company name, logo and etc that is public and is not considered as PII.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param publicConfigRequest Will only send back publicly available config and will ignore other keys
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PublicconfigResponse getPublicConfig(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            Optional<? extends PublicConfigRequest> publicConfigRequest) throws Exception {
        PublicconfigRequest request =
            PublicconfigRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .publicConfigRequest(publicConfigRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/publicclientconfig");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "publicConfigRequest",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "publicconfig", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "publicconfig",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "publicconfig",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "publicconfig",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PublicconfigResponse.Builder _resBuilder = 
            PublicconfigResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PublicconfigResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClientConfig _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientConfig>() {});
                _res.withClientConfig(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete credentials
     * 
     * <p>Delete a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
     * 
     * @return The call builder
     */
    public RemovecredentialRequestBuilder removeCredential() {
        return new RemovecredentialRequestBuilder(this);
    }

    /**
     * Delete credentials
     * 
     * <p>Delete a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
     * 
     * @param removeCredentialRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemovecredentialResponse removeCredential(
            RemoveCredentialRequest removeCredentialRequest) throws Exception {
        return removeCredential(Optional.empty(), Optional.empty(), removeCredentialRequest);
    }
    
    /**
     * Delete credentials
     * 
     * <p>Delete a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param removeCredentialRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemovecredentialResponse removeCredential(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            RemoveCredentialRequest removeCredentialRequest) throws Exception {
        RemovecredentialRequest request =
            RemovecredentialRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .removeCredentialRequest(removeCredentialRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/removecredential");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "removeCredentialRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "removecredential", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "removecredential",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "removecredential",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "removecredential",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        RemovecredentialResponse.Builder _resBuilder = 
            RemovecredentialResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        RemovecredentialResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Send support email
     * 
     * <p>Sends a support email based on a template to the Glean support team.
     * 
     * @return The call builder
     */
    public SupportEmailRequestBuilder sendSupportEmail() {
        return new SupportEmailRequestBuilder(this);
    }

    /**
     * Send support email
     * 
     * <p>Sends a support email based on a template to the Glean support team.
     * 
     * @param emailRequest A request to send email[s] to the specified users
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SupportEmailResponse sendSupportEmail(
            EmailRequest emailRequest) throws Exception {
        return sendSupportEmail(Optional.empty(), Optional.empty(), emailRequest);
    }
    
    /**
     * Send support email
     * 
     * <p>Sends a support email based on a template to the Glean support team.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param emailRequest A request to send email[s] to the specified users
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SupportEmailResponse sendSupportEmail(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            EmailRequest emailRequest) throws Exception {
        SupportEmailRequest request =
            SupportEmailRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .emailRequest(emailRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/support");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "emailRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "support_email", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "support_email",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "support_email",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "support_email",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        SupportEmailResponse.Builder _resBuilder = 
            SupportEmailResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        SupportEmailResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
