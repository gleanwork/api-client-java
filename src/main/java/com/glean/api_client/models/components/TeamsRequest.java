/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class TeamsRequest {

    /**
     * The IDs of the teams to retrieve.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ids")
    private Optional<? extends List<String>> ids;

    /**
     * List of teams fields to return that aren't returned by default
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeFields")
    private Optional<? extends List<TeamsRequestIncludeField>> includeFields;

    @JsonCreator
    public TeamsRequest(
            @JsonProperty("ids") Optional<? extends List<String>> ids,
            @JsonProperty("includeFields") Optional<? extends List<TeamsRequestIncludeField>> includeFields) {
        Utils.checkNotNull(ids, "ids");
        Utils.checkNotNull(includeFields, "includeFields");
        this.ids = ids;
        this.includeFields = includeFields;
    }
    
    public TeamsRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The IDs of the teams to retrieve.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> ids() {
        return (Optional<List<String>>) ids;
    }

    /**
     * List of teams fields to return that aren't returned by default
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TeamsRequestIncludeField>> includeFields() {
        return (Optional<List<TeamsRequestIncludeField>>) includeFields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The IDs of the teams to retrieve.
     */
    public TeamsRequest withIds(List<String> ids) {
        Utils.checkNotNull(ids, "ids");
        this.ids = Optional.ofNullable(ids);
        return this;
    }

    /**
     * The IDs of the teams to retrieve.
     */
    public TeamsRequest withIds(Optional<? extends List<String>> ids) {
        Utils.checkNotNull(ids, "ids");
        this.ids = ids;
        return this;
    }

    /**
     * List of teams fields to return that aren't returned by default
     */
    public TeamsRequest withIncludeFields(List<TeamsRequestIncludeField> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = Optional.ofNullable(includeFields);
        return this;
    }

    /**
     * List of teams fields to return that aren't returned by default
     */
    public TeamsRequest withIncludeFields(Optional<? extends List<TeamsRequestIncludeField>> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = includeFields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeamsRequest other = (TeamsRequest) o;
        return 
            Objects.deepEquals(this.ids, other.ids) &&
            Objects.deepEquals(this.includeFields, other.includeFields);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ids,
            includeFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TeamsRequest.class,
                "ids", ids,
                "includeFields", includeFields);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> ids = Optional.empty();
 
        private Optional<? extends List<TeamsRequestIncludeField>> includeFields = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The IDs of the teams to retrieve.
         */
        public Builder ids(List<String> ids) {
            Utils.checkNotNull(ids, "ids");
            this.ids = Optional.ofNullable(ids);
            return this;
        }

        /**
         * The IDs of the teams to retrieve.
         */
        public Builder ids(Optional<? extends List<String>> ids) {
            Utils.checkNotNull(ids, "ids");
            this.ids = ids;
            return this;
        }

        /**
         * List of teams fields to return that aren't returned by default
         */
        public Builder includeFields(List<TeamsRequestIncludeField> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * List of teams fields to return that aren't returned by default
         */
        public Builder includeFields(Optional<? extends List<TeamsRequestIncludeField>> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = includeFields;
            return this;
        }
        
        public TeamsRequest build() {
            return new TeamsRequest(
                ids,
                includeFields);
        }
    }
}
