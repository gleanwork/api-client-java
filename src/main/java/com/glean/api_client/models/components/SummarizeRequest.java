/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * SummarizeRequest
 * 
 * <p>Summary of the document
 */
public class SummarizeRequest {

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<OffsetDateTime> timestamp;

    /**
     * Optional query that the summary should be about
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * Optional length of summary output. If not given, defaults to 500 chars.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredSummaryLength")
    private Optional<Long> preferredSummaryLength;

    /**
     * Specifications of documents to summarize
     */
    @JsonProperty("documentSpecs")
    private List<DocumentSpecUnion> documentSpecs;

    /**
     * An opaque token that represents this particular result. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonCreator
    public SummarizeRequest(
            @JsonProperty("timestamp") Optional<OffsetDateTime> timestamp,
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("preferredSummaryLength") Optional<Long> preferredSummaryLength,
            @JsonProperty("documentSpecs") List<DocumentSpecUnion> documentSpecs,
            @JsonProperty("trackingToken") Optional<String> trackingToken) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(preferredSummaryLength, "preferredSummaryLength");
        Utils.checkNotNull(documentSpecs, "documentSpecs");
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.timestamp = timestamp;
        this.query = query;
        this.preferredSummaryLength = preferredSummaryLength;
        this.documentSpecs = documentSpecs;
        this.trackingToken = trackingToken;
    }
    
    public SummarizeRequest(
            List<DocumentSpecUnion> documentSpecs) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), documentSpecs, Optional.empty());
    }

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> timestamp() {
        return timestamp;
    }

    /**
     * Optional query that the summary should be about
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Optional length of summary output. If not given, defaults to 500 chars.
     */
    @JsonIgnore
    public Optional<Long> preferredSummaryLength() {
        return preferredSummaryLength;
    }

    /**
     * Specifications of documents to summarize
     */
    @JsonIgnore
    public List<DocumentSpecUnion> documentSpecs() {
        return documentSpecs;
    }

    /**
     * An opaque token that represents this particular result. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    public SummarizeRequest withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    public SummarizeRequest withTimestamp(Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Optional query that the summary should be about
     */
    public SummarizeRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * Optional query that the summary should be about
     */
    public SummarizeRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Optional length of summary output. If not given, defaults to 500 chars.
     */
    public SummarizeRequest withPreferredSummaryLength(long preferredSummaryLength) {
        Utils.checkNotNull(preferredSummaryLength, "preferredSummaryLength");
        this.preferredSummaryLength = Optional.ofNullable(preferredSummaryLength);
        return this;
    }

    /**
     * Optional length of summary output. If not given, defaults to 500 chars.
     */
    public SummarizeRequest withPreferredSummaryLength(Optional<Long> preferredSummaryLength) {
        Utils.checkNotNull(preferredSummaryLength, "preferredSummaryLength");
        this.preferredSummaryLength = preferredSummaryLength;
        return this;
    }

    /**
     * Specifications of documents to summarize
     */
    public SummarizeRequest withDocumentSpecs(List<DocumentSpecUnion> documentSpecs) {
        Utils.checkNotNull(documentSpecs, "documentSpecs");
        this.documentSpecs = documentSpecs;
        return this;
    }

    /**
     * An opaque token that represents this particular result. To be used for /feedback reporting.
     */
    public SummarizeRequest withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular result. To be used for /feedback reporting.
     */
    public SummarizeRequest withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SummarizeRequest other = (SummarizeRequest) o;
        return 
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.preferredSummaryLength, other.preferredSummaryLength) &&
            Objects.deepEquals(this.documentSpecs, other.documentSpecs) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timestamp,
            query,
            preferredSummaryLength,
            documentSpecs,
            trackingToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SummarizeRequest.class,
                "timestamp", timestamp,
                "query", query,
                "preferredSummaryLength", preferredSummaryLength,
                "documentSpecs", documentSpecs,
                "trackingToken", trackingToken);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> timestamp = Optional.empty();
 
        private Optional<String> query = Optional.empty();
 
        private Optional<Long> preferredSummaryLength = Optional.empty();
 
        private List<DocumentSpecUnion> documentSpecs;
 
        private Optional<String> trackingToken = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ISO 8601 timestamp associated with the client request.
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * The ISO 8601 timestamp associated with the client request.
         */
        public Builder timestamp(Optional<OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Optional query that the summary should be about
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Optional query that the summary should be about
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Optional length of summary output. If not given, defaults to 500 chars.
         */
        public Builder preferredSummaryLength(long preferredSummaryLength) {
            Utils.checkNotNull(preferredSummaryLength, "preferredSummaryLength");
            this.preferredSummaryLength = Optional.ofNullable(preferredSummaryLength);
            return this;
        }

        /**
         * Optional length of summary output. If not given, defaults to 500 chars.
         */
        public Builder preferredSummaryLength(Optional<Long> preferredSummaryLength) {
            Utils.checkNotNull(preferredSummaryLength, "preferredSummaryLength");
            this.preferredSummaryLength = preferredSummaryLength;
            return this;
        }

        /**
         * Specifications of documents to summarize
         */
        public Builder documentSpecs(List<DocumentSpecUnion> documentSpecs) {
            Utils.checkNotNull(documentSpecs, "documentSpecs");
            this.documentSpecs = documentSpecs;
            return this;
        }

        /**
         * An opaque token that represents this particular result. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular result. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }
        
        public SummarizeRequest build() {
            return new SummarizeRequest(
                timestamp,
                query,
                preferredSummaryLength,
                documentSpecs,
                trackingToken);
        }
    }
}
