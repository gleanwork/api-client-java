/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class RunAgentRequest {

    /**
     * The ID of the agent to be run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentId")
    private Optional<String> agentId;

    /**
     * Key-value mapping of string -&gt; string where the key is the name of the field in the prompt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends Map<String, String>> fields;

    /**
     * Whether to stream responses as they become available. If false, the entire response will be returned at once.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stream")
    private Optional<Boolean> stream;

    @JsonCreator
    public RunAgentRequest(
            @JsonProperty("agentId") Optional<String> agentId,
            @JsonProperty("fields") Optional<? extends Map<String, String>> fields,
            @JsonProperty("stream") Optional<Boolean> stream) {
        Utils.checkNotNull(agentId, "agentId");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(stream, "stream");
        this.agentId = agentId;
        this.fields = fields;
        this.stream = stream;
    }
    
    public RunAgentRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the agent to be run.
     */
    @JsonIgnore
    public Optional<String> agentId() {
        return agentId;
    }

    /**
     * Key-value mapping of string -&gt; string where the key is the name of the field in the prompt.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> fields() {
        return (Optional<Map<String, String>>) fields;
    }

    /**
     * Whether to stream responses as they become available. If false, the entire response will be returned at once.
     */
    @JsonIgnore
    public Optional<Boolean> stream() {
        return stream;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the agent to be run.
     */
    public RunAgentRequest withAgentId(String agentId) {
        Utils.checkNotNull(agentId, "agentId");
        this.agentId = Optional.ofNullable(agentId);
        return this;
    }

    /**
     * The ID of the agent to be run.
     */
    public RunAgentRequest withAgentId(Optional<String> agentId) {
        Utils.checkNotNull(agentId, "agentId");
        this.agentId = agentId;
        return this;
    }

    /**
     * Key-value mapping of string -&gt; string where the key is the name of the field in the prompt.
     */
    public RunAgentRequest withFields(Map<String, String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    /**
     * Key-value mapping of string -&gt; string where the key is the name of the field in the prompt.
     */
    public RunAgentRequest withFields(Optional<? extends Map<String, String>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * Whether to stream responses as they become available. If false, the entire response will be returned at once.
     */
    public RunAgentRequest withStream(boolean stream) {
        Utils.checkNotNull(stream, "stream");
        this.stream = Optional.ofNullable(stream);
        return this;
    }

    /**
     * Whether to stream responses as they become available. If false, the entire response will be returned at once.
     */
    public RunAgentRequest withStream(Optional<Boolean> stream) {
        Utils.checkNotNull(stream, "stream");
        this.stream = stream;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RunAgentRequest other = (RunAgentRequest) o;
        return 
            Objects.deepEquals(this.agentId, other.agentId) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.stream, other.stream);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agentId,
            fields,
            stream);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RunAgentRequest.class,
                "agentId", agentId,
                "fields", fields,
                "stream", stream);
    }
    
    public final static class Builder {
 
        private Optional<String> agentId = Optional.empty();
 
        private Optional<? extends Map<String, String>> fields = Optional.empty();
 
        private Optional<Boolean> stream = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the agent to be run.
         */
        public Builder agentId(String agentId) {
            Utils.checkNotNull(agentId, "agentId");
            this.agentId = Optional.ofNullable(agentId);
            return this;
        }

        /**
         * The ID of the agent to be run.
         */
        public Builder agentId(Optional<String> agentId) {
            Utils.checkNotNull(agentId, "agentId");
            this.agentId = agentId;
            return this;
        }

        /**
         * Key-value mapping of string -&gt; string where the key is the name of the field in the prompt.
         */
        public Builder fields(Map<String, String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Key-value mapping of string -&gt; string where the key is the name of the field in the prompt.
         */
        public Builder fields(Optional<? extends Map<String, String>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * Whether to stream responses as they become available. If false, the entire response will be returned at once.
         */
        public Builder stream(boolean stream) {
            Utils.checkNotNull(stream, "stream");
            this.stream = Optional.ofNullable(stream);
            return this;
        }

        /**
         * Whether to stream responses as they become available. If false, the entire response will be returned at once.
         */
        public Builder stream(Optional<Boolean> stream) {
            Utils.checkNotNull(stream, "stream");
            this.stream = stream;
            return this;
        }
        
        public RunAgentRequest build() {
            return new RunAgentRequest(
                agentId,
                fields,
                stream);
        }
    }
}
