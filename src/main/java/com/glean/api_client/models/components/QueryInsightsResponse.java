/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class QueryInsightsResponse {

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastLogTimestamp")
    private Optional<Long> lastLogTimestamp;

    /**
     * Insights for queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryInsights")
    private Optional<? extends List<QueryInsight>> queryInsights;

    /**
     * Insights for low performing queries without good results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lowPerformingQueryInsights")
    private Optional<? extends List<QueryInsight>> lowPerformingQueryInsights;

    /**
     * list of departments applicable for queries tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    /**
     * Min threshold in number of visitors while populating results, otherwise 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minVisitorThreshold")
    private Optional<Long> minVisitorThreshold;

    @JsonCreator
    public QueryInsightsResponse(
            @JsonProperty("lastLogTimestamp") Optional<Long> lastLogTimestamp,
            @JsonProperty("queryInsights") Optional<? extends List<QueryInsight>> queryInsights,
            @JsonProperty("lowPerformingQueryInsights") Optional<? extends List<QueryInsight>> lowPerformingQueryInsights,
            @JsonProperty("departments") Optional<? extends List<String>> departments,
            @JsonProperty("minVisitorThreshold") Optional<Long> minVisitorThreshold) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        Utils.checkNotNull(queryInsights, "queryInsights");
        Utils.checkNotNull(lowPerformingQueryInsights, "lowPerformingQueryInsights");
        Utils.checkNotNull(departments, "departments");
        Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
        this.lastLogTimestamp = lastLogTimestamp;
        this.queryInsights = queryInsights;
        this.lowPerformingQueryInsights = lowPerformingQueryInsights;
        this.departments = departments;
        this.minVisitorThreshold = minVisitorThreshold;
    }
    
    public QueryInsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastLogTimestamp() {
        return lastLogTimestamp;
    }

    /**
     * Insights for queries.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<QueryInsight>> queryInsights() {
        return (Optional<List<QueryInsight>>) queryInsights;
    }

    /**
     * Insights for low performing queries without good results.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<QueryInsight>> lowPerformingQueryInsights() {
        return (Optional<List<QueryInsight>>) lowPerformingQueryInsights;
    }

    /**
     * list of departments applicable for queries tab.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    /**
     * Min threshold in number of visitors while populating results, otherwise 0.
     */
    @JsonIgnore
    public Optional<Long> minVisitorThreshold() {
        return minVisitorThreshold;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public QueryInsightsResponse withLastLogTimestamp(long lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
        return this;
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public QueryInsightsResponse withLastLogTimestamp(Optional<Long> lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = lastLogTimestamp;
        return this;
    }

    /**
     * Insights for queries.
     */
    public QueryInsightsResponse withQueryInsights(List<QueryInsight> queryInsights) {
        Utils.checkNotNull(queryInsights, "queryInsights");
        this.queryInsights = Optional.ofNullable(queryInsights);
        return this;
    }

    /**
     * Insights for queries.
     */
    public QueryInsightsResponse withQueryInsights(Optional<? extends List<QueryInsight>> queryInsights) {
        Utils.checkNotNull(queryInsights, "queryInsights");
        this.queryInsights = queryInsights;
        return this;
    }

    /**
     * Insights for low performing queries without good results.
     */
    public QueryInsightsResponse withLowPerformingQueryInsights(List<QueryInsight> lowPerformingQueryInsights) {
        Utils.checkNotNull(lowPerformingQueryInsights, "lowPerformingQueryInsights");
        this.lowPerformingQueryInsights = Optional.ofNullable(lowPerformingQueryInsights);
        return this;
    }

    /**
     * Insights for low performing queries without good results.
     */
    public QueryInsightsResponse withLowPerformingQueryInsights(Optional<? extends List<QueryInsight>> lowPerformingQueryInsights) {
        Utils.checkNotNull(lowPerformingQueryInsights, "lowPerformingQueryInsights");
        this.lowPerformingQueryInsights = lowPerformingQueryInsights;
        return this;
    }

    /**
     * list of departments applicable for queries tab.
     */
    public QueryInsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * list of departments applicable for queries tab.
     */
    public QueryInsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    /**
     * Min threshold in number of visitors while populating results, otherwise 0.
     */
    public QueryInsightsResponse withMinVisitorThreshold(long minVisitorThreshold) {
        Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
        this.minVisitorThreshold = Optional.ofNullable(minVisitorThreshold);
        return this;
    }

    /**
     * Min threshold in number of visitors while populating results, otherwise 0.
     */
    public QueryInsightsResponse withMinVisitorThreshold(Optional<Long> minVisitorThreshold) {
        Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
        this.minVisitorThreshold = minVisitorThreshold;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryInsightsResponse other = (QueryInsightsResponse) o;
        return 
            Objects.deepEquals(this.lastLogTimestamp, other.lastLogTimestamp) &&
            Objects.deepEquals(this.queryInsights, other.queryInsights) &&
            Objects.deepEquals(this.lowPerformingQueryInsights, other.lowPerformingQueryInsights) &&
            Objects.deepEquals(this.departments, other.departments) &&
            Objects.deepEquals(this.minVisitorThreshold, other.minVisitorThreshold);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lastLogTimestamp,
            queryInsights,
            lowPerformingQueryInsights,
            departments,
            minVisitorThreshold);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QueryInsightsResponse.class,
                "lastLogTimestamp", lastLogTimestamp,
                "queryInsights", queryInsights,
                "lowPerformingQueryInsights", lowPerformingQueryInsights,
                "departments", departments,
                "minVisitorThreshold", minVisitorThreshold);
    }
    
    public final static class Builder {
 
        private Optional<Long> lastLogTimestamp = Optional.empty();
 
        private Optional<? extends List<QueryInsight>> queryInsights = Optional.empty();
 
        private Optional<? extends List<QueryInsight>> lowPerformingQueryInsights = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
 
        private Optional<Long> minVisitorThreshold = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(long lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
            return this;
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(Optional<Long> lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = lastLogTimestamp;
            return this;
        }

        /**
         * Insights for queries.
         */
        public Builder queryInsights(List<QueryInsight> queryInsights) {
            Utils.checkNotNull(queryInsights, "queryInsights");
            this.queryInsights = Optional.ofNullable(queryInsights);
            return this;
        }

        /**
         * Insights for queries.
         */
        public Builder queryInsights(Optional<? extends List<QueryInsight>> queryInsights) {
            Utils.checkNotNull(queryInsights, "queryInsights");
            this.queryInsights = queryInsights;
            return this;
        }

        /**
         * Insights for low performing queries without good results.
         */
        public Builder lowPerformingQueryInsights(List<QueryInsight> lowPerformingQueryInsights) {
            Utils.checkNotNull(lowPerformingQueryInsights, "lowPerformingQueryInsights");
            this.lowPerformingQueryInsights = Optional.ofNullable(lowPerformingQueryInsights);
            return this;
        }

        /**
         * Insights for low performing queries without good results.
         */
        public Builder lowPerformingQueryInsights(Optional<? extends List<QueryInsight>> lowPerformingQueryInsights) {
            Utils.checkNotNull(lowPerformingQueryInsights, "lowPerformingQueryInsights");
            this.lowPerformingQueryInsights = lowPerformingQueryInsights;
            return this;
        }

        /**
         * list of departments applicable for queries tab.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * list of departments applicable for queries tab.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }

        /**
         * Min threshold in number of visitors while populating results, otherwise 0.
         */
        public Builder minVisitorThreshold(long minVisitorThreshold) {
            Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
            this.minVisitorThreshold = Optional.ofNullable(minVisitorThreshold);
            return this;
        }

        /**
         * Min threshold in number of visitors while populating results, otherwise 0.
         */
        public Builder minVisitorThreshold(Optional<Long> minVisitorThreshold) {
            Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
            this.minVisitorThreshold = minVisitorThreshold;
            return this;
        }
        
        public QueryInsightsResponse build() {
            return new QueryInsightsResponse(
                lastLogTimestamp,
                queryInsights,
                lowPerformingQueryInsights,
                departments,
                minVisitorThreshold);
        }
    }
}
