/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ToolsConfig
 * 
 * <p>Configuration settings related to Tools.
 * 
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
@Deprecated
public class ToolsConfig {

    /**
     * List of tools available to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableTools")
    private Optional<? extends List<ToolMetadata>> availableTools;

    @JsonCreator
    public ToolsConfig(
            @JsonProperty("availableTools") Optional<? extends List<ToolMetadata>> availableTools) {
        Utils.checkNotNull(availableTools, "availableTools");
        this.availableTools = availableTools;
    }
    
    public ToolsConfig() {
        this(Optional.empty());
    }

    /**
     * List of tools available to the user.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ToolMetadata>> availableTools() {
        return (Optional<List<ToolMetadata>>) availableTools;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of tools available to the user.
     */
    public ToolsConfig withAvailableTools(List<ToolMetadata> availableTools) {
        Utils.checkNotNull(availableTools, "availableTools");
        this.availableTools = Optional.ofNullable(availableTools);
        return this;
    }

    /**
     * List of tools available to the user.
     */
    public ToolsConfig withAvailableTools(Optional<? extends List<ToolMetadata>> availableTools) {
        Utils.checkNotNull(availableTools, "availableTools");
        this.availableTools = availableTools;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolsConfig other = (ToolsConfig) o;
        return 
            Objects.deepEquals(this.availableTools, other.availableTools);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            availableTools);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ToolsConfig.class,
                "availableTools", availableTools);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ToolMetadata>> availableTools = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of tools available to the user.
         */
        public Builder availableTools(List<ToolMetadata> availableTools) {
            Utils.checkNotNull(availableTools, "availableTools");
            this.availableTools = Optional.ofNullable(availableTools);
            return this;
        }

        /**
         * List of tools available to the user.
         */
        public Builder availableTools(Optional<? extends List<ToolMetadata>> availableTools) {
            Utils.checkNotNull(availableTools, "availableTools");
            this.availableTools = availableTools;
            return this;
        }
        
        public ToolsConfig build() {
            return new ToolsConfig(
                availableTools);
        }
    }
}
