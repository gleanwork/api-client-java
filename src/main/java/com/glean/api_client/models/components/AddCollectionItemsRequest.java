/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AddCollectionItemsRequest {

    /**
     * The ID of the Collection to add items to.
     */
    @JsonProperty("collectionId")
    private double collectionId;

    /**
     * The CollectionItemDescriptors of the items being added.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedCollectionItemDescriptors")
    private Optional<? extends List<CollectionItemDescriptor>> addedCollectionItemDescriptors;

    @JsonCreator
    public AddCollectionItemsRequest(
            @JsonProperty("collectionId") double collectionId,
            @JsonProperty("addedCollectionItemDescriptors") Optional<? extends List<CollectionItemDescriptor>> addedCollectionItemDescriptors) {
        Utils.checkNotNull(collectionId, "collectionId");
        Utils.checkNotNull(addedCollectionItemDescriptors, "addedCollectionItemDescriptors");
        this.collectionId = collectionId;
        this.addedCollectionItemDescriptors = addedCollectionItemDescriptors;
    }
    
    public AddCollectionItemsRequest(
            double collectionId) {
        this(collectionId, Optional.empty());
    }

    /**
     * The ID of the Collection to add items to.
     */
    @JsonIgnore
    public double collectionId() {
        return collectionId;
    }

    /**
     * The CollectionItemDescriptors of the items being added.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CollectionItemDescriptor>> addedCollectionItemDescriptors() {
        return (Optional<List<CollectionItemDescriptor>>) addedCollectionItemDescriptors;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the Collection to add items to.
     */
    public AddCollectionItemsRequest withCollectionId(double collectionId) {
        Utils.checkNotNull(collectionId, "collectionId");
        this.collectionId = collectionId;
        return this;
    }

    /**
     * The CollectionItemDescriptors of the items being added.
     */
    public AddCollectionItemsRequest withAddedCollectionItemDescriptors(List<CollectionItemDescriptor> addedCollectionItemDescriptors) {
        Utils.checkNotNull(addedCollectionItemDescriptors, "addedCollectionItemDescriptors");
        this.addedCollectionItemDescriptors = Optional.ofNullable(addedCollectionItemDescriptors);
        return this;
    }

    /**
     * The CollectionItemDescriptors of the items being added.
     */
    public AddCollectionItemsRequest withAddedCollectionItemDescriptors(Optional<? extends List<CollectionItemDescriptor>> addedCollectionItemDescriptors) {
        Utils.checkNotNull(addedCollectionItemDescriptors, "addedCollectionItemDescriptors");
        this.addedCollectionItemDescriptors = addedCollectionItemDescriptors;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddCollectionItemsRequest other = (AddCollectionItemsRequest) o;
        return 
            Objects.deepEquals(this.collectionId, other.collectionId) &&
            Objects.deepEquals(this.addedCollectionItemDescriptors, other.addedCollectionItemDescriptors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            collectionId,
            addedCollectionItemDescriptors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddCollectionItemsRequest.class,
                "collectionId", collectionId,
                "addedCollectionItemDescriptors", addedCollectionItemDescriptors);
    }
    
    public final static class Builder {
 
        private Double collectionId;
 
        private Optional<? extends List<CollectionItemDescriptor>> addedCollectionItemDescriptors = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the Collection to add items to.
         */
        public Builder collectionId(double collectionId) {
            Utils.checkNotNull(collectionId, "collectionId");
            this.collectionId = collectionId;
            return this;
        }

        /**
         * The CollectionItemDescriptors of the items being added.
         */
        public Builder addedCollectionItemDescriptors(List<CollectionItemDescriptor> addedCollectionItemDescriptors) {
            Utils.checkNotNull(addedCollectionItemDescriptors, "addedCollectionItemDescriptors");
            this.addedCollectionItemDescriptors = Optional.ofNullable(addedCollectionItemDescriptors);
            return this;
        }

        /**
         * The CollectionItemDescriptors of the items being added.
         */
        public Builder addedCollectionItemDescriptors(Optional<? extends List<CollectionItemDescriptor>> addedCollectionItemDescriptors) {
            Utils.checkNotNull(addedCollectionItemDescriptors, "addedCollectionItemDescriptors");
            this.addedCollectionItemDescriptors = addedCollectionItemDescriptors;
            return this;
        }
        
        public AddCollectionItemsRequest build() {
            return new AddCollectionItemsRequest(
                collectionId,
                addedCollectionItemDescriptors);
        }
    }
}
