/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class InsightsResponse {

    /**
     * List of timeseries to make charts (if applicable).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeseries")
    private Optional<? extends List<LabeledCountInfo>> timeseries;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    private Optional<? extends UserInsightsResponse> users;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends ContentInsightsResponse> content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queries")
    private Optional<? extends QueryInsightsResponse> queries;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    private Optional<? extends ContentInsightsResponse> collections;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectionsV2")
    private Optional<? extends ContentInsightsResponse> collectionsV2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcuts")
    private Optional<? extends ShortcutInsightsResponse> shortcuts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("announcements")
    private Optional<? extends ContentInsightsResponse> announcements;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answers")
    private Optional<? extends ContentInsightsResponse> answers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ai")
    private Optional<? extends AiInsightsResponse> ai;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aiApps")
    private Optional<? extends AiAppsInsightsResponse> aiApps;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gleanAssist")
    private Optional<? extends GleanAssistInsightsResponse> gleanAssist;

    /**
     * list of all departments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonCreator
    public InsightsResponse(
            @JsonProperty("timeseries") Optional<? extends List<LabeledCountInfo>> timeseries,
            @JsonProperty("users") Optional<? extends UserInsightsResponse> users,
            @JsonProperty("content") Optional<? extends ContentInsightsResponse> content,
            @JsonProperty("queries") Optional<? extends QueryInsightsResponse> queries,
            @JsonProperty("collections") Optional<? extends ContentInsightsResponse> collections,
            @JsonProperty("collectionsV2") Optional<? extends ContentInsightsResponse> collectionsV2,
            @JsonProperty("shortcuts") Optional<? extends ShortcutInsightsResponse> shortcuts,
            @JsonProperty("announcements") Optional<? extends ContentInsightsResponse> announcements,
            @JsonProperty("answers") Optional<? extends ContentInsightsResponse> answers,
            @JsonProperty("ai") Optional<? extends AiInsightsResponse> ai,
            @JsonProperty("aiApps") Optional<? extends AiAppsInsightsResponse> aiApps,
            @JsonProperty("gleanAssist") Optional<? extends GleanAssistInsightsResponse> gleanAssist,
            @JsonProperty("departments") Optional<? extends List<String>> departments) {
        Utils.checkNotNull(timeseries, "timeseries");
        Utils.checkNotNull(users, "users");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(queries, "queries");
        Utils.checkNotNull(collections, "collections");
        Utils.checkNotNull(collectionsV2, "collectionsV2");
        Utils.checkNotNull(shortcuts, "shortcuts");
        Utils.checkNotNull(announcements, "announcements");
        Utils.checkNotNull(answers, "answers");
        Utils.checkNotNull(ai, "ai");
        Utils.checkNotNull(aiApps, "aiApps");
        Utils.checkNotNull(gleanAssist, "gleanAssist");
        Utils.checkNotNull(departments, "departments");
        this.timeseries = timeseries;
        this.users = users;
        this.content = content;
        this.queries = queries;
        this.collections = collections;
        this.collectionsV2 = collectionsV2;
        this.shortcuts = shortcuts;
        this.announcements = announcements;
        this.answers = answers;
        this.ai = ai;
        this.aiApps = aiApps;
        this.gleanAssist = gleanAssist;
        this.departments = departments;
    }
    
    public InsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * List of timeseries to make charts (if applicable).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LabeledCountInfo>> timeseries() {
        return (Optional<List<LabeledCountInfo>>) timeseries;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserInsightsResponse> users() {
        return (Optional<UserInsightsResponse>) users;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentInsightsResponse> content() {
        return (Optional<ContentInsightsResponse>) content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QueryInsightsResponse> queries() {
        return (Optional<QueryInsightsResponse>) queries;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentInsightsResponse> collections() {
        return (Optional<ContentInsightsResponse>) collections;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentInsightsResponse> collectionsV2() {
        return (Optional<ContentInsightsResponse>) collectionsV2;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShortcutInsightsResponse> shortcuts() {
        return (Optional<ShortcutInsightsResponse>) shortcuts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentInsightsResponse> announcements() {
        return (Optional<ContentInsightsResponse>) announcements;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentInsightsResponse> answers() {
        return (Optional<ContentInsightsResponse>) answers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AiInsightsResponse> ai() {
        return (Optional<AiInsightsResponse>) ai;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AiAppsInsightsResponse> aiApps() {
        return (Optional<AiAppsInsightsResponse>) aiApps;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GleanAssistInsightsResponse> gleanAssist() {
        return (Optional<GleanAssistInsightsResponse>) gleanAssist;
    }

    /**
     * list of all departments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of timeseries to make charts (if applicable).
     */
    public InsightsResponse withTimeseries(List<LabeledCountInfo> timeseries) {
        Utils.checkNotNull(timeseries, "timeseries");
        this.timeseries = Optional.ofNullable(timeseries);
        return this;
    }

    /**
     * List of timeseries to make charts (if applicable).
     */
    public InsightsResponse withTimeseries(Optional<? extends List<LabeledCountInfo>> timeseries) {
        Utils.checkNotNull(timeseries, "timeseries");
        this.timeseries = timeseries;
        return this;
    }

    public InsightsResponse withUsers(UserInsightsResponse users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }

    public InsightsResponse withUsers(Optional<? extends UserInsightsResponse> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }

    public InsightsResponse withContent(ContentInsightsResponse content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    public InsightsResponse withContent(Optional<? extends ContentInsightsResponse> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public InsightsResponse withQueries(QueryInsightsResponse queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = Optional.ofNullable(queries);
        return this;
    }

    public InsightsResponse withQueries(Optional<? extends QueryInsightsResponse> queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = queries;
        return this;
    }

    public InsightsResponse withCollections(ContentInsightsResponse collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = Optional.ofNullable(collections);
        return this;
    }

    public InsightsResponse withCollections(Optional<? extends ContentInsightsResponse> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = collections;
        return this;
    }

    public InsightsResponse withCollectionsV2(ContentInsightsResponse collectionsV2) {
        Utils.checkNotNull(collectionsV2, "collectionsV2");
        this.collectionsV2 = Optional.ofNullable(collectionsV2);
        return this;
    }

    public InsightsResponse withCollectionsV2(Optional<? extends ContentInsightsResponse> collectionsV2) {
        Utils.checkNotNull(collectionsV2, "collectionsV2");
        this.collectionsV2 = collectionsV2;
        return this;
    }

    public InsightsResponse withShortcuts(ShortcutInsightsResponse shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = Optional.ofNullable(shortcuts);
        return this;
    }

    public InsightsResponse withShortcuts(Optional<? extends ShortcutInsightsResponse> shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = shortcuts;
        return this;
    }

    public InsightsResponse withAnnouncements(ContentInsightsResponse announcements) {
        Utils.checkNotNull(announcements, "announcements");
        this.announcements = Optional.ofNullable(announcements);
        return this;
    }

    public InsightsResponse withAnnouncements(Optional<? extends ContentInsightsResponse> announcements) {
        Utils.checkNotNull(announcements, "announcements");
        this.announcements = announcements;
        return this;
    }

    public InsightsResponse withAnswers(ContentInsightsResponse answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = Optional.ofNullable(answers);
        return this;
    }

    public InsightsResponse withAnswers(Optional<? extends ContentInsightsResponse> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = answers;
        return this;
    }

    public InsightsResponse withAi(AiInsightsResponse ai) {
        Utils.checkNotNull(ai, "ai");
        this.ai = Optional.ofNullable(ai);
        return this;
    }

    public InsightsResponse withAi(Optional<? extends AiInsightsResponse> ai) {
        Utils.checkNotNull(ai, "ai");
        this.ai = ai;
        return this;
    }

    public InsightsResponse withAiApps(AiAppsInsightsResponse aiApps) {
        Utils.checkNotNull(aiApps, "aiApps");
        this.aiApps = Optional.ofNullable(aiApps);
        return this;
    }

    public InsightsResponse withAiApps(Optional<? extends AiAppsInsightsResponse> aiApps) {
        Utils.checkNotNull(aiApps, "aiApps");
        this.aiApps = aiApps;
        return this;
    }

    public InsightsResponse withGleanAssist(GleanAssistInsightsResponse gleanAssist) {
        Utils.checkNotNull(gleanAssist, "gleanAssist");
        this.gleanAssist = Optional.ofNullable(gleanAssist);
        return this;
    }

    public InsightsResponse withGleanAssist(Optional<? extends GleanAssistInsightsResponse> gleanAssist) {
        Utils.checkNotNull(gleanAssist, "gleanAssist");
        this.gleanAssist = gleanAssist;
        return this;
    }

    /**
     * list of all departments.
     */
    public InsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * list of all departments.
     */
    public InsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InsightsResponse other = (InsightsResponse) o;
        return 
            Objects.deepEquals(this.timeseries, other.timeseries) &&
            Objects.deepEquals(this.users, other.users) &&
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.queries, other.queries) &&
            Objects.deepEquals(this.collections, other.collections) &&
            Objects.deepEquals(this.collectionsV2, other.collectionsV2) &&
            Objects.deepEquals(this.shortcuts, other.shortcuts) &&
            Objects.deepEquals(this.announcements, other.announcements) &&
            Objects.deepEquals(this.answers, other.answers) &&
            Objects.deepEquals(this.ai, other.ai) &&
            Objects.deepEquals(this.aiApps, other.aiApps) &&
            Objects.deepEquals(this.gleanAssist, other.gleanAssist) &&
            Objects.deepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timeseries,
            users,
            content,
            queries,
            collections,
            collectionsV2,
            shortcuts,
            announcements,
            answers,
            ai,
            aiApps,
            gleanAssist,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InsightsResponse.class,
                "timeseries", timeseries,
                "users", users,
                "content", content,
                "queries", queries,
                "collections", collections,
                "collectionsV2", collectionsV2,
                "shortcuts", shortcuts,
                "announcements", announcements,
                "answers", answers,
                "ai", ai,
                "aiApps", aiApps,
                "gleanAssist", gleanAssist,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<LabeledCountInfo>> timeseries = Optional.empty();
 
        private Optional<? extends UserInsightsResponse> users = Optional.empty();
 
        private Optional<? extends ContentInsightsResponse> content = Optional.empty();
 
        private Optional<? extends QueryInsightsResponse> queries = Optional.empty();
 
        private Optional<? extends ContentInsightsResponse> collections = Optional.empty();
 
        private Optional<? extends ContentInsightsResponse> collectionsV2 = Optional.empty();
 
        private Optional<? extends ShortcutInsightsResponse> shortcuts = Optional.empty();
 
        private Optional<? extends ContentInsightsResponse> announcements = Optional.empty();
 
        private Optional<? extends ContentInsightsResponse> answers = Optional.empty();
 
        private Optional<? extends AiInsightsResponse> ai = Optional.empty();
 
        private Optional<? extends AiAppsInsightsResponse> aiApps = Optional.empty();
 
        private Optional<? extends GleanAssistInsightsResponse> gleanAssist = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of timeseries to make charts (if applicable).
         */
        public Builder timeseries(List<LabeledCountInfo> timeseries) {
            Utils.checkNotNull(timeseries, "timeseries");
            this.timeseries = Optional.ofNullable(timeseries);
            return this;
        }

        /**
         * List of timeseries to make charts (if applicable).
         */
        public Builder timeseries(Optional<? extends List<LabeledCountInfo>> timeseries) {
            Utils.checkNotNull(timeseries, "timeseries");
            this.timeseries = timeseries;
            return this;
        }

        public Builder users(UserInsightsResponse users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        public Builder users(Optional<? extends UserInsightsResponse> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }

        public Builder content(ContentInsightsResponse content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        public Builder content(Optional<? extends ContentInsightsResponse> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder queries(QueryInsightsResponse queries) {
            Utils.checkNotNull(queries, "queries");
            this.queries = Optional.ofNullable(queries);
            return this;
        }

        public Builder queries(Optional<? extends QueryInsightsResponse> queries) {
            Utils.checkNotNull(queries, "queries");
            this.queries = queries;
            return this;
        }

        public Builder collections(ContentInsightsResponse collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = Optional.ofNullable(collections);
            return this;
        }

        public Builder collections(Optional<? extends ContentInsightsResponse> collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = collections;
            return this;
        }

        public Builder collectionsV2(ContentInsightsResponse collectionsV2) {
            Utils.checkNotNull(collectionsV2, "collectionsV2");
            this.collectionsV2 = Optional.ofNullable(collectionsV2);
            return this;
        }

        public Builder collectionsV2(Optional<? extends ContentInsightsResponse> collectionsV2) {
            Utils.checkNotNull(collectionsV2, "collectionsV2");
            this.collectionsV2 = collectionsV2;
            return this;
        }

        public Builder shortcuts(ShortcutInsightsResponse shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = Optional.ofNullable(shortcuts);
            return this;
        }

        public Builder shortcuts(Optional<? extends ShortcutInsightsResponse> shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = shortcuts;
            return this;
        }

        public Builder announcements(ContentInsightsResponse announcements) {
            Utils.checkNotNull(announcements, "announcements");
            this.announcements = Optional.ofNullable(announcements);
            return this;
        }

        public Builder announcements(Optional<? extends ContentInsightsResponse> announcements) {
            Utils.checkNotNull(announcements, "announcements");
            this.announcements = announcements;
            return this;
        }

        public Builder answers(ContentInsightsResponse answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = Optional.ofNullable(answers);
            return this;
        }

        public Builder answers(Optional<? extends ContentInsightsResponse> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = answers;
            return this;
        }

        public Builder ai(AiInsightsResponse ai) {
            Utils.checkNotNull(ai, "ai");
            this.ai = Optional.ofNullable(ai);
            return this;
        }

        public Builder ai(Optional<? extends AiInsightsResponse> ai) {
            Utils.checkNotNull(ai, "ai");
            this.ai = ai;
            return this;
        }

        public Builder aiApps(AiAppsInsightsResponse aiApps) {
            Utils.checkNotNull(aiApps, "aiApps");
            this.aiApps = Optional.ofNullable(aiApps);
            return this;
        }

        public Builder aiApps(Optional<? extends AiAppsInsightsResponse> aiApps) {
            Utils.checkNotNull(aiApps, "aiApps");
            this.aiApps = aiApps;
            return this;
        }

        public Builder gleanAssist(GleanAssistInsightsResponse gleanAssist) {
            Utils.checkNotNull(gleanAssist, "gleanAssist");
            this.gleanAssist = Optional.ofNullable(gleanAssist);
            return this;
        }

        public Builder gleanAssist(Optional<? extends GleanAssistInsightsResponse> gleanAssist) {
            Utils.checkNotNull(gleanAssist, "gleanAssist");
            this.gleanAssist = gleanAssist;
            return this;
        }

        /**
         * list of all departments.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * list of all departments.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public InsightsResponse build() {
            return new InsightsResponse(
                timeseries,
                users,
                content,
                queries,
                collections,
                collectionsV2,
                shortcuts,
                announcements,
                answers,
                ai,
                aiApps,
                gleanAssist,
                departments);
        }
    }
}
