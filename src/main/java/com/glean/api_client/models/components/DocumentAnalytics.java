/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class DocumentAnalytics {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentSpec")
    private Optional<? extends DocumentSpecUnion> documentSpec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitorCount")
    private Optional<? extends CountInfo> visitorCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickerCount")
    private Optional<? extends CountInfo> clickerCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userImpressionCount")
    private Optional<? extends CountInfo> userImpressionCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitCount")
    private Optional<? extends CountInfo> visitCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetAnalytics")
    private Optional<? extends List<DocumentFacetAnalytics>> facetAnalytics;

    @JsonCreator
    public DocumentAnalytics(
            @JsonProperty("documentSpec") Optional<? extends DocumentSpecUnion> documentSpec,
            @JsonProperty("visitorCount") Optional<? extends CountInfo> visitorCount,
            @JsonProperty("clickerCount") Optional<? extends CountInfo> clickerCount,
            @JsonProperty("userImpressionCount") Optional<? extends CountInfo> userImpressionCount,
            @JsonProperty("visitCount") Optional<? extends CountInfo> visitCount,
            @JsonProperty("facetAnalytics") Optional<? extends List<DocumentFacetAnalytics>> facetAnalytics) {
        Utils.checkNotNull(documentSpec, "documentSpec");
        Utils.checkNotNull(visitorCount, "visitorCount");
        Utils.checkNotNull(clickerCount, "clickerCount");
        Utils.checkNotNull(userImpressionCount, "userImpressionCount");
        Utils.checkNotNull(visitCount, "visitCount");
        Utils.checkNotNull(facetAnalytics, "facetAnalytics");
        this.documentSpec = documentSpec;
        this.visitorCount = visitorCount;
        this.clickerCount = clickerCount;
        this.userImpressionCount = userImpressionCount;
        this.visitCount = visitCount;
        this.facetAnalytics = facetAnalytics;
    }
    
    public DocumentAnalytics() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSpecUnion> documentSpec() {
        return (Optional<DocumentSpecUnion>) documentSpec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> visitorCount() {
        return (Optional<CountInfo>) visitorCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> clickerCount() {
        return (Optional<CountInfo>) clickerCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> userImpressionCount() {
        return (Optional<CountInfo>) userImpressionCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> visitCount() {
        return (Optional<CountInfo>) visitCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DocumentFacetAnalytics>> facetAnalytics() {
        return (Optional<List<DocumentFacetAnalytics>>) facetAnalytics;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DocumentAnalytics withDocumentSpec(DocumentSpecUnion documentSpec) {
        Utils.checkNotNull(documentSpec, "documentSpec");
        this.documentSpec = Optional.ofNullable(documentSpec);
        return this;
    }

    public DocumentAnalytics withDocumentSpec(Optional<? extends DocumentSpecUnion> documentSpec) {
        Utils.checkNotNull(documentSpec, "documentSpec");
        this.documentSpec = documentSpec;
        return this;
    }

    public DocumentAnalytics withVisitorCount(CountInfo visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = Optional.ofNullable(visitorCount);
        return this;
    }

    public DocumentAnalytics withVisitorCount(Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = visitorCount;
        return this;
    }

    public DocumentAnalytics withClickerCount(CountInfo clickerCount) {
        Utils.checkNotNull(clickerCount, "clickerCount");
        this.clickerCount = Optional.ofNullable(clickerCount);
        return this;
    }

    public DocumentAnalytics withClickerCount(Optional<? extends CountInfo> clickerCount) {
        Utils.checkNotNull(clickerCount, "clickerCount");
        this.clickerCount = clickerCount;
        return this;
    }

    public DocumentAnalytics withUserImpressionCount(CountInfo userImpressionCount) {
        Utils.checkNotNull(userImpressionCount, "userImpressionCount");
        this.userImpressionCount = Optional.ofNullable(userImpressionCount);
        return this;
    }

    public DocumentAnalytics withUserImpressionCount(Optional<? extends CountInfo> userImpressionCount) {
        Utils.checkNotNull(userImpressionCount, "userImpressionCount");
        this.userImpressionCount = userImpressionCount;
        return this;
    }

    public DocumentAnalytics withVisitCount(CountInfo visitCount) {
        Utils.checkNotNull(visitCount, "visitCount");
        this.visitCount = Optional.ofNullable(visitCount);
        return this;
    }

    public DocumentAnalytics withVisitCount(Optional<? extends CountInfo> visitCount) {
        Utils.checkNotNull(visitCount, "visitCount");
        this.visitCount = visitCount;
        return this;
    }

    public DocumentAnalytics withFacetAnalytics(List<DocumentFacetAnalytics> facetAnalytics) {
        Utils.checkNotNull(facetAnalytics, "facetAnalytics");
        this.facetAnalytics = Optional.ofNullable(facetAnalytics);
        return this;
    }

    public DocumentAnalytics withFacetAnalytics(Optional<? extends List<DocumentFacetAnalytics>> facetAnalytics) {
        Utils.checkNotNull(facetAnalytics, "facetAnalytics");
        this.facetAnalytics = facetAnalytics;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentAnalytics other = (DocumentAnalytics) o;
        return 
            Objects.deepEquals(this.documentSpec, other.documentSpec) &&
            Objects.deepEquals(this.visitorCount, other.visitorCount) &&
            Objects.deepEquals(this.clickerCount, other.clickerCount) &&
            Objects.deepEquals(this.userImpressionCount, other.userImpressionCount) &&
            Objects.deepEquals(this.visitCount, other.visitCount) &&
            Objects.deepEquals(this.facetAnalytics, other.facetAnalytics);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            documentSpec,
            visitorCount,
            clickerCount,
            userImpressionCount,
            visitCount,
            facetAnalytics);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentAnalytics.class,
                "documentSpec", documentSpec,
                "visitorCount", visitorCount,
                "clickerCount", clickerCount,
                "userImpressionCount", userImpressionCount,
                "visitCount", visitCount,
                "facetAnalytics", facetAnalytics);
    }
    
    public final static class Builder {
 
        private Optional<? extends DocumentSpecUnion> documentSpec = Optional.empty();
 
        private Optional<? extends CountInfo> visitorCount = Optional.empty();
 
        private Optional<? extends CountInfo> clickerCount = Optional.empty();
 
        private Optional<? extends CountInfo> userImpressionCount = Optional.empty();
 
        private Optional<? extends CountInfo> visitCount = Optional.empty();
 
        private Optional<? extends List<DocumentFacetAnalytics>> facetAnalytics = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder documentSpec(DocumentSpecUnion documentSpec) {
            Utils.checkNotNull(documentSpec, "documentSpec");
            this.documentSpec = Optional.ofNullable(documentSpec);
            return this;
        }

        public Builder documentSpec(Optional<? extends DocumentSpecUnion> documentSpec) {
            Utils.checkNotNull(documentSpec, "documentSpec");
            this.documentSpec = documentSpec;
            return this;
        }

        public Builder visitorCount(CountInfo visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = Optional.ofNullable(visitorCount);
            return this;
        }

        public Builder visitorCount(Optional<? extends CountInfo> visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = visitorCount;
            return this;
        }

        public Builder clickerCount(CountInfo clickerCount) {
            Utils.checkNotNull(clickerCount, "clickerCount");
            this.clickerCount = Optional.ofNullable(clickerCount);
            return this;
        }

        public Builder clickerCount(Optional<? extends CountInfo> clickerCount) {
            Utils.checkNotNull(clickerCount, "clickerCount");
            this.clickerCount = clickerCount;
            return this;
        }

        public Builder userImpressionCount(CountInfo userImpressionCount) {
            Utils.checkNotNull(userImpressionCount, "userImpressionCount");
            this.userImpressionCount = Optional.ofNullable(userImpressionCount);
            return this;
        }

        public Builder userImpressionCount(Optional<? extends CountInfo> userImpressionCount) {
            Utils.checkNotNull(userImpressionCount, "userImpressionCount");
            this.userImpressionCount = userImpressionCount;
            return this;
        }

        public Builder visitCount(CountInfo visitCount) {
            Utils.checkNotNull(visitCount, "visitCount");
            this.visitCount = Optional.ofNullable(visitCount);
            return this;
        }

        public Builder visitCount(Optional<? extends CountInfo> visitCount) {
            Utils.checkNotNull(visitCount, "visitCount");
            this.visitCount = visitCount;
            return this;
        }

        public Builder facetAnalytics(List<DocumentFacetAnalytics> facetAnalytics) {
            Utils.checkNotNull(facetAnalytics, "facetAnalytics");
            this.facetAnalytics = Optional.ofNullable(facetAnalytics);
            return this;
        }

        public Builder facetAnalytics(Optional<? extends List<DocumentFacetAnalytics>> facetAnalytics) {
            Utils.checkNotNull(facetAnalytics, "facetAnalytics");
            this.facetAnalytics = facetAnalytics;
            return this;
        }
        
        public DocumentAnalytics build() {
            return new DocumentAnalytics(
                documentSpec,
                visitorCount,
                clickerCount,
                userImpressionCount,
                visitCount,
                facetAnalytics);
        }
    }
}
