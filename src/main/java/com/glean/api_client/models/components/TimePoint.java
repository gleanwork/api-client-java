/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class TimePoint {

    /**
     * Epoch seconds. Has precedence over daysFromNow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("epochSeconds")
    private Optional<Long> epochSeconds;

    /**
     * The number of days from now. Specification relative to current time. Can be negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daysFromNow")
    private Optional<Long> daysFromNow;

    @JsonCreator
    public TimePoint(
            @JsonProperty("epochSeconds") Optional<Long> epochSeconds,
            @JsonProperty("daysFromNow") Optional<Long> daysFromNow) {
        Utils.checkNotNull(epochSeconds, "epochSeconds");
        Utils.checkNotNull(daysFromNow, "daysFromNow");
        this.epochSeconds = epochSeconds;
        this.daysFromNow = daysFromNow;
    }
    
    public TimePoint() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Epoch seconds. Has precedence over daysFromNow.
     */
    @JsonIgnore
    public Optional<Long> epochSeconds() {
        return epochSeconds;
    }

    /**
     * The number of days from now. Specification relative to current time. Can be negative.
     */
    @JsonIgnore
    public Optional<Long> daysFromNow() {
        return daysFromNow;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Epoch seconds. Has precedence over daysFromNow.
     */
    public TimePoint withEpochSeconds(long epochSeconds) {
        Utils.checkNotNull(epochSeconds, "epochSeconds");
        this.epochSeconds = Optional.ofNullable(epochSeconds);
        return this;
    }

    /**
     * Epoch seconds. Has precedence over daysFromNow.
     */
    public TimePoint withEpochSeconds(Optional<Long> epochSeconds) {
        Utils.checkNotNull(epochSeconds, "epochSeconds");
        this.epochSeconds = epochSeconds;
        return this;
    }

    /**
     * The number of days from now. Specification relative to current time. Can be negative.
     */
    public TimePoint withDaysFromNow(long daysFromNow) {
        Utils.checkNotNull(daysFromNow, "daysFromNow");
        this.daysFromNow = Optional.ofNullable(daysFromNow);
        return this;
    }

    /**
     * The number of days from now. Specification relative to current time. Can be negative.
     */
    public TimePoint withDaysFromNow(Optional<Long> daysFromNow) {
        Utils.checkNotNull(daysFromNow, "daysFromNow");
        this.daysFromNow = daysFromNow;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimePoint other = (TimePoint) o;
        return 
            Objects.deepEquals(this.epochSeconds, other.epochSeconds) &&
            Objects.deepEquals(this.daysFromNow, other.daysFromNow);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            epochSeconds,
            daysFromNow);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimePoint.class,
                "epochSeconds", epochSeconds,
                "daysFromNow", daysFromNow);
    }
    
    public final static class Builder {
 
        private Optional<Long> epochSeconds = Optional.empty();
 
        private Optional<Long> daysFromNow = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Epoch seconds. Has precedence over daysFromNow.
         */
        public Builder epochSeconds(long epochSeconds) {
            Utils.checkNotNull(epochSeconds, "epochSeconds");
            this.epochSeconds = Optional.ofNullable(epochSeconds);
            return this;
        }

        /**
         * Epoch seconds. Has precedence over daysFromNow.
         */
        public Builder epochSeconds(Optional<Long> epochSeconds) {
            Utils.checkNotNull(epochSeconds, "epochSeconds");
            this.epochSeconds = epochSeconds;
            return this;
        }

        /**
         * The number of days from now. Specification relative to current time. Can be negative.
         */
        public Builder daysFromNow(long daysFromNow) {
            Utils.checkNotNull(daysFromNow, "daysFromNow");
            this.daysFromNow = Optional.ofNullable(daysFromNow);
            return this;
        }

        /**
         * The number of days from now. Specification relative to current time. Can be negative.
         */
        public Builder daysFromNow(Optional<Long> daysFromNow) {
            Utils.checkNotNull(daysFromNow, "daysFromNow");
            this.daysFromNow = daysFromNow;
            return this;
        }
        
        public TimePoint build() {
            return new TimePoint(
                epochSeconds,
                daysFromNow);
        }
    }
}
