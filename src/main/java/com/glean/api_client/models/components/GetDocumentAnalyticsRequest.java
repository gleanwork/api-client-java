/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetDocumentAnalyticsRequest {

    /**
     * The specification for the documents for which analytics will be retrieved.
     */
    @JsonProperty("documentSpecs")
    private List<DocumentSpecUnion> documentSpecs;

    @JsonProperty("dayRange")
    private Period dayRange;

    /**
     * Whether response should include click information or not. Default is to not include click information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withClickerCounts")
    private Optional<Boolean> withClickerCounts;

    /**
     * Whether response should include impression information or not. Default is to not include impression information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withImpressionCounts")
    private Optional<Boolean> withImpressionCounts;

    /**
     * Whether the results will include aggregate counts/info for facets like location, department, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withFacetAggregations")
    private Optional<Boolean> withFacetAggregations;

    /**
     * Whether response should include visit counts or not. Default is to return only visitor counts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withVisitCounts")
    private Optional<Boolean> withVisitCounts;

    @JsonCreator
    public GetDocumentAnalyticsRequest(
            @JsonProperty("documentSpecs") List<DocumentSpecUnion> documentSpecs,
            @JsonProperty("dayRange") Period dayRange,
            @JsonProperty("withClickerCounts") Optional<Boolean> withClickerCounts,
            @JsonProperty("withImpressionCounts") Optional<Boolean> withImpressionCounts,
            @JsonProperty("withFacetAggregations") Optional<Boolean> withFacetAggregations,
            @JsonProperty("withVisitCounts") Optional<Boolean> withVisitCounts) {
        Utils.checkNotNull(documentSpecs, "documentSpecs");
        Utils.checkNotNull(dayRange, "dayRange");
        Utils.checkNotNull(withClickerCounts, "withClickerCounts");
        Utils.checkNotNull(withImpressionCounts, "withImpressionCounts");
        Utils.checkNotNull(withFacetAggregations, "withFacetAggregations");
        Utils.checkNotNull(withVisitCounts, "withVisitCounts");
        this.documentSpecs = documentSpecs;
        this.dayRange = dayRange;
        this.withClickerCounts = withClickerCounts;
        this.withImpressionCounts = withImpressionCounts;
        this.withFacetAggregations = withFacetAggregations;
        this.withVisitCounts = withVisitCounts;
    }
    
    public GetDocumentAnalyticsRequest(
            List<DocumentSpecUnion> documentSpecs,
            Period dayRange) {
        this(documentSpecs, dayRange, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The specification for the documents for which analytics will be retrieved.
     */
    @JsonIgnore
    public List<DocumentSpecUnion> documentSpecs() {
        return documentSpecs;
    }

    @JsonIgnore
    public Period dayRange() {
        return dayRange;
    }

    /**
     * Whether response should include click information or not. Default is to not include click information.
     */
    @JsonIgnore
    public Optional<Boolean> withClickerCounts() {
        return withClickerCounts;
    }

    /**
     * Whether response should include impression information or not. Default is to not include impression information.
     */
    @JsonIgnore
    public Optional<Boolean> withImpressionCounts() {
        return withImpressionCounts;
    }

    /**
     * Whether the results will include aggregate counts/info for facets like location, department, etc.
     */
    @JsonIgnore
    public Optional<Boolean> withFacetAggregations() {
        return withFacetAggregations;
    }

    /**
     * Whether response should include visit counts or not. Default is to return only visitor counts.
     */
    @JsonIgnore
    public Optional<Boolean> withVisitCounts() {
        return withVisitCounts;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The specification for the documents for which analytics will be retrieved.
     */
    public GetDocumentAnalyticsRequest withDocumentSpecs(List<DocumentSpecUnion> documentSpecs) {
        Utils.checkNotNull(documentSpecs, "documentSpecs");
        this.documentSpecs = documentSpecs;
        return this;
    }

    public GetDocumentAnalyticsRequest withDayRange(Period dayRange) {
        Utils.checkNotNull(dayRange, "dayRange");
        this.dayRange = dayRange;
        return this;
    }

    /**
     * Whether response should include click information or not. Default is to not include click information.
     */
    public GetDocumentAnalyticsRequest withWithClickerCounts(boolean withClickerCounts) {
        Utils.checkNotNull(withClickerCounts, "withClickerCounts");
        this.withClickerCounts = Optional.ofNullable(withClickerCounts);
        return this;
    }

    /**
     * Whether response should include click information or not. Default is to not include click information.
     */
    public GetDocumentAnalyticsRequest withWithClickerCounts(Optional<Boolean> withClickerCounts) {
        Utils.checkNotNull(withClickerCounts, "withClickerCounts");
        this.withClickerCounts = withClickerCounts;
        return this;
    }

    /**
     * Whether response should include impression information or not. Default is to not include impression information.
     */
    public GetDocumentAnalyticsRequest withWithImpressionCounts(boolean withImpressionCounts) {
        Utils.checkNotNull(withImpressionCounts, "withImpressionCounts");
        this.withImpressionCounts = Optional.ofNullable(withImpressionCounts);
        return this;
    }

    /**
     * Whether response should include impression information or not. Default is to not include impression information.
     */
    public GetDocumentAnalyticsRequest withWithImpressionCounts(Optional<Boolean> withImpressionCounts) {
        Utils.checkNotNull(withImpressionCounts, "withImpressionCounts");
        this.withImpressionCounts = withImpressionCounts;
        return this;
    }

    /**
     * Whether the results will include aggregate counts/info for facets like location, department, etc.
     */
    public GetDocumentAnalyticsRequest withWithFacetAggregations(boolean withFacetAggregations) {
        Utils.checkNotNull(withFacetAggregations, "withFacetAggregations");
        this.withFacetAggregations = Optional.ofNullable(withFacetAggregations);
        return this;
    }

    /**
     * Whether the results will include aggregate counts/info for facets like location, department, etc.
     */
    public GetDocumentAnalyticsRequest withWithFacetAggregations(Optional<Boolean> withFacetAggregations) {
        Utils.checkNotNull(withFacetAggregations, "withFacetAggregations");
        this.withFacetAggregations = withFacetAggregations;
        return this;
    }

    /**
     * Whether response should include visit counts or not. Default is to return only visitor counts.
     */
    public GetDocumentAnalyticsRequest withWithVisitCounts(boolean withVisitCounts) {
        Utils.checkNotNull(withVisitCounts, "withVisitCounts");
        this.withVisitCounts = Optional.ofNullable(withVisitCounts);
        return this;
    }

    /**
     * Whether response should include visit counts or not. Default is to return only visitor counts.
     */
    public GetDocumentAnalyticsRequest withWithVisitCounts(Optional<Boolean> withVisitCounts) {
        Utils.checkNotNull(withVisitCounts, "withVisitCounts");
        this.withVisitCounts = withVisitCounts;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentAnalyticsRequest other = (GetDocumentAnalyticsRequest) o;
        return 
            Objects.deepEquals(this.documentSpecs, other.documentSpecs) &&
            Objects.deepEquals(this.dayRange, other.dayRange) &&
            Objects.deepEquals(this.withClickerCounts, other.withClickerCounts) &&
            Objects.deepEquals(this.withImpressionCounts, other.withImpressionCounts) &&
            Objects.deepEquals(this.withFacetAggregations, other.withFacetAggregations) &&
            Objects.deepEquals(this.withVisitCounts, other.withVisitCounts);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            documentSpecs,
            dayRange,
            withClickerCounts,
            withImpressionCounts,
            withFacetAggregations,
            withVisitCounts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentAnalyticsRequest.class,
                "documentSpecs", documentSpecs,
                "dayRange", dayRange,
                "withClickerCounts", withClickerCounts,
                "withImpressionCounts", withImpressionCounts,
                "withFacetAggregations", withFacetAggregations,
                "withVisitCounts", withVisitCounts);
    }
    
    public final static class Builder {
 
        private List<DocumentSpecUnion> documentSpecs;
 
        private Period dayRange;
 
        private Optional<Boolean> withClickerCounts = Optional.empty();
 
        private Optional<Boolean> withImpressionCounts = Optional.empty();
 
        private Optional<Boolean> withFacetAggregations = Optional.empty();
 
        private Optional<Boolean> withVisitCounts = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The specification for the documents for which analytics will be retrieved.
         */
        public Builder documentSpecs(List<DocumentSpecUnion> documentSpecs) {
            Utils.checkNotNull(documentSpecs, "documentSpecs");
            this.documentSpecs = documentSpecs;
            return this;
        }

        public Builder dayRange(Period dayRange) {
            Utils.checkNotNull(dayRange, "dayRange");
            this.dayRange = dayRange;
            return this;
        }

        /**
         * Whether response should include click information or not. Default is to not include click information.
         */
        public Builder withClickerCounts(boolean withClickerCounts) {
            Utils.checkNotNull(withClickerCounts, "withClickerCounts");
            this.withClickerCounts = Optional.ofNullable(withClickerCounts);
            return this;
        }

        /**
         * Whether response should include click information or not. Default is to not include click information.
         */
        public Builder withClickerCounts(Optional<Boolean> withClickerCounts) {
            Utils.checkNotNull(withClickerCounts, "withClickerCounts");
            this.withClickerCounts = withClickerCounts;
            return this;
        }

        /**
         * Whether response should include impression information or not. Default is to not include impression information.
         */
        public Builder withImpressionCounts(boolean withImpressionCounts) {
            Utils.checkNotNull(withImpressionCounts, "withImpressionCounts");
            this.withImpressionCounts = Optional.ofNullable(withImpressionCounts);
            return this;
        }

        /**
         * Whether response should include impression information or not. Default is to not include impression information.
         */
        public Builder withImpressionCounts(Optional<Boolean> withImpressionCounts) {
            Utils.checkNotNull(withImpressionCounts, "withImpressionCounts");
            this.withImpressionCounts = withImpressionCounts;
            return this;
        }

        /**
         * Whether the results will include aggregate counts/info for facets like location, department, etc.
         */
        public Builder withFacetAggregations(boolean withFacetAggregations) {
            Utils.checkNotNull(withFacetAggregations, "withFacetAggregations");
            this.withFacetAggregations = Optional.ofNullable(withFacetAggregations);
            return this;
        }

        /**
         * Whether the results will include aggregate counts/info for facets like location, department, etc.
         */
        public Builder withFacetAggregations(Optional<Boolean> withFacetAggregations) {
            Utils.checkNotNull(withFacetAggregations, "withFacetAggregations");
            this.withFacetAggregations = withFacetAggregations;
            return this;
        }

        /**
         * Whether response should include visit counts or not. Default is to return only visitor counts.
         */
        public Builder withVisitCounts(boolean withVisitCounts) {
            Utils.checkNotNull(withVisitCounts, "withVisitCounts");
            this.withVisitCounts = Optional.ofNullable(withVisitCounts);
            return this;
        }

        /**
         * Whether response should include visit counts or not. Default is to return only visitor counts.
         */
        public Builder withVisitCounts(Optional<Boolean> withVisitCounts) {
            Utils.checkNotNull(withVisitCounts, "withVisitCounts");
            this.withVisitCounts = withVisitCounts;
            return this;
        }
        
        public GetDocumentAnalyticsRequest build() {
            return new GetDocumentAnalyticsRequest(
                documentSpecs,
                dayRange,
                withClickerCounts,
                withImpressionCounts,
                withFacetAggregations,
                withVisitCounts);
        }
    }
}
