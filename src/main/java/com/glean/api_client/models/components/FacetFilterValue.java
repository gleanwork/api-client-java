/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class FacetFilterValue {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<String> value;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationType")
    private Optional<? extends RelationType> relationType;

    /**
     * DEPRECATED - please use relationType instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isNegated")
    @Deprecated
    private Optional<Boolean> isNegated;

    @JsonCreator
    public FacetFilterValue(
            @JsonProperty("value") Optional<String> value,
            @JsonProperty("relationType") Optional<? extends RelationType> relationType,
            @JsonProperty("isNegated") Optional<Boolean> isNegated) {
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(relationType, "relationType");
        Utils.checkNotNull(isNegated, "isNegated");
        this.value = value;
        this.relationType = relationType;
        this.isNegated = isNegated;
    }
    
    public FacetFilterValue() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RelationType> relationType() {
        return (Optional<RelationType>) relationType;
    }

    /**
     * DEPRECATED - please use relationType instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> isNegated() {
        return isNegated;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public FacetFilterValue withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public FacetFilterValue withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public FacetFilterValue withRelationType(RelationType relationType) {
        Utils.checkNotNull(relationType, "relationType");
        this.relationType = Optional.ofNullable(relationType);
        return this;
    }

    public FacetFilterValue withRelationType(Optional<? extends RelationType> relationType) {
        Utils.checkNotNull(relationType, "relationType");
        this.relationType = relationType;
        return this;
    }

    /**
     * DEPRECATED - please use relationType instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public FacetFilterValue withIsNegated(boolean isNegated) {
        Utils.checkNotNull(isNegated, "isNegated");
        this.isNegated = Optional.ofNullable(isNegated);
        return this;
    }

    /**
     * DEPRECATED - please use relationType instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public FacetFilterValue withIsNegated(Optional<Boolean> isNegated) {
        Utils.checkNotNull(isNegated, "isNegated");
        this.isNegated = isNegated;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetFilterValue other = (FacetFilterValue) o;
        return 
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.relationType, other.relationType) &&
            Objects.deepEquals(this.isNegated, other.isNegated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            value,
            relationType,
            isNegated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetFilterValue.class,
                "value", value,
                "relationType", relationType,
                "isNegated", isNegated);
    }
    
    public final static class Builder {
 
        private Optional<String> value = Optional.empty();
 
        private Optional<? extends RelationType> relationType = Optional.empty();
 
        @Deprecated
        private Optional<Boolean> isNegated = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder relationType(RelationType relationType) {
            Utils.checkNotNull(relationType, "relationType");
            this.relationType = Optional.ofNullable(relationType);
            return this;
        }

        public Builder relationType(Optional<? extends RelationType> relationType) {
            Utils.checkNotNull(relationType, "relationType");
            this.relationType = relationType;
            return this;
        }

        /**
         * DEPRECATED - please use relationType instead
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder isNegated(boolean isNegated) {
            Utils.checkNotNull(isNegated, "isNegated");
            this.isNegated = Optional.ofNullable(isNegated);
            return this;
        }

        /**
         * DEPRECATED - please use relationType instead
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder isNegated(Optional<Boolean> isNegated) {
            Utils.checkNotNull(isNegated, "isNegated");
            this.isNegated = isNegated;
            return this;
        }
        
        public FacetFilterValue build() {
            return new FacetFilterValue(
                value,
                relationType,
                isNegated);
        }
    }
}
