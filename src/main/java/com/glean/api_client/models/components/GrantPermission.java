/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * GrantPermission
 * 
 * <p>Describes the grant permission level that a user has for a specific feature
 */
public class GrantPermission {

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopeType")
    private Optional<? extends ScopeType> scopeType;

    @JsonCreator
    public GrantPermission(
            @JsonProperty("scopeType") Optional<? extends ScopeType> scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = scopeType;
    }
    
    public GrantPermission() {
        this(Optional.empty());
    }

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ScopeType> scopeType() {
        return (Optional<ScopeType>) scopeType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    public GrantPermission withScopeType(ScopeType scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = Optional.ofNullable(scopeType);
        return this;
    }

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    public GrantPermission withScopeType(Optional<? extends ScopeType> scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = scopeType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GrantPermission other = (GrantPermission) o;
        return 
            Objects.deepEquals(this.scopeType, other.scopeType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            scopeType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GrantPermission.class,
                "scopeType", scopeType);
    }
    
    public final static class Builder {
 
        private Optional<? extends ScopeType> scopeType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
         */
        public Builder scopeType(ScopeType scopeType) {
            Utils.checkNotNull(scopeType, "scopeType");
            this.scopeType = Optional.ofNullable(scopeType);
            return this;
        }

        /**
         * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
         */
        public Builder scopeType(Optional<? extends ScopeType> scopeType) {
            Utils.checkNotNull(scopeType, "scopeType");
            this.scopeType = scopeType;
            return this;
        }
        
        public GrantPermission build() {
            return new GrantPermission(
                scopeType);
        }
    }
}
