/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class UserViewInfo {

    /**
     * Unique Glean Document ID of the associated document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docId")
    private Optional<String> docId;

    /**
     * Title of associated document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docTitle")
    private Optional<String> docTitle;

    /**
     * URL of associated document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docUrl")
    private Optional<String> docUrl;

    @JsonCreator
    public UserViewInfo(
            @JsonProperty("docId") Optional<String> docId,
            @JsonProperty("docTitle") Optional<String> docTitle,
            @JsonProperty("docUrl") Optional<String> docUrl) {
        Utils.checkNotNull(docId, "docId");
        Utils.checkNotNull(docTitle, "docTitle");
        Utils.checkNotNull(docUrl, "docUrl");
        this.docId = docId;
        this.docTitle = docTitle;
        this.docUrl = docUrl;
    }
    
    public UserViewInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique Glean Document ID of the associated document.
     */
    @JsonIgnore
    public Optional<String> docId() {
        return docId;
    }

    /**
     * Title of associated document.
     */
    @JsonIgnore
    public Optional<String> docTitle() {
        return docTitle;
    }

    /**
     * URL of associated document.
     */
    @JsonIgnore
    public Optional<String> docUrl() {
        return docUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique Glean Document ID of the associated document.
     */
    public UserViewInfo withDocId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = Optional.ofNullable(docId);
        return this;
    }

    /**
     * Unique Glean Document ID of the associated document.
     */
    public UserViewInfo withDocId(Optional<String> docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }

    /**
     * Title of associated document.
     */
    public UserViewInfo withDocTitle(String docTitle) {
        Utils.checkNotNull(docTitle, "docTitle");
        this.docTitle = Optional.ofNullable(docTitle);
        return this;
    }

    /**
     * Title of associated document.
     */
    public UserViewInfo withDocTitle(Optional<String> docTitle) {
        Utils.checkNotNull(docTitle, "docTitle");
        this.docTitle = docTitle;
        return this;
    }

    /**
     * URL of associated document.
     */
    public UserViewInfo withDocUrl(String docUrl) {
        Utils.checkNotNull(docUrl, "docUrl");
        this.docUrl = Optional.ofNullable(docUrl);
        return this;
    }

    /**
     * URL of associated document.
     */
    public UserViewInfo withDocUrl(Optional<String> docUrl) {
        Utils.checkNotNull(docUrl, "docUrl");
        this.docUrl = docUrl;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserViewInfo other = (UserViewInfo) o;
        return 
            Objects.deepEquals(this.docId, other.docId) &&
            Objects.deepEquals(this.docTitle, other.docTitle) &&
            Objects.deepEquals(this.docUrl, other.docUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            docId,
            docTitle,
            docUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserViewInfo.class,
                "docId", docId,
                "docTitle", docTitle,
                "docUrl", docUrl);
    }
    
    public final static class Builder {
 
        private Optional<String> docId = Optional.empty();
 
        private Optional<String> docTitle = Optional.empty();
 
        private Optional<String> docUrl = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique Glean Document ID of the associated document.
         */
        public Builder docId(String docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = Optional.ofNullable(docId);
            return this;
        }

        /**
         * Unique Glean Document ID of the associated document.
         */
        public Builder docId(Optional<String> docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = docId;
            return this;
        }

        /**
         * Title of associated document.
         */
        public Builder docTitle(String docTitle) {
            Utils.checkNotNull(docTitle, "docTitle");
            this.docTitle = Optional.ofNullable(docTitle);
            return this;
        }

        /**
         * Title of associated document.
         */
        public Builder docTitle(Optional<String> docTitle) {
            Utils.checkNotNull(docTitle, "docTitle");
            this.docTitle = docTitle;
            return this;
        }

        /**
         * URL of associated document.
         */
        public Builder docUrl(String docUrl) {
            Utils.checkNotNull(docUrl, "docUrl");
            this.docUrl = Optional.ofNullable(docUrl);
            return this;
        }

        /**
         * URL of associated document.
         */
        public Builder docUrl(Optional<String> docUrl) {
            Utils.checkNotNull(docUrl, "docUrl");
            this.docUrl = docUrl;
            return this;
        }
        
        public UserViewInfo build() {
            return new UserViewInfo(
                docId,
                docTitle,
                docUrl);
        }
    }
}
