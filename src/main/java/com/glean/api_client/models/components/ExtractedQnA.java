/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ExtractedQnA {

    /**
     * Heading text that was matched to produce this result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heading")
    private Optional<String> heading;

    /**
     * Question text that was matched to produce this result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question")
    private Optional<String> question;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("questionResult")
    private Optional<? extends SearchResult> questionResult;

    @JsonCreator
    public ExtractedQnA(
            @JsonProperty("heading") Optional<String> heading,
            @JsonProperty("question") Optional<String> question,
            @JsonProperty("questionResult") Optional<? extends SearchResult> questionResult) {
        Utils.checkNotNull(heading, "heading");
        Utils.checkNotNull(question, "question");
        Utils.checkNotNull(questionResult, "questionResult");
        this.heading = heading;
        this.question = question;
        this.questionResult = questionResult;
    }
    
    public ExtractedQnA() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Heading text that was matched to produce this result.
     */
    @JsonIgnore
    public Optional<String> heading() {
        return heading;
    }

    /**
     * Question text that was matched to produce this result.
     */
    @JsonIgnore
    public Optional<String> question() {
        return question;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchResult> questionResult() {
        return (Optional<SearchResult>) questionResult;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Heading text that was matched to produce this result.
     */
    public ExtractedQnA withHeading(String heading) {
        Utils.checkNotNull(heading, "heading");
        this.heading = Optional.ofNullable(heading);
        return this;
    }

    /**
     * Heading text that was matched to produce this result.
     */
    public ExtractedQnA withHeading(Optional<String> heading) {
        Utils.checkNotNull(heading, "heading");
        this.heading = heading;
        return this;
    }

    /**
     * Question text that was matched to produce this result.
     */
    public ExtractedQnA withQuestion(String question) {
        Utils.checkNotNull(question, "question");
        this.question = Optional.ofNullable(question);
        return this;
    }

    /**
     * Question text that was matched to produce this result.
     */
    public ExtractedQnA withQuestion(Optional<String> question) {
        Utils.checkNotNull(question, "question");
        this.question = question;
        return this;
    }

    public ExtractedQnA withQuestionResult(SearchResult questionResult) {
        Utils.checkNotNull(questionResult, "questionResult");
        this.questionResult = Optional.ofNullable(questionResult);
        return this;
    }

    public ExtractedQnA withQuestionResult(Optional<? extends SearchResult> questionResult) {
        Utils.checkNotNull(questionResult, "questionResult");
        this.questionResult = questionResult;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExtractedQnA other = (ExtractedQnA) o;
        return 
            Objects.deepEquals(this.heading, other.heading) &&
            Objects.deepEquals(this.question, other.question) &&
            Objects.deepEquals(this.questionResult, other.questionResult);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            heading,
            question,
            questionResult);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExtractedQnA.class,
                "heading", heading,
                "question", question,
                "questionResult", questionResult);
    }
    
    public final static class Builder {
 
        private Optional<String> heading = Optional.empty();
 
        private Optional<String> question = Optional.empty();
 
        private Optional<? extends SearchResult> questionResult = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Heading text that was matched to produce this result.
         */
        public Builder heading(String heading) {
            Utils.checkNotNull(heading, "heading");
            this.heading = Optional.ofNullable(heading);
            return this;
        }

        /**
         * Heading text that was matched to produce this result.
         */
        public Builder heading(Optional<String> heading) {
            Utils.checkNotNull(heading, "heading");
            this.heading = heading;
            return this;
        }

        /**
         * Question text that was matched to produce this result.
         */
        public Builder question(String question) {
            Utils.checkNotNull(question, "question");
            this.question = Optional.ofNullable(question);
            return this;
        }

        /**
         * Question text that was matched to produce this result.
         */
        public Builder question(Optional<String> question) {
            Utils.checkNotNull(question, "question");
            this.question = question;
            return this;
        }

        public Builder questionResult(SearchResult questionResult) {
            Utils.checkNotNull(questionResult, "questionResult");
            this.questionResult = Optional.ofNullable(questionResult);
            return this;
        }

        public Builder questionResult(Optional<? extends SearchResult> questionResult) {
            Utils.checkNotNull(questionResult, "questionResult");
            this.questionResult = questionResult;
            return this;
        }
        
        public ExtractedQnA build() {
            return new ExtractedQnA(
                heading,
                question,
                questionResult);
        }
    }
}
