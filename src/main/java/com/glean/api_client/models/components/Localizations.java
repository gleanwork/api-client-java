/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Localizations {

    /**
     * The display name of the product term in the given locale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    @JsonCreator
    public Localizations(
            @JsonProperty("displayName") Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
    }
    
    public Localizations() {
        this(Optional.empty());
    }

    /**
     * The display name of the product term in the given locale.
     */
    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The display name of the product term in the given locale.
     */
    public Localizations withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    /**
     * The display name of the product term in the given locale.
     */
    public Localizations withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Localizations other = (Localizations) o;
        return 
            Objects.deepEquals(this.displayName, other.displayName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            displayName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Localizations.class,
                "displayName", displayName);
    }
    
    public final static class Builder {
 
        private Optional<String> displayName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The display name of the product term in the given locale.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * The display name of the product term in the given locale.
         */
        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }
        
        public Localizations build() {
            return new Localizations(
                displayName);
        }
    }
}
