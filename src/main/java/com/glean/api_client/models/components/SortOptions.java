/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SortOptions {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderBy")
    private Optional<? extends OrderBy> orderBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortBy")
    private Optional<String> sortBy;

    @JsonCreator
    public SortOptions(
            @JsonProperty("orderBy") Optional<? extends OrderBy> orderBy,
            @JsonProperty("sortBy") Optional<String> sortBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(sortBy, "sortBy");
        this.orderBy = orderBy;
        this.sortBy = sortBy;
    }
    
    public SortOptions() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderBy> orderBy() {
        return (Optional<OrderBy>) orderBy;
    }

    @JsonIgnore
    public Optional<String> sortBy() {
        return sortBy;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SortOptions withOrderBy(OrderBy orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }

    public SortOptions withOrderBy(Optional<? extends OrderBy> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    public SortOptions withSortBy(String sortBy) {
        Utils.checkNotNull(sortBy, "sortBy");
        this.sortBy = Optional.ofNullable(sortBy);
        return this;
    }

    public SortOptions withSortBy(Optional<String> sortBy) {
        Utils.checkNotNull(sortBy, "sortBy");
        this.sortBy = sortBy;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SortOptions other = (SortOptions) o;
        return 
            Objects.deepEquals(this.orderBy, other.orderBy) &&
            Objects.deepEquals(this.sortBy, other.sortBy);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            orderBy,
            sortBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SortOptions.class,
                "orderBy", orderBy,
                "sortBy", sortBy);
    }
    
    public final static class Builder {
 
        private Optional<? extends OrderBy> orderBy = Optional.empty();
 
        private Optional<String> sortBy = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder orderBy(OrderBy orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        public Builder orderBy(Optional<? extends OrderBy> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }

        public Builder sortBy(String sortBy) {
            Utils.checkNotNull(sortBy, "sortBy");
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        public Builder sortBy(Optional<String> sortBy) {
            Utils.checkNotNull(sortBy, "sortBy");
            this.sortBy = sortBy;
            return this;
        }
        
        public SortOptions build() {
            return new SortOptions(
                orderBy,
                sortBy);
        }
    }
}
