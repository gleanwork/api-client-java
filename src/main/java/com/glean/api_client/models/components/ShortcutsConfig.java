/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ShortcutsConfig
 * 
 * <p>Configuration settings related to Shortcuts
 */
public class ShortcutsConfig {

    /**
     * Deployment's prefix for shortcuts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcutsPrefix")
    private Optional<String> shortcutsPrefix;

    /**
     * Whether the deployment uses external shortcuts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useExternalShortcuts")
    private Optional<Boolean> useExternalShortcuts;

    @JsonCreator
    public ShortcutsConfig(
            @JsonProperty("shortcutsPrefix") Optional<String> shortcutsPrefix,
            @JsonProperty("useExternalShortcuts") Optional<Boolean> useExternalShortcuts) {
        Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
        Utils.checkNotNull(useExternalShortcuts, "useExternalShortcuts");
        this.shortcutsPrefix = shortcutsPrefix;
        this.useExternalShortcuts = useExternalShortcuts;
    }
    
    public ShortcutsConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Deployment's prefix for shortcuts.
     */
    @JsonIgnore
    public Optional<String> shortcutsPrefix() {
        return shortcutsPrefix;
    }

    /**
     * Whether the deployment uses external shortcuts.
     */
    @JsonIgnore
    public Optional<Boolean> useExternalShortcuts() {
        return useExternalShortcuts;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Deployment's prefix for shortcuts.
     */
    public ShortcutsConfig withShortcutsPrefix(String shortcutsPrefix) {
        Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
        this.shortcutsPrefix = Optional.ofNullable(shortcutsPrefix);
        return this;
    }

    /**
     * Deployment's prefix for shortcuts.
     */
    public ShortcutsConfig withShortcutsPrefix(Optional<String> shortcutsPrefix) {
        Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
        this.shortcutsPrefix = shortcutsPrefix;
        return this;
    }

    /**
     * Whether the deployment uses external shortcuts.
     */
    public ShortcutsConfig withUseExternalShortcuts(boolean useExternalShortcuts) {
        Utils.checkNotNull(useExternalShortcuts, "useExternalShortcuts");
        this.useExternalShortcuts = Optional.ofNullable(useExternalShortcuts);
        return this;
    }

    /**
     * Whether the deployment uses external shortcuts.
     */
    public ShortcutsConfig withUseExternalShortcuts(Optional<Boolean> useExternalShortcuts) {
        Utils.checkNotNull(useExternalShortcuts, "useExternalShortcuts");
        this.useExternalShortcuts = useExternalShortcuts;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShortcutsConfig other = (ShortcutsConfig) o;
        return 
            Objects.deepEquals(this.shortcutsPrefix, other.shortcutsPrefix) &&
            Objects.deepEquals(this.useExternalShortcuts, other.useExternalShortcuts);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            shortcutsPrefix,
            useExternalShortcuts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShortcutsConfig.class,
                "shortcutsPrefix", shortcutsPrefix,
                "useExternalShortcuts", useExternalShortcuts);
    }
    
    public final static class Builder {
 
        private Optional<String> shortcutsPrefix = Optional.empty();
 
        private Optional<Boolean> useExternalShortcuts = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Deployment's prefix for shortcuts.
         */
        public Builder shortcutsPrefix(String shortcutsPrefix) {
            Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
            this.shortcutsPrefix = Optional.ofNullable(shortcutsPrefix);
            return this;
        }

        /**
         * Deployment's prefix for shortcuts.
         */
        public Builder shortcutsPrefix(Optional<String> shortcutsPrefix) {
            Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
            this.shortcutsPrefix = shortcutsPrefix;
            return this;
        }

        /**
         * Whether the deployment uses external shortcuts.
         */
        public Builder useExternalShortcuts(boolean useExternalShortcuts) {
            Utils.checkNotNull(useExternalShortcuts, "useExternalShortcuts");
            this.useExternalShortcuts = Optional.ofNullable(useExternalShortcuts);
            return this;
        }

        /**
         * Whether the deployment uses external shortcuts.
         */
        public Builder useExternalShortcuts(Optional<Boolean> useExternalShortcuts) {
            Utils.checkNotNull(useExternalShortcuts, "useExternalShortcuts");
            this.useExternalShortcuts = useExternalShortcuts;
            return this;
        }
        
        public ShortcutsConfig build() {
            return new ShortcutsConfig(
                shortcutsPrefix,
                useExternalShortcuts);
        }
    }
}
