/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class AnnouncementViewerInfo {

    /**
     * Whether the viewer has dismissed the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDismissed")
    private Optional<Boolean> isDismissed;

    /**
     * Whether the viewer has read the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRead")
    private Optional<Boolean> isRead;

    @JsonCreator
    public AnnouncementViewerInfo(
            @JsonProperty("isDismissed") Optional<Boolean> isDismissed,
            @JsonProperty("isRead") Optional<Boolean> isRead) {
        Utils.checkNotNull(isDismissed, "isDismissed");
        Utils.checkNotNull(isRead, "isRead");
        this.isDismissed = isDismissed;
        this.isRead = isRead;
    }
    
    public AnnouncementViewerInfo() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether the viewer has dismissed the announcement.
     */
    @JsonIgnore
    public Optional<Boolean> isDismissed() {
        return isDismissed;
    }

    /**
     * Whether the viewer has read the announcement.
     */
    @JsonIgnore
    public Optional<Boolean> isRead() {
        return isRead;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether the viewer has dismissed the announcement.
     */
    public AnnouncementViewerInfo withIsDismissed(boolean isDismissed) {
        Utils.checkNotNull(isDismissed, "isDismissed");
        this.isDismissed = Optional.ofNullable(isDismissed);
        return this;
    }

    /**
     * Whether the viewer has dismissed the announcement.
     */
    public AnnouncementViewerInfo withIsDismissed(Optional<Boolean> isDismissed) {
        Utils.checkNotNull(isDismissed, "isDismissed");
        this.isDismissed = isDismissed;
        return this;
    }

    /**
     * Whether the viewer has read the announcement.
     */
    public AnnouncementViewerInfo withIsRead(boolean isRead) {
        Utils.checkNotNull(isRead, "isRead");
        this.isRead = Optional.ofNullable(isRead);
        return this;
    }

    /**
     * Whether the viewer has read the announcement.
     */
    public AnnouncementViewerInfo withIsRead(Optional<Boolean> isRead) {
        Utils.checkNotNull(isRead, "isRead");
        this.isRead = isRead;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnnouncementViewerInfo other = (AnnouncementViewerInfo) o;
        return 
            Objects.deepEquals(this.isDismissed, other.isDismissed) &&
            Objects.deepEquals(this.isRead, other.isRead);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isDismissed,
            isRead);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnnouncementViewerInfo.class,
                "isDismissed", isDismissed,
                "isRead", isRead);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isDismissed = Optional.empty();
 
        private Optional<Boolean> isRead = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the viewer has dismissed the announcement.
         */
        public Builder isDismissed(boolean isDismissed) {
            Utils.checkNotNull(isDismissed, "isDismissed");
            this.isDismissed = Optional.ofNullable(isDismissed);
            return this;
        }

        /**
         * Whether the viewer has dismissed the announcement.
         */
        public Builder isDismissed(Optional<Boolean> isDismissed) {
            Utils.checkNotNull(isDismissed, "isDismissed");
            this.isDismissed = isDismissed;
            return this;
        }

        /**
         * Whether the viewer has read the announcement.
         */
        public Builder isRead(boolean isRead) {
            Utils.checkNotNull(isRead, "isRead");
            this.isRead = Optional.ofNullable(isRead);
            return this;
        }

        /**
         * Whether the viewer has read the announcement.
         */
        public Builder isRead(Optional<Boolean> isRead) {
            Utils.checkNotNull(isRead, "isRead");
            this.isRead = isRead;
            return this;
        }
        
        public AnnouncementViewerInfo build() {
            return new AnnouncementViewerInfo(
                isDismissed,
                isRead);
        }
    }
}
