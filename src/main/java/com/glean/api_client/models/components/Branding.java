/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * Branding
 * 
 * <p>A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
 */
public class Branding {

    /**
     * User facing company background image to be displayed to users on the home page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyBackgroundImageName")
    private Optional<String> companyBackgroundImageName;

    /**
     * User facing company background image to be displayed to users on mobile devices on the home page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyMobileBackgroundImageName")
    private Optional<String> companyMobileBackgroundImageName;

    /**
     * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyLogoUrl")
    private Optional<String> companyLogoUrl;

    /**
     * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyWideLogoUrl")
    private Optional<String> companyWideLogoUrl;

    /**
     * A hex RGB color to display behind custom logo (e.g. '#ff4080').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyLogoBackgroundColor")
    private Optional<String> companyLogoBackgroundColor;

    @JsonCreator
    public Branding(
            @JsonProperty("companyBackgroundImageName") Optional<String> companyBackgroundImageName,
            @JsonProperty("companyMobileBackgroundImageName") Optional<String> companyMobileBackgroundImageName,
            @JsonProperty("companyLogoUrl") Optional<String> companyLogoUrl,
            @JsonProperty("companyWideLogoUrl") Optional<String> companyWideLogoUrl,
            @JsonProperty("companyLogoBackgroundColor") Optional<String> companyLogoBackgroundColor) {
        Utils.checkNotNull(companyBackgroundImageName, "companyBackgroundImageName");
        Utils.checkNotNull(companyMobileBackgroundImageName, "companyMobileBackgroundImageName");
        Utils.checkNotNull(companyLogoUrl, "companyLogoUrl");
        Utils.checkNotNull(companyWideLogoUrl, "companyWideLogoUrl");
        Utils.checkNotNull(companyLogoBackgroundColor, "companyLogoBackgroundColor");
        this.companyBackgroundImageName = companyBackgroundImageName;
        this.companyMobileBackgroundImageName = companyMobileBackgroundImageName;
        this.companyLogoUrl = companyLogoUrl;
        this.companyWideLogoUrl = companyWideLogoUrl;
        this.companyLogoBackgroundColor = companyLogoBackgroundColor;
    }
    
    public Branding() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * User facing company background image to be displayed to users on the home page.
     */
    @JsonIgnore
    public Optional<String> companyBackgroundImageName() {
        return companyBackgroundImageName;
    }

    /**
     * User facing company background image to be displayed to users on mobile devices on the home page.
     */
    @JsonIgnore
    public Optional<String> companyMobileBackgroundImageName() {
        return companyMobileBackgroundImageName;
    }

    /**
     * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
     */
    @JsonIgnore
    public Optional<String> companyLogoUrl() {
        return companyLogoUrl;
    }

    /**
     * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
     */
    @JsonIgnore
    public Optional<String> companyWideLogoUrl() {
        return companyWideLogoUrl;
    }

    /**
     * A hex RGB color to display behind custom logo (e.g. '#ff4080').
     */
    @JsonIgnore
    public Optional<String> companyLogoBackgroundColor() {
        return companyLogoBackgroundColor;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * User facing company background image to be displayed to users on the home page.
     */
    public Branding withCompanyBackgroundImageName(String companyBackgroundImageName) {
        Utils.checkNotNull(companyBackgroundImageName, "companyBackgroundImageName");
        this.companyBackgroundImageName = Optional.ofNullable(companyBackgroundImageName);
        return this;
    }

    /**
     * User facing company background image to be displayed to users on the home page.
     */
    public Branding withCompanyBackgroundImageName(Optional<String> companyBackgroundImageName) {
        Utils.checkNotNull(companyBackgroundImageName, "companyBackgroundImageName");
        this.companyBackgroundImageName = companyBackgroundImageName;
        return this;
    }

    /**
     * User facing company background image to be displayed to users on mobile devices on the home page.
     */
    public Branding withCompanyMobileBackgroundImageName(String companyMobileBackgroundImageName) {
        Utils.checkNotNull(companyMobileBackgroundImageName, "companyMobileBackgroundImageName");
        this.companyMobileBackgroundImageName = Optional.ofNullable(companyMobileBackgroundImageName);
        return this;
    }

    /**
     * User facing company background image to be displayed to users on mobile devices on the home page.
     */
    public Branding withCompanyMobileBackgroundImageName(Optional<String> companyMobileBackgroundImageName) {
        Utils.checkNotNull(companyMobileBackgroundImageName, "companyMobileBackgroundImageName");
        this.companyMobileBackgroundImageName = companyMobileBackgroundImageName;
        return this;
    }

    /**
     * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
     */
    public Branding withCompanyLogoUrl(String companyLogoUrl) {
        Utils.checkNotNull(companyLogoUrl, "companyLogoUrl");
        this.companyLogoUrl = Optional.ofNullable(companyLogoUrl);
        return this;
    }

    /**
     * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
     */
    public Branding withCompanyLogoUrl(Optional<String> companyLogoUrl) {
        Utils.checkNotNull(companyLogoUrl, "companyLogoUrl");
        this.companyLogoUrl = companyLogoUrl;
        return this;
    }

    /**
     * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
     */
    public Branding withCompanyWideLogoUrl(String companyWideLogoUrl) {
        Utils.checkNotNull(companyWideLogoUrl, "companyWideLogoUrl");
        this.companyWideLogoUrl = Optional.ofNullable(companyWideLogoUrl);
        return this;
    }

    /**
     * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
     */
    public Branding withCompanyWideLogoUrl(Optional<String> companyWideLogoUrl) {
        Utils.checkNotNull(companyWideLogoUrl, "companyWideLogoUrl");
        this.companyWideLogoUrl = companyWideLogoUrl;
        return this;
    }

    /**
     * A hex RGB color to display behind custom logo (e.g. '#ff4080').
     */
    public Branding withCompanyLogoBackgroundColor(String companyLogoBackgroundColor) {
        Utils.checkNotNull(companyLogoBackgroundColor, "companyLogoBackgroundColor");
        this.companyLogoBackgroundColor = Optional.ofNullable(companyLogoBackgroundColor);
        return this;
    }

    /**
     * A hex RGB color to display behind custom logo (e.g. '#ff4080').
     */
    public Branding withCompanyLogoBackgroundColor(Optional<String> companyLogoBackgroundColor) {
        Utils.checkNotNull(companyLogoBackgroundColor, "companyLogoBackgroundColor");
        this.companyLogoBackgroundColor = companyLogoBackgroundColor;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Branding other = (Branding) o;
        return 
            Objects.deepEquals(this.companyBackgroundImageName, other.companyBackgroundImageName) &&
            Objects.deepEquals(this.companyMobileBackgroundImageName, other.companyMobileBackgroundImageName) &&
            Objects.deepEquals(this.companyLogoUrl, other.companyLogoUrl) &&
            Objects.deepEquals(this.companyWideLogoUrl, other.companyWideLogoUrl) &&
            Objects.deepEquals(this.companyLogoBackgroundColor, other.companyLogoBackgroundColor);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyBackgroundImageName,
            companyMobileBackgroundImageName,
            companyLogoUrl,
            companyWideLogoUrl,
            companyLogoBackgroundColor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Branding.class,
                "companyBackgroundImageName", companyBackgroundImageName,
                "companyMobileBackgroundImageName", companyMobileBackgroundImageName,
                "companyLogoUrl", companyLogoUrl,
                "companyWideLogoUrl", companyWideLogoUrl,
                "companyLogoBackgroundColor", companyLogoBackgroundColor);
    }
    
    public final static class Builder {
 
        private Optional<String> companyBackgroundImageName = Optional.empty();
 
        private Optional<String> companyMobileBackgroundImageName = Optional.empty();
 
        private Optional<String> companyLogoUrl = Optional.empty();
 
        private Optional<String> companyWideLogoUrl = Optional.empty();
 
        private Optional<String> companyLogoBackgroundColor = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * User facing company background image to be displayed to users on the home page.
         */
        public Builder companyBackgroundImageName(String companyBackgroundImageName) {
            Utils.checkNotNull(companyBackgroundImageName, "companyBackgroundImageName");
            this.companyBackgroundImageName = Optional.ofNullable(companyBackgroundImageName);
            return this;
        }

        /**
         * User facing company background image to be displayed to users on the home page.
         */
        public Builder companyBackgroundImageName(Optional<String> companyBackgroundImageName) {
            Utils.checkNotNull(companyBackgroundImageName, "companyBackgroundImageName");
            this.companyBackgroundImageName = companyBackgroundImageName;
            return this;
        }

        /**
         * User facing company background image to be displayed to users on mobile devices on the home page.
         */
        public Builder companyMobileBackgroundImageName(String companyMobileBackgroundImageName) {
            Utils.checkNotNull(companyMobileBackgroundImageName, "companyMobileBackgroundImageName");
            this.companyMobileBackgroundImageName = Optional.ofNullable(companyMobileBackgroundImageName);
            return this;
        }

        /**
         * User facing company background image to be displayed to users on mobile devices on the home page.
         */
        public Builder companyMobileBackgroundImageName(Optional<String> companyMobileBackgroundImageName) {
            Utils.checkNotNull(companyMobileBackgroundImageName, "companyMobileBackgroundImageName");
            this.companyMobileBackgroundImageName = companyMobileBackgroundImageName;
            return this;
        }

        /**
         * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
         */
        public Builder companyLogoUrl(String companyLogoUrl) {
            Utils.checkNotNull(companyLogoUrl, "companyLogoUrl");
            this.companyLogoUrl = Optional.ofNullable(companyLogoUrl);
            return this;
        }

        /**
         * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
         */
        public Builder companyLogoUrl(Optional<String> companyLogoUrl) {
            Utils.checkNotNull(companyLogoUrl, "companyLogoUrl");
            this.companyLogoUrl = companyLogoUrl;
            return this;
        }

        /**
         * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
         */
        public Builder companyWideLogoUrl(String companyWideLogoUrl) {
            Utils.checkNotNull(companyWideLogoUrl, "companyWideLogoUrl");
            this.companyWideLogoUrl = Optional.ofNullable(companyWideLogoUrl);
            return this;
        }

        /**
         * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
         */
        public Builder companyWideLogoUrl(Optional<String> companyWideLogoUrl) {
            Utils.checkNotNull(companyWideLogoUrl, "companyWideLogoUrl");
            this.companyWideLogoUrl = companyWideLogoUrl;
            return this;
        }

        /**
         * A hex RGB color to display behind custom logo (e.g. '#ff4080').
         */
        public Builder companyLogoBackgroundColor(String companyLogoBackgroundColor) {
            Utils.checkNotNull(companyLogoBackgroundColor, "companyLogoBackgroundColor");
            this.companyLogoBackgroundColor = Optional.ofNullable(companyLogoBackgroundColor);
            return this;
        }

        /**
         * A hex RGB color to display behind custom logo (e.g. '#ff4080').
         */
        public Builder companyLogoBackgroundColor(Optional<String> companyLogoBackgroundColor) {
            Utils.checkNotNull(companyLogoBackgroundColor, "companyLogoBackgroundColor");
            this.companyLogoBackgroundColor = companyLogoBackgroundColor;
            return this;
        }
        
        public Branding build() {
            return new Branding(
                companyBackgroundImageName,
                companyMobileBackgroundImageName,
                companyLogoUrl,
                companyWideLogoUrl,
                companyLogoBackgroundColor);
        }
    }
}
