/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CountInfo {

    /**
     * The counter value
     */
    @JsonProperty("count")
    private long count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period")
    private Optional<? extends Period> period;

    /**
     * The unit of organization over which we did the count aggregation, e.g. org (department) or company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org")
    private Optional<String> org;

    @JsonCreator
    public CountInfo(
            @JsonProperty("count") long count,
            @JsonProperty("period") Optional<? extends Period> period,
            @JsonProperty("org") Optional<String> org) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(period, "period");
        Utils.checkNotNull(org, "org");
        this.count = count;
        this.period = period;
        this.org = org;
    }
    
    public CountInfo(
            long count) {
        this(count, Optional.empty(), Optional.empty());
    }

    /**
     * The counter value
     */
    @JsonIgnore
    public long count() {
        return count;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Period> period() {
        return (Optional<Period>) period;
    }

    /**
     * The unit of organization over which we did the count aggregation, e.g. org (department) or company
     */
    @JsonIgnore
    public Optional<String> org() {
        return org;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The counter value
     */
    public CountInfo withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public CountInfo withPeriod(Period period) {
        Utils.checkNotNull(period, "period");
        this.period = Optional.ofNullable(period);
        return this;
    }

    public CountInfo withPeriod(Optional<? extends Period> period) {
        Utils.checkNotNull(period, "period");
        this.period = period;
        return this;
    }

    /**
     * The unit of organization over which we did the count aggregation, e.g. org (department) or company
     */
    public CountInfo withOrg(String org) {
        Utils.checkNotNull(org, "org");
        this.org = Optional.ofNullable(org);
        return this;
    }

    /**
     * The unit of organization over which we did the count aggregation, e.g. org (department) or company
     */
    public CountInfo withOrg(Optional<String> org) {
        Utils.checkNotNull(org, "org");
        this.org = org;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CountInfo other = (CountInfo) o;
        return 
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.period, other.period) &&
            Objects.deepEquals(this.org, other.org);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            count,
            period,
            org);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CountInfo.class,
                "count", count,
                "period", period,
                "org", org);
    }
    
    public final static class Builder {
 
        private Long count;
 
        private Optional<? extends Period> period = Optional.empty();
 
        private Optional<String> org = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The counter value
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder period(Period period) {
            Utils.checkNotNull(period, "period");
            this.period = Optional.ofNullable(period);
            return this;
        }

        public Builder period(Optional<? extends Period> period) {
            Utils.checkNotNull(period, "period");
            this.period = period;
            return this;
        }

        /**
         * The unit of organization over which we did the count aggregation, e.g. org (department) or company
         */
        public Builder org(String org) {
            Utils.checkNotNull(org, "org");
            this.org = Optional.ofNullable(org);
            return this;
        }

        /**
         * The unit of organization over which we did the count aggregation, e.g. org (department) or company
         */
        public Builder org(Optional<String> org) {
            Utils.checkNotNull(org, "org");
            this.org = org;
            return this;
        }
        
        public CountInfo build() {
            return new CountInfo(
                count,
                period,
                org);
        }
    }
}
