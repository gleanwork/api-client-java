/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DatasourceProfile {

    /**
     * The datasource the profile is of.
     */
    @JsonProperty("datasource")
    private String datasource;

    /**
     * The display name of the entity in the given datasource.
     */
    @JsonProperty("handle")
    private String handle;

    /**
     * URL to view the entity's profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nativeAppUrl")
    private Optional<String> nativeAppUrl;

    /**
     * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isUserGenerated")
    private Optional<Boolean> isUserGenerated;

    @JsonCreator
    public DatasourceProfile(
            @JsonProperty("datasource") String datasource,
            @JsonProperty("handle") String handle,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("nativeAppUrl") Optional<String> nativeAppUrl,
            @JsonProperty("isUserGenerated") Optional<Boolean> isUserGenerated) {
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(handle, "handle");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(nativeAppUrl, "nativeAppUrl");
        Utils.checkNotNull(isUserGenerated, "isUserGenerated");
        this.datasource = datasource;
        this.handle = handle;
        this.url = url;
        this.nativeAppUrl = nativeAppUrl;
        this.isUserGenerated = isUserGenerated;
    }
    
    public DatasourceProfile(
            String datasource,
            String handle) {
        this(datasource, handle, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The datasource the profile is of.
     */
    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * The display name of the entity in the given datasource.
     */
    @JsonIgnore
    public String handle() {
        return handle;
    }

    /**
     * URL to view the entity's profile.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
     */
    @JsonIgnore
    public Optional<String> nativeAppUrl() {
        return nativeAppUrl;
    }

    /**
     * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
     */
    @JsonIgnore
    public Optional<Boolean> isUserGenerated() {
        return isUserGenerated;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The datasource the profile is of.
     */
    public DatasourceProfile withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The display name of the entity in the given datasource.
     */
    public DatasourceProfile withHandle(String handle) {
        Utils.checkNotNull(handle, "handle");
        this.handle = handle;
        return this;
    }

    /**
     * URL to view the entity's profile.
     */
    public DatasourceProfile withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * URL to view the entity's profile.
     */
    public DatasourceProfile withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
     */
    public DatasourceProfile withNativeAppUrl(String nativeAppUrl) {
        Utils.checkNotNull(nativeAppUrl, "nativeAppUrl");
        this.nativeAppUrl = Optional.ofNullable(nativeAppUrl);
        return this;
    }

    /**
     * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
     */
    public DatasourceProfile withNativeAppUrl(Optional<String> nativeAppUrl) {
        Utils.checkNotNull(nativeAppUrl, "nativeAppUrl");
        this.nativeAppUrl = nativeAppUrl;
        return this;
    }

    /**
     * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
     */
    public DatasourceProfile withIsUserGenerated(boolean isUserGenerated) {
        Utils.checkNotNull(isUserGenerated, "isUserGenerated");
        this.isUserGenerated = Optional.ofNullable(isUserGenerated);
        return this;
    }

    /**
     * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
     */
    public DatasourceProfile withIsUserGenerated(Optional<Boolean> isUserGenerated) {
        Utils.checkNotNull(isUserGenerated, "isUserGenerated");
        this.isUserGenerated = isUserGenerated;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DatasourceProfile other = (DatasourceProfile) o;
        return 
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.handle, other.handle) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.nativeAppUrl, other.nativeAppUrl) &&
            Objects.deepEquals(this.isUserGenerated, other.isUserGenerated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasource,
            handle,
            url,
            nativeAppUrl,
            isUserGenerated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DatasourceProfile.class,
                "datasource", datasource,
                "handle", handle,
                "url", url,
                "nativeAppUrl", nativeAppUrl,
                "isUserGenerated", isUserGenerated);
    }
    
    public final static class Builder {
 
        private String datasource;
 
        private String handle;
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> nativeAppUrl = Optional.empty();
 
        private Optional<Boolean> isUserGenerated = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The datasource the profile is of.
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The display name of the entity in the given datasource.
         */
        public Builder handle(String handle) {
            Utils.checkNotNull(handle, "handle");
            this.handle = handle;
            return this;
        }

        /**
         * URL to view the entity's profile.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * URL to view the entity's profile.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
         */
        public Builder nativeAppUrl(String nativeAppUrl) {
            Utils.checkNotNull(nativeAppUrl, "nativeAppUrl");
            this.nativeAppUrl = Optional.ofNullable(nativeAppUrl);
            return this;
        }

        /**
         * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
         */
        public Builder nativeAppUrl(Optional<String> nativeAppUrl) {
            Utils.checkNotNull(nativeAppUrl, "nativeAppUrl");
            this.nativeAppUrl = nativeAppUrl;
            return this;
        }

        /**
         * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
         */
        public Builder isUserGenerated(boolean isUserGenerated) {
            Utils.checkNotNull(isUserGenerated, "isUserGenerated");
            this.isUserGenerated = Optional.ofNullable(isUserGenerated);
            return this;
        }

        /**
         * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
         */
        public Builder isUserGenerated(Optional<Boolean> isUserGenerated) {
            Utils.checkNotNull(isUserGenerated, "isUserGenerated");
            this.isUserGenerated = isUserGenerated;
            return this;
        }
        
        public DatasourceProfile build() {
            return new DatasourceProfile(
                datasource,
                handle,
                url,
                nativeAppUrl,
                isUserGenerated);
        }
    }
}
