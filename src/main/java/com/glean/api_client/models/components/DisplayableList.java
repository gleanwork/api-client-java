/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * DisplayableList
 * 
 * <p>All configurations for a list that can be displayed.
 */
public class DisplayableList {

    /**
     * The type of data that backs this displayable list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends DisplayableListSource> source;

    /**
     * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    /**
     * Unstructured identifier for the source to render (ID, URL, query).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceId")
    private Optional<String> sourceId;

    /**
     * UI specific configurations for a displayable list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    private Optional<? extends DisplayableListConfig> config;

    @JsonCreator
    public DisplayableList(
            @JsonProperty("source") Optional<? extends DisplayableListSource> source,
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("sourceId") Optional<String> sourceId,
            @JsonProperty("config") Optional<? extends DisplayableListConfig> config) {
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(config, "config");
        this.source = source;
        this.id = id;
        this.sourceId = sourceId;
        this.config = config;
    }
    
    public DisplayableList() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of data that backs this displayable list
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DisplayableListSource> source() {
        return (Optional<DisplayableListSource>) source;
    }

    /**
     * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
     */
    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    /**
     * Unstructured identifier for the source to render (ID, URL, query).
     */
    @JsonIgnore
    public Optional<String> sourceId() {
        return sourceId;
    }

    /**
     * UI specific configurations for a displayable list
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DisplayableListConfig> config() {
        return (Optional<DisplayableListConfig>) config;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of data that backs this displayable list
     */
    public DisplayableList withSource(DisplayableListSource source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * The type of data that backs this displayable list
     */
    public DisplayableList withSource(Optional<? extends DisplayableListSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
     */
    public DisplayableList withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
     */
    public DisplayableList withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Unstructured identifier for the source to render (ID, URL, query).
     */
    public DisplayableList withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = Optional.ofNullable(sourceId);
        return this;
    }

    /**
     * Unstructured identifier for the source to render (ID, URL, query).
     */
    public DisplayableList withSourceId(Optional<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * UI specific configurations for a displayable list
     */
    public DisplayableList withConfig(DisplayableListConfig config) {
        Utils.checkNotNull(config, "config");
        this.config = Optional.ofNullable(config);
        return this;
    }

    /**
     * UI specific configurations for a displayable list
     */
    public DisplayableList withConfig(Optional<? extends DisplayableListConfig> config) {
        Utils.checkNotNull(config, "config");
        this.config = config;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DisplayableList other = (DisplayableList) o;
        return 
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.config, other.config);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            source,
            id,
            sourceId,
            config);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DisplayableList.class,
                "source", source,
                "id", id,
                "sourceId", sourceId,
                "config", config);
    }
    
    public final static class Builder {
 
        private Optional<? extends DisplayableListSource> source = Optional.empty();
 
        private Optional<Long> id = Optional.empty();
 
        private Optional<String> sourceId = Optional.empty();
 
        private Optional<? extends DisplayableListConfig> config = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of data that backs this displayable list
         */
        public Builder source(DisplayableListSource source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * The type of data that backs this displayable list
         */
        public Builder source(Optional<? extends DisplayableListSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        /**
         * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
         */
        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Unstructured identifier for the source to render (ID, URL, query).
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        /**
         * Unstructured identifier for the source to render (ID, URL, query).
         */
        public Builder sourceId(Optional<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        /**
         * UI specific configurations for a displayable list
         */
        public Builder config(DisplayableListConfig config) {
            Utils.checkNotNull(config, "config");
            this.config = Optional.ofNullable(config);
            return this;
        }

        /**
         * UI specific configurations for a displayable list
         */
        public Builder config(Optional<? extends DisplayableListConfig> config) {
            Utils.checkNotNull(config, "config");
            this.config = config;
            return this;
        }
        
        public DisplayableList build() {
            return new DisplayableList(
                source,
                id,
                sourceId,
                config);
        }
    }
}
