/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class TeamsResponse {

    /**
     * A Team and a deep copy of all its members for each ID in the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<Team>> results;

    /**
     * A list of IDs that could not be found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<String>> errors;

    @JsonCreator
    public TeamsResponse(
            @JsonProperty("results") Optional<? extends List<Team>> results,
            @JsonProperty("errors") Optional<? extends List<String>> errors) {
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(errors, "errors");
        this.results = results;
        this.errors = errors;
    }
    
    public TeamsResponse() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A Team and a deep copy of all its members for each ID in the request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Team>> results() {
        return (Optional<List<Team>>) results;
    }

    /**
     * A list of IDs that could not be found.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> errors() {
        return (Optional<List<String>>) errors;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A Team and a deep copy of all its members for each ID in the request
     */
    public TeamsResponse withResults(List<Team> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    /**
     * A Team and a deep copy of all its members for each ID in the request
     */
    public TeamsResponse withResults(Optional<? extends List<Team>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    /**
     * A list of IDs that could not be found.
     */
    public TeamsResponse withErrors(List<String> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    /**
     * A list of IDs that could not be found.
     */
    public TeamsResponse withErrors(Optional<? extends List<String>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeamsResponse other = (TeamsResponse) o;
        return 
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            results,
            errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TeamsResponse.class,
                "results", results,
                "errors", errors);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Team>> results = Optional.empty();
 
        private Optional<? extends List<String>> errors = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A Team and a deep copy of all its members for each ID in the request
         */
        public Builder results(List<Team> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        /**
         * A Team and a deep copy of all its members for each ID in the request
         */
        public Builder results(Optional<? extends List<Team>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        /**
         * A list of IDs that could not be found.
         */
        public Builder errors(List<String> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * A list of IDs that could not be found.
         */
        public Builder errors(Optional<? extends List<String>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }
        
        public TeamsResponse build() {
            return new TeamsResponse(
                results,
                errors);
        }
    }
}
