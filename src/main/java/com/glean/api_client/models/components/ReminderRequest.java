/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ReminderRequest {

    /**
     * The document which the verification is for new reminders and/or update.
     */
    @JsonProperty("documentId")
    private String documentId;

    /**
     * The obfuscated id of the person this verification is assigned to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee")
    private Optional<String> assignee;

    /**
     * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remindInDays")
    private Optional<Long> remindInDays;

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<String> reason;

    @JsonCreator
    public ReminderRequest(
            @JsonProperty("documentId") String documentId,
            @JsonProperty("assignee") Optional<String> assignee,
            @JsonProperty("remindInDays") Optional<Long> remindInDays,
            @JsonProperty("reason") Optional<String> reason) {
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(assignee, "assignee");
        Utils.checkNotNull(remindInDays, "remindInDays");
        Utils.checkNotNull(reason, "reason");
        this.documentId = documentId;
        this.assignee = assignee;
        this.remindInDays = remindInDays;
        this.reason = reason;
    }
    
    public ReminderRequest(
            String documentId) {
        this(documentId, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The document which the verification is for new reminders and/or update.
     */
    @JsonIgnore
    public String documentId() {
        return documentId;
    }

    /**
     * The obfuscated id of the person this verification is assigned to.
     */
    @JsonIgnore
    public Optional<String> assignee() {
        return assignee;
    }

    /**
     * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
     */
    @JsonIgnore
    public Optional<Long> remindInDays() {
        return remindInDays;
    }

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    @JsonIgnore
    public Optional<String> reason() {
        return reason;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The document which the verification is for new reminders and/or update.
     */
    public ReminderRequest withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The obfuscated id of the person this verification is assigned to.
     */
    public ReminderRequest withAssignee(String assignee) {
        Utils.checkNotNull(assignee, "assignee");
        this.assignee = Optional.ofNullable(assignee);
        return this;
    }

    /**
     * The obfuscated id of the person this verification is assigned to.
     */
    public ReminderRequest withAssignee(Optional<String> assignee) {
        Utils.checkNotNull(assignee, "assignee");
        this.assignee = assignee;
        return this;
    }

    /**
     * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
     */
    public ReminderRequest withRemindInDays(long remindInDays) {
        Utils.checkNotNull(remindInDays, "remindInDays");
        this.remindInDays = Optional.ofNullable(remindInDays);
        return this;
    }

    /**
     * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
     */
    public ReminderRequest withRemindInDays(Optional<Long> remindInDays) {
        Utils.checkNotNull(remindInDays, "remindInDays");
        this.remindInDays = remindInDays;
        return this;
    }

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    public ReminderRequest withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    public ReminderRequest withReason(Optional<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReminderRequest other = (ReminderRequest) o;
        return 
            Objects.deepEquals(this.documentId, other.documentId) &&
            Objects.deepEquals(this.assignee, other.assignee) &&
            Objects.deepEquals(this.remindInDays, other.remindInDays) &&
            Objects.deepEquals(this.reason, other.reason);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            documentId,
            assignee,
            remindInDays,
            reason);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReminderRequest.class,
                "documentId", documentId,
                "assignee", assignee,
                "remindInDays", remindInDays,
                "reason", reason);
    }
    
    public final static class Builder {
 
        private String documentId;
 
        private Optional<String> assignee = Optional.empty();
 
        private Optional<Long> remindInDays = Optional.empty();
 
        private Optional<String> reason = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The document which the verification is for new reminders and/or update.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        /**
         * The obfuscated id of the person this verification is assigned to.
         */
        public Builder assignee(String assignee) {
            Utils.checkNotNull(assignee, "assignee");
            this.assignee = Optional.ofNullable(assignee);
            return this;
        }

        /**
         * The obfuscated id of the person this verification is assigned to.
         */
        public Builder assignee(Optional<String> assignee) {
            Utils.checkNotNull(assignee, "assignee");
            this.assignee = assignee;
            return this;
        }

        /**
         * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
         */
        public Builder remindInDays(long remindInDays) {
            Utils.checkNotNull(remindInDays, "remindInDays");
            this.remindInDays = Optional.ofNullable(remindInDays);
            return this;
        }

        /**
         * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
         */
        public Builder remindInDays(Optional<Long> remindInDays) {
            Utils.checkNotNull(remindInDays, "remindInDays");
            this.remindInDays = remindInDays;
            return this;
        }

        /**
         * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
         */
        public Builder reason(Optional<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }
        
        public ReminderRequest build() {
            return new ReminderRequest(
                documentId,
                assignee,
                remindInDays,
                reason);
        }
    }
}
