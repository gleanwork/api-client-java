/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class DeleteQueryHistoryRequest {

    /**
     * Queries to delete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queries")
    private Optional<? extends List<String>> queries;

    @JsonCreator
    public DeleteQueryHistoryRequest(
            @JsonProperty("queries") Optional<? extends List<String>> queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = queries;
    }
    
    public DeleteQueryHistoryRequest() {
        this(Optional.empty());
    }

    /**
     * Queries to delete.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> queries() {
        return (Optional<List<String>>) queries;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Queries to delete.
     */
    public DeleteQueryHistoryRequest withQueries(List<String> queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = Optional.ofNullable(queries);
        return this;
    }

    /**
     * Queries to delete.
     */
    public DeleteQueryHistoryRequest withQueries(Optional<? extends List<String>> queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = queries;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteQueryHistoryRequest other = (DeleteQueryHistoryRequest) o;
        return 
            Objects.deepEquals(this.queries, other.queries);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            queries);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteQueryHistoryRequest.class,
                "queries", queries);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> queries = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Queries to delete.
         */
        public Builder queries(List<String> queries) {
            Utils.checkNotNull(queries, "queries");
            this.queries = Optional.ofNullable(queries);
            return this;
        }

        /**
         * Queries to delete.
         */
        public Builder queries(Optional<? extends List<String>> queries) {
            Utils.checkNotNull(queries, "queries");
            this.queries = queries;
            return this;
        }
        
        public DeleteQueryHistoryRequest build() {
            return new DeleteQueryHistoryRequest(
                queries);
        }
    }
}
