/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * InviteRequest
 * 
 * <p>A request to send an invite to the specified user[s]
 */
public class InviteRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private Optional<? extends CommunicationChannel> channel;

    /**
     * The type of email to send
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends CommunicationTemplate> template;

    /**
     * The people who should receive this invite
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipients")
    private Optional<? extends List<Person>> recipients;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipientFilters")
    private Optional<? extends PeopleFilters> recipientFilters;

    @JsonCreator
    public InviteRequest(
            @JsonProperty("channel") Optional<? extends CommunicationChannel> channel,
            @JsonProperty("template") Optional<? extends CommunicationTemplate> template,
            @JsonProperty("recipients") Optional<? extends List<Person>> recipients,
            @JsonProperty("recipientFilters") Optional<? extends PeopleFilters> recipientFilters) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(recipients, "recipients");
        Utils.checkNotNull(recipientFilters, "recipientFilters");
        this.channel = channel;
        this.template = template;
        this.recipients = recipients;
        this.recipientFilters = recipientFilters;
    }
    
    public InviteRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommunicationChannel> channel() {
        return (Optional<CommunicationChannel>) channel;
    }

    /**
     * The type of email to send
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommunicationTemplate> template() {
        return (Optional<CommunicationTemplate>) template;
    }

    /**
     * The people who should receive this invite
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> recipients() {
        return (Optional<List<Person>>) recipients;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PeopleFilters> recipientFilters() {
        return (Optional<PeopleFilters>) recipientFilters;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public InviteRequest withChannel(CommunicationChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    public InviteRequest withChannel(Optional<? extends CommunicationChannel> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * The type of email to send
     */
    public InviteRequest withTemplate(CommunicationTemplate template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * The type of email to send
     */
    public InviteRequest withTemplate(Optional<? extends CommunicationTemplate> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * The people who should receive this invite
     */
    public InviteRequest withRecipients(List<Person> recipients) {
        Utils.checkNotNull(recipients, "recipients");
        this.recipients = Optional.ofNullable(recipients);
        return this;
    }

    /**
     * The people who should receive this invite
     */
    public InviteRequest withRecipients(Optional<? extends List<Person>> recipients) {
        Utils.checkNotNull(recipients, "recipients");
        this.recipients = recipients;
        return this;
    }

    public InviteRequest withRecipientFilters(PeopleFilters recipientFilters) {
        Utils.checkNotNull(recipientFilters, "recipientFilters");
        this.recipientFilters = Optional.ofNullable(recipientFilters);
        return this;
    }

    public InviteRequest withRecipientFilters(Optional<? extends PeopleFilters> recipientFilters) {
        Utils.checkNotNull(recipientFilters, "recipientFilters");
        this.recipientFilters = recipientFilters;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InviteRequest other = (InviteRequest) o;
        return 
            Objects.deepEquals(this.channel, other.channel) &&
            Objects.deepEquals(this.template, other.template) &&
            Objects.deepEquals(this.recipients, other.recipients) &&
            Objects.deepEquals(this.recipientFilters, other.recipientFilters);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            channel,
            template,
            recipients,
            recipientFilters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InviteRequest.class,
                "channel", channel,
                "template", template,
                "recipients", recipients,
                "recipientFilters", recipientFilters);
    }
    
    public final static class Builder {
 
        private Optional<? extends CommunicationChannel> channel = Optional.empty();
 
        private Optional<? extends CommunicationTemplate> template = Optional.empty();
 
        private Optional<? extends List<Person>> recipients = Optional.empty();
 
        private Optional<? extends PeopleFilters> recipientFilters = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder channel(CommunicationChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        public Builder channel(Optional<? extends CommunicationChannel> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * The type of email to send
         */
        public Builder template(CommunicationTemplate template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * The type of email to send
         */
        public Builder template(Optional<? extends CommunicationTemplate> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * The people who should receive this invite
         */
        public Builder recipients(List<Person> recipients) {
            Utils.checkNotNull(recipients, "recipients");
            this.recipients = Optional.ofNullable(recipients);
            return this;
        }

        /**
         * The people who should receive this invite
         */
        public Builder recipients(Optional<? extends List<Person>> recipients) {
            Utils.checkNotNull(recipients, "recipients");
            this.recipients = recipients;
            return this;
        }

        public Builder recipientFilters(PeopleFilters recipientFilters) {
            Utils.checkNotNull(recipientFilters, "recipientFilters");
            this.recipientFilters = Optional.ofNullable(recipientFilters);
            return this;
        }

        public Builder recipientFilters(Optional<? extends PeopleFilters> recipientFilters) {
            Utils.checkNotNull(recipientFilters, "recipientFilters");
            this.recipientFilters = recipientFilters;
            return this;
        }
        
        public InviteRequest build() {
            return new InviteRequest(
                channel,
                template,
                recipients,
                recipientFilters);
        }
    }
}
