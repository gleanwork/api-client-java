/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ResultsResponse {

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    private Optional<? extends SessionInfo> sessionInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<SearchResult>> results;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredResults")
    private Optional<? extends List<StructuredResult>> structuredResults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generatedQnaResult")
    private Optional<? extends GeneratedQna> generatedQnaResult;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorInfo")
    private Optional<? extends ErrorInfo> errorInfo;

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestID")
    private Optional<String> requestID;

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backendTimeMillis")
    private Optional<Long> backendTimeMillis;

    @JsonCreator
    public ResultsResponse(
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("sessionInfo") Optional<? extends SessionInfo> sessionInfo,
            @JsonProperty("results") Optional<? extends List<SearchResult>> results,
            @JsonProperty("structuredResults") Optional<? extends List<StructuredResult>> structuredResults,
            @JsonProperty("generatedQnaResult") Optional<? extends GeneratedQna> generatedQnaResult,
            @JsonProperty("errorInfo") Optional<? extends ErrorInfo> errorInfo,
            @JsonProperty("requestID") Optional<String> requestID,
            @JsonProperty("backendTimeMillis") Optional<Long> backendTimeMillis) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(structuredResults, "structuredResults");
        Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
        Utils.checkNotNull(errorInfo, "errorInfo");
        Utils.checkNotNull(requestID, "requestID");
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.trackingToken = trackingToken;
        this.sessionInfo = sessionInfo;
        this.results = results;
        this.structuredResults = structuredResults;
        this.generatedQnaResult = generatedQnaResult;
        this.errorInfo = errorInfo;
        this.requestID = requestID;
        this.backendTimeMillis = backendTimeMillis;
    }
    
    public ResultsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SessionInfo> sessionInfo() {
        return (Optional<SessionInfo>) sessionInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SearchResult>> results() {
        return (Optional<List<SearchResult>>) results;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<StructuredResult>> structuredResults() {
        return (Optional<List<StructuredResult>>) structuredResults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GeneratedQna> generatedQnaResult() {
        return (Optional<GeneratedQna>) generatedQnaResult;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ErrorInfo> errorInfo() {
        return (Optional<ErrorInfo>) errorInfo;
    }

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    @JsonIgnore
    public Optional<String> requestID() {
        return requestID;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonIgnore
    public Optional<Long> backendTimeMillis() {
        return backendTimeMillis;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    public ResultsResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    public ResultsResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public ResultsResponse withSessionInfo(SessionInfo sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = Optional.ofNullable(sessionInfo);
        return this;
    }

    public ResultsResponse withSessionInfo(Optional<? extends SessionInfo> sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = sessionInfo;
        return this;
    }

    public ResultsResponse withResults(List<SearchResult> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public ResultsResponse withResults(Optional<? extends List<SearchResult>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    public ResultsResponse withStructuredResults(List<StructuredResult> structuredResults) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        this.structuredResults = Optional.ofNullable(structuredResults);
        return this;
    }

    public ResultsResponse withStructuredResults(Optional<? extends List<StructuredResult>> structuredResults) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        this.structuredResults = structuredResults;
        return this;
    }

    public ResultsResponse withGeneratedQnaResult(GeneratedQna generatedQnaResult) {
        Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
        this.generatedQnaResult = Optional.ofNullable(generatedQnaResult);
        return this;
    }

    public ResultsResponse withGeneratedQnaResult(Optional<? extends GeneratedQna> generatedQnaResult) {
        Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
        this.generatedQnaResult = generatedQnaResult;
        return this;
    }

    public ResultsResponse withErrorInfo(ErrorInfo errorInfo) {
        Utils.checkNotNull(errorInfo, "errorInfo");
        this.errorInfo = Optional.ofNullable(errorInfo);
        return this;
    }

    public ResultsResponse withErrorInfo(Optional<? extends ErrorInfo> errorInfo) {
        Utils.checkNotNull(errorInfo, "errorInfo");
        this.errorInfo = errorInfo;
        return this;
    }

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    public ResultsResponse withRequestID(String requestID) {
        Utils.checkNotNull(requestID, "requestID");
        this.requestID = Optional.ofNullable(requestID);
        return this;
    }

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    public ResultsResponse withRequestID(Optional<String> requestID) {
        Utils.checkNotNull(requestID, "requestID");
        this.requestID = requestID;
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public ResultsResponse withBackendTimeMillis(long backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public ResultsResponse withBackendTimeMillis(Optional<Long> backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = backendTimeMillis;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResultsResponse other = (ResultsResponse) o;
        return 
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.sessionInfo, other.sessionInfo) &&
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.structuredResults, other.structuredResults) &&
            Objects.deepEquals(this.generatedQnaResult, other.generatedQnaResult) &&
            Objects.deepEquals(this.errorInfo, other.errorInfo) &&
            Objects.deepEquals(this.requestID, other.requestID) &&
            Objects.deepEquals(this.backendTimeMillis, other.backendTimeMillis);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            trackingToken,
            sessionInfo,
            results,
            structuredResults,
            generatedQnaResult,
            errorInfo,
            requestID,
            backendTimeMillis);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResultsResponse.class,
                "trackingToken", trackingToken,
                "sessionInfo", sessionInfo,
                "results", results,
                "structuredResults", structuredResults,
                "generatedQnaResult", generatedQnaResult,
                "errorInfo", errorInfo,
                "requestID", requestID,
                "backendTimeMillis", backendTimeMillis);
    }
    
    public final static class Builder {
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends SessionInfo> sessionInfo = Optional.empty();
 
        private Optional<? extends List<SearchResult>> results = Optional.empty();
 
        private Optional<? extends List<StructuredResult>> structuredResults = Optional.empty();
 
        private Optional<? extends GeneratedQna> generatedQnaResult = Optional.empty();
 
        private Optional<? extends ErrorInfo> errorInfo = Optional.empty();
 
        private Optional<String> requestID = Optional.empty();
 
        private Optional<Long> backendTimeMillis = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A token that should be passed for additional requests related to this request (such as more results requests).
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * A token that should be passed for additional requests related to this request (such as more results requests).
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder sessionInfo(SessionInfo sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = Optional.ofNullable(sessionInfo);
            return this;
        }

        public Builder sessionInfo(Optional<? extends SessionInfo> sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = sessionInfo;
            return this;
        }

        public Builder results(List<SearchResult> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<SearchResult>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        public Builder structuredResults(List<StructuredResult> structuredResults) {
            Utils.checkNotNull(structuredResults, "structuredResults");
            this.structuredResults = Optional.ofNullable(structuredResults);
            return this;
        }

        public Builder structuredResults(Optional<? extends List<StructuredResult>> structuredResults) {
            Utils.checkNotNull(structuredResults, "structuredResults");
            this.structuredResults = structuredResults;
            return this;
        }

        public Builder generatedQnaResult(GeneratedQna generatedQnaResult) {
            Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
            this.generatedQnaResult = Optional.ofNullable(generatedQnaResult);
            return this;
        }

        public Builder generatedQnaResult(Optional<? extends GeneratedQna> generatedQnaResult) {
            Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
            this.generatedQnaResult = generatedQnaResult;
            return this;
        }

        public Builder errorInfo(ErrorInfo errorInfo) {
            Utils.checkNotNull(errorInfo, "errorInfo");
            this.errorInfo = Optional.ofNullable(errorInfo);
            return this;
        }

        public Builder errorInfo(Optional<? extends ErrorInfo> errorInfo) {
            Utils.checkNotNull(errorInfo, "errorInfo");
            this.errorInfo = errorInfo;
            return this;
        }

        /**
         * A platform-generated request ID to correlate backend logs.
         */
        public Builder requestID(String requestID) {
            Utils.checkNotNull(requestID, "requestID");
            this.requestID = Optional.ofNullable(requestID);
            return this;
        }

        /**
         * A platform-generated request ID to correlate backend logs.
         */
        public Builder requestID(Optional<String> requestID) {
            Utils.checkNotNull(requestID, "requestID");
            this.requestID = requestID;
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(long backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(Optional<Long> backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = backendTimeMillis;
            return this;
        }
        
        public ResultsResponse build() {
            return new ResultsResponse(
                trackingToken,
                sessionInfo,
                results,
                structuredResults,
                generatedQnaResult,
                errorInfo,
                requestID,
                backendTimeMillis);
        }
    }
}
