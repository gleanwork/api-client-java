/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class VerifyRequest {

    /**
     * The document which is verified.
     */
    @JsonProperty("documentId")
    private String documentId;

    /**
     * The verification action requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private Optional<? extends VerifyRequestAction> action;

    @JsonCreator
    public VerifyRequest(
            @JsonProperty("documentId") String documentId,
            @JsonProperty("action") Optional<? extends VerifyRequestAction> action) {
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(action, "action");
        this.documentId = documentId;
        this.action = action;
    }
    
    public VerifyRequest(
            String documentId) {
        this(documentId, Optional.empty());
    }

    /**
     * The document which is verified.
     */
    @JsonIgnore
    public String documentId() {
        return documentId;
    }

    /**
     * The verification action requested.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VerifyRequestAction> action() {
        return (Optional<VerifyRequestAction>) action;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The document which is verified.
     */
    public VerifyRequest withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The verification action requested.
     */
    public VerifyRequest withAction(VerifyRequestAction action) {
        Utils.checkNotNull(action, "action");
        this.action = Optional.ofNullable(action);
        return this;
    }

    /**
     * The verification action requested.
     */
    public VerifyRequest withAction(Optional<? extends VerifyRequestAction> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyRequest other = (VerifyRequest) o;
        return 
            Objects.deepEquals(this.documentId, other.documentId) &&
            Objects.deepEquals(this.action, other.action);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            documentId,
            action);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyRequest.class,
                "documentId", documentId,
                "action", action);
    }
    
    public final static class Builder {
 
        private String documentId;
 
        private Optional<? extends VerifyRequestAction> action = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The document which is verified.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        /**
         * The verification action requested.
         */
        public Builder action(VerifyRequestAction action) {
            Utils.checkNotNull(action, "action");
            this.action = Optional.ofNullable(action);
            return this;
        }

        /**
         * The verification action requested.
         */
        public Builder action(Optional<? extends VerifyRequestAction> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }
        
        public VerifyRequest build() {
            return new VerifyRequest(
                documentId,
                action);
        }
    }
}
