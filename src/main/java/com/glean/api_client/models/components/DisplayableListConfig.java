/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * DisplayableListConfig
 * 
 * <p>UI specific configurations for a displayable list
 */
public class DisplayableListConfig {

    /**
     * defines how to render this particular displayable list card
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    private Optional<? extends DisplayableListConfigFormat> format;

    /**
     * Primary title for the list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * Whether the list should be shown to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * Filters which restrict who should should see displayable list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * UI configurations for each item of the list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemUIConfig")
    private Optional<? extends DisplayableListItemUIConfig> itemUIConfig;

    @JsonCreator
    public DisplayableListConfig(
            @JsonProperty("format") Optional<? extends DisplayableListConfigFormat> format,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("itemUIConfig") Optional<? extends DisplayableListItemUIConfig> itemUIConfig) {
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(itemUIConfig, "itemUIConfig");
        this.format = format;
        this.title = title;
        this.enabled = enabled;
        this.audienceFilters = audienceFilters;
        this.itemUIConfig = itemUIConfig;
    }
    
    public DisplayableListConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * defines how to render this particular displayable list card
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DisplayableListConfigFormat> format() {
        return (Optional<DisplayableListConfigFormat>) format;
    }

    /**
     * Primary title for the list.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * Whether the list should be shown to the user
     */
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * Filters which restrict who should should see displayable list
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * UI configurations for each item of the list
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DisplayableListItemUIConfig> itemUIConfig() {
        return (Optional<DisplayableListItemUIConfig>) itemUIConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * defines how to render this particular displayable list card
     */
    public DisplayableListConfig withFormat(DisplayableListConfigFormat format) {
        Utils.checkNotNull(format, "format");
        this.format = Optional.ofNullable(format);
        return this;
    }

    /**
     * defines how to render this particular displayable list card
     */
    public DisplayableListConfig withFormat(Optional<? extends DisplayableListConfigFormat> format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * Primary title for the list.
     */
    public DisplayableListConfig withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Primary title for the list.
     */
    public DisplayableListConfig withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Whether the list should be shown to the user
     */
    public DisplayableListConfig withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Whether the list should be shown to the user
     */
    public DisplayableListConfig withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Filters which restrict who should should see displayable list
     */
    public DisplayableListConfig withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should should see displayable list
     */
    public DisplayableListConfig withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * UI configurations for each item of the list
     */
    public DisplayableListConfig withItemUIConfig(DisplayableListItemUIConfig itemUIConfig) {
        Utils.checkNotNull(itemUIConfig, "itemUIConfig");
        this.itemUIConfig = Optional.ofNullable(itemUIConfig);
        return this;
    }

    /**
     * UI configurations for each item of the list
     */
    public DisplayableListConfig withItemUIConfig(Optional<? extends DisplayableListItemUIConfig> itemUIConfig) {
        Utils.checkNotNull(itemUIConfig, "itemUIConfig");
        this.itemUIConfig = itemUIConfig;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DisplayableListConfig other = (DisplayableListConfig) o;
        return 
            Objects.deepEquals(this.format, other.format) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.enabled, other.enabled) &&
            Objects.deepEquals(this.audienceFilters, other.audienceFilters) &&
            Objects.deepEquals(this.itemUIConfig, other.itemUIConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            format,
            title,
            enabled,
            audienceFilters,
            itemUIConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DisplayableListConfig.class,
                "format", format,
                "title", title,
                "enabled", enabled,
                "audienceFilters", audienceFilters,
                "itemUIConfig", itemUIConfig);
    }
    
    public final static class Builder {
 
        private Optional<? extends DisplayableListConfigFormat> format = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<Boolean> enabled = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<? extends DisplayableListItemUIConfig> itemUIConfig = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * defines how to render this particular displayable list card
         */
        public Builder format(DisplayableListConfigFormat format) {
            Utils.checkNotNull(format, "format");
            this.format = Optional.ofNullable(format);
            return this;
        }

        /**
         * defines how to render this particular displayable list card
         */
        public Builder format(Optional<? extends DisplayableListConfigFormat> format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        /**
         * Primary title for the list.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Primary title for the list.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Whether the list should be shown to the user
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Whether the list should be shown to the user
         */
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * Filters which restrict who should should see displayable list
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should should see displayable list
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * UI configurations for each item of the list
         */
        public Builder itemUIConfig(DisplayableListItemUIConfig itemUIConfig) {
            Utils.checkNotNull(itemUIConfig, "itemUIConfig");
            this.itemUIConfig = Optional.ofNullable(itemUIConfig);
            return this;
        }

        /**
         * UI configurations for each item of the list
         */
        public Builder itemUIConfig(Optional<? extends DisplayableListItemUIConfig> itemUIConfig) {
            Utils.checkNotNull(itemUIConfig, "itemUIConfig");
            this.itemUIConfig = itemUIConfig;
            return this;
        }
        
        public DisplayableListConfig build() {
            return new DisplayableListConfig(
                format,
                title,
                enabled,
                audienceFilters,
                itemUIConfig);
        }
    }
}
