/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AnswerMutableProperties {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question")
    private Optional<String> question;

    /**
     * Additional ways of phrasing this question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("questionVariations")
    private Optional<? extends List<String>> questionVariations;

    /**
     * The plain text answer to the question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodyText")
    private Optional<String> bodyText;

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boardId")
    private Optional<Long> boardId;

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * A list of user roles for the answer added by the owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedRoles")
    private Optional<? extends List<UserRoleSpecification>> addedRoles;

    /**
     * A list of user roles for the answer removed by the owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedRoles")
    private Optional<? extends List<UserRoleSpecification>> removedRoles;

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocumentSpec")
    private Optional<? extends DocumentSpecUnion> sourceDocumentSpec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private Optional<? extends AnswerMutablePropertiesSourceType> sourceType;

    @JsonCreator
    public AnswerMutableProperties(
            @JsonProperty("question") Optional<String> question,
            @JsonProperty("questionVariations") Optional<? extends List<String>> questionVariations,
            @JsonProperty("bodyText") Optional<String> bodyText,
            @JsonProperty("boardId") Optional<Long> boardId,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("addedRoles") Optional<? extends List<UserRoleSpecification>> addedRoles,
            @JsonProperty("removedRoles") Optional<? extends List<UserRoleSpecification>> removedRoles,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles,
            @JsonProperty("sourceDocumentSpec") Optional<? extends DocumentSpecUnion> sourceDocumentSpec,
            @JsonProperty("sourceType") Optional<? extends AnswerMutablePropertiesSourceType> sourceType) {
        Utils.checkNotNull(question, "question");
        Utils.checkNotNull(questionVariations, "questionVariations");
        Utils.checkNotNull(bodyText, "bodyText");
        Utils.checkNotNull(boardId, "boardId");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(addedRoles, "addedRoles");
        Utils.checkNotNull(removedRoles, "removedRoles");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        Utils.checkNotNull(sourceType, "sourceType");
        this.question = question;
        this.questionVariations = questionVariations;
        this.bodyText = bodyText;
        this.boardId = boardId;
        this.audienceFilters = audienceFilters;
        this.addedRoles = addedRoles;
        this.removedRoles = removedRoles;
        this.roles = roles;
        this.sourceDocumentSpec = sourceDocumentSpec;
        this.sourceType = sourceType;
    }
    
    public AnswerMutableProperties() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> question() {
        return question;
    }

    /**
     * Additional ways of phrasing this question.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> questionVariations() {
        return (Optional<List<String>>) questionVariations;
    }

    /**
     * The plain text answer to the question.
     */
    @JsonIgnore
    public Optional<String> bodyText() {
        return bodyText;
    }

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer.
     */
    @JsonIgnore
    public Optional<Long> boardId() {
        return boardId;
    }

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * A list of user roles for the answer added by the owner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> addedRoles() {
        return (Optional<List<UserRoleSpecification>>) addedRoles;
    }

    /**
     * A list of user roles for the answer removed by the owner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> removedRoles() {
        return (Optional<List<UserRoleSpecification>>) removedRoles;
    }

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSpecUnion> sourceDocumentSpec() {
        return (Optional<DocumentSpecUnion>) sourceDocumentSpec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnswerMutablePropertiesSourceType> sourceType() {
        return (Optional<AnswerMutablePropertiesSourceType>) sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AnswerMutableProperties withQuestion(String question) {
        Utils.checkNotNull(question, "question");
        this.question = Optional.ofNullable(question);
        return this;
    }

    public AnswerMutableProperties withQuestion(Optional<String> question) {
        Utils.checkNotNull(question, "question");
        this.question = question;
        return this;
    }

    /**
     * Additional ways of phrasing this question.
     */
    public AnswerMutableProperties withQuestionVariations(List<String> questionVariations) {
        Utils.checkNotNull(questionVariations, "questionVariations");
        this.questionVariations = Optional.ofNullable(questionVariations);
        return this;
    }

    /**
     * Additional ways of phrasing this question.
     */
    public AnswerMutableProperties withQuestionVariations(Optional<? extends List<String>> questionVariations) {
        Utils.checkNotNull(questionVariations, "questionVariations");
        this.questionVariations = questionVariations;
        return this;
    }

    /**
     * The plain text answer to the question.
     */
    public AnswerMutableProperties withBodyText(String bodyText) {
        Utils.checkNotNull(bodyText, "bodyText");
        this.bodyText = Optional.ofNullable(bodyText);
        return this;
    }

    /**
     * The plain text answer to the question.
     */
    public AnswerMutableProperties withBodyText(Optional<String> bodyText) {
        Utils.checkNotNull(bodyText, "bodyText");
        this.bodyText = bodyText;
        return this;
    }

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer.
     */
    public AnswerMutableProperties withBoardId(long boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = Optional.ofNullable(boardId);
        return this;
    }

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer.
     */
    public AnswerMutableProperties withBoardId(Optional<Long> boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = boardId;
        return this;
    }

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    public AnswerMutableProperties withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    public AnswerMutableProperties withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * A list of user roles for the answer added by the owner.
     */
    public AnswerMutableProperties withAddedRoles(List<UserRoleSpecification> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = Optional.ofNullable(addedRoles);
        return this;
    }

    /**
     * A list of user roles for the answer added by the owner.
     */
    public AnswerMutableProperties withAddedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = addedRoles;
        return this;
    }

    /**
     * A list of user roles for the answer removed by the owner.
     */
    public AnswerMutableProperties withRemovedRoles(List<UserRoleSpecification> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = Optional.ofNullable(removedRoles);
        return this;
    }

    /**
     * A list of user roles for the answer removed by the owner.
     */
    public AnswerMutableProperties withRemovedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = removedRoles;
        return this;
    }

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    public AnswerMutableProperties withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    public AnswerMutableProperties withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public AnswerMutableProperties withSourceDocumentSpec(DocumentSpecUnion sourceDocumentSpec) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        this.sourceDocumentSpec = Optional.ofNullable(sourceDocumentSpec);
        return this;
    }

    public AnswerMutableProperties withSourceDocumentSpec(Optional<? extends DocumentSpecUnion> sourceDocumentSpec) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        this.sourceDocumentSpec = sourceDocumentSpec;
        return this;
    }

    public AnswerMutableProperties withSourceType(AnswerMutablePropertiesSourceType sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = Optional.ofNullable(sourceType);
        return this;
    }

    public AnswerMutableProperties withSourceType(Optional<? extends AnswerMutablePropertiesSourceType> sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnswerMutableProperties other = (AnswerMutableProperties) o;
        return 
            Objects.deepEquals(this.question, other.question) &&
            Objects.deepEquals(this.questionVariations, other.questionVariations) &&
            Objects.deepEquals(this.bodyText, other.bodyText) &&
            Objects.deepEquals(this.boardId, other.boardId) &&
            Objects.deepEquals(this.audienceFilters, other.audienceFilters) &&
            Objects.deepEquals(this.addedRoles, other.addedRoles) &&
            Objects.deepEquals(this.removedRoles, other.removedRoles) &&
            Objects.deepEquals(this.roles, other.roles) &&
            Objects.deepEquals(this.sourceDocumentSpec, other.sourceDocumentSpec) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            question,
            questionVariations,
            bodyText,
            boardId,
            audienceFilters,
            addedRoles,
            removedRoles,
            roles,
            sourceDocumentSpec,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnswerMutableProperties.class,
                "question", question,
                "questionVariations", questionVariations,
                "bodyText", bodyText,
                "boardId", boardId,
                "audienceFilters", audienceFilters,
                "addedRoles", addedRoles,
                "removedRoles", removedRoles,
                "roles", roles,
                "sourceDocumentSpec", sourceDocumentSpec,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<String> question = Optional.empty();
 
        private Optional<? extends List<String>> questionVariations = Optional.empty();
 
        private Optional<String> bodyText = Optional.empty();
 
        private Optional<Long> boardId = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> addedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> removedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
 
        private Optional<? extends DocumentSpecUnion> sourceDocumentSpec = Optional.empty();
 
        private Optional<? extends AnswerMutablePropertiesSourceType> sourceType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder question(String question) {
            Utils.checkNotNull(question, "question");
            this.question = Optional.ofNullable(question);
            return this;
        }

        public Builder question(Optional<String> question) {
            Utils.checkNotNull(question, "question");
            this.question = question;
            return this;
        }

        /**
         * Additional ways of phrasing this question.
         */
        public Builder questionVariations(List<String> questionVariations) {
            Utils.checkNotNull(questionVariations, "questionVariations");
            this.questionVariations = Optional.ofNullable(questionVariations);
            return this;
        }

        /**
         * Additional ways of phrasing this question.
         */
        public Builder questionVariations(Optional<? extends List<String>> questionVariations) {
            Utils.checkNotNull(questionVariations, "questionVariations");
            this.questionVariations = questionVariations;
            return this;
        }

        /**
         * The plain text answer to the question.
         */
        public Builder bodyText(String bodyText) {
            Utils.checkNotNull(bodyText, "bodyText");
            this.bodyText = Optional.ofNullable(bodyText);
            return this;
        }

        /**
         * The plain text answer to the question.
         */
        public Builder bodyText(Optional<String> bodyText) {
            Utils.checkNotNull(bodyText, "bodyText");
            this.bodyText = bodyText;
            return this;
        }

        /**
         * The parent board ID of this Answer, or 0 if it's a floating Answer.
         */
        public Builder boardId(long boardId) {
            Utils.checkNotNull(boardId, "boardId");
            this.boardId = Optional.ofNullable(boardId);
            return this;
        }

        /**
         * The parent board ID of this Answer, or 0 if it's a floating Answer.
         */
        public Builder boardId(Optional<Long> boardId) {
            Utils.checkNotNull(boardId, "boardId");
            this.boardId = boardId;
            return this;
        }

        /**
         * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * A list of user roles for the answer added by the owner.
         */
        public Builder addedRoles(List<UserRoleSpecification> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = Optional.ofNullable(addedRoles);
            return this;
        }

        /**
         * A list of user roles for the answer added by the owner.
         */
        public Builder addedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = addedRoles;
            return this;
        }

        /**
         * A list of user roles for the answer removed by the owner.
         */
        public Builder removedRoles(List<UserRoleSpecification> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = Optional.ofNullable(removedRoles);
            return this;
        }

        /**
         * A list of user roles for the answer removed by the owner.
         */
        public Builder removedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = removedRoles;
            return this;
        }

        /**
         * A list of roles for this answer explicitly granted by an owner, editor, or admin.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of roles for this answer explicitly granted by an owner, editor, or admin.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }

        public Builder sourceDocumentSpec(DocumentSpecUnion sourceDocumentSpec) {
            Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
            this.sourceDocumentSpec = Optional.ofNullable(sourceDocumentSpec);
            return this;
        }

        public Builder sourceDocumentSpec(Optional<? extends DocumentSpecUnion> sourceDocumentSpec) {
            Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
            this.sourceDocumentSpec = sourceDocumentSpec;
            return this;
        }

        public Builder sourceType(AnswerMutablePropertiesSourceType sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = Optional.ofNullable(sourceType);
            return this;
        }

        public Builder sourceType(Optional<? extends AnswerMutablePropertiesSourceType> sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }
        
        public AnswerMutableProperties build() {
            return new AnswerMutableProperties(
                question,
                questionVariations,
                bodyText,
                boardId,
                audienceFilters,
                addedRoles,
                removedRoles,
                roles,
                sourceDocumentSpec,
                sourceType);
        }
    }
}
