/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CreateAuthTokenResponse {

    /**
     * An authentication token that can be passed to any endpoint via Bearer Authentication
     */
    @JsonProperty("token")
    private String token;

    /**
     * Unix timestamp for when this token expires (in seconds since epoch UTC).
     */
    @JsonProperty("expirationTime")
    private long expirationTime;

    @JsonCreator
    public CreateAuthTokenResponse(
            @JsonProperty("token") String token,
            @JsonProperty("expirationTime") long expirationTime) {
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(expirationTime, "expirationTime");
        this.token = token;
        this.expirationTime = expirationTime;
    }

    /**
     * An authentication token that can be passed to any endpoint via Bearer Authentication
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    /**
     * Unix timestamp for when this token expires (in seconds since epoch UTC).
     */
    @JsonIgnore
    public long expirationTime() {
        return expirationTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An authentication token that can be passed to any endpoint via Bearer Authentication
     */
    public CreateAuthTokenResponse withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * Unix timestamp for when this token expires (in seconds since epoch UTC).
     */
    public CreateAuthTokenResponse withExpirationTime(long expirationTime) {
        Utils.checkNotNull(expirationTime, "expirationTime");
        this.expirationTime = expirationTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAuthTokenResponse other = (CreateAuthTokenResponse) o;
        return 
            Objects.deepEquals(this.token, other.token) &&
            Objects.deepEquals(this.expirationTime, other.expirationTime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            token,
            expirationTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateAuthTokenResponse.class,
                "token", token,
                "expirationTime", expirationTime);
    }
    
    public final static class Builder {
 
        private String token;
 
        private Long expirationTime;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An authentication token that can be passed to any endpoint via Bearer Authentication
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        /**
         * Unix timestamp for when this token expires (in seconds since epoch UTC).
         */
        public Builder expirationTime(long expirationTime) {
            Utils.checkNotNull(expirationTime, "expirationTime");
            this.expirationTime = expirationTime;
            return this;
        }
        
        public CreateAuthTokenResponse build() {
            return new CreateAuthTokenResponse(
                token,
                expirationTime);
        }
    }
}
