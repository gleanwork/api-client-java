/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetCollectionResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends Collection> collection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootCollection")
    private Optional<? extends Collection> rootCollection;

    /**
     * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends CollectionError3> error;

    @JsonCreator
    public GetCollectionResponse(
            @JsonProperty("collection") Optional<? extends Collection> collection,
            @JsonProperty("rootCollection") Optional<? extends Collection> rootCollection,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("error") Optional<? extends CollectionError3> error) {
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(rootCollection, "rootCollection");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(error, "error");
        this.collection = collection;
        this.rootCollection = rootCollection;
        this.trackingToken = trackingToken;
        this.error = error;
    }
    
    public GetCollectionResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> collection() {
        return (Optional<Collection>) collection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> rootCollection() {
        return (Optional<Collection>) rootCollection;
    }

    /**
     * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectionError3> error() {
        return (Optional<CollectionError3>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetCollectionResponse withCollection(Collection collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public GetCollectionResponse withCollection(Optional<? extends Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public GetCollectionResponse withRootCollection(Collection rootCollection) {
        Utils.checkNotNull(rootCollection, "rootCollection");
        this.rootCollection = Optional.ofNullable(rootCollection);
        return this;
    }

    public GetCollectionResponse withRootCollection(Optional<? extends Collection> rootCollection) {
        Utils.checkNotNull(rootCollection, "rootCollection");
        this.rootCollection = rootCollection;
        return this;
    }

    /**
     * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
     */
    public GetCollectionResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
     */
    public GetCollectionResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public GetCollectionResponse withError(CollectionError3 error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public GetCollectionResponse withError(Optional<? extends CollectionError3> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCollectionResponse other = (GetCollectionResponse) o;
        return 
            Objects.deepEquals(this.collection, other.collection) &&
            Objects.deepEquals(this.rootCollection, other.rootCollection) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            collection,
            rootCollection,
            trackingToken,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCollectionResponse.class,
                "collection", collection,
                "rootCollection", rootCollection,
                "trackingToken", trackingToken,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<? extends Collection> collection = Optional.empty();
 
        private Optional<? extends Collection> rootCollection = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends CollectionError3> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder collection(Collection collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder rootCollection(Collection rootCollection) {
            Utils.checkNotNull(rootCollection, "rootCollection");
            this.rootCollection = Optional.ofNullable(rootCollection);
            return this;
        }

        public Builder rootCollection(Optional<? extends Collection> rootCollection) {
            Utils.checkNotNull(rootCollection, "rootCollection");
            this.rootCollection = rootCollection;
            return this;
        }

        /**
         * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder error(CollectionError3 error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends CollectionError3> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public GetCollectionResponse build() {
            return new GetCollectionResponse(
                collection,
                rootCollection,
                trackingToken,
                error);
        }
    }
}
