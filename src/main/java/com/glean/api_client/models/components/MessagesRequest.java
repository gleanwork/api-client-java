/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class MessagesRequest {

    /**
     * Type of the id in the incoming request.
     */
    @JsonProperty("idType")
    private IdType idType;

    /**
     * ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Id for the for the workspace in case of multiple workspaces.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspaceId")
    private Optional<String> workspaceId;

    /**
     * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    private Optional<? extends Direction> direction;

    /**
     * Timestamp in millis of the reference message. Only applicable when using a message_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestampMillis")
    private Optional<Long> timestampMillis;

    /**
     * Whether to include root message in response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeRootMessage")
    private Optional<Boolean> includeRootMessage;

    /**
     * The type of the data source. Missing field defaults to SLACK.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<? extends Datasource> datasource;

    /**
     * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstanceDisplayName")
    private Optional<String> datasourceInstanceDisplayName;

    @JsonCreator
    public MessagesRequest(
            @JsonProperty("idType") IdType idType,
            @JsonProperty("id") String id,
            @JsonProperty("workspaceId") Optional<String> workspaceId,
            @JsonProperty("direction") Optional<? extends Direction> direction,
            @JsonProperty("timestampMillis") Optional<Long> timestampMillis,
            @JsonProperty("includeRootMessage") Optional<Boolean> includeRootMessage,
            @JsonProperty("datasource") Optional<? extends Datasource> datasource,
            @JsonProperty("datasourceInstanceDisplayName") Optional<String> datasourceInstanceDisplayName) {
        Utils.checkNotNull(idType, "idType");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(direction, "direction");
        Utils.checkNotNull(timestampMillis, "timestampMillis");
        Utils.checkNotNull(includeRootMessage, "includeRootMessage");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(datasourceInstanceDisplayName, "datasourceInstanceDisplayName");
        this.idType = idType;
        this.id = id;
        this.workspaceId = workspaceId;
        this.direction = direction;
        this.timestampMillis = timestampMillis;
        this.includeRootMessage = includeRootMessage;
        this.datasource = datasource;
        this.datasourceInstanceDisplayName = datasourceInstanceDisplayName;
    }
    
    public MessagesRequest(
            IdType idType,
            String id) {
        this(idType, id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Type of the id in the incoming request.
     */
    @JsonIgnore
    public IdType idType() {
        return idType;
    }

    /**
     * ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Id for the for the workspace in case of multiple workspaces.
     */
    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    /**
     * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Direction> direction() {
        return (Optional<Direction>) direction;
    }

    /**
     * Timestamp in millis of the reference message. Only applicable when using a message_id.
     */
    @JsonIgnore
    public Optional<Long> timestampMillis() {
        return timestampMillis;
    }

    /**
     * Whether to include root message in response.
     */
    @JsonIgnore
    public Optional<Boolean> includeRootMessage() {
        return includeRootMessage;
    }

    /**
     * The type of the data source. Missing field defaults to SLACK.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Datasource> datasource() {
        return (Optional<Datasource>) datasource;
    }

    /**
     * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
     */
    @JsonIgnore
    public Optional<String> datasourceInstanceDisplayName() {
        return datasourceInstanceDisplayName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Type of the id in the incoming request.
     */
    public MessagesRequest withIdType(IdType idType) {
        Utils.checkNotNull(idType, "idType");
        this.idType = idType;
        return this;
    }

    /**
     * ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
     */
    public MessagesRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Id for the for the workspace in case of multiple workspaces.
     */
    public MessagesRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }

    /**
     * Id for the for the workspace in case of multiple workspaces.
     */
    public MessagesRequest withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
     */
    public MessagesRequest withDirection(Direction direction) {
        Utils.checkNotNull(direction, "direction");
        this.direction = Optional.ofNullable(direction);
        return this;
    }

    /**
     * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
     */
    public MessagesRequest withDirection(Optional<? extends Direction> direction) {
        Utils.checkNotNull(direction, "direction");
        this.direction = direction;
        return this;
    }

    /**
     * Timestamp in millis of the reference message. Only applicable when using a message_id.
     */
    public MessagesRequest withTimestampMillis(long timestampMillis) {
        Utils.checkNotNull(timestampMillis, "timestampMillis");
        this.timestampMillis = Optional.ofNullable(timestampMillis);
        return this;
    }

    /**
     * Timestamp in millis of the reference message. Only applicable when using a message_id.
     */
    public MessagesRequest withTimestampMillis(Optional<Long> timestampMillis) {
        Utils.checkNotNull(timestampMillis, "timestampMillis");
        this.timestampMillis = timestampMillis;
        return this;
    }

    /**
     * Whether to include root message in response.
     */
    public MessagesRequest withIncludeRootMessage(boolean includeRootMessage) {
        Utils.checkNotNull(includeRootMessage, "includeRootMessage");
        this.includeRootMessage = Optional.ofNullable(includeRootMessage);
        return this;
    }

    /**
     * Whether to include root message in response.
     */
    public MessagesRequest withIncludeRootMessage(Optional<Boolean> includeRootMessage) {
        Utils.checkNotNull(includeRootMessage, "includeRootMessage");
        this.includeRootMessage = includeRootMessage;
        return this;
    }

    /**
     * The type of the data source. Missing field defaults to SLACK.
     */
    public MessagesRequest withDatasource(Datasource datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The type of the data source. Missing field defaults to SLACK.
     */
    public MessagesRequest withDatasource(Optional<? extends Datasource> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
     */
    public MessagesRequest withDatasourceInstanceDisplayName(String datasourceInstanceDisplayName) {
        Utils.checkNotNull(datasourceInstanceDisplayName, "datasourceInstanceDisplayName");
        this.datasourceInstanceDisplayName = Optional.ofNullable(datasourceInstanceDisplayName);
        return this;
    }

    /**
     * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
     */
    public MessagesRequest withDatasourceInstanceDisplayName(Optional<String> datasourceInstanceDisplayName) {
        Utils.checkNotNull(datasourceInstanceDisplayName, "datasourceInstanceDisplayName");
        this.datasourceInstanceDisplayName = datasourceInstanceDisplayName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessagesRequest other = (MessagesRequest) o;
        return 
            Objects.deepEquals(this.idType, other.idType) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId) &&
            Objects.deepEquals(this.direction, other.direction) &&
            Objects.deepEquals(this.timestampMillis, other.timestampMillis) &&
            Objects.deepEquals(this.includeRootMessage, other.includeRootMessage) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.datasourceInstanceDisplayName, other.datasourceInstanceDisplayName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            idType,
            id,
            workspaceId,
            direction,
            timestampMillis,
            includeRootMessage,
            datasource,
            datasourceInstanceDisplayName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessagesRequest.class,
                "idType", idType,
                "id", id,
                "workspaceId", workspaceId,
                "direction", direction,
                "timestampMillis", timestampMillis,
                "includeRootMessage", includeRootMessage,
                "datasource", datasource,
                "datasourceInstanceDisplayName", datasourceInstanceDisplayName);
    }
    
    public final static class Builder {
 
        private IdType idType;
 
        private String id;
 
        private Optional<String> workspaceId = Optional.empty();
 
        private Optional<? extends Direction> direction = Optional.empty();
 
        private Optional<Long> timestampMillis = Optional.empty();
 
        private Optional<Boolean> includeRootMessage = Optional.empty();
 
        private Optional<? extends Datasource> datasource = Optional.empty();
 
        private Optional<String> datasourceInstanceDisplayName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of the id in the incoming request.
         */
        public Builder idType(IdType idType) {
            Utils.checkNotNull(idType, "idType");
            this.idType = idType;
            return this;
        }

        /**
         * ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Id for the for the workspace in case of multiple workspaces.
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        /**
         * Id for the for the workspace in case of multiple workspaces.
         */
        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }

        /**
         * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
         */
        public Builder direction(Direction direction) {
            Utils.checkNotNull(direction, "direction");
            this.direction = Optional.ofNullable(direction);
            return this;
        }

        /**
         * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
         */
        public Builder direction(Optional<? extends Direction> direction) {
            Utils.checkNotNull(direction, "direction");
            this.direction = direction;
            return this;
        }

        /**
         * Timestamp in millis of the reference message. Only applicable when using a message_id.
         */
        public Builder timestampMillis(long timestampMillis) {
            Utils.checkNotNull(timestampMillis, "timestampMillis");
            this.timestampMillis = Optional.ofNullable(timestampMillis);
            return this;
        }

        /**
         * Timestamp in millis of the reference message. Only applicable when using a message_id.
         */
        public Builder timestampMillis(Optional<Long> timestampMillis) {
            Utils.checkNotNull(timestampMillis, "timestampMillis");
            this.timestampMillis = timestampMillis;
            return this;
        }

        /**
         * Whether to include root message in response.
         */
        public Builder includeRootMessage(boolean includeRootMessage) {
            Utils.checkNotNull(includeRootMessage, "includeRootMessage");
            this.includeRootMessage = Optional.ofNullable(includeRootMessage);
            return this;
        }

        /**
         * Whether to include root message in response.
         */
        public Builder includeRootMessage(Optional<Boolean> includeRootMessage) {
            Utils.checkNotNull(includeRootMessage, "includeRootMessage");
            this.includeRootMessage = includeRootMessage;
            return this;
        }

        /**
         * The type of the data source. Missing field defaults to SLACK.
         */
        public Builder datasource(Datasource datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The type of the data source. Missing field defaults to SLACK.
         */
        public Builder datasource(Optional<? extends Datasource> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
         */
        public Builder datasourceInstanceDisplayName(String datasourceInstanceDisplayName) {
            Utils.checkNotNull(datasourceInstanceDisplayName, "datasourceInstanceDisplayName");
            this.datasourceInstanceDisplayName = Optional.ofNullable(datasourceInstanceDisplayName);
            return this;
        }

        /**
         * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
         */
        public Builder datasourceInstanceDisplayName(Optional<String> datasourceInstanceDisplayName) {
            Utils.checkNotNull(datasourceInstanceDisplayName, "datasourceInstanceDisplayName");
            this.datasourceInstanceDisplayName = datasourceInstanceDisplayName;
            return this;
        }
        
        public MessagesRequest build() {
            return new MessagesRequest(
                idType,
                id,
                workspaceId,
                direction,
                timestampMillis,
                includeRootMessage,
                datasource,
                datasourceInstanceDisplayName);
        }
    }
}
