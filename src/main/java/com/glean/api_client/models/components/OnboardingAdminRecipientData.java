/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * OnboardingAdminRecipientData
 * 
 * <p>metadata needed to construct an onboarding invitation email for one recipient
 */
public class OnboardingAdminRecipientData {

    /**
     * email address of the intended recipient
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipientEmail")
    private Optional<String> recipientEmail;

    /**
     * display name of the role that has been assigned to the recipient
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roleDisplayName")
    private Optional<String> roleDisplayName;

    @JsonCreator
    public OnboardingAdminRecipientData(
            @JsonProperty("recipientEmail") Optional<String> recipientEmail,
            @JsonProperty("roleDisplayName") Optional<String> roleDisplayName) {
        Utils.checkNotNull(recipientEmail, "recipientEmail");
        Utils.checkNotNull(roleDisplayName, "roleDisplayName");
        this.recipientEmail = recipientEmail;
        this.roleDisplayName = roleDisplayName;
    }
    
    public OnboardingAdminRecipientData() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * email address of the intended recipient
     */
    @JsonIgnore
    public Optional<String> recipientEmail() {
        return recipientEmail;
    }

    /**
     * display name of the role that has been assigned to the recipient
     */
    @JsonIgnore
    public Optional<String> roleDisplayName() {
        return roleDisplayName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * email address of the intended recipient
     */
    public OnboardingAdminRecipientData withRecipientEmail(String recipientEmail) {
        Utils.checkNotNull(recipientEmail, "recipientEmail");
        this.recipientEmail = Optional.ofNullable(recipientEmail);
        return this;
    }

    /**
     * email address of the intended recipient
     */
    public OnboardingAdminRecipientData withRecipientEmail(Optional<String> recipientEmail) {
        Utils.checkNotNull(recipientEmail, "recipientEmail");
        this.recipientEmail = recipientEmail;
        return this;
    }

    /**
     * display name of the role that has been assigned to the recipient
     */
    public OnboardingAdminRecipientData withRoleDisplayName(String roleDisplayName) {
        Utils.checkNotNull(roleDisplayName, "roleDisplayName");
        this.roleDisplayName = Optional.ofNullable(roleDisplayName);
        return this;
    }

    /**
     * display name of the role that has been assigned to the recipient
     */
    public OnboardingAdminRecipientData withRoleDisplayName(Optional<String> roleDisplayName) {
        Utils.checkNotNull(roleDisplayName, "roleDisplayName");
        this.roleDisplayName = roleDisplayName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OnboardingAdminRecipientData other = (OnboardingAdminRecipientData) o;
        return 
            Objects.deepEquals(this.recipientEmail, other.recipientEmail) &&
            Objects.deepEquals(this.roleDisplayName, other.roleDisplayName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            recipientEmail,
            roleDisplayName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OnboardingAdminRecipientData.class,
                "recipientEmail", recipientEmail,
                "roleDisplayName", roleDisplayName);
    }
    
    public final static class Builder {
 
        private Optional<String> recipientEmail = Optional.empty();
 
        private Optional<String> roleDisplayName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * email address of the intended recipient
         */
        public Builder recipientEmail(String recipientEmail) {
            Utils.checkNotNull(recipientEmail, "recipientEmail");
            this.recipientEmail = Optional.ofNullable(recipientEmail);
            return this;
        }

        /**
         * email address of the intended recipient
         */
        public Builder recipientEmail(Optional<String> recipientEmail) {
            Utils.checkNotNull(recipientEmail, "recipientEmail");
            this.recipientEmail = recipientEmail;
            return this;
        }

        /**
         * display name of the role that has been assigned to the recipient
         */
        public Builder roleDisplayName(String roleDisplayName) {
            Utils.checkNotNull(roleDisplayName, "roleDisplayName");
            this.roleDisplayName = Optional.ofNullable(roleDisplayName);
            return this;
        }

        /**
         * display name of the role that has been assigned to the recipient
         */
        public Builder roleDisplayName(Optional<String> roleDisplayName) {
            Utils.checkNotNull(roleDisplayName, "roleDisplayName");
            this.roleDisplayName = roleDisplayName;
            return this;
        }
        
        public OnboardingAdminRecipientData build() {
            return new OnboardingAdminRecipientData(
                recipientEmail,
                roleDisplayName);
        }
    }
}
