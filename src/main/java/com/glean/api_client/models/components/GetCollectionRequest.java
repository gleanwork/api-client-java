/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetCollectionRequest {

    /**
     * The ID of the Collection to be retrieved.
     */
    @JsonProperty("id")
    private long id;

    /**
     * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withItems")
    private Optional<Boolean> withItems;

    /**
     * Whether or not to include the top level Collection in this Collection's hierarchy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withHierarchy")
    private Optional<Boolean> withHierarchy;

    /**
     * The datasource allowed in the Collection returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedDatasource")
    private Optional<String> allowedDatasource;

    @JsonCreator
    public GetCollectionRequest(
            @JsonProperty("id") long id,
            @JsonProperty("withItems") Optional<Boolean> withItems,
            @JsonProperty("withHierarchy") Optional<Boolean> withHierarchy,
            @JsonProperty("allowedDatasource") Optional<String> allowedDatasource) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(withItems, "withItems");
        Utils.checkNotNull(withHierarchy, "withHierarchy");
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.id = id;
        this.withItems = withItems;
        this.withHierarchy = withHierarchy;
        this.allowedDatasource = allowedDatasource;
    }
    
    public GetCollectionRequest(
            long id) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the Collection to be retrieved.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
     */
    @JsonIgnore
    public Optional<Boolean> withItems() {
        return withItems;
    }

    /**
     * Whether or not to include the top level Collection in this Collection's hierarchy.
     */
    @JsonIgnore
    public Optional<Boolean> withHierarchy() {
        return withHierarchy;
    }

    /**
     * The datasource allowed in the Collection returned.
     */
    @JsonIgnore
    public Optional<String> allowedDatasource() {
        return allowedDatasource;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the Collection to be retrieved.
     */
    public GetCollectionRequest withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
     */
    public GetCollectionRequest withWithItems(boolean withItems) {
        Utils.checkNotNull(withItems, "withItems");
        this.withItems = Optional.ofNullable(withItems);
        return this;
    }

    /**
     * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
     */
    public GetCollectionRequest withWithItems(Optional<Boolean> withItems) {
        Utils.checkNotNull(withItems, "withItems");
        this.withItems = withItems;
        return this;
    }

    /**
     * Whether or not to include the top level Collection in this Collection's hierarchy.
     */
    public GetCollectionRequest withWithHierarchy(boolean withHierarchy) {
        Utils.checkNotNull(withHierarchy, "withHierarchy");
        this.withHierarchy = Optional.ofNullable(withHierarchy);
        return this;
    }

    /**
     * Whether or not to include the top level Collection in this Collection's hierarchy.
     */
    public GetCollectionRequest withWithHierarchy(Optional<Boolean> withHierarchy) {
        Utils.checkNotNull(withHierarchy, "withHierarchy");
        this.withHierarchy = withHierarchy;
        return this;
    }

    /**
     * The datasource allowed in the Collection returned.
     */
    public GetCollectionRequest withAllowedDatasource(String allowedDatasource) {
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.allowedDatasource = Optional.ofNullable(allowedDatasource);
        return this;
    }

    /**
     * The datasource allowed in the Collection returned.
     */
    public GetCollectionRequest withAllowedDatasource(Optional<String> allowedDatasource) {
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.allowedDatasource = allowedDatasource;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCollectionRequest other = (GetCollectionRequest) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.withItems, other.withItems) &&
            Objects.deepEquals(this.withHierarchy, other.withHierarchy) &&
            Objects.deepEquals(this.allowedDatasource, other.allowedDatasource);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            withItems,
            withHierarchy,
            allowedDatasource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCollectionRequest.class,
                "id", id,
                "withItems", withItems,
                "withHierarchy", withHierarchy,
                "allowedDatasource", allowedDatasource);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private Optional<Boolean> withItems = Optional.empty();
 
        private Optional<Boolean> withHierarchy = Optional.empty();
 
        private Optional<String> allowedDatasource = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the Collection to be retrieved.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
         */
        public Builder withItems(boolean withItems) {
            Utils.checkNotNull(withItems, "withItems");
            this.withItems = Optional.ofNullable(withItems);
            return this;
        }

        /**
         * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
         */
        public Builder withItems(Optional<Boolean> withItems) {
            Utils.checkNotNull(withItems, "withItems");
            this.withItems = withItems;
            return this;
        }

        /**
         * Whether or not to include the top level Collection in this Collection's hierarchy.
         */
        public Builder withHierarchy(boolean withHierarchy) {
            Utils.checkNotNull(withHierarchy, "withHierarchy");
            this.withHierarchy = Optional.ofNullable(withHierarchy);
            return this;
        }

        /**
         * Whether or not to include the top level Collection in this Collection's hierarchy.
         */
        public Builder withHierarchy(Optional<Boolean> withHierarchy) {
            Utils.checkNotNull(withHierarchy, "withHierarchy");
            this.withHierarchy = withHierarchy;
            return this;
        }

        /**
         * The datasource allowed in the Collection returned.
         */
        public Builder allowedDatasource(String allowedDatasource) {
            Utils.checkNotNull(allowedDatasource, "allowedDatasource");
            this.allowedDatasource = Optional.ofNullable(allowedDatasource);
            return this;
        }

        /**
         * The datasource allowed in the Collection returned.
         */
        public Builder allowedDatasource(Optional<String> allowedDatasource) {
            Utils.checkNotNull(allowedDatasource, "allowedDatasource");
            this.allowedDatasource = allowedDatasource;
            return this;
        }
        
        public GetCollectionRequest build() {
            return new GetCollectionRequest(
                id,
                withItems,
                withHierarchy,
                allowedDatasource);
        }
    }
}
