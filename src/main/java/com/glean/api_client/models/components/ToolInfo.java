/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class ToolInfo {

    /**
     * The manifest for a tool that can be used to augment Glean Assistant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ToolMetadata> metadata;

    /**
     * Parameters supported by the tool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    private Optional<? extends Map<String, WriteActionParameter>> parameters;

    @JsonCreator
    public ToolInfo(
            @JsonProperty("metadata") Optional<? extends ToolMetadata> metadata,
            @JsonProperty("parameters") Optional<? extends Map<String, WriteActionParameter>> parameters) {
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(parameters, "parameters");
        this.metadata = metadata;
        this.parameters = parameters;
    }
    
    public ToolInfo() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The manifest for a tool that can be used to augment Glean Assistant.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ToolMetadata> metadata() {
        return (Optional<ToolMetadata>) metadata;
    }

    /**
     * Parameters supported by the tool.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, WriteActionParameter>> parameters() {
        return (Optional<Map<String, WriteActionParameter>>) parameters;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The manifest for a tool that can be used to augment Glean Assistant.
     */
    public ToolInfo withMetadata(ToolMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * The manifest for a tool that can be used to augment Glean Assistant.
     */
    public ToolInfo withMetadata(Optional<? extends ToolMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Parameters supported by the tool.
     */
    public ToolInfo withParameters(Map<String, WriteActionParameter> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = Optional.ofNullable(parameters);
        return this;
    }

    /**
     * Parameters supported by the tool.
     */
    public ToolInfo withParameters(Optional<? extends Map<String, WriteActionParameter>> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolInfo other = (ToolInfo) o;
        return 
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.parameters, other.parameters);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            metadata,
            parameters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ToolInfo.class,
                "metadata", metadata,
                "parameters", parameters);
    }
    
    public final static class Builder {
 
        private Optional<? extends ToolMetadata> metadata = Optional.empty();
 
        private Optional<? extends Map<String, WriteActionParameter>> parameters = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The manifest for a tool that can be used to augment Glean Assistant.
         */
        public Builder metadata(ToolMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * The manifest for a tool that can be used to augment Glean Assistant.
         */
        public Builder metadata(Optional<? extends ToolMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Parameters supported by the tool.
         */
        public Builder parameters(Map<String, WriteActionParameter> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        /**
         * Parameters supported by the tool.
         */
        public Builder parameters(Optional<? extends Map<String, WriteActionParameter>> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }
        
        public ToolInfo build() {
            return new ToolInfo(
                metadata,
                parameters);
        }
    }
}
