/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetDocumentsByFacetsResponse {

    /**
     * The document details, ordered by score.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    private Optional<? extends List<Document>> documents;

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasMoreResults")
    private Optional<Boolean> hasMoreResults;

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    @JsonCreator
    public GetDocumentsByFacetsResponse(
            @JsonProperty("documents") Optional<? extends List<Document>> documents,
            @JsonProperty("hasMoreResults") Optional<Boolean> hasMoreResults,
            @JsonProperty("cursor") Optional<String> cursor) {
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        Utils.checkNotNull(cursor, "cursor");
        this.documents = documents;
        this.hasMoreResults = hasMoreResults;
        this.cursor = cursor;
    }
    
    public GetDocumentsByFacetsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The document details, ordered by score.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Document>> documents() {
        return (Optional<List<Document>>) documents;
    }

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    @JsonIgnore
    public Optional<Boolean> hasMoreResults() {
        return hasMoreResults;
    }

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The document details, ordered by score.
     */
    public GetDocumentsByFacetsResponse withDocuments(List<Document> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    /**
     * The document details, ordered by score.
     */
    public GetDocumentsByFacetsResponse withDocuments(Optional<? extends List<Document>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    public GetDocumentsByFacetsResponse withHasMoreResults(boolean hasMoreResults) {
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.hasMoreResults = Optional.ofNullable(hasMoreResults);
        return this;
    }

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    public GetDocumentsByFacetsResponse withHasMoreResults(Optional<Boolean> hasMoreResults) {
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.hasMoreResults = hasMoreResults;
        return this;
    }

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    public GetDocumentsByFacetsResponse withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    public GetDocumentsByFacetsResponse withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentsByFacetsResponse other = (GetDocumentsByFacetsResponse) o;
        return 
            Objects.deepEquals(this.documents, other.documents) &&
            Objects.deepEquals(this.hasMoreResults, other.hasMoreResults) &&
            Objects.deepEquals(this.cursor, other.cursor);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            documents,
            hasMoreResults,
            cursor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentsByFacetsResponse.class,
                "documents", documents,
                "hasMoreResults", hasMoreResults,
                "cursor", cursor);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Document>> documents = Optional.empty();
 
        private Optional<Boolean> hasMoreResults = Optional.empty();
 
        private Optional<String> cursor = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The document details, ordered by score.
         */
        public Builder documents(List<Document> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * The document details, ordered by score.
         */
        public Builder documents(Optional<? extends List<Document>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        /**
         * Whether more results are available. Use cursor to retrieve them.
         */
        public Builder hasMoreResults(boolean hasMoreResults) {
            Utils.checkNotNull(hasMoreResults, "hasMoreResults");
            this.hasMoreResults = Optional.ofNullable(hasMoreResults);
            return this;
        }

        /**
         * Whether more results are available. Use cursor to retrieve them.
         */
        public Builder hasMoreResults(Optional<Boolean> hasMoreResults) {
            Utils.checkNotNull(hasMoreResults, "hasMoreResults");
            this.hasMoreResults = hasMoreResults;
            return this;
        }

        /**
         * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }
        
        public GetDocumentsByFacetsResponse build() {
            return new GetDocumentsByFacetsResponse(
                documents,
                hasMoreResults,
                cursor);
        }
    }
}
