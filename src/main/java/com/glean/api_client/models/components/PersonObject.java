/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class PersonObject {

    /**
     * The display name.
     */
    @JsonProperty("name")
    private String name;

    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    @JsonProperty("obfuscatedId")
    private String obfuscatedId;

    @JsonCreator
    public PersonObject(
            @JsonProperty("name") String name,
            @JsonProperty("obfuscatedId") String obfuscatedId) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(obfuscatedId, "obfuscatedId");
        this.name = name;
        this.obfuscatedId = obfuscatedId;
    }

    /**
     * The display name.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    @JsonIgnore
    public String obfuscatedId() {
        return obfuscatedId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The display name.
     */
    public PersonObject withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    public PersonObject withObfuscatedId(String obfuscatedId) {
        Utils.checkNotNull(obfuscatedId, "obfuscatedId");
        this.obfuscatedId = obfuscatedId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonObject other = (PersonObject) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.obfuscatedId, other.obfuscatedId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            obfuscatedId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PersonObject.class,
                "name", name,
                "obfuscatedId", obfuscatedId);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String obfuscatedId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The display name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * An opaque identifier that can be used to request metadata for a Person.
         */
        public Builder obfuscatedId(String obfuscatedId) {
            Utils.checkNotNull(obfuscatedId, "obfuscatedId");
            this.obfuscatedId = obfuscatedId;
            return this;
        }
        
        public PersonObject build() {
            return new PersonObject(
                name,
                obfuscatedId);
        }
    }
}
