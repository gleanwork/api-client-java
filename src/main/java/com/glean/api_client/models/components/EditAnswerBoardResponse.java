/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class EditAnswerBoardResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boardResult")
    private Optional<? extends AnswerBoardResult> boardResult;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends AnswerBoardError> error;

    @JsonCreator
    public EditAnswerBoardResponse(
            @JsonProperty("boardResult") Optional<? extends AnswerBoardResult> boardResult,
            @JsonProperty("error") Optional<? extends AnswerBoardError> error) {
        Utils.checkNotNull(boardResult, "boardResult");
        Utils.checkNotNull(error, "error");
        this.boardResult = boardResult;
        this.error = error;
    }
    
    public EditAnswerBoardResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnswerBoardResult> boardResult() {
        return (Optional<AnswerBoardResult>) boardResult;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnswerBoardError> error() {
        return (Optional<AnswerBoardError>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public EditAnswerBoardResponse withBoardResult(AnswerBoardResult boardResult) {
        Utils.checkNotNull(boardResult, "boardResult");
        this.boardResult = Optional.ofNullable(boardResult);
        return this;
    }

    public EditAnswerBoardResponse withBoardResult(Optional<? extends AnswerBoardResult> boardResult) {
        Utils.checkNotNull(boardResult, "boardResult");
        this.boardResult = boardResult;
        return this;
    }

    public EditAnswerBoardResponse withError(AnswerBoardError error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public EditAnswerBoardResponse withError(Optional<? extends AnswerBoardError> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditAnswerBoardResponse other = (EditAnswerBoardResponse) o;
        return 
            Objects.deepEquals(this.boardResult, other.boardResult) &&
            Objects.deepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            boardResult,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EditAnswerBoardResponse.class,
                "boardResult", boardResult,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<? extends AnswerBoardResult> boardResult = Optional.empty();
 
        private Optional<? extends AnswerBoardError> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder boardResult(AnswerBoardResult boardResult) {
            Utils.checkNotNull(boardResult, "boardResult");
            this.boardResult = Optional.ofNullable(boardResult);
            return this;
        }

        public Builder boardResult(Optional<? extends AnswerBoardResult> boardResult) {
            Utils.checkNotNull(boardResult, "boardResult");
            this.boardResult = boardResult;
            return this;
        }

        public Builder error(AnswerBoardError error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends AnswerBoardError> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public EditAnswerBoardResponse build() {
            return new EditAnswerBoardResponse(
                boardResult,
                error);
        }
    }
}
