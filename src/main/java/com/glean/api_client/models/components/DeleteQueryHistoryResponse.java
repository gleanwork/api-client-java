/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class DeleteQueryHistoryResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends DeleteQueryHistoryError> error;

    @JsonCreator
    public DeleteQueryHistoryResponse(
            @JsonProperty("error") Optional<? extends DeleteQueryHistoryError> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
    }
    
    public DeleteQueryHistoryResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeleteQueryHistoryError> error() {
        return (Optional<DeleteQueryHistoryError>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DeleteQueryHistoryResponse withError(DeleteQueryHistoryError error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public DeleteQueryHistoryResponse withError(Optional<? extends DeleteQueryHistoryError> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteQueryHistoryResponse other = (DeleteQueryHistoryResponse) o;
        return 
            Objects.deepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteQueryHistoryResponse.class,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<? extends DeleteQueryHistoryError> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder error(DeleteQueryHistoryError error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends DeleteQueryHistoryError> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public DeleteQueryHistoryResponse build() {
            return new DeleteQueryHistoryResponse(
                error);
        }
    }
}
