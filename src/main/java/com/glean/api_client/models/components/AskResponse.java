/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class AskResponse {

    /**
     * Whether or not the query was a question.
     */
    @JsonProperty("isQuestion")
    private boolean isQuestion;

    /**
     * The part of the query which was used as a question for search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question")
    private Optional<String> question;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchResponse")
    private Optional<? extends SearchResponse> searchResponse;

    /**
     * A single response from the /chat backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatResponse")
    private Optional<? extends ChatResponse> chatResponse;

    @JsonCreator
    public AskResponse(
            @JsonProperty("isQuestion") boolean isQuestion,
            @JsonProperty("question") Optional<String> question,
            @JsonProperty("searchResponse") Optional<? extends SearchResponse> searchResponse,
            @JsonProperty("chatResponse") Optional<? extends ChatResponse> chatResponse) {
        Utils.checkNotNull(isQuestion, "isQuestion");
        Utils.checkNotNull(question, "question");
        Utils.checkNotNull(searchResponse, "searchResponse");
        Utils.checkNotNull(chatResponse, "chatResponse");
        this.isQuestion = isQuestion;
        this.question = question;
        this.searchResponse = searchResponse;
        this.chatResponse = chatResponse;
    }
    
    public AskResponse(
            boolean isQuestion) {
        this(isQuestion, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether or not the query was a question.
     */
    @JsonIgnore
    public boolean isQuestion() {
        return isQuestion;
    }

    /**
     * The part of the query which was used as a question for search
     */
    @JsonIgnore
    public Optional<String> question() {
        return question;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchResponse> searchResponse() {
        return (Optional<SearchResponse>) searchResponse;
    }

    /**
     * A single response from the /chat backend.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatResponse> chatResponse() {
        return (Optional<ChatResponse>) chatResponse;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether or not the query was a question.
     */
    public AskResponse withIsQuestion(boolean isQuestion) {
        Utils.checkNotNull(isQuestion, "isQuestion");
        this.isQuestion = isQuestion;
        return this;
    }

    /**
     * The part of the query which was used as a question for search
     */
    public AskResponse withQuestion(String question) {
        Utils.checkNotNull(question, "question");
        this.question = Optional.ofNullable(question);
        return this;
    }

    /**
     * The part of the query which was used as a question for search
     */
    public AskResponse withQuestion(Optional<String> question) {
        Utils.checkNotNull(question, "question");
        this.question = question;
        return this;
    }

    public AskResponse withSearchResponse(SearchResponse searchResponse) {
        Utils.checkNotNull(searchResponse, "searchResponse");
        this.searchResponse = Optional.ofNullable(searchResponse);
        return this;
    }

    public AskResponse withSearchResponse(Optional<? extends SearchResponse> searchResponse) {
        Utils.checkNotNull(searchResponse, "searchResponse");
        this.searchResponse = searchResponse;
        return this;
    }

    /**
     * A single response from the /chat backend.
     */
    public AskResponse withChatResponse(ChatResponse chatResponse) {
        Utils.checkNotNull(chatResponse, "chatResponse");
        this.chatResponse = Optional.ofNullable(chatResponse);
        return this;
    }

    /**
     * A single response from the /chat backend.
     */
    public AskResponse withChatResponse(Optional<? extends ChatResponse> chatResponse) {
        Utils.checkNotNull(chatResponse, "chatResponse");
        this.chatResponse = chatResponse;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AskResponse other = (AskResponse) o;
        return 
            Objects.deepEquals(this.isQuestion, other.isQuestion) &&
            Objects.deepEquals(this.question, other.question) &&
            Objects.deepEquals(this.searchResponse, other.searchResponse) &&
            Objects.deepEquals(this.chatResponse, other.chatResponse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isQuestion,
            question,
            searchResponse,
            chatResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AskResponse.class,
                "isQuestion", isQuestion,
                "question", question,
                "searchResponse", searchResponse,
                "chatResponse", chatResponse);
    }
    
    public final static class Builder {
 
        private Boolean isQuestion;
 
        private Optional<String> question = Optional.empty();
 
        private Optional<? extends SearchResponse> searchResponse = Optional.empty();
 
        private Optional<? extends ChatResponse> chatResponse = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not the query was a question.
         */
        public Builder isQuestion(boolean isQuestion) {
            Utils.checkNotNull(isQuestion, "isQuestion");
            this.isQuestion = isQuestion;
            return this;
        }

        /**
         * The part of the query which was used as a question for search
         */
        public Builder question(String question) {
            Utils.checkNotNull(question, "question");
            this.question = Optional.ofNullable(question);
            return this;
        }

        /**
         * The part of the query which was used as a question for search
         */
        public Builder question(Optional<String> question) {
            Utils.checkNotNull(question, "question");
            this.question = question;
            return this;
        }

        public Builder searchResponse(SearchResponse searchResponse) {
            Utils.checkNotNull(searchResponse, "searchResponse");
            this.searchResponse = Optional.ofNullable(searchResponse);
            return this;
        }

        public Builder searchResponse(Optional<? extends SearchResponse> searchResponse) {
            Utils.checkNotNull(searchResponse, "searchResponse");
            this.searchResponse = searchResponse;
            return this;
        }

        /**
         * A single response from the /chat backend.
         */
        public Builder chatResponse(ChatResponse chatResponse) {
            Utils.checkNotNull(chatResponse, "chatResponse");
            this.chatResponse = Optional.ofNullable(chatResponse);
            return this;
        }

        /**
         * A single response from the /chat backend.
         */
        public Builder chatResponse(Optional<? extends ChatResponse> chatResponse) {
            Utils.checkNotNull(chatResponse, "chatResponse");
            this.chatResponse = chatResponse;
            return this;
        }
        
        public AskResponse build() {
            return new AskResponse(
                isQuestion,
                question,
                searchResponse,
                chatResponse);
        }
    }
}
