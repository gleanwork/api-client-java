/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ListAnswerBoardsRequest {

    /**
     * Whether to include the audience filters with the listed Answer Boards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withAudience")
    private Optional<Boolean> withAudience;

    /**
     * Whether to include the editor roles with the listed Answer Boards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withRoles")
    private Optional<Boolean> withRoles;

    @JsonCreator
    public ListAnswerBoardsRequest(
            @JsonProperty("withAudience") Optional<Boolean> withAudience,
            @JsonProperty("withRoles") Optional<Boolean> withRoles) {
        Utils.checkNotNull(withAudience, "withAudience");
        Utils.checkNotNull(withRoles, "withRoles");
        this.withAudience = withAudience;
        this.withRoles = withRoles;
    }
    
    public ListAnswerBoardsRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether to include the audience filters with the listed Answer Boards.
     */
    @JsonIgnore
    public Optional<Boolean> withAudience() {
        return withAudience;
    }

    /**
     * Whether to include the editor roles with the listed Answer Boards.
     */
    @JsonIgnore
    public Optional<Boolean> withRoles() {
        return withRoles;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether to include the audience filters with the listed Answer Boards.
     */
    public ListAnswerBoardsRequest withWithAudience(boolean withAudience) {
        Utils.checkNotNull(withAudience, "withAudience");
        this.withAudience = Optional.ofNullable(withAudience);
        return this;
    }

    /**
     * Whether to include the audience filters with the listed Answer Boards.
     */
    public ListAnswerBoardsRequest withWithAudience(Optional<Boolean> withAudience) {
        Utils.checkNotNull(withAudience, "withAudience");
        this.withAudience = withAudience;
        return this;
    }

    /**
     * Whether to include the editor roles with the listed Answer Boards.
     */
    public ListAnswerBoardsRequest withWithRoles(boolean withRoles) {
        Utils.checkNotNull(withRoles, "withRoles");
        this.withRoles = Optional.ofNullable(withRoles);
        return this;
    }

    /**
     * Whether to include the editor roles with the listed Answer Boards.
     */
    public ListAnswerBoardsRequest withWithRoles(Optional<Boolean> withRoles) {
        Utils.checkNotNull(withRoles, "withRoles");
        this.withRoles = withRoles;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAnswerBoardsRequest other = (ListAnswerBoardsRequest) o;
        return 
            Objects.deepEquals(this.withAudience, other.withAudience) &&
            Objects.deepEquals(this.withRoles, other.withRoles);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            withAudience,
            withRoles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAnswerBoardsRequest.class,
                "withAudience", withAudience,
                "withRoles", withRoles);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> withAudience = Optional.empty();
 
        private Optional<Boolean> withRoles = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to include the audience filters with the listed Answer Boards.
         */
        public Builder withAudience(boolean withAudience) {
            Utils.checkNotNull(withAudience, "withAudience");
            this.withAudience = Optional.ofNullable(withAudience);
            return this;
        }

        /**
         * Whether to include the audience filters with the listed Answer Boards.
         */
        public Builder withAudience(Optional<Boolean> withAudience) {
            Utils.checkNotNull(withAudience, "withAudience");
            this.withAudience = withAudience;
            return this;
        }

        /**
         * Whether to include the editor roles with the listed Answer Boards.
         */
        public Builder withRoles(boolean withRoles) {
            Utils.checkNotNull(withRoles, "withRoles");
            this.withRoles = Optional.ofNullable(withRoles);
            return this;
        }

        /**
         * Whether to include the editor roles with the listed Answer Boards.
         */
        public Builder withRoles(Optional<Boolean> withRoles) {
            Utils.checkNotNull(withRoles, "withRoles");
            this.withRoles = withRoles;
            return this;
        }
        
        public ListAnswerBoardsRequest build() {
            return new ListAnswerBoardsRequest(
                withAudience,
                withRoles);
        }
    }
}
