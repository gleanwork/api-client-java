/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SearchResponseMetadata {

    /**
     * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewrittenQuery")
    private Optional<String> rewrittenQuery;

    /**
     * The actual query used to perform search and return results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchedQuery")
    private Optional<String> searchedQuery;

    /**
     * The bolded ranges within the searched query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchedQueryRanges")
    private Optional<? extends List<TextRange>> searchedQueryRanges;

    /**
     * The query text sent by the client in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalQuery")
    private Optional<String> originalQuery;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("querySuggestion")
    private Optional<? extends QuerySuggestion> querySuggestion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalQuerySuggestions")
    private Optional<? extends QuerySuggestionList> additionalQuerySuggestions;

    /**
     * A list of terms that were negated when processing the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("negatedTerms")
    private Optional<? extends List<String>> negatedTerms;

    /**
     * A different query was performed than the one requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedQueryWasUsed")
    private Optional<Boolean> modifiedQueryWasUsed;

    /**
     * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalQueryHadNoResults")
    private Optional<Boolean> originalQueryHadNoResults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchWarning")
    private Optional<? extends SearchWarning> searchWarning;

    /**
     * Whether the query triggered expert detection results in the People tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggeredExpertDetection")
    private Optional<Boolean> triggeredExpertDetection;

    /**
     * Whether the query was modified to remove quotes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isNoQuotesSuggestion")
    private Optional<Boolean> isNoQuotesSuggestion;

    @JsonCreator
    public SearchResponseMetadata(
            @JsonProperty("rewrittenQuery") Optional<String> rewrittenQuery,
            @JsonProperty("searchedQuery") Optional<String> searchedQuery,
            @JsonProperty("searchedQueryRanges") Optional<? extends List<TextRange>> searchedQueryRanges,
            @JsonProperty("originalQuery") Optional<String> originalQuery,
            @JsonProperty("querySuggestion") Optional<? extends QuerySuggestion> querySuggestion,
            @JsonProperty("additionalQuerySuggestions") Optional<? extends QuerySuggestionList> additionalQuerySuggestions,
            @JsonProperty("negatedTerms") Optional<? extends List<String>> negatedTerms,
            @JsonProperty("modifiedQueryWasUsed") Optional<Boolean> modifiedQueryWasUsed,
            @JsonProperty("originalQueryHadNoResults") Optional<Boolean> originalQueryHadNoResults,
            @JsonProperty("searchWarning") Optional<? extends SearchWarning> searchWarning,
            @JsonProperty("triggeredExpertDetection") Optional<Boolean> triggeredExpertDetection,
            @JsonProperty("isNoQuotesSuggestion") Optional<Boolean> isNoQuotesSuggestion) {
        Utils.checkNotNull(rewrittenQuery, "rewrittenQuery");
        Utils.checkNotNull(searchedQuery, "searchedQuery");
        Utils.checkNotNull(searchedQueryRanges, "searchedQueryRanges");
        Utils.checkNotNull(originalQuery, "originalQuery");
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        Utils.checkNotNull(additionalQuerySuggestions, "additionalQuerySuggestions");
        Utils.checkNotNull(negatedTerms, "negatedTerms");
        Utils.checkNotNull(modifiedQueryWasUsed, "modifiedQueryWasUsed");
        Utils.checkNotNull(originalQueryHadNoResults, "originalQueryHadNoResults");
        Utils.checkNotNull(searchWarning, "searchWarning");
        Utils.checkNotNull(triggeredExpertDetection, "triggeredExpertDetection");
        Utils.checkNotNull(isNoQuotesSuggestion, "isNoQuotesSuggestion");
        this.rewrittenQuery = rewrittenQuery;
        this.searchedQuery = searchedQuery;
        this.searchedQueryRanges = searchedQueryRanges;
        this.originalQuery = originalQuery;
        this.querySuggestion = querySuggestion;
        this.additionalQuerySuggestions = additionalQuerySuggestions;
        this.negatedTerms = negatedTerms;
        this.modifiedQueryWasUsed = modifiedQueryWasUsed;
        this.originalQueryHadNoResults = originalQueryHadNoResults;
        this.searchWarning = searchWarning;
        this.triggeredExpertDetection = triggeredExpertDetection;
        this.isNoQuotesSuggestion = isNoQuotesSuggestion;
    }
    
    public SearchResponseMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
     */
    @JsonIgnore
    public Optional<String> rewrittenQuery() {
        return rewrittenQuery;
    }

    /**
     * The actual query used to perform search and return results.
     */
    @JsonIgnore
    public Optional<String> searchedQuery() {
        return searchedQuery;
    }

    /**
     * The bolded ranges within the searched query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> searchedQueryRanges() {
        return (Optional<List<TextRange>>) searchedQueryRanges;
    }

    /**
     * The query text sent by the client in the request.
     */
    @JsonIgnore
    public Optional<String> originalQuery() {
        return originalQuery;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuerySuggestion> querySuggestion() {
        return (Optional<QuerySuggestion>) querySuggestion;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuerySuggestionList> additionalQuerySuggestions() {
        return (Optional<QuerySuggestionList>) additionalQuerySuggestions;
    }

    /**
     * A list of terms that were negated when processing the query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> negatedTerms() {
        return (Optional<List<String>>) negatedTerms;
    }

    /**
     * A different query was performed than the one requested.
     */
    @JsonIgnore
    public Optional<Boolean> modifiedQueryWasUsed() {
        return modifiedQueryWasUsed;
    }

    /**
     * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
     */
    @JsonIgnore
    public Optional<Boolean> originalQueryHadNoResults() {
        return originalQueryHadNoResults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchWarning> searchWarning() {
        return (Optional<SearchWarning>) searchWarning;
    }

    /**
     * Whether the query triggered expert detection results in the People tab.
     */
    @JsonIgnore
    public Optional<Boolean> triggeredExpertDetection() {
        return triggeredExpertDetection;
    }

    /**
     * Whether the query was modified to remove quotes
     */
    @JsonIgnore
    public Optional<Boolean> isNoQuotesSuggestion() {
        return isNoQuotesSuggestion;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
     */
    public SearchResponseMetadata withRewrittenQuery(String rewrittenQuery) {
        Utils.checkNotNull(rewrittenQuery, "rewrittenQuery");
        this.rewrittenQuery = Optional.ofNullable(rewrittenQuery);
        return this;
    }

    /**
     * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
     */
    public SearchResponseMetadata withRewrittenQuery(Optional<String> rewrittenQuery) {
        Utils.checkNotNull(rewrittenQuery, "rewrittenQuery");
        this.rewrittenQuery = rewrittenQuery;
        return this;
    }

    /**
     * The actual query used to perform search and return results.
     */
    public SearchResponseMetadata withSearchedQuery(String searchedQuery) {
        Utils.checkNotNull(searchedQuery, "searchedQuery");
        this.searchedQuery = Optional.ofNullable(searchedQuery);
        return this;
    }

    /**
     * The actual query used to perform search and return results.
     */
    public SearchResponseMetadata withSearchedQuery(Optional<String> searchedQuery) {
        Utils.checkNotNull(searchedQuery, "searchedQuery");
        this.searchedQuery = searchedQuery;
        return this;
    }

    /**
     * The bolded ranges within the searched query.
     */
    public SearchResponseMetadata withSearchedQueryRanges(List<TextRange> searchedQueryRanges) {
        Utils.checkNotNull(searchedQueryRanges, "searchedQueryRanges");
        this.searchedQueryRanges = Optional.ofNullable(searchedQueryRanges);
        return this;
    }

    /**
     * The bolded ranges within the searched query.
     */
    public SearchResponseMetadata withSearchedQueryRanges(Optional<? extends List<TextRange>> searchedQueryRanges) {
        Utils.checkNotNull(searchedQueryRanges, "searchedQueryRanges");
        this.searchedQueryRanges = searchedQueryRanges;
        return this;
    }

    /**
     * The query text sent by the client in the request.
     */
    public SearchResponseMetadata withOriginalQuery(String originalQuery) {
        Utils.checkNotNull(originalQuery, "originalQuery");
        this.originalQuery = Optional.ofNullable(originalQuery);
        return this;
    }

    /**
     * The query text sent by the client in the request.
     */
    public SearchResponseMetadata withOriginalQuery(Optional<String> originalQuery) {
        Utils.checkNotNull(originalQuery, "originalQuery");
        this.originalQuery = originalQuery;
        return this;
    }

    public SearchResponseMetadata withQuerySuggestion(QuerySuggestion querySuggestion) {
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        this.querySuggestion = Optional.ofNullable(querySuggestion);
        return this;
    }

    public SearchResponseMetadata withQuerySuggestion(Optional<? extends QuerySuggestion> querySuggestion) {
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        this.querySuggestion = querySuggestion;
        return this;
    }

    public SearchResponseMetadata withAdditionalQuerySuggestions(QuerySuggestionList additionalQuerySuggestions) {
        Utils.checkNotNull(additionalQuerySuggestions, "additionalQuerySuggestions");
        this.additionalQuerySuggestions = Optional.ofNullable(additionalQuerySuggestions);
        return this;
    }

    public SearchResponseMetadata withAdditionalQuerySuggestions(Optional<? extends QuerySuggestionList> additionalQuerySuggestions) {
        Utils.checkNotNull(additionalQuerySuggestions, "additionalQuerySuggestions");
        this.additionalQuerySuggestions = additionalQuerySuggestions;
        return this;
    }

    /**
     * A list of terms that were negated when processing the query.
     */
    public SearchResponseMetadata withNegatedTerms(List<String> negatedTerms) {
        Utils.checkNotNull(negatedTerms, "negatedTerms");
        this.negatedTerms = Optional.ofNullable(negatedTerms);
        return this;
    }

    /**
     * A list of terms that were negated when processing the query.
     */
    public SearchResponseMetadata withNegatedTerms(Optional<? extends List<String>> negatedTerms) {
        Utils.checkNotNull(negatedTerms, "negatedTerms");
        this.negatedTerms = negatedTerms;
        return this;
    }

    /**
     * A different query was performed than the one requested.
     */
    public SearchResponseMetadata withModifiedQueryWasUsed(boolean modifiedQueryWasUsed) {
        Utils.checkNotNull(modifiedQueryWasUsed, "modifiedQueryWasUsed");
        this.modifiedQueryWasUsed = Optional.ofNullable(modifiedQueryWasUsed);
        return this;
    }

    /**
     * A different query was performed than the one requested.
     */
    public SearchResponseMetadata withModifiedQueryWasUsed(Optional<Boolean> modifiedQueryWasUsed) {
        Utils.checkNotNull(modifiedQueryWasUsed, "modifiedQueryWasUsed");
        this.modifiedQueryWasUsed = modifiedQueryWasUsed;
        return this;
    }

    /**
     * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
     */
    public SearchResponseMetadata withOriginalQueryHadNoResults(boolean originalQueryHadNoResults) {
        Utils.checkNotNull(originalQueryHadNoResults, "originalQueryHadNoResults");
        this.originalQueryHadNoResults = Optional.ofNullable(originalQueryHadNoResults);
        return this;
    }

    /**
     * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
     */
    public SearchResponseMetadata withOriginalQueryHadNoResults(Optional<Boolean> originalQueryHadNoResults) {
        Utils.checkNotNull(originalQueryHadNoResults, "originalQueryHadNoResults");
        this.originalQueryHadNoResults = originalQueryHadNoResults;
        return this;
    }

    public SearchResponseMetadata withSearchWarning(SearchWarning searchWarning) {
        Utils.checkNotNull(searchWarning, "searchWarning");
        this.searchWarning = Optional.ofNullable(searchWarning);
        return this;
    }

    public SearchResponseMetadata withSearchWarning(Optional<? extends SearchWarning> searchWarning) {
        Utils.checkNotNull(searchWarning, "searchWarning");
        this.searchWarning = searchWarning;
        return this;
    }

    /**
     * Whether the query triggered expert detection results in the People tab.
     */
    public SearchResponseMetadata withTriggeredExpertDetection(boolean triggeredExpertDetection) {
        Utils.checkNotNull(triggeredExpertDetection, "triggeredExpertDetection");
        this.triggeredExpertDetection = Optional.ofNullable(triggeredExpertDetection);
        return this;
    }

    /**
     * Whether the query triggered expert detection results in the People tab.
     */
    public SearchResponseMetadata withTriggeredExpertDetection(Optional<Boolean> triggeredExpertDetection) {
        Utils.checkNotNull(triggeredExpertDetection, "triggeredExpertDetection");
        this.triggeredExpertDetection = triggeredExpertDetection;
        return this;
    }

    /**
     * Whether the query was modified to remove quotes
     */
    public SearchResponseMetadata withIsNoQuotesSuggestion(boolean isNoQuotesSuggestion) {
        Utils.checkNotNull(isNoQuotesSuggestion, "isNoQuotesSuggestion");
        this.isNoQuotesSuggestion = Optional.ofNullable(isNoQuotesSuggestion);
        return this;
    }

    /**
     * Whether the query was modified to remove quotes
     */
    public SearchResponseMetadata withIsNoQuotesSuggestion(Optional<Boolean> isNoQuotesSuggestion) {
        Utils.checkNotNull(isNoQuotesSuggestion, "isNoQuotesSuggestion");
        this.isNoQuotesSuggestion = isNoQuotesSuggestion;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchResponseMetadata other = (SearchResponseMetadata) o;
        return 
            Objects.deepEquals(this.rewrittenQuery, other.rewrittenQuery) &&
            Objects.deepEquals(this.searchedQuery, other.searchedQuery) &&
            Objects.deepEquals(this.searchedQueryRanges, other.searchedQueryRanges) &&
            Objects.deepEquals(this.originalQuery, other.originalQuery) &&
            Objects.deepEquals(this.querySuggestion, other.querySuggestion) &&
            Objects.deepEquals(this.additionalQuerySuggestions, other.additionalQuerySuggestions) &&
            Objects.deepEquals(this.negatedTerms, other.negatedTerms) &&
            Objects.deepEquals(this.modifiedQueryWasUsed, other.modifiedQueryWasUsed) &&
            Objects.deepEquals(this.originalQueryHadNoResults, other.originalQueryHadNoResults) &&
            Objects.deepEquals(this.searchWarning, other.searchWarning) &&
            Objects.deepEquals(this.triggeredExpertDetection, other.triggeredExpertDetection) &&
            Objects.deepEquals(this.isNoQuotesSuggestion, other.isNoQuotesSuggestion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            rewrittenQuery,
            searchedQuery,
            searchedQueryRanges,
            originalQuery,
            querySuggestion,
            additionalQuerySuggestions,
            negatedTerms,
            modifiedQueryWasUsed,
            originalQueryHadNoResults,
            searchWarning,
            triggeredExpertDetection,
            isNoQuotesSuggestion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchResponseMetadata.class,
                "rewrittenQuery", rewrittenQuery,
                "searchedQuery", searchedQuery,
                "searchedQueryRanges", searchedQueryRanges,
                "originalQuery", originalQuery,
                "querySuggestion", querySuggestion,
                "additionalQuerySuggestions", additionalQuerySuggestions,
                "negatedTerms", negatedTerms,
                "modifiedQueryWasUsed", modifiedQueryWasUsed,
                "originalQueryHadNoResults", originalQueryHadNoResults,
                "searchWarning", searchWarning,
                "triggeredExpertDetection", triggeredExpertDetection,
                "isNoQuotesSuggestion", isNoQuotesSuggestion);
    }
    
    public final static class Builder {
 
        private Optional<String> rewrittenQuery = Optional.empty();
 
        private Optional<String> searchedQuery = Optional.empty();
 
        private Optional<? extends List<TextRange>> searchedQueryRanges = Optional.empty();
 
        private Optional<String> originalQuery = Optional.empty();
 
        private Optional<? extends QuerySuggestion> querySuggestion = Optional.empty();
 
        private Optional<? extends QuerySuggestionList> additionalQuerySuggestions = Optional.empty();
 
        private Optional<? extends List<String>> negatedTerms = Optional.empty();
 
        private Optional<Boolean> modifiedQueryWasUsed = Optional.empty();
 
        private Optional<Boolean> originalQueryHadNoResults = Optional.empty();
 
        private Optional<? extends SearchWarning> searchWarning = Optional.empty();
 
        private Optional<Boolean> triggeredExpertDetection = Optional.empty();
 
        private Optional<Boolean> isNoQuotesSuggestion = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
         */
        public Builder rewrittenQuery(String rewrittenQuery) {
            Utils.checkNotNull(rewrittenQuery, "rewrittenQuery");
            this.rewrittenQuery = Optional.ofNullable(rewrittenQuery);
            return this;
        }

        /**
         * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
         */
        public Builder rewrittenQuery(Optional<String> rewrittenQuery) {
            Utils.checkNotNull(rewrittenQuery, "rewrittenQuery");
            this.rewrittenQuery = rewrittenQuery;
            return this;
        }

        /**
         * The actual query used to perform search and return results.
         */
        public Builder searchedQuery(String searchedQuery) {
            Utils.checkNotNull(searchedQuery, "searchedQuery");
            this.searchedQuery = Optional.ofNullable(searchedQuery);
            return this;
        }

        /**
         * The actual query used to perform search and return results.
         */
        public Builder searchedQuery(Optional<String> searchedQuery) {
            Utils.checkNotNull(searchedQuery, "searchedQuery");
            this.searchedQuery = searchedQuery;
            return this;
        }

        /**
         * The bolded ranges within the searched query.
         */
        public Builder searchedQueryRanges(List<TextRange> searchedQueryRanges) {
            Utils.checkNotNull(searchedQueryRanges, "searchedQueryRanges");
            this.searchedQueryRanges = Optional.ofNullable(searchedQueryRanges);
            return this;
        }

        /**
         * The bolded ranges within the searched query.
         */
        public Builder searchedQueryRanges(Optional<? extends List<TextRange>> searchedQueryRanges) {
            Utils.checkNotNull(searchedQueryRanges, "searchedQueryRanges");
            this.searchedQueryRanges = searchedQueryRanges;
            return this;
        }

        /**
         * The query text sent by the client in the request.
         */
        public Builder originalQuery(String originalQuery) {
            Utils.checkNotNull(originalQuery, "originalQuery");
            this.originalQuery = Optional.ofNullable(originalQuery);
            return this;
        }

        /**
         * The query text sent by the client in the request.
         */
        public Builder originalQuery(Optional<String> originalQuery) {
            Utils.checkNotNull(originalQuery, "originalQuery");
            this.originalQuery = originalQuery;
            return this;
        }

        public Builder querySuggestion(QuerySuggestion querySuggestion) {
            Utils.checkNotNull(querySuggestion, "querySuggestion");
            this.querySuggestion = Optional.ofNullable(querySuggestion);
            return this;
        }

        public Builder querySuggestion(Optional<? extends QuerySuggestion> querySuggestion) {
            Utils.checkNotNull(querySuggestion, "querySuggestion");
            this.querySuggestion = querySuggestion;
            return this;
        }

        public Builder additionalQuerySuggestions(QuerySuggestionList additionalQuerySuggestions) {
            Utils.checkNotNull(additionalQuerySuggestions, "additionalQuerySuggestions");
            this.additionalQuerySuggestions = Optional.ofNullable(additionalQuerySuggestions);
            return this;
        }

        public Builder additionalQuerySuggestions(Optional<? extends QuerySuggestionList> additionalQuerySuggestions) {
            Utils.checkNotNull(additionalQuerySuggestions, "additionalQuerySuggestions");
            this.additionalQuerySuggestions = additionalQuerySuggestions;
            return this;
        }

        /**
         * A list of terms that were negated when processing the query.
         */
        public Builder negatedTerms(List<String> negatedTerms) {
            Utils.checkNotNull(negatedTerms, "negatedTerms");
            this.negatedTerms = Optional.ofNullable(negatedTerms);
            return this;
        }

        /**
         * A list of terms that were negated when processing the query.
         */
        public Builder negatedTerms(Optional<? extends List<String>> negatedTerms) {
            Utils.checkNotNull(negatedTerms, "negatedTerms");
            this.negatedTerms = negatedTerms;
            return this;
        }

        /**
         * A different query was performed than the one requested.
         */
        public Builder modifiedQueryWasUsed(boolean modifiedQueryWasUsed) {
            Utils.checkNotNull(modifiedQueryWasUsed, "modifiedQueryWasUsed");
            this.modifiedQueryWasUsed = Optional.ofNullable(modifiedQueryWasUsed);
            return this;
        }

        /**
         * A different query was performed than the one requested.
         */
        public Builder modifiedQueryWasUsed(Optional<Boolean> modifiedQueryWasUsed) {
            Utils.checkNotNull(modifiedQueryWasUsed, "modifiedQueryWasUsed");
            this.modifiedQueryWasUsed = modifiedQueryWasUsed;
            return this;
        }

        /**
         * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
         */
        public Builder originalQueryHadNoResults(boolean originalQueryHadNoResults) {
            Utils.checkNotNull(originalQueryHadNoResults, "originalQueryHadNoResults");
            this.originalQueryHadNoResults = Optional.ofNullable(originalQueryHadNoResults);
            return this;
        }

        /**
         * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
         */
        public Builder originalQueryHadNoResults(Optional<Boolean> originalQueryHadNoResults) {
            Utils.checkNotNull(originalQueryHadNoResults, "originalQueryHadNoResults");
            this.originalQueryHadNoResults = originalQueryHadNoResults;
            return this;
        }

        public Builder searchWarning(SearchWarning searchWarning) {
            Utils.checkNotNull(searchWarning, "searchWarning");
            this.searchWarning = Optional.ofNullable(searchWarning);
            return this;
        }

        public Builder searchWarning(Optional<? extends SearchWarning> searchWarning) {
            Utils.checkNotNull(searchWarning, "searchWarning");
            this.searchWarning = searchWarning;
            return this;
        }

        /**
         * Whether the query triggered expert detection results in the People tab.
         */
        public Builder triggeredExpertDetection(boolean triggeredExpertDetection) {
            Utils.checkNotNull(triggeredExpertDetection, "triggeredExpertDetection");
            this.triggeredExpertDetection = Optional.ofNullable(triggeredExpertDetection);
            return this;
        }

        /**
         * Whether the query triggered expert detection results in the People tab.
         */
        public Builder triggeredExpertDetection(Optional<Boolean> triggeredExpertDetection) {
            Utils.checkNotNull(triggeredExpertDetection, "triggeredExpertDetection");
            this.triggeredExpertDetection = triggeredExpertDetection;
            return this;
        }

        /**
         * Whether the query was modified to remove quotes
         */
        public Builder isNoQuotesSuggestion(boolean isNoQuotesSuggestion) {
            Utils.checkNotNull(isNoQuotesSuggestion, "isNoQuotesSuggestion");
            this.isNoQuotesSuggestion = Optional.ofNullable(isNoQuotesSuggestion);
            return this;
        }

        /**
         * Whether the query was modified to remove quotes
         */
        public Builder isNoQuotesSuggestion(Optional<Boolean> isNoQuotesSuggestion) {
            Utils.checkNotNull(isNoQuotesSuggestion, "isNoQuotesSuggestion");
            this.isNoQuotesSuggestion = isNoQuotesSuggestion;
            return this;
        }
        
        public SearchResponseMetadata build() {
            return new SearchResponseMetadata(
                rewrittenQuery,
                searchedQuery,
                searchedQueryRanges,
                originalQuery,
                querySuggestion,
                additionalQuerySuggestions,
                negatedTerms,
                modifiedQueryWasUsed,
                originalQueryHadNoResults,
                searchWarning,
                triggeredExpertDetection,
                isNoQuotesSuggestion);
        }
    }
}
