/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PeopleRequest {

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezoneOffset")
    private Optional<Long> timezoneOffset;

    /**
     * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("obfuscatedIds")
    private Optional<? extends List<String>> obfuscatedIds;

    /**
     * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailIds")
    private Optional<? extends List<String>> emailIds;

    /**
     * List of PersonMetadata fields to return (that aren't returned by default)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeFields")
    private Optional<? extends List<PeopleRequestIncludeField>> includeFields;

    /**
     * The types of people entities to include in the response in addition to those returned by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeTypes")
    private Optional<? extends List<IncludeType>> includeTypes;

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<String> source;

    @JsonCreator
    public PeopleRequest(
            @JsonProperty("timezoneOffset") Optional<Long> timezoneOffset,
            @JsonProperty("obfuscatedIds") Optional<? extends List<String>> obfuscatedIds,
            @JsonProperty("emailIds") Optional<? extends List<String>> emailIds,
            @JsonProperty("includeFields") Optional<? extends List<PeopleRequestIncludeField>> includeFields,
            @JsonProperty("includeTypes") Optional<? extends List<IncludeType>> includeTypes,
            @JsonProperty("source") Optional<String> source) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        Utils.checkNotNull(obfuscatedIds, "obfuscatedIds");
        Utils.checkNotNull(emailIds, "emailIds");
        Utils.checkNotNull(includeFields, "includeFields");
        Utils.checkNotNull(includeTypes, "includeTypes");
        Utils.checkNotNull(source, "source");
        this.timezoneOffset = timezoneOffset;
        this.obfuscatedIds = obfuscatedIds;
        this.emailIds = emailIds;
        this.includeFields = includeFields;
        this.includeTypes = includeTypes;
        this.source = source;
    }
    
    public PeopleRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    @JsonIgnore
    public Optional<Long> timezoneOffset() {
        return timezoneOffset;
    }

    /**
     * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> obfuscatedIds() {
        return (Optional<List<String>>) obfuscatedIds;
    }

    /**
     * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> emailIds() {
        return (Optional<List<String>>) emailIds;
    }

    /**
     * List of PersonMetadata fields to return (that aren't returned by default)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PeopleRequestIncludeField>> includeFields() {
        return (Optional<List<PeopleRequestIncludeField>>) includeFields;
    }

    /**
     * The types of people entities to include in the response in addition to those returned by default.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<IncludeType>> includeTypes() {
        return (Optional<List<IncludeType>>) includeTypes;
    }

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    @JsonIgnore
    public Optional<String> source() {
        return source;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    public PeopleRequest withTimezoneOffset(long timezoneOffset) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        this.timezoneOffset = Optional.ofNullable(timezoneOffset);
        return this;
    }

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    public PeopleRequest withTimezoneOffset(Optional<Long> timezoneOffset) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        this.timezoneOffset = timezoneOffset;
        return this;
    }

    /**
     * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
     */
    public PeopleRequest withObfuscatedIds(List<String> obfuscatedIds) {
        Utils.checkNotNull(obfuscatedIds, "obfuscatedIds");
        this.obfuscatedIds = Optional.ofNullable(obfuscatedIds);
        return this;
    }

    /**
     * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
     */
    public PeopleRequest withObfuscatedIds(Optional<? extends List<String>> obfuscatedIds) {
        Utils.checkNotNull(obfuscatedIds, "obfuscatedIds");
        this.obfuscatedIds = obfuscatedIds;
        return this;
    }

    /**
     * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
     */
    public PeopleRequest withEmailIds(List<String> emailIds) {
        Utils.checkNotNull(emailIds, "emailIds");
        this.emailIds = Optional.ofNullable(emailIds);
        return this;
    }

    /**
     * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
     */
    public PeopleRequest withEmailIds(Optional<? extends List<String>> emailIds) {
        Utils.checkNotNull(emailIds, "emailIds");
        this.emailIds = emailIds;
        return this;
    }

    /**
     * List of PersonMetadata fields to return (that aren't returned by default)
     */
    public PeopleRequest withIncludeFields(List<PeopleRequestIncludeField> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = Optional.ofNullable(includeFields);
        return this;
    }

    /**
     * List of PersonMetadata fields to return (that aren't returned by default)
     */
    public PeopleRequest withIncludeFields(Optional<? extends List<PeopleRequestIncludeField>> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = includeFields;
        return this;
    }

    /**
     * The types of people entities to include in the response in addition to those returned by default.
     */
    public PeopleRequest withIncludeTypes(List<IncludeType> includeTypes) {
        Utils.checkNotNull(includeTypes, "includeTypes");
        this.includeTypes = Optional.ofNullable(includeTypes);
        return this;
    }

    /**
     * The types of people entities to include in the response in addition to those returned by default.
     */
    public PeopleRequest withIncludeTypes(Optional<? extends List<IncludeType>> includeTypes) {
        Utils.checkNotNull(includeTypes, "includeTypes");
        this.includeTypes = includeTypes;
        return this;
    }

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    public PeopleRequest withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    public PeopleRequest withSource(Optional<String> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PeopleRequest other = (PeopleRequest) o;
        return 
            Objects.deepEquals(this.timezoneOffset, other.timezoneOffset) &&
            Objects.deepEquals(this.obfuscatedIds, other.obfuscatedIds) &&
            Objects.deepEquals(this.emailIds, other.emailIds) &&
            Objects.deepEquals(this.includeFields, other.includeFields) &&
            Objects.deepEquals(this.includeTypes, other.includeTypes) &&
            Objects.deepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timezoneOffset,
            obfuscatedIds,
            emailIds,
            includeFields,
            includeTypes,
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PeopleRequest.class,
                "timezoneOffset", timezoneOffset,
                "obfuscatedIds", obfuscatedIds,
                "emailIds", emailIds,
                "includeFields", includeFields,
                "includeTypes", includeTypes,
                "source", source);
    }
    
    public final static class Builder {
 
        private Optional<Long> timezoneOffset = Optional.empty();
 
        private Optional<? extends List<String>> obfuscatedIds = Optional.empty();
 
        private Optional<? extends List<String>> emailIds = Optional.empty();
 
        private Optional<? extends List<PeopleRequestIncludeField>> includeFields = Optional.empty();
 
        private Optional<? extends List<IncludeType>> includeTypes = Optional.empty();
 
        private Optional<String> source = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
         */
        public Builder timezoneOffset(long timezoneOffset) {
            Utils.checkNotNull(timezoneOffset, "timezoneOffset");
            this.timezoneOffset = Optional.ofNullable(timezoneOffset);
            return this;
        }

        /**
         * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
         */
        public Builder timezoneOffset(Optional<Long> timezoneOffset) {
            Utils.checkNotNull(timezoneOffset, "timezoneOffset");
            this.timezoneOffset = timezoneOffset;
            return this;
        }

        /**
         * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
         */
        public Builder obfuscatedIds(List<String> obfuscatedIds) {
            Utils.checkNotNull(obfuscatedIds, "obfuscatedIds");
            this.obfuscatedIds = Optional.ofNullable(obfuscatedIds);
            return this;
        }

        /**
         * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
         */
        public Builder obfuscatedIds(Optional<? extends List<String>> obfuscatedIds) {
            Utils.checkNotNull(obfuscatedIds, "obfuscatedIds");
            this.obfuscatedIds = obfuscatedIds;
            return this;
        }

        /**
         * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
         */
        public Builder emailIds(List<String> emailIds) {
            Utils.checkNotNull(emailIds, "emailIds");
            this.emailIds = Optional.ofNullable(emailIds);
            return this;
        }

        /**
         * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
         */
        public Builder emailIds(Optional<? extends List<String>> emailIds) {
            Utils.checkNotNull(emailIds, "emailIds");
            this.emailIds = emailIds;
            return this;
        }

        /**
         * List of PersonMetadata fields to return (that aren't returned by default)
         */
        public Builder includeFields(List<PeopleRequestIncludeField> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * List of PersonMetadata fields to return (that aren't returned by default)
         */
        public Builder includeFields(Optional<? extends List<PeopleRequestIncludeField>> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = includeFields;
            return this;
        }

        /**
         * The types of people entities to include in the response in addition to those returned by default.
         */
        public Builder includeTypes(List<IncludeType> includeTypes) {
            Utils.checkNotNull(includeTypes, "includeTypes");
            this.includeTypes = Optional.ofNullable(includeTypes);
            return this;
        }

        /**
         * The types of people entities to include in the response in addition to those returned by default.
         */
        public Builder includeTypes(Optional<? extends List<IncludeType>> includeTypes) {
            Utils.checkNotNull(includeTypes, "includeTypes");
            this.includeTypes = includeTypes;
            return this;
        }

        /**
         * A string denoting the search surface from which the endpoint is called.
         */
        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * A string denoting the search surface from which the endpoint is called.
         */
        public Builder source(Optional<String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public PeopleRequest build() {
            return new PeopleRequest(
                timezoneOffset,
                obfuscatedIds,
                emailIds,
                includeFields,
                includeTypes,
                source);
        }
    }
}
