/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ImageMetadata {

    /**
     * The type of the image that determines how to interprets metadata and where the image will be stored
     */
    @JsonProperty("type")
    private ImageType type;

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ds")
    private Optional<String> ds;

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cid")
    private Optional<String> cid;

    /**
     * Extension the image is saved with. The extension data is deduced from content type for image uploads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ext")
    private Optional<String> ext;

    @JsonCreator
    public ImageMetadata(
            @JsonProperty("type") ImageType type,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("ds") Optional<String> ds,
            @JsonProperty("cid") Optional<String> cid,
            @JsonProperty("ext") Optional<String> ext) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ds, "ds");
        Utils.checkNotNull(cid, "cid");
        Utils.checkNotNull(ext, "ext");
        this.type = type;
        this.id = id;
        this.ds = ds;
        this.cid = cid;
        this.ext = ext;
    }
    
    public ImageMetadata(
            ImageType type) {
        this(type, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of the image that determines how to interprets metadata and where the image will be stored
     */
    @JsonIgnore
    public ImageType type() {
        return type;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    @JsonIgnore
    public Optional<String> ds() {
        return ds;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    @JsonIgnore
    public Optional<String> cid() {
        return cid;
    }

    /**
     * Extension the image is saved with. The extension data is deduced from content type for image uploads.
     */
    @JsonIgnore
    public Optional<String> ext() {
        return ext;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of the image that determines how to interprets metadata and where the image will be stored
     */
    public ImageMetadata withType(ImageType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    public ImageMetadata withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    public ImageMetadata withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    public ImageMetadata withDs(String ds) {
        Utils.checkNotNull(ds, "ds");
        this.ds = Optional.ofNullable(ds);
        return this;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    public ImageMetadata withDs(Optional<String> ds) {
        Utils.checkNotNull(ds, "ds");
        this.ds = ds;
        return this;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    public ImageMetadata withCid(String cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = Optional.ofNullable(cid);
        return this;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    public ImageMetadata withCid(Optional<String> cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = cid;
        return this;
    }

    /**
     * Extension the image is saved with. The extension data is deduced from content type for image uploads.
     */
    public ImageMetadata withExt(String ext) {
        Utils.checkNotNull(ext, "ext");
        this.ext = Optional.ofNullable(ext);
        return this;
    }

    /**
     * Extension the image is saved with. The extension data is deduced from content type for image uploads.
     */
    public ImageMetadata withExt(Optional<String> ext) {
        Utils.checkNotNull(ext, "ext");
        this.ext = ext;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImageMetadata other = (ImageMetadata) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ds, other.ds) &&
            Objects.deepEquals(this.cid, other.cid) &&
            Objects.deepEquals(this.ext, other.ext);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            ds,
            cid,
            ext);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImageMetadata.class,
                "type", type,
                "id", id,
                "ds", ds,
                "cid", cid,
                "ext", ext);
    }
    
    public final static class Builder {
 
        private ImageType type;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> ds = Optional.empty();
 
        private Optional<String> cid = Optional.empty();
 
        private Optional<String> ext = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of the image that determines how to interprets metadata and where the image will be stored
         */
        public Builder type(ImageType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
         */
        public Builder ds(String ds) {
            Utils.checkNotNull(ds, "ds");
            this.ds = Optional.ofNullable(ds);
            return this;
        }

        /**
         * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
         */
        public Builder ds(Optional<String> ds) {
            Utils.checkNotNull(ds, "ds");
            this.ds = ds;
            return this;
        }

        /**
         * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
         */
        public Builder cid(String cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = Optional.ofNullable(cid);
            return this;
        }

        /**
         * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
         */
        public Builder cid(Optional<String> cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = cid;
            return this;
        }

        /**
         * Extension the image is saved with. The extension data is deduced from content type for image uploads.
         */
        public Builder ext(String ext) {
            Utils.checkNotNull(ext, "ext");
            this.ext = Optional.ofNullable(ext);
            return this;
        }

        /**
         * Extension the image is saved with. The extension data is deduced from content type for image uploads.
         */
        public Builder ext(Optional<String> ext) {
            Utils.checkNotNull(ext, "ext");
            this.ext = ext;
            return this;
        }
        
        public ImageMetadata build() {
            return new ImageMetadata(
                type,
                id,
                ds,
                cid,
                ext);
        }
    }
}
