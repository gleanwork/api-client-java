/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AutocompleteResult {

    @JsonProperty("result")
    private String result;

    /**
     * A list of all possible keywords for given result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keywords")
    private Optional<? extends List<String>> keywords;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultType")
    private Optional<? extends AutocompleteResultResultType> resultType;

    /**
     * Higher indicates a more confident match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    private Optional<Double> score;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatorMetadata")
    private Optional<? extends OperatorMetadata> operatorMetadata;

    /**
     * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quicklink")
    private Optional<? extends Quicklink> quicklink;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private Optional<? extends Document> document;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * A single object that can support any object in the work graph. Only a single object will be populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredResult")
    private Optional<? extends StructuredResult> structuredResult;

    /**
     * A token to be passed in /feedback events associated with this autocomplete result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    /**
     * Subsections of the result string to which some special formatting should be applied (eg. bold)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ranges")
    private Optional<? extends List<TextRange>> ranges;

    @JsonCreator
    public AutocompleteResult(
            @JsonProperty("result") String result,
            @JsonProperty("keywords") Optional<? extends List<String>> keywords,
            @JsonProperty("resultType") Optional<? extends AutocompleteResultResultType> resultType,
            @JsonProperty("score") Optional<Double> score,
            @JsonProperty("operatorMetadata") Optional<? extends OperatorMetadata> operatorMetadata,
            @JsonProperty("quicklink") Optional<? extends Quicklink> quicklink,
            @JsonProperty("document") Optional<? extends Document> document,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("structuredResult") Optional<? extends StructuredResult> structuredResult,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("ranges") Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(result, "result");
        Utils.checkNotNull(keywords, "keywords");
        Utils.checkNotNull(resultType, "resultType");
        Utils.checkNotNull(score, "score");
        Utils.checkNotNull(operatorMetadata, "operatorMetadata");
        Utils.checkNotNull(quicklink, "quicklink");
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(structuredResult, "structuredResult");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(ranges, "ranges");
        this.result = result;
        this.keywords = keywords;
        this.resultType = resultType;
        this.score = score;
        this.operatorMetadata = operatorMetadata;
        this.quicklink = quicklink;
        this.document = document;
        this.url = url;
        this.structuredResult = structuredResult;
        this.trackingToken = trackingToken;
        this.ranges = ranges;
    }
    
    public AutocompleteResult(
            String result) {
        this(result, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String result() {
        return result;
    }

    /**
     * A list of all possible keywords for given result.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> keywords() {
        return (Optional<List<String>>) keywords;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AutocompleteResultResultType> resultType() {
        return (Optional<AutocompleteResultResultType>) resultType;
    }

    /**
     * Higher indicates a more confident match.
     */
    @JsonIgnore
    public Optional<Double> score() {
        return score;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OperatorMetadata> operatorMetadata() {
        return (Optional<OperatorMetadata>) operatorMetadata;
    }

    /**
     * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Quicklink> quicklink() {
        return (Optional<Quicklink>) quicklink;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> document() {
        return (Optional<Document>) document;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * A single object that can support any object in the work graph. Only a single object will be populated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredResult> structuredResult() {
        return (Optional<StructuredResult>) structuredResult;
    }

    /**
     * A token to be passed in /feedback events associated with this autocomplete result.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    /**
     * Subsections of the result string to which some special formatting should be applied (eg. bold)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> ranges() {
        return (Optional<List<TextRange>>) ranges;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AutocompleteResult withResult(String result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
        return this;
    }

    /**
     * A list of all possible keywords for given result.
     */
    public AutocompleteResult withKeywords(List<String> keywords) {
        Utils.checkNotNull(keywords, "keywords");
        this.keywords = Optional.ofNullable(keywords);
        return this;
    }

    /**
     * A list of all possible keywords for given result.
     */
    public AutocompleteResult withKeywords(Optional<? extends List<String>> keywords) {
        Utils.checkNotNull(keywords, "keywords");
        this.keywords = keywords;
        return this;
    }

    public AutocompleteResult withResultType(AutocompleteResultResultType resultType) {
        Utils.checkNotNull(resultType, "resultType");
        this.resultType = Optional.ofNullable(resultType);
        return this;
    }

    public AutocompleteResult withResultType(Optional<? extends AutocompleteResultResultType> resultType) {
        Utils.checkNotNull(resultType, "resultType");
        this.resultType = resultType;
        return this;
    }

    /**
     * Higher indicates a more confident match.
     */
    public AutocompleteResult withScore(double score) {
        Utils.checkNotNull(score, "score");
        this.score = Optional.ofNullable(score);
        return this;
    }

    /**
     * Higher indicates a more confident match.
     */
    public AutocompleteResult withScore(Optional<Double> score) {
        Utils.checkNotNull(score, "score");
        this.score = score;
        return this;
    }

    public AutocompleteResult withOperatorMetadata(OperatorMetadata operatorMetadata) {
        Utils.checkNotNull(operatorMetadata, "operatorMetadata");
        this.operatorMetadata = Optional.ofNullable(operatorMetadata);
        return this;
    }

    public AutocompleteResult withOperatorMetadata(Optional<? extends OperatorMetadata> operatorMetadata) {
        Utils.checkNotNull(operatorMetadata, "operatorMetadata");
        this.operatorMetadata = operatorMetadata;
        return this;
    }

    /**
     * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
     */
    public AutocompleteResult withQuicklink(Quicklink quicklink) {
        Utils.checkNotNull(quicklink, "quicklink");
        this.quicklink = Optional.ofNullable(quicklink);
        return this;
    }

    /**
     * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
     */
    public AutocompleteResult withQuicklink(Optional<? extends Quicklink> quicklink) {
        Utils.checkNotNull(quicklink, "quicklink");
        this.quicklink = quicklink;
        return this;
    }

    public AutocompleteResult withDocument(Document document) {
        Utils.checkNotNull(document, "document");
        this.document = Optional.ofNullable(document);
        return this;
    }

    public AutocompleteResult withDocument(Optional<? extends Document> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    public AutocompleteResult withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public AutocompleteResult withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * A single object that can support any object in the work graph. Only a single object will be populated.
     */
    public AutocompleteResult withStructuredResult(StructuredResult structuredResult) {
        Utils.checkNotNull(structuredResult, "structuredResult");
        this.structuredResult = Optional.ofNullable(structuredResult);
        return this;
    }

    /**
     * A single object that can support any object in the work graph. Only a single object will be populated.
     */
    public AutocompleteResult withStructuredResult(Optional<? extends StructuredResult> structuredResult) {
        Utils.checkNotNull(structuredResult, "structuredResult");
        this.structuredResult = structuredResult;
        return this;
    }

    /**
     * A token to be passed in /feedback events associated with this autocomplete result.
     */
    public AutocompleteResult withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * A token to be passed in /feedback events associated with this autocomplete result.
     */
    public AutocompleteResult withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    /**
     * Subsections of the result string to which some special formatting should be applied (eg. bold)
     */
    public AutocompleteResult withRanges(List<TextRange> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = Optional.ofNullable(ranges);
        return this;
    }

    /**
     * Subsections of the result string to which some special formatting should be applied (eg. bold)
     */
    public AutocompleteResult withRanges(Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = ranges;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AutocompleteResult other = (AutocompleteResult) o;
        return 
            Objects.deepEquals(this.result, other.result) &&
            Objects.deepEquals(this.keywords, other.keywords) &&
            Objects.deepEquals(this.resultType, other.resultType) &&
            Objects.deepEquals(this.score, other.score) &&
            Objects.deepEquals(this.operatorMetadata, other.operatorMetadata) &&
            Objects.deepEquals(this.quicklink, other.quicklink) &&
            Objects.deepEquals(this.document, other.document) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.structuredResult, other.structuredResult) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.ranges, other.ranges);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            result,
            keywords,
            resultType,
            score,
            operatorMetadata,
            quicklink,
            document,
            url,
            structuredResult,
            trackingToken,
            ranges);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AutocompleteResult.class,
                "result", result,
                "keywords", keywords,
                "resultType", resultType,
                "score", score,
                "operatorMetadata", operatorMetadata,
                "quicklink", quicklink,
                "document", document,
                "url", url,
                "structuredResult", structuredResult,
                "trackingToken", trackingToken,
                "ranges", ranges);
    }
    
    public final static class Builder {
 
        private String result;
 
        private Optional<? extends List<String>> keywords = Optional.empty();
 
        private Optional<? extends AutocompleteResultResultType> resultType = Optional.empty();
 
        private Optional<Double> score = Optional.empty();
 
        private Optional<? extends OperatorMetadata> operatorMetadata = Optional.empty();
 
        private Optional<? extends Quicklink> quicklink = Optional.empty();
 
        private Optional<? extends Document> document = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<? extends StructuredResult> structuredResult = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends List<TextRange>> ranges = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder result(String result) {
            Utils.checkNotNull(result, "result");
            this.result = result;
            return this;
        }

        /**
         * A list of all possible keywords for given result.
         */
        public Builder keywords(List<String> keywords) {
            Utils.checkNotNull(keywords, "keywords");
            this.keywords = Optional.ofNullable(keywords);
            return this;
        }

        /**
         * A list of all possible keywords for given result.
         */
        public Builder keywords(Optional<? extends List<String>> keywords) {
            Utils.checkNotNull(keywords, "keywords");
            this.keywords = keywords;
            return this;
        }

        public Builder resultType(AutocompleteResultResultType resultType) {
            Utils.checkNotNull(resultType, "resultType");
            this.resultType = Optional.ofNullable(resultType);
            return this;
        }

        public Builder resultType(Optional<? extends AutocompleteResultResultType> resultType) {
            Utils.checkNotNull(resultType, "resultType");
            this.resultType = resultType;
            return this;
        }

        /**
         * Higher indicates a more confident match.
         */
        public Builder score(double score) {
            Utils.checkNotNull(score, "score");
            this.score = Optional.ofNullable(score);
            return this;
        }

        /**
         * Higher indicates a more confident match.
         */
        public Builder score(Optional<Double> score) {
            Utils.checkNotNull(score, "score");
            this.score = score;
            return this;
        }

        public Builder operatorMetadata(OperatorMetadata operatorMetadata) {
            Utils.checkNotNull(operatorMetadata, "operatorMetadata");
            this.operatorMetadata = Optional.ofNullable(operatorMetadata);
            return this;
        }

        public Builder operatorMetadata(Optional<? extends OperatorMetadata> operatorMetadata) {
            Utils.checkNotNull(operatorMetadata, "operatorMetadata");
            this.operatorMetadata = operatorMetadata;
            return this;
        }

        /**
         * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
         */
        public Builder quicklink(Quicklink quicklink) {
            Utils.checkNotNull(quicklink, "quicklink");
            this.quicklink = Optional.ofNullable(quicklink);
            return this;
        }

        /**
         * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
         */
        public Builder quicklink(Optional<? extends Quicklink> quicklink) {
            Utils.checkNotNull(quicklink, "quicklink");
            this.quicklink = quicklink;
            return this;
        }

        public Builder document(Document document) {
            Utils.checkNotNull(document, "document");
            this.document = Optional.ofNullable(document);
            return this;
        }

        public Builder document(Optional<? extends Document> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * A single object that can support any object in the work graph. Only a single object will be populated.
         */
        public Builder structuredResult(StructuredResult structuredResult) {
            Utils.checkNotNull(structuredResult, "structuredResult");
            this.structuredResult = Optional.ofNullable(structuredResult);
            return this;
        }

        /**
         * A single object that can support any object in the work graph. Only a single object will be populated.
         */
        public Builder structuredResult(Optional<? extends StructuredResult> structuredResult) {
            Utils.checkNotNull(structuredResult, "structuredResult");
            this.structuredResult = structuredResult;
            return this;
        }

        /**
         * A token to be passed in /feedback events associated with this autocomplete result.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * A token to be passed in /feedback events associated with this autocomplete result.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        /**
         * Subsections of the result string to which some special formatting should be applied (eg. bold)
         */
        public Builder ranges(List<TextRange> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * Subsections of the result string to which some special formatting should be applied (eg. bold)
         */
        public Builder ranges(Optional<? extends List<TextRange>> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = ranges;
            return this;
        }
        
        public AutocompleteResult build() {
            return new AutocompleteResult(
                result,
                keywords,
                resultType,
                score,
                operatorMetadata,
                quicklink,
                document,
                url,
                structuredResult,
                trackingToken,
                ranges);
        }
    }
}
