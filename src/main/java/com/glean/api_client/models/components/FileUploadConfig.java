/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * FileUploadConfig
 * 
 * <p>Configuration settings for the chat file upload feature
 */
public class FileUploadConfig {

    /**
     * Whether file upload for Chat is enabled for the deployment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * Maximum number of files that can be uploaded in a single turn
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxFileCount")
    private Optional<Long> maxFileCount;

    /**
     * Maximum file size, in bytes, that is allowed for upload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxFileSize")
    private Optional<Long> maxFileSize;

    /**
     * Timeout in seconds for polling the file upload status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadTimeoutSeconds")
    private Optional<Long> uploadTimeoutSeconds;

    @JsonCreator
    public FileUploadConfig(
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("maxFileCount") Optional<Long> maxFileCount,
            @JsonProperty("maxFileSize") Optional<Long> maxFileSize,
            @JsonProperty("uploadTimeoutSeconds") Optional<Long> uploadTimeoutSeconds) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(maxFileCount, "maxFileCount");
        Utils.checkNotNull(maxFileSize, "maxFileSize");
        Utils.checkNotNull(uploadTimeoutSeconds, "uploadTimeoutSeconds");
        this.enabled = enabled;
        this.maxFileCount = maxFileCount;
        this.maxFileSize = maxFileSize;
        this.uploadTimeoutSeconds = uploadTimeoutSeconds;
    }
    
    public FileUploadConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether file upload for Chat is enabled for the deployment
     */
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * Maximum number of files that can be uploaded in a single turn
     */
    @JsonIgnore
    public Optional<Long> maxFileCount() {
        return maxFileCount;
    }

    /**
     * Maximum file size, in bytes, that is allowed for upload
     */
    @JsonIgnore
    public Optional<Long> maxFileSize() {
        return maxFileSize;
    }

    /**
     * Timeout in seconds for polling the file upload status
     */
    @JsonIgnore
    public Optional<Long> uploadTimeoutSeconds() {
        return uploadTimeoutSeconds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether file upload for Chat is enabled for the deployment
     */
    public FileUploadConfig withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Whether file upload for Chat is enabled for the deployment
     */
    public FileUploadConfig withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Maximum number of files that can be uploaded in a single turn
     */
    public FileUploadConfig withMaxFileCount(long maxFileCount) {
        Utils.checkNotNull(maxFileCount, "maxFileCount");
        this.maxFileCount = Optional.ofNullable(maxFileCount);
        return this;
    }

    /**
     * Maximum number of files that can be uploaded in a single turn
     */
    public FileUploadConfig withMaxFileCount(Optional<Long> maxFileCount) {
        Utils.checkNotNull(maxFileCount, "maxFileCount");
        this.maxFileCount = maxFileCount;
        return this;
    }

    /**
     * Maximum file size, in bytes, that is allowed for upload
     */
    public FileUploadConfig withMaxFileSize(long maxFileSize) {
        Utils.checkNotNull(maxFileSize, "maxFileSize");
        this.maxFileSize = Optional.ofNullable(maxFileSize);
        return this;
    }

    /**
     * Maximum file size, in bytes, that is allowed for upload
     */
    public FileUploadConfig withMaxFileSize(Optional<Long> maxFileSize) {
        Utils.checkNotNull(maxFileSize, "maxFileSize");
        this.maxFileSize = maxFileSize;
        return this;
    }

    /**
     * Timeout in seconds for polling the file upload status
     */
    public FileUploadConfig withUploadTimeoutSeconds(long uploadTimeoutSeconds) {
        Utils.checkNotNull(uploadTimeoutSeconds, "uploadTimeoutSeconds");
        this.uploadTimeoutSeconds = Optional.ofNullable(uploadTimeoutSeconds);
        return this;
    }

    /**
     * Timeout in seconds for polling the file upload status
     */
    public FileUploadConfig withUploadTimeoutSeconds(Optional<Long> uploadTimeoutSeconds) {
        Utils.checkNotNull(uploadTimeoutSeconds, "uploadTimeoutSeconds");
        this.uploadTimeoutSeconds = uploadTimeoutSeconds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FileUploadConfig other = (FileUploadConfig) o;
        return 
            Objects.deepEquals(this.enabled, other.enabled) &&
            Objects.deepEquals(this.maxFileCount, other.maxFileCount) &&
            Objects.deepEquals(this.maxFileSize, other.maxFileSize) &&
            Objects.deepEquals(this.uploadTimeoutSeconds, other.uploadTimeoutSeconds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            enabled,
            maxFileCount,
            maxFileSize,
            uploadTimeoutSeconds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FileUploadConfig.class,
                "enabled", enabled,
                "maxFileCount", maxFileCount,
                "maxFileSize", maxFileSize,
                "uploadTimeoutSeconds", uploadTimeoutSeconds);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> enabled = Optional.empty();
 
        private Optional<Long> maxFileCount = Optional.empty();
 
        private Optional<Long> maxFileSize = Optional.empty();
 
        private Optional<Long> uploadTimeoutSeconds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether file upload for Chat is enabled for the deployment
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Whether file upload for Chat is enabled for the deployment
         */
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * Maximum number of files that can be uploaded in a single turn
         */
        public Builder maxFileCount(long maxFileCount) {
            Utils.checkNotNull(maxFileCount, "maxFileCount");
            this.maxFileCount = Optional.ofNullable(maxFileCount);
            return this;
        }

        /**
         * Maximum number of files that can be uploaded in a single turn
         */
        public Builder maxFileCount(Optional<Long> maxFileCount) {
            Utils.checkNotNull(maxFileCount, "maxFileCount");
            this.maxFileCount = maxFileCount;
            return this;
        }

        /**
         * Maximum file size, in bytes, that is allowed for upload
         */
        public Builder maxFileSize(long maxFileSize) {
            Utils.checkNotNull(maxFileSize, "maxFileSize");
            this.maxFileSize = Optional.ofNullable(maxFileSize);
            return this;
        }

        /**
         * Maximum file size, in bytes, that is allowed for upload
         */
        public Builder maxFileSize(Optional<Long> maxFileSize) {
            Utils.checkNotNull(maxFileSize, "maxFileSize");
            this.maxFileSize = maxFileSize;
            return this;
        }

        /**
         * Timeout in seconds for polling the file upload status
         */
        public Builder uploadTimeoutSeconds(long uploadTimeoutSeconds) {
            Utils.checkNotNull(uploadTimeoutSeconds, "uploadTimeoutSeconds");
            this.uploadTimeoutSeconds = Optional.ofNullable(uploadTimeoutSeconds);
            return this;
        }

        /**
         * Timeout in seconds for polling the file upload status
         */
        public Builder uploadTimeoutSeconds(Optional<Long> uploadTimeoutSeconds) {
            Utils.checkNotNull(uploadTimeoutSeconds, "uploadTimeoutSeconds");
            this.uploadTimeoutSeconds = uploadTimeoutSeconds;
            return this;
        }
        
        public FileUploadConfig build() {
            return new FileUploadConfig(
                enabled,
                maxFileCount,
                maxFileSize,
                uploadTimeoutSeconds);
        }
    }
}
