/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * AssistantConfig
 * 
 * <p>Configuration settings specific to Assistant features
 */
public class AssistantConfig {

    /**
     * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatBannerText")
    private Optional<String> chatBannerText;

    /**
     * Disclaimer message to be displayed below the chat box. This could be in markdown format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatBoxDisclaimer")
    private Optional<String> chatBoxDisclaimer;

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatLinkUrlTemplate")
    private Optional<String> chatLinkUrlTemplate;

    /**
     * Label for the chat header during initial state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatStarterHeader")
    private Optional<String> chatStarterHeader;

    /**
     * Label for the chat subheader during initial state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatStarterSubheader")
    private Optional<String> chatStarterSubheader;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentClientConfigs")
    private Optional<? extends List<AgentClientConfig>> agentClientConfigs;

    /**
     * A list of datasources that are disabled in Chat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redlistedDatasources")
    private Optional<? extends List<String>> redlistedDatasources;

    /**
     * A list of datasources that are always visible in Chat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("greenlistedDatasourceInstances")
    private Optional<? extends List<String>> greenlistedDatasourceInstances;

    /**
     * Whether the GPT agent (general mode) for Chat is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gptAgentEnabled")
    private Optional<Boolean> gptAgentEnabled;

    /**
     * Configuration settings for the chat file upload feature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileUpload")
    private Optional<? extends FileUploadConfig> fileUpload;

    /**
     * Whether the chat history for Chat is enabled for the deployment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatHistoryEnabled")
    private Optional<Boolean> chatHistoryEnabled;

    /**
     * Redirect URL for "Chat guide" in the default chat starter subheader
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatGuideUrl")
    private Optional<String> chatGuideUrl;

    /**
     * Whether prompt templates feature are enabled for the deployment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promptsEnabled")
    private Optional<Boolean> promptsEnabled;

    /**
     * Whether a default user can share prompts to the prompt library.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultUserCanSharePrompts")
    private Optional<Boolean> defaultUserCanSharePrompts;

    /**
     * Whether a default user can share agents to the agent library.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultUserCanShareAgents")
    private Optional<Boolean> defaultUserCanShareAgents;

    /**
     * Whether file upload for Chat is enabled for the deployment
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileUploadEnabled")
    @Deprecated
    private Optional<Boolean> fileUploadEnabled;

    /**
     * Configuration settings related to web search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webSearch")
    private Optional<? extends WebSearchConfig> webSearch;

    /**
     * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatBarV3Enabled")
    private Optional<Boolean> chatBarV3Enabled;

    /**
     * Placeholder text for the chat bar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatBarPlaceholderText")
    private Optional<String> chatBarPlaceholderText;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentMigrationStatuses")
    private Optional<? extends AgentMigrationStatuses> agentMigrationStatuses;

    @JsonCreator
    public AssistantConfig(
            @JsonProperty("chatBannerText") Optional<String> chatBannerText,
            @JsonProperty("chatBoxDisclaimer") Optional<String> chatBoxDisclaimer,
            @JsonProperty("chatLinkUrlTemplate") Optional<String> chatLinkUrlTemplate,
            @JsonProperty("chatStarterHeader") Optional<String> chatStarterHeader,
            @JsonProperty("chatStarterSubheader") Optional<String> chatStarterSubheader,
            @JsonProperty("agentClientConfigs") Optional<? extends List<AgentClientConfig>> agentClientConfigs,
            @JsonProperty("redlistedDatasources") Optional<? extends List<String>> redlistedDatasources,
            @JsonProperty("greenlistedDatasourceInstances") Optional<? extends List<String>> greenlistedDatasourceInstances,
            @JsonProperty("gptAgentEnabled") Optional<Boolean> gptAgentEnabled,
            @JsonProperty("fileUpload") Optional<? extends FileUploadConfig> fileUpload,
            @JsonProperty("chatHistoryEnabled") Optional<Boolean> chatHistoryEnabled,
            @JsonProperty("chatGuideUrl") Optional<String> chatGuideUrl,
            @JsonProperty("promptsEnabled") Optional<Boolean> promptsEnabled,
            @JsonProperty("defaultUserCanSharePrompts") Optional<Boolean> defaultUserCanSharePrompts,
            @JsonProperty("defaultUserCanShareAgents") Optional<Boolean> defaultUserCanShareAgents,
            @JsonProperty("fileUploadEnabled") Optional<Boolean> fileUploadEnabled,
            @JsonProperty("webSearch") Optional<? extends WebSearchConfig> webSearch,
            @JsonProperty("chatBarV3Enabled") Optional<Boolean> chatBarV3Enabled,
            @JsonProperty("chatBarPlaceholderText") Optional<String> chatBarPlaceholderText,
            @JsonProperty("agentMigrationStatuses") Optional<? extends AgentMigrationStatuses> agentMigrationStatuses) {
        Utils.checkNotNull(chatBannerText, "chatBannerText");
        Utils.checkNotNull(chatBoxDisclaimer, "chatBoxDisclaimer");
        Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
        Utils.checkNotNull(chatStarterHeader, "chatStarterHeader");
        Utils.checkNotNull(chatStarterSubheader, "chatStarterSubheader");
        Utils.checkNotNull(agentClientConfigs, "agentClientConfigs");
        Utils.checkNotNull(redlistedDatasources, "redlistedDatasources");
        Utils.checkNotNull(greenlistedDatasourceInstances, "greenlistedDatasourceInstances");
        Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
        Utils.checkNotNull(fileUpload, "fileUpload");
        Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
        Utils.checkNotNull(chatGuideUrl, "chatGuideUrl");
        Utils.checkNotNull(promptsEnabled, "promptsEnabled");
        Utils.checkNotNull(defaultUserCanSharePrompts, "defaultUserCanSharePrompts");
        Utils.checkNotNull(defaultUserCanShareAgents, "defaultUserCanShareAgents");
        Utils.checkNotNull(fileUploadEnabled, "fileUploadEnabled");
        Utils.checkNotNull(webSearch, "webSearch");
        Utils.checkNotNull(chatBarV3Enabled, "chatBarV3Enabled");
        Utils.checkNotNull(chatBarPlaceholderText, "chatBarPlaceholderText");
        Utils.checkNotNull(agentMigrationStatuses, "agentMigrationStatuses");
        this.chatBannerText = chatBannerText;
        this.chatBoxDisclaimer = chatBoxDisclaimer;
        this.chatLinkUrlTemplate = chatLinkUrlTemplate;
        this.chatStarterHeader = chatStarterHeader;
        this.chatStarterSubheader = chatStarterSubheader;
        this.agentClientConfigs = agentClientConfigs;
        this.redlistedDatasources = redlistedDatasources;
        this.greenlistedDatasourceInstances = greenlistedDatasourceInstances;
        this.gptAgentEnabled = gptAgentEnabled;
        this.fileUpload = fileUpload;
        this.chatHistoryEnabled = chatHistoryEnabled;
        this.chatGuideUrl = chatGuideUrl;
        this.promptsEnabled = promptsEnabled;
        this.defaultUserCanSharePrompts = defaultUserCanSharePrompts;
        this.defaultUserCanShareAgents = defaultUserCanShareAgents;
        this.fileUploadEnabled = fileUploadEnabled;
        this.webSearch = webSearch;
        this.chatBarV3Enabled = chatBarV3Enabled;
        this.chatBarPlaceholderText = chatBarPlaceholderText;
        this.agentMigrationStatuses = agentMigrationStatuses;
    }
    
    public AssistantConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
     */
    @JsonIgnore
    public Optional<String> chatBannerText() {
        return chatBannerText;
    }

    /**
     * Disclaimer message to be displayed below the chat box. This could be in markdown format.
     */
    @JsonIgnore
    public Optional<String> chatBoxDisclaimer() {
        return chatBoxDisclaimer;
    }

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     */
    @JsonIgnore
    public Optional<String> chatLinkUrlTemplate() {
        return chatLinkUrlTemplate;
    }

    /**
     * Label for the chat header during initial state.
     */
    @JsonIgnore
    public Optional<String> chatStarterHeader() {
        return chatStarterHeader;
    }

    /**
     * Label for the chat subheader during initial state.
     */
    @JsonIgnore
    public Optional<String> chatStarterSubheader() {
        return chatStarterSubheader;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AgentClientConfig>> agentClientConfigs() {
        return (Optional<List<AgentClientConfig>>) agentClientConfigs;
    }

    /**
     * A list of datasources that are disabled in Chat
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> redlistedDatasources() {
        return (Optional<List<String>>) redlistedDatasources;
    }

    /**
     * A list of datasources that are always visible in Chat
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> greenlistedDatasourceInstances() {
        return (Optional<List<String>>) greenlistedDatasourceInstances;
    }

    /**
     * Whether the GPT agent (general mode) for Chat is enabled
     */
    @JsonIgnore
    public Optional<Boolean> gptAgentEnabled() {
        return gptAgentEnabled;
    }

    /**
     * Configuration settings for the chat file upload feature
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FileUploadConfig> fileUpload() {
        return (Optional<FileUploadConfig>) fileUpload;
    }

    /**
     * Whether the chat history for Chat is enabled for the deployment
     */
    @JsonIgnore
    public Optional<Boolean> chatHistoryEnabled() {
        return chatHistoryEnabled;
    }

    /**
     * Redirect URL for "Chat guide" in the default chat starter subheader
     */
    @JsonIgnore
    public Optional<String> chatGuideUrl() {
        return chatGuideUrl;
    }

    /**
     * Whether prompt templates feature are enabled for the deployment.
     */
    @JsonIgnore
    public Optional<Boolean> promptsEnabled() {
        return promptsEnabled;
    }

    /**
     * Whether a default user can share prompts to the prompt library.
     */
    @JsonIgnore
    public Optional<Boolean> defaultUserCanSharePrompts() {
        return defaultUserCanSharePrompts;
    }

    /**
     * Whether a default user can share agents to the agent library.
     */
    @JsonIgnore
    public Optional<Boolean> defaultUserCanShareAgents() {
        return defaultUserCanShareAgents;
    }

    /**
     * Whether file upload for Chat is enabled for the deployment
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> fileUploadEnabled() {
        return fileUploadEnabled;
    }

    /**
     * Configuration settings related to web search
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WebSearchConfig> webSearch() {
        return (Optional<WebSearchConfig>) webSearch;
    }

    /**
     * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
     */
    @JsonIgnore
    public Optional<Boolean> chatBarV3Enabled() {
        return chatBarV3Enabled;
    }

    /**
     * Placeholder text for the chat bar
     */
    @JsonIgnore
    public Optional<String> chatBarPlaceholderText() {
        return chatBarPlaceholderText;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AgentMigrationStatuses> agentMigrationStatuses() {
        return (Optional<AgentMigrationStatuses>) agentMigrationStatuses;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
     */
    public AssistantConfig withChatBannerText(String chatBannerText) {
        Utils.checkNotNull(chatBannerText, "chatBannerText");
        this.chatBannerText = Optional.ofNullable(chatBannerText);
        return this;
    }

    /**
     * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
     */
    public AssistantConfig withChatBannerText(Optional<String> chatBannerText) {
        Utils.checkNotNull(chatBannerText, "chatBannerText");
        this.chatBannerText = chatBannerText;
        return this;
    }

    /**
     * Disclaimer message to be displayed below the chat box. This could be in markdown format.
     */
    public AssistantConfig withChatBoxDisclaimer(String chatBoxDisclaimer) {
        Utils.checkNotNull(chatBoxDisclaimer, "chatBoxDisclaimer");
        this.chatBoxDisclaimer = Optional.ofNullable(chatBoxDisclaimer);
        return this;
    }

    /**
     * Disclaimer message to be displayed below the chat box. This could be in markdown format.
     */
    public AssistantConfig withChatBoxDisclaimer(Optional<String> chatBoxDisclaimer) {
        Utils.checkNotNull(chatBoxDisclaimer, "chatBoxDisclaimer");
        this.chatBoxDisclaimer = chatBoxDisclaimer;
        return this;
    }

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     */
    public AssistantConfig withChatLinkUrlTemplate(String chatLinkUrlTemplate) {
        Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
        this.chatLinkUrlTemplate = Optional.ofNullable(chatLinkUrlTemplate);
        return this;
    }

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     */
    public AssistantConfig withChatLinkUrlTemplate(Optional<String> chatLinkUrlTemplate) {
        Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
        this.chatLinkUrlTemplate = chatLinkUrlTemplate;
        return this;
    }

    /**
     * Label for the chat header during initial state.
     */
    public AssistantConfig withChatStarterHeader(String chatStarterHeader) {
        Utils.checkNotNull(chatStarterHeader, "chatStarterHeader");
        this.chatStarterHeader = Optional.ofNullable(chatStarterHeader);
        return this;
    }

    /**
     * Label for the chat header during initial state.
     */
    public AssistantConfig withChatStarterHeader(Optional<String> chatStarterHeader) {
        Utils.checkNotNull(chatStarterHeader, "chatStarterHeader");
        this.chatStarterHeader = chatStarterHeader;
        return this;
    }

    /**
     * Label for the chat subheader during initial state.
     */
    public AssistantConfig withChatStarterSubheader(String chatStarterSubheader) {
        Utils.checkNotNull(chatStarterSubheader, "chatStarterSubheader");
        this.chatStarterSubheader = Optional.ofNullable(chatStarterSubheader);
        return this;
    }

    /**
     * Label for the chat subheader during initial state.
     */
    public AssistantConfig withChatStarterSubheader(Optional<String> chatStarterSubheader) {
        Utils.checkNotNull(chatStarterSubheader, "chatStarterSubheader");
        this.chatStarterSubheader = chatStarterSubheader;
        return this;
    }

    public AssistantConfig withAgentClientConfigs(List<AgentClientConfig> agentClientConfigs) {
        Utils.checkNotNull(agentClientConfigs, "agentClientConfigs");
        this.agentClientConfigs = Optional.ofNullable(agentClientConfigs);
        return this;
    }

    public AssistantConfig withAgentClientConfigs(Optional<? extends List<AgentClientConfig>> agentClientConfigs) {
        Utils.checkNotNull(agentClientConfigs, "agentClientConfigs");
        this.agentClientConfigs = agentClientConfigs;
        return this;
    }

    /**
     * A list of datasources that are disabled in Chat
     */
    public AssistantConfig withRedlistedDatasources(List<String> redlistedDatasources) {
        Utils.checkNotNull(redlistedDatasources, "redlistedDatasources");
        this.redlistedDatasources = Optional.ofNullable(redlistedDatasources);
        return this;
    }

    /**
     * A list of datasources that are disabled in Chat
     */
    public AssistantConfig withRedlistedDatasources(Optional<? extends List<String>> redlistedDatasources) {
        Utils.checkNotNull(redlistedDatasources, "redlistedDatasources");
        this.redlistedDatasources = redlistedDatasources;
        return this;
    }

    /**
     * A list of datasources that are always visible in Chat
     */
    public AssistantConfig withGreenlistedDatasourceInstances(List<String> greenlistedDatasourceInstances) {
        Utils.checkNotNull(greenlistedDatasourceInstances, "greenlistedDatasourceInstances");
        this.greenlistedDatasourceInstances = Optional.ofNullable(greenlistedDatasourceInstances);
        return this;
    }

    /**
     * A list of datasources that are always visible in Chat
     */
    public AssistantConfig withGreenlistedDatasourceInstances(Optional<? extends List<String>> greenlistedDatasourceInstances) {
        Utils.checkNotNull(greenlistedDatasourceInstances, "greenlistedDatasourceInstances");
        this.greenlistedDatasourceInstances = greenlistedDatasourceInstances;
        return this;
    }

    /**
     * Whether the GPT agent (general mode) for Chat is enabled
     */
    public AssistantConfig withGptAgentEnabled(boolean gptAgentEnabled) {
        Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
        this.gptAgentEnabled = Optional.ofNullable(gptAgentEnabled);
        return this;
    }

    /**
     * Whether the GPT agent (general mode) for Chat is enabled
     */
    public AssistantConfig withGptAgentEnabled(Optional<Boolean> gptAgentEnabled) {
        Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
        this.gptAgentEnabled = gptAgentEnabled;
        return this;
    }

    /**
     * Configuration settings for the chat file upload feature
     */
    public AssistantConfig withFileUpload(FileUploadConfig fileUpload) {
        Utils.checkNotNull(fileUpload, "fileUpload");
        this.fileUpload = Optional.ofNullable(fileUpload);
        return this;
    }

    /**
     * Configuration settings for the chat file upload feature
     */
    public AssistantConfig withFileUpload(Optional<? extends FileUploadConfig> fileUpload) {
        Utils.checkNotNull(fileUpload, "fileUpload");
        this.fileUpload = fileUpload;
        return this;
    }

    /**
     * Whether the chat history for Chat is enabled for the deployment
     */
    public AssistantConfig withChatHistoryEnabled(boolean chatHistoryEnabled) {
        Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
        this.chatHistoryEnabled = Optional.ofNullable(chatHistoryEnabled);
        return this;
    }

    /**
     * Whether the chat history for Chat is enabled for the deployment
     */
    public AssistantConfig withChatHistoryEnabled(Optional<Boolean> chatHistoryEnabled) {
        Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
        this.chatHistoryEnabled = chatHistoryEnabled;
        return this;
    }

    /**
     * Redirect URL for "Chat guide" in the default chat starter subheader
     */
    public AssistantConfig withChatGuideUrl(String chatGuideUrl) {
        Utils.checkNotNull(chatGuideUrl, "chatGuideUrl");
        this.chatGuideUrl = Optional.ofNullable(chatGuideUrl);
        return this;
    }

    /**
     * Redirect URL for "Chat guide" in the default chat starter subheader
     */
    public AssistantConfig withChatGuideUrl(Optional<String> chatGuideUrl) {
        Utils.checkNotNull(chatGuideUrl, "chatGuideUrl");
        this.chatGuideUrl = chatGuideUrl;
        return this;
    }

    /**
     * Whether prompt templates feature are enabled for the deployment.
     */
    public AssistantConfig withPromptsEnabled(boolean promptsEnabled) {
        Utils.checkNotNull(promptsEnabled, "promptsEnabled");
        this.promptsEnabled = Optional.ofNullable(promptsEnabled);
        return this;
    }

    /**
     * Whether prompt templates feature are enabled for the deployment.
     */
    public AssistantConfig withPromptsEnabled(Optional<Boolean> promptsEnabled) {
        Utils.checkNotNull(promptsEnabled, "promptsEnabled");
        this.promptsEnabled = promptsEnabled;
        return this;
    }

    /**
     * Whether a default user can share prompts to the prompt library.
     */
    public AssistantConfig withDefaultUserCanSharePrompts(boolean defaultUserCanSharePrompts) {
        Utils.checkNotNull(defaultUserCanSharePrompts, "defaultUserCanSharePrompts");
        this.defaultUserCanSharePrompts = Optional.ofNullable(defaultUserCanSharePrompts);
        return this;
    }

    /**
     * Whether a default user can share prompts to the prompt library.
     */
    public AssistantConfig withDefaultUserCanSharePrompts(Optional<Boolean> defaultUserCanSharePrompts) {
        Utils.checkNotNull(defaultUserCanSharePrompts, "defaultUserCanSharePrompts");
        this.defaultUserCanSharePrompts = defaultUserCanSharePrompts;
        return this;
    }

    /**
     * Whether a default user can share agents to the agent library.
     */
    public AssistantConfig withDefaultUserCanShareAgents(boolean defaultUserCanShareAgents) {
        Utils.checkNotNull(defaultUserCanShareAgents, "defaultUserCanShareAgents");
        this.defaultUserCanShareAgents = Optional.ofNullable(defaultUserCanShareAgents);
        return this;
    }

    /**
     * Whether a default user can share agents to the agent library.
     */
    public AssistantConfig withDefaultUserCanShareAgents(Optional<Boolean> defaultUserCanShareAgents) {
        Utils.checkNotNull(defaultUserCanShareAgents, "defaultUserCanShareAgents");
        this.defaultUserCanShareAgents = defaultUserCanShareAgents;
        return this;
    }

    /**
     * Whether file upload for Chat is enabled for the deployment
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public AssistantConfig withFileUploadEnabled(boolean fileUploadEnabled) {
        Utils.checkNotNull(fileUploadEnabled, "fileUploadEnabled");
        this.fileUploadEnabled = Optional.ofNullable(fileUploadEnabled);
        return this;
    }

    /**
     * Whether file upload for Chat is enabled for the deployment
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public AssistantConfig withFileUploadEnabled(Optional<Boolean> fileUploadEnabled) {
        Utils.checkNotNull(fileUploadEnabled, "fileUploadEnabled");
        this.fileUploadEnabled = fileUploadEnabled;
        return this;
    }

    /**
     * Configuration settings related to web search
     */
    public AssistantConfig withWebSearch(WebSearchConfig webSearch) {
        Utils.checkNotNull(webSearch, "webSearch");
        this.webSearch = Optional.ofNullable(webSearch);
        return this;
    }

    /**
     * Configuration settings related to web search
     */
    public AssistantConfig withWebSearch(Optional<? extends WebSearchConfig> webSearch) {
        Utils.checkNotNull(webSearch, "webSearch");
        this.webSearch = webSearch;
        return this;
    }

    /**
     * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
     */
    public AssistantConfig withChatBarV3Enabled(boolean chatBarV3Enabled) {
        Utils.checkNotNull(chatBarV3Enabled, "chatBarV3Enabled");
        this.chatBarV3Enabled = Optional.ofNullable(chatBarV3Enabled);
        return this;
    }

    /**
     * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
     */
    public AssistantConfig withChatBarV3Enabled(Optional<Boolean> chatBarV3Enabled) {
        Utils.checkNotNull(chatBarV3Enabled, "chatBarV3Enabled");
        this.chatBarV3Enabled = chatBarV3Enabled;
        return this;
    }

    /**
     * Placeholder text for the chat bar
     */
    public AssistantConfig withChatBarPlaceholderText(String chatBarPlaceholderText) {
        Utils.checkNotNull(chatBarPlaceholderText, "chatBarPlaceholderText");
        this.chatBarPlaceholderText = Optional.ofNullable(chatBarPlaceholderText);
        return this;
    }

    /**
     * Placeholder text for the chat bar
     */
    public AssistantConfig withChatBarPlaceholderText(Optional<String> chatBarPlaceholderText) {
        Utils.checkNotNull(chatBarPlaceholderText, "chatBarPlaceholderText");
        this.chatBarPlaceholderText = chatBarPlaceholderText;
        return this;
    }

    public AssistantConfig withAgentMigrationStatuses(AgentMigrationStatuses agentMigrationStatuses) {
        Utils.checkNotNull(agentMigrationStatuses, "agentMigrationStatuses");
        this.agentMigrationStatuses = Optional.ofNullable(agentMigrationStatuses);
        return this;
    }

    public AssistantConfig withAgentMigrationStatuses(Optional<? extends AgentMigrationStatuses> agentMigrationStatuses) {
        Utils.checkNotNull(agentMigrationStatuses, "agentMigrationStatuses");
        this.agentMigrationStatuses = agentMigrationStatuses;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssistantConfig other = (AssistantConfig) o;
        return 
            Objects.deepEquals(this.chatBannerText, other.chatBannerText) &&
            Objects.deepEquals(this.chatBoxDisclaimer, other.chatBoxDisclaimer) &&
            Objects.deepEquals(this.chatLinkUrlTemplate, other.chatLinkUrlTemplate) &&
            Objects.deepEquals(this.chatStarterHeader, other.chatStarterHeader) &&
            Objects.deepEquals(this.chatStarterSubheader, other.chatStarterSubheader) &&
            Objects.deepEquals(this.agentClientConfigs, other.agentClientConfigs) &&
            Objects.deepEquals(this.redlistedDatasources, other.redlistedDatasources) &&
            Objects.deepEquals(this.greenlistedDatasourceInstances, other.greenlistedDatasourceInstances) &&
            Objects.deepEquals(this.gptAgentEnabled, other.gptAgentEnabled) &&
            Objects.deepEquals(this.fileUpload, other.fileUpload) &&
            Objects.deepEquals(this.chatHistoryEnabled, other.chatHistoryEnabled) &&
            Objects.deepEquals(this.chatGuideUrl, other.chatGuideUrl) &&
            Objects.deepEquals(this.promptsEnabled, other.promptsEnabled) &&
            Objects.deepEquals(this.defaultUserCanSharePrompts, other.defaultUserCanSharePrompts) &&
            Objects.deepEquals(this.defaultUserCanShareAgents, other.defaultUserCanShareAgents) &&
            Objects.deepEquals(this.fileUploadEnabled, other.fileUploadEnabled) &&
            Objects.deepEquals(this.webSearch, other.webSearch) &&
            Objects.deepEquals(this.chatBarV3Enabled, other.chatBarV3Enabled) &&
            Objects.deepEquals(this.chatBarPlaceholderText, other.chatBarPlaceholderText) &&
            Objects.deepEquals(this.agentMigrationStatuses, other.agentMigrationStatuses);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            chatBannerText,
            chatBoxDisclaimer,
            chatLinkUrlTemplate,
            chatStarterHeader,
            chatStarterSubheader,
            agentClientConfigs,
            redlistedDatasources,
            greenlistedDatasourceInstances,
            gptAgentEnabled,
            fileUpload,
            chatHistoryEnabled,
            chatGuideUrl,
            promptsEnabled,
            defaultUserCanSharePrompts,
            defaultUserCanShareAgents,
            fileUploadEnabled,
            webSearch,
            chatBarV3Enabled,
            chatBarPlaceholderText,
            agentMigrationStatuses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AssistantConfig.class,
                "chatBannerText", chatBannerText,
                "chatBoxDisclaimer", chatBoxDisclaimer,
                "chatLinkUrlTemplate", chatLinkUrlTemplate,
                "chatStarterHeader", chatStarterHeader,
                "chatStarterSubheader", chatStarterSubheader,
                "agentClientConfigs", agentClientConfigs,
                "redlistedDatasources", redlistedDatasources,
                "greenlistedDatasourceInstances", greenlistedDatasourceInstances,
                "gptAgentEnabled", gptAgentEnabled,
                "fileUpload", fileUpload,
                "chatHistoryEnabled", chatHistoryEnabled,
                "chatGuideUrl", chatGuideUrl,
                "promptsEnabled", promptsEnabled,
                "defaultUserCanSharePrompts", defaultUserCanSharePrompts,
                "defaultUserCanShareAgents", defaultUserCanShareAgents,
                "fileUploadEnabled", fileUploadEnabled,
                "webSearch", webSearch,
                "chatBarV3Enabled", chatBarV3Enabled,
                "chatBarPlaceholderText", chatBarPlaceholderText,
                "agentMigrationStatuses", agentMigrationStatuses);
    }
    
    public final static class Builder {
 
        private Optional<String> chatBannerText = Optional.empty();
 
        private Optional<String> chatBoxDisclaimer = Optional.empty();
 
        private Optional<String> chatLinkUrlTemplate = Optional.empty();
 
        private Optional<String> chatStarterHeader = Optional.empty();
 
        private Optional<String> chatStarterSubheader = Optional.empty();
 
        private Optional<? extends List<AgentClientConfig>> agentClientConfigs = Optional.empty();
 
        private Optional<? extends List<String>> redlistedDatasources = Optional.empty();
 
        private Optional<? extends List<String>> greenlistedDatasourceInstances = Optional.empty();
 
        private Optional<Boolean> gptAgentEnabled = Optional.empty();
 
        private Optional<? extends FileUploadConfig> fileUpload = Optional.empty();
 
        private Optional<Boolean> chatHistoryEnabled = Optional.empty();
 
        private Optional<String> chatGuideUrl = Optional.empty();
 
        private Optional<Boolean> promptsEnabled = Optional.empty();
 
        private Optional<Boolean> defaultUserCanSharePrompts = Optional.empty();
 
        private Optional<Boolean> defaultUserCanShareAgents = Optional.empty();
 
        @Deprecated
        private Optional<Boolean> fileUploadEnabled = Optional.empty();
 
        private Optional<? extends WebSearchConfig> webSearch = Optional.empty();
 
        private Optional<Boolean> chatBarV3Enabled = Optional.empty();
 
        private Optional<String> chatBarPlaceholderText = Optional.empty();
 
        private Optional<? extends AgentMigrationStatuses> agentMigrationStatuses = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
         */
        public Builder chatBannerText(String chatBannerText) {
            Utils.checkNotNull(chatBannerText, "chatBannerText");
            this.chatBannerText = Optional.ofNullable(chatBannerText);
            return this;
        }

        /**
         * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
         */
        public Builder chatBannerText(Optional<String> chatBannerText) {
            Utils.checkNotNull(chatBannerText, "chatBannerText");
            this.chatBannerText = chatBannerText;
            return this;
        }

        /**
         * Disclaimer message to be displayed below the chat box. This could be in markdown format.
         */
        public Builder chatBoxDisclaimer(String chatBoxDisclaimer) {
            Utils.checkNotNull(chatBoxDisclaimer, "chatBoxDisclaimer");
            this.chatBoxDisclaimer = Optional.ofNullable(chatBoxDisclaimer);
            return this;
        }

        /**
         * Disclaimer message to be displayed below the chat box. This could be in markdown format.
         */
        public Builder chatBoxDisclaimer(Optional<String> chatBoxDisclaimer) {
            Utils.checkNotNull(chatBoxDisclaimer, "chatBoxDisclaimer");
            this.chatBoxDisclaimer = chatBoxDisclaimer;
            return this;
        }

        /**
         * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
         */
        public Builder chatLinkUrlTemplate(String chatLinkUrlTemplate) {
            Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
            this.chatLinkUrlTemplate = Optional.ofNullable(chatLinkUrlTemplate);
            return this;
        }

        /**
         * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
         */
        public Builder chatLinkUrlTemplate(Optional<String> chatLinkUrlTemplate) {
            Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
            this.chatLinkUrlTemplate = chatLinkUrlTemplate;
            return this;
        }

        /**
         * Label for the chat header during initial state.
         */
        public Builder chatStarterHeader(String chatStarterHeader) {
            Utils.checkNotNull(chatStarterHeader, "chatStarterHeader");
            this.chatStarterHeader = Optional.ofNullable(chatStarterHeader);
            return this;
        }

        /**
         * Label for the chat header during initial state.
         */
        public Builder chatStarterHeader(Optional<String> chatStarterHeader) {
            Utils.checkNotNull(chatStarterHeader, "chatStarterHeader");
            this.chatStarterHeader = chatStarterHeader;
            return this;
        }

        /**
         * Label for the chat subheader during initial state.
         */
        public Builder chatStarterSubheader(String chatStarterSubheader) {
            Utils.checkNotNull(chatStarterSubheader, "chatStarterSubheader");
            this.chatStarterSubheader = Optional.ofNullable(chatStarterSubheader);
            return this;
        }

        /**
         * Label for the chat subheader during initial state.
         */
        public Builder chatStarterSubheader(Optional<String> chatStarterSubheader) {
            Utils.checkNotNull(chatStarterSubheader, "chatStarterSubheader");
            this.chatStarterSubheader = chatStarterSubheader;
            return this;
        }

        public Builder agentClientConfigs(List<AgentClientConfig> agentClientConfigs) {
            Utils.checkNotNull(agentClientConfigs, "agentClientConfigs");
            this.agentClientConfigs = Optional.ofNullable(agentClientConfigs);
            return this;
        }

        public Builder agentClientConfigs(Optional<? extends List<AgentClientConfig>> agentClientConfigs) {
            Utils.checkNotNull(agentClientConfigs, "agentClientConfigs");
            this.agentClientConfigs = agentClientConfigs;
            return this;
        }

        /**
         * A list of datasources that are disabled in Chat
         */
        public Builder redlistedDatasources(List<String> redlistedDatasources) {
            Utils.checkNotNull(redlistedDatasources, "redlistedDatasources");
            this.redlistedDatasources = Optional.ofNullable(redlistedDatasources);
            return this;
        }

        /**
         * A list of datasources that are disabled in Chat
         */
        public Builder redlistedDatasources(Optional<? extends List<String>> redlistedDatasources) {
            Utils.checkNotNull(redlistedDatasources, "redlistedDatasources");
            this.redlistedDatasources = redlistedDatasources;
            return this;
        }

        /**
         * A list of datasources that are always visible in Chat
         */
        public Builder greenlistedDatasourceInstances(List<String> greenlistedDatasourceInstances) {
            Utils.checkNotNull(greenlistedDatasourceInstances, "greenlistedDatasourceInstances");
            this.greenlistedDatasourceInstances = Optional.ofNullable(greenlistedDatasourceInstances);
            return this;
        }

        /**
         * A list of datasources that are always visible in Chat
         */
        public Builder greenlistedDatasourceInstances(Optional<? extends List<String>> greenlistedDatasourceInstances) {
            Utils.checkNotNull(greenlistedDatasourceInstances, "greenlistedDatasourceInstances");
            this.greenlistedDatasourceInstances = greenlistedDatasourceInstances;
            return this;
        }

        /**
         * Whether the GPT agent (general mode) for Chat is enabled
         */
        public Builder gptAgentEnabled(boolean gptAgentEnabled) {
            Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
            this.gptAgentEnabled = Optional.ofNullable(gptAgentEnabled);
            return this;
        }

        /**
         * Whether the GPT agent (general mode) for Chat is enabled
         */
        public Builder gptAgentEnabled(Optional<Boolean> gptAgentEnabled) {
            Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
            this.gptAgentEnabled = gptAgentEnabled;
            return this;
        }

        /**
         * Configuration settings for the chat file upload feature
         */
        public Builder fileUpload(FileUploadConfig fileUpload) {
            Utils.checkNotNull(fileUpload, "fileUpload");
            this.fileUpload = Optional.ofNullable(fileUpload);
            return this;
        }

        /**
         * Configuration settings for the chat file upload feature
         */
        public Builder fileUpload(Optional<? extends FileUploadConfig> fileUpload) {
            Utils.checkNotNull(fileUpload, "fileUpload");
            this.fileUpload = fileUpload;
            return this;
        }

        /**
         * Whether the chat history for Chat is enabled for the deployment
         */
        public Builder chatHistoryEnabled(boolean chatHistoryEnabled) {
            Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
            this.chatHistoryEnabled = Optional.ofNullable(chatHistoryEnabled);
            return this;
        }

        /**
         * Whether the chat history for Chat is enabled for the deployment
         */
        public Builder chatHistoryEnabled(Optional<Boolean> chatHistoryEnabled) {
            Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
            this.chatHistoryEnabled = chatHistoryEnabled;
            return this;
        }

        /**
         * Redirect URL for "Chat guide" in the default chat starter subheader
         */
        public Builder chatGuideUrl(String chatGuideUrl) {
            Utils.checkNotNull(chatGuideUrl, "chatGuideUrl");
            this.chatGuideUrl = Optional.ofNullable(chatGuideUrl);
            return this;
        }

        /**
         * Redirect URL for "Chat guide" in the default chat starter subheader
         */
        public Builder chatGuideUrl(Optional<String> chatGuideUrl) {
            Utils.checkNotNull(chatGuideUrl, "chatGuideUrl");
            this.chatGuideUrl = chatGuideUrl;
            return this;
        }

        /**
         * Whether prompt templates feature are enabled for the deployment.
         */
        public Builder promptsEnabled(boolean promptsEnabled) {
            Utils.checkNotNull(promptsEnabled, "promptsEnabled");
            this.promptsEnabled = Optional.ofNullable(promptsEnabled);
            return this;
        }

        /**
         * Whether prompt templates feature are enabled for the deployment.
         */
        public Builder promptsEnabled(Optional<Boolean> promptsEnabled) {
            Utils.checkNotNull(promptsEnabled, "promptsEnabled");
            this.promptsEnabled = promptsEnabled;
            return this;
        }

        /**
         * Whether a default user can share prompts to the prompt library.
         */
        public Builder defaultUserCanSharePrompts(boolean defaultUserCanSharePrompts) {
            Utils.checkNotNull(defaultUserCanSharePrompts, "defaultUserCanSharePrompts");
            this.defaultUserCanSharePrompts = Optional.ofNullable(defaultUserCanSharePrompts);
            return this;
        }

        /**
         * Whether a default user can share prompts to the prompt library.
         */
        public Builder defaultUserCanSharePrompts(Optional<Boolean> defaultUserCanSharePrompts) {
            Utils.checkNotNull(defaultUserCanSharePrompts, "defaultUserCanSharePrompts");
            this.defaultUserCanSharePrompts = defaultUserCanSharePrompts;
            return this;
        }

        /**
         * Whether a default user can share agents to the agent library.
         */
        public Builder defaultUserCanShareAgents(boolean defaultUserCanShareAgents) {
            Utils.checkNotNull(defaultUserCanShareAgents, "defaultUserCanShareAgents");
            this.defaultUserCanShareAgents = Optional.ofNullable(defaultUserCanShareAgents);
            return this;
        }

        /**
         * Whether a default user can share agents to the agent library.
         */
        public Builder defaultUserCanShareAgents(Optional<Boolean> defaultUserCanShareAgents) {
            Utils.checkNotNull(defaultUserCanShareAgents, "defaultUserCanShareAgents");
            this.defaultUserCanShareAgents = defaultUserCanShareAgents;
            return this;
        }

        /**
         * Whether file upload for Chat is enabled for the deployment
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder fileUploadEnabled(boolean fileUploadEnabled) {
            Utils.checkNotNull(fileUploadEnabled, "fileUploadEnabled");
            this.fileUploadEnabled = Optional.ofNullable(fileUploadEnabled);
            return this;
        }

        /**
         * Whether file upload for Chat is enabled for the deployment
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder fileUploadEnabled(Optional<Boolean> fileUploadEnabled) {
            Utils.checkNotNull(fileUploadEnabled, "fileUploadEnabled");
            this.fileUploadEnabled = fileUploadEnabled;
            return this;
        }

        /**
         * Configuration settings related to web search
         */
        public Builder webSearch(WebSearchConfig webSearch) {
            Utils.checkNotNull(webSearch, "webSearch");
            this.webSearch = Optional.ofNullable(webSearch);
            return this;
        }

        /**
         * Configuration settings related to web search
         */
        public Builder webSearch(Optional<? extends WebSearchConfig> webSearch) {
            Utils.checkNotNull(webSearch, "webSearch");
            this.webSearch = webSearch;
            return this;
        }

        /**
         * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
         */
        public Builder chatBarV3Enabled(boolean chatBarV3Enabled) {
            Utils.checkNotNull(chatBarV3Enabled, "chatBarV3Enabled");
            this.chatBarV3Enabled = Optional.ofNullable(chatBarV3Enabled);
            return this;
        }

        /**
         * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
         */
        public Builder chatBarV3Enabled(Optional<Boolean> chatBarV3Enabled) {
            Utils.checkNotNull(chatBarV3Enabled, "chatBarV3Enabled");
            this.chatBarV3Enabled = chatBarV3Enabled;
            return this;
        }

        /**
         * Placeholder text for the chat bar
         */
        public Builder chatBarPlaceholderText(String chatBarPlaceholderText) {
            Utils.checkNotNull(chatBarPlaceholderText, "chatBarPlaceholderText");
            this.chatBarPlaceholderText = Optional.ofNullable(chatBarPlaceholderText);
            return this;
        }

        /**
         * Placeholder text for the chat bar
         */
        public Builder chatBarPlaceholderText(Optional<String> chatBarPlaceholderText) {
            Utils.checkNotNull(chatBarPlaceholderText, "chatBarPlaceholderText");
            this.chatBarPlaceholderText = chatBarPlaceholderText;
            return this;
        }

        public Builder agentMigrationStatuses(AgentMigrationStatuses agentMigrationStatuses) {
            Utils.checkNotNull(agentMigrationStatuses, "agentMigrationStatuses");
            this.agentMigrationStatuses = Optional.ofNullable(agentMigrationStatuses);
            return this;
        }

        public Builder agentMigrationStatuses(Optional<? extends AgentMigrationStatuses> agentMigrationStatuses) {
            Utils.checkNotNull(agentMigrationStatuses, "agentMigrationStatuses");
            this.agentMigrationStatuses = agentMigrationStatuses;
            return this;
        }
        
        public AssistantConfig build() {
            return new AssistantConfig(
                chatBannerText,
                chatBoxDisclaimer,
                chatLinkUrlTemplate,
                chatStarterHeader,
                chatStarterSubheader,
                agentClientConfigs,
                redlistedDatasources,
                greenlistedDatasourceInstances,
                gptAgentEnabled,
                fileUpload,
                chatHistoryEnabled,
                chatGuideUrl,
                promptsEnabled,
                defaultUserCanSharePrompts,
                defaultUserCanShareAgents,
                fileUploadEnabled,
                webSearch,
                chatBarV3Enabled,
                chatBarPlaceholderText,
                agentMigrationStatuses);
        }
    }
}
