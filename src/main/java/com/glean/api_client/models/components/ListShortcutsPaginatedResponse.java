/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListShortcutsPaginatedResponse {

    /**
     * List of all shortcuts accessible to the user
     */
    @JsonProperty("shortcuts")
    private List<Shortcut> shortcuts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetResults")
    private Optional<? extends List<FacetResult>> facetResults;

    @JsonProperty("meta")
    private ShortcutsPaginationMetadata meta;

    @JsonCreator
    public ListShortcutsPaginatedResponse(
            @JsonProperty("shortcuts") List<Shortcut> shortcuts,
            @JsonProperty("facetResults") Optional<? extends List<FacetResult>> facetResults,
            @JsonProperty("meta") ShortcutsPaginationMetadata meta) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        Utils.checkNotNull(facetResults, "facetResults");
        Utils.checkNotNull(meta, "meta");
        this.shortcuts = shortcuts;
        this.facetResults = facetResults;
        this.meta = meta;
    }
    
    public ListShortcutsPaginatedResponse(
            List<Shortcut> shortcuts,
            ShortcutsPaginationMetadata meta) {
        this(shortcuts, Optional.empty(), meta);
    }

    /**
     * List of all shortcuts accessible to the user
     */
    @JsonIgnore
    public List<Shortcut> shortcuts() {
        return shortcuts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetResult>> facetResults() {
        return (Optional<List<FacetResult>>) facetResults;
    }

    @JsonIgnore
    public ShortcutsPaginationMetadata meta() {
        return meta;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of all shortcuts accessible to the user
     */
    public ListShortcutsPaginatedResponse withShortcuts(List<Shortcut> shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = shortcuts;
        return this;
    }

    public ListShortcutsPaginatedResponse withFacetResults(List<FacetResult> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = Optional.ofNullable(facetResults);
        return this;
    }

    public ListShortcutsPaginatedResponse withFacetResults(Optional<? extends List<FacetResult>> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = facetResults;
        return this;
    }

    public ListShortcutsPaginatedResponse withMeta(ShortcutsPaginationMetadata meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListShortcutsPaginatedResponse other = (ListShortcutsPaginatedResponse) o;
        return 
            Objects.deepEquals(this.shortcuts, other.shortcuts) &&
            Objects.deepEquals(this.facetResults, other.facetResults) &&
            Objects.deepEquals(this.meta, other.meta);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            shortcuts,
            facetResults,
            meta);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListShortcutsPaginatedResponse.class,
                "shortcuts", shortcuts,
                "facetResults", facetResults,
                "meta", meta);
    }
    
    public final static class Builder {
 
        private List<Shortcut> shortcuts;
 
        private Optional<? extends List<FacetResult>> facetResults = Optional.empty();
 
        private ShortcutsPaginationMetadata meta;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of all shortcuts accessible to the user
         */
        public Builder shortcuts(List<Shortcut> shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = shortcuts;
            return this;
        }

        public Builder facetResults(List<FacetResult> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = Optional.ofNullable(facetResults);
            return this;
        }

        public Builder facetResults(Optional<? extends List<FacetResult>> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = facetResults;
            return this;
        }

        public Builder meta(ShortcutsPaginationMetadata meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }
        
        public ListShortcutsPaginatedResponse build() {
            return new ListShortcutsPaginatedResponse(
                shortcuts,
                facetResults,
                meta);
        }
    }
}
