/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GetDocumentStatusResponse
 * 
 * <p>Describes the response body of the /getdocumentstatus API call
 */
public class GetDocumentStatusResponse {

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadStatus")
    private Optional<String> uploadStatus;

    /**
     * Time of last successful upload, in epoch seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUploadedAt")
    private Optional<Long> lastUploadedAt;

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexingStatus")
    private Optional<String> indexingStatus;

    /**
     * Time of last successful indexing, in epoch seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastIndexedAt")
    private Optional<Long> lastIndexedAt;

    @JsonCreator
    public GetDocumentStatusResponse(
            @JsonProperty("uploadStatus") Optional<String> uploadStatus,
            @JsonProperty("lastUploadedAt") Optional<Long> lastUploadedAt,
            @JsonProperty("indexingStatus") Optional<String> indexingStatus,
            @JsonProperty("lastIndexedAt") Optional<Long> lastIndexedAt) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        Utils.checkNotNull(indexingStatus, "indexingStatus");
        Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
        this.uploadStatus = uploadStatus;
        this.lastUploadedAt = lastUploadedAt;
        this.indexingStatus = indexingStatus;
        this.lastIndexedAt = lastIndexedAt;
    }
    
    public GetDocumentStatusResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    @JsonIgnore
    public Optional<String> uploadStatus() {
        return uploadStatus;
    }

    /**
     * Time of last successful upload, in epoch seconds
     */
    @JsonIgnore
    public Optional<Long> lastUploadedAt() {
        return lastUploadedAt;
    }

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    @JsonIgnore
    public Optional<String> indexingStatus() {
        return indexingStatus;
    }

    /**
     * Time of last successful indexing, in epoch seconds
     */
    @JsonIgnore
    public Optional<Long> lastIndexedAt() {
        return lastIndexedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    public GetDocumentStatusResponse withUploadStatus(String uploadStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        this.uploadStatus = Optional.ofNullable(uploadStatus);
        return this;
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    public GetDocumentStatusResponse withUploadStatus(Optional<String> uploadStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        this.uploadStatus = uploadStatus;
        return this;
    }

    /**
     * Time of last successful upload, in epoch seconds
     */
    public GetDocumentStatusResponse withLastUploadedAt(long lastUploadedAt) {
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.lastUploadedAt = Optional.ofNullable(lastUploadedAt);
        return this;
    }

    /**
     * Time of last successful upload, in epoch seconds
     */
    public GetDocumentStatusResponse withLastUploadedAt(Optional<Long> lastUploadedAt) {
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.lastUploadedAt = lastUploadedAt;
        return this;
    }

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    public GetDocumentStatusResponse withIndexingStatus(String indexingStatus) {
        Utils.checkNotNull(indexingStatus, "indexingStatus");
        this.indexingStatus = Optional.ofNullable(indexingStatus);
        return this;
    }

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    public GetDocumentStatusResponse withIndexingStatus(Optional<String> indexingStatus) {
        Utils.checkNotNull(indexingStatus, "indexingStatus");
        this.indexingStatus = indexingStatus;
        return this;
    }

    /**
     * Time of last successful indexing, in epoch seconds
     */
    public GetDocumentStatusResponse withLastIndexedAt(long lastIndexedAt) {
        Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
        this.lastIndexedAt = Optional.ofNullable(lastIndexedAt);
        return this;
    }

    /**
     * Time of last successful indexing, in epoch seconds
     */
    public GetDocumentStatusResponse withLastIndexedAt(Optional<Long> lastIndexedAt) {
        Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
        this.lastIndexedAt = lastIndexedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentStatusResponse other = (GetDocumentStatusResponse) o;
        return 
            Objects.deepEquals(this.uploadStatus, other.uploadStatus) &&
            Objects.deepEquals(this.lastUploadedAt, other.lastUploadedAt) &&
            Objects.deepEquals(this.indexingStatus, other.indexingStatus) &&
            Objects.deepEquals(this.lastIndexedAt, other.lastIndexedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uploadStatus,
            lastUploadedAt,
            indexingStatus,
            lastIndexedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentStatusResponse.class,
                "uploadStatus", uploadStatus,
                "lastUploadedAt", lastUploadedAt,
                "indexingStatus", indexingStatus,
                "lastIndexedAt", lastIndexedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> uploadStatus = Optional.empty();
 
        private Optional<Long> lastUploadedAt = Optional.empty();
 
        private Optional<String> indexingStatus = Optional.empty();
 
        private Optional<Long> lastIndexedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
         */
        public Builder uploadStatus(String uploadStatus) {
            Utils.checkNotNull(uploadStatus, "uploadStatus");
            this.uploadStatus = Optional.ofNullable(uploadStatus);
            return this;
        }

        /**
         * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
         */
        public Builder uploadStatus(Optional<String> uploadStatus) {
            Utils.checkNotNull(uploadStatus, "uploadStatus");
            this.uploadStatus = uploadStatus;
            return this;
        }

        /**
         * Time of last successful upload, in epoch seconds
         */
        public Builder lastUploadedAt(long lastUploadedAt) {
            Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
            this.lastUploadedAt = Optional.ofNullable(lastUploadedAt);
            return this;
        }

        /**
         * Time of last successful upload, in epoch seconds
         */
        public Builder lastUploadedAt(Optional<Long> lastUploadedAt) {
            Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
            this.lastUploadedAt = lastUploadedAt;
            return this;
        }

        /**
         * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
         */
        public Builder indexingStatus(String indexingStatus) {
            Utils.checkNotNull(indexingStatus, "indexingStatus");
            this.indexingStatus = Optional.ofNullable(indexingStatus);
            return this;
        }

        /**
         * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
         */
        public Builder indexingStatus(Optional<String> indexingStatus) {
            Utils.checkNotNull(indexingStatus, "indexingStatus");
            this.indexingStatus = indexingStatus;
            return this;
        }

        /**
         * Time of last successful indexing, in epoch seconds
         */
        public Builder lastIndexedAt(long lastIndexedAt) {
            Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
            this.lastIndexedAt = Optional.ofNullable(lastIndexedAt);
            return this;
        }

        /**
         * Time of last successful indexing, in epoch seconds
         */
        public Builder lastIndexedAt(Optional<Long> lastIndexedAt) {
            Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
            this.lastIndexedAt = lastIndexedAt;
            return this;
        }
        
        public GetDocumentStatusResponse build() {
            return new GetDocumentStatusResponse(
                uploadStatus,
                lastUploadedAt,
                indexingStatus,
                lastIndexedAt);
        }
    }
}
