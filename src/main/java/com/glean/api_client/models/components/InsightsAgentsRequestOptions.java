/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class InsightsAgentsRequestOptions {

    /**
     * IDs of the Agents for which Insights should be returned. An empty array signifies all.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentIds")
    private Optional<? extends List<String>> agentIds;

    @JsonCreator
    public InsightsAgentsRequestOptions(
            @JsonProperty("agentIds") Optional<? extends List<String>> agentIds) {
        Utils.checkNotNull(agentIds, "agentIds");
        this.agentIds = agentIds;
    }
    
    public InsightsAgentsRequestOptions() {
        this(Optional.empty());
    }

    /**
     * IDs of the Agents for which Insights should be returned. An empty array signifies all.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> agentIds() {
        return (Optional<List<String>>) agentIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * IDs of the Agents for which Insights should be returned. An empty array signifies all.
     */
    public InsightsAgentsRequestOptions withAgentIds(List<String> agentIds) {
        Utils.checkNotNull(agentIds, "agentIds");
        this.agentIds = Optional.ofNullable(agentIds);
        return this;
    }

    /**
     * IDs of the Agents for which Insights should be returned. An empty array signifies all.
     */
    public InsightsAgentsRequestOptions withAgentIds(Optional<? extends List<String>> agentIds) {
        Utils.checkNotNull(agentIds, "agentIds");
        this.agentIds = agentIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InsightsAgentsRequestOptions other = (InsightsAgentsRequestOptions) o;
        return 
            Objects.deepEquals(this.agentIds, other.agentIds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agentIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InsightsAgentsRequestOptions.class,
                "agentIds", agentIds);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> agentIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IDs of the Agents for which Insights should be returned. An empty array signifies all.
         */
        public Builder agentIds(List<String> agentIds) {
            Utils.checkNotNull(agentIds, "agentIds");
            this.agentIds = Optional.ofNullable(agentIds);
            return this;
        }

        /**
         * IDs of the Agents for which Insights should be returned. An empty array signifies all.
         */
        public Builder agentIds(Optional<? extends List<String>> agentIds) {
            Utils.checkNotNull(agentIds, "agentIds");
            this.agentIds = agentIds;
            return this;
        }
        
        public InsightsAgentsRequestOptions build() {
            return new InsightsAgentsRequestOptions(
                agentIds);
        }
    }
}
