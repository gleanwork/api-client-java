/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * ChatFile
 * 
 * <p>Structure for file uploaded by a user for Chat.
 */
public class ChatFile {

    /**
     * Unique identifier of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Url of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * Name of the uploaded file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Metadata of a file uploaded by a user for Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ChatFileMetadata> metadata;

    @JsonCreator
    public ChatFile(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("metadata") Optional<? extends ChatFileMetadata> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(metadata, "metadata");
        this.id = id;
        this.url = url;
        this.name = name;
        this.metadata = metadata;
    }
    
    public ChatFile() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of the file.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Url of the file.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * Name of the uploaded file.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Metadata of a file uploaded by a user for Chat.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatFileMetadata> metadata() {
        return (Optional<ChatFileMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier of the file.
     */
    public ChatFile withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of the file.
     */
    public ChatFile withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Url of the file.
     */
    public ChatFile withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * Url of the file.
     */
    public ChatFile withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Name of the uploaded file.
     */
    public ChatFile withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the uploaded file.
     */
    public ChatFile withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Metadata of a file uploaded by a user for Chat.
     */
    public ChatFile withMetadata(ChatFileMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Metadata of a file uploaded by a user for Chat.
     */
    public ChatFile withMetadata(Optional<? extends ChatFileMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatFile other = (ChatFile) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            url,
            name,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatFile.class,
                "id", id,
                "url", url,
                "name", name,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends ChatFileMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the file.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of the file.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Url of the file.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * Url of the file.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Name of the uploaded file.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the uploaded file.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Metadata of a file uploaded by a user for Chat.
         */
        public Builder metadata(ChatFileMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Metadata of a file uploaded by a user for Chat.
         */
        public Builder metadata(Optional<? extends ChatFileMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public ChatFile build() {
            return new ChatFile(
                id,
                url,
                name,
                metadata);
        }
    }
}
