/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class OnboardingAdminInviteData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isTrial")
    private Optional<Boolean> isTrial;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipientData")
    private Optional<? extends List<OnboardingAdminRecipientData>> recipientData;

    @JsonCreator
    public OnboardingAdminInviteData(
            @JsonProperty("isTrial") Optional<Boolean> isTrial,
            @JsonProperty("recipientData") Optional<? extends List<OnboardingAdminRecipientData>> recipientData) {
        Utils.checkNotNull(isTrial, "isTrial");
        Utils.checkNotNull(recipientData, "recipientData");
        this.isTrial = isTrial;
        this.recipientData = recipientData;
    }
    
    public OnboardingAdminInviteData() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> isTrial() {
        return isTrial;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OnboardingAdminRecipientData>> recipientData() {
        return (Optional<List<OnboardingAdminRecipientData>>) recipientData;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public OnboardingAdminInviteData withIsTrial(boolean isTrial) {
        Utils.checkNotNull(isTrial, "isTrial");
        this.isTrial = Optional.ofNullable(isTrial);
        return this;
    }

    public OnboardingAdminInviteData withIsTrial(Optional<Boolean> isTrial) {
        Utils.checkNotNull(isTrial, "isTrial");
        this.isTrial = isTrial;
        return this;
    }

    public OnboardingAdminInviteData withRecipientData(List<OnboardingAdminRecipientData> recipientData) {
        Utils.checkNotNull(recipientData, "recipientData");
        this.recipientData = Optional.ofNullable(recipientData);
        return this;
    }

    public OnboardingAdminInviteData withRecipientData(Optional<? extends List<OnboardingAdminRecipientData>> recipientData) {
        Utils.checkNotNull(recipientData, "recipientData");
        this.recipientData = recipientData;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OnboardingAdminInviteData other = (OnboardingAdminInviteData) o;
        return 
            Objects.deepEquals(this.isTrial, other.isTrial) &&
            Objects.deepEquals(this.recipientData, other.recipientData);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isTrial,
            recipientData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OnboardingAdminInviteData.class,
                "isTrial", isTrial,
                "recipientData", recipientData);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isTrial = Optional.empty();
 
        private Optional<? extends List<OnboardingAdminRecipientData>> recipientData = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder isTrial(boolean isTrial) {
            Utils.checkNotNull(isTrial, "isTrial");
            this.isTrial = Optional.ofNullable(isTrial);
            return this;
        }

        public Builder isTrial(Optional<Boolean> isTrial) {
            Utils.checkNotNull(isTrial, "isTrial");
            this.isTrial = isTrial;
            return this;
        }

        public Builder recipientData(List<OnboardingAdminRecipientData> recipientData) {
            Utils.checkNotNull(recipientData, "recipientData");
            this.recipientData = Optional.ofNullable(recipientData);
            return this;
        }

        public Builder recipientData(Optional<? extends List<OnboardingAdminRecipientData>> recipientData) {
            Utils.checkNotNull(recipientData, "recipientData");
            this.recipientData = recipientData;
            return this;
        }
        
        public OnboardingAdminInviteData build() {
            return new OnboardingAdminInviteData(
                isTrial,
                recipientData);
        }
    }
}
