/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class CustomFieldValueStr {

    /**
     * Text field for string value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strText")
    private Optional<String> strText;

    @JsonCreator
    public CustomFieldValueStr(
            @JsonProperty("strText") Optional<String> strText) {
        Utils.checkNotNull(strText, "strText");
        this.strText = strText;
    }
    
    public CustomFieldValueStr() {
        this(Optional.empty());
    }

    /**
     * Text field for string value.
     */
    @JsonIgnore
    public Optional<String> strText() {
        return strText;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Text field for string value.
     */
    public CustomFieldValueStr withStrText(String strText) {
        Utils.checkNotNull(strText, "strText");
        this.strText = Optional.ofNullable(strText);
        return this;
    }

    /**
     * Text field for string value.
     */
    public CustomFieldValueStr withStrText(Optional<String> strText) {
        Utils.checkNotNull(strText, "strText");
        this.strText = strText;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomFieldValueStr other = (CustomFieldValueStr) o;
        return 
            Objects.deepEquals(this.strText, other.strText);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            strText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomFieldValueStr.class,
                "strText", strText);
    }
    
    public final static class Builder {
 
        private Optional<String> strText = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Text field for string value.
         */
        public Builder strText(String strText) {
            Utils.checkNotNull(strText, "strText");
            this.strText = Optional.ofNullable(strText);
            return this;
        }

        /**
         * Text field for string value.
         */
        public Builder strText(Optional<String> strText) {
            Utils.checkNotNull(strText, "strText");
            this.strText = strText;
            return this;
        }
        
        public CustomFieldValueStr build() {
            return new CustomFieldValueStr(
                strText);
        }
    }
}
