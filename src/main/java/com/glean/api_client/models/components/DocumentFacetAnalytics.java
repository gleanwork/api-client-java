/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class DocumentFacetAnalytics {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facet")
    private Optional<? extends FacetFilter> facet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("analytics")
    private Optional<? extends DocumentAnalytics> analytics;

    @JsonCreator
    public DocumentFacetAnalytics(
            @JsonProperty("facet") Optional<? extends FacetFilter> facet,
            @JsonProperty("analytics") Optional<? extends DocumentAnalytics> analytics) {
        Utils.checkNotNull(facet, "facet");
        Utils.checkNotNull(analytics, "analytics");
        this.facet = facet;
        this.analytics = analytics;
    }
    
    public DocumentFacetAnalytics() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FacetFilter> facet() {
        return (Optional<FacetFilter>) facet;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentAnalytics> analytics() {
        return (Optional<DocumentAnalytics>) analytics;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DocumentFacetAnalytics withFacet(FacetFilter facet) {
        Utils.checkNotNull(facet, "facet");
        this.facet = Optional.ofNullable(facet);
        return this;
    }

    public DocumentFacetAnalytics withFacet(Optional<? extends FacetFilter> facet) {
        Utils.checkNotNull(facet, "facet");
        this.facet = facet;
        return this;
    }

    public DocumentFacetAnalytics withAnalytics(DocumentAnalytics analytics) {
        Utils.checkNotNull(analytics, "analytics");
        this.analytics = Optional.ofNullable(analytics);
        return this;
    }

    public DocumentFacetAnalytics withAnalytics(Optional<? extends DocumentAnalytics> analytics) {
        Utils.checkNotNull(analytics, "analytics");
        this.analytics = analytics;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentFacetAnalytics other = (DocumentFacetAnalytics) o;
        return 
            Objects.deepEquals(this.facet, other.facet) &&
            Objects.deepEquals(this.analytics, other.analytics);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            facet,
            analytics);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentFacetAnalytics.class,
                "facet", facet,
                "analytics", analytics);
    }
    
    public final static class Builder {
 
        private Optional<? extends FacetFilter> facet = Optional.empty();
 
        private Optional<? extends DocumentAnalytics> analytics = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder facet(FacetFilter facet) {
            Utils.checkNotNull(facet, "facet");
            this.facet = Optional.ofNullable(facet);
            return this;
        }

        public Builder facet(Optional<? extends FacetFilter> facet) {
            Utils.checkNotNull(facet, "facet");
            this.facet = facet;
            return this;
        }

        public Builder analytics(DocumentAnalytics analytics) {
            Utils.checkNotNull(analytics, "analytics");
            this.analytics = Optional.ofNullable(analytics);
            return this;
        }

        public Builder analytics(Optional<? extends DocumentAnalytics> analytics) {
            Utils.checkNotNull(analytics, "analytics");
            this.analytics = analytics;
            return this;
        }
        
        public DocumentFacetAnalytics build() {
            return new DocumentFacetAnalytics(
                facet,
                analytics);
        }
    }
}
