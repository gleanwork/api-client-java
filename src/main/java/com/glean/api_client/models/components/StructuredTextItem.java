/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class StructuredTextItem {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    private Optional<String> link;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private Optional<? extends Document> document;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    @JsonCreator
    public StructuredTextItem(
            @JsonProperty("link") Optional<String> link,
            @JsonProperty("document") Optional<? extends Document> document,
            @JsonProperty("text") Optional<String> text) {
        Utils.checkNotNull(link, "link");
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(text, "text");
        this.link = link;
        this.document = document;
        this.text = text;
    }
    
    public StructuredTextItem() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> link() {
        return link;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> document() {
        return (Optional<Document>) document;
    }

    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public StructuredTextItem withLink(String link) {
        Utils.checkNotNull(link, "link");
        this.link = Optional.ofNullable(link);
        return this;
    }

    public StructuredTextItem withLink(Optional<String> link) {
        Utils.checkNotNull(link, "link");
        this.link = link;
        return this;
    }

    public StructuredTextItem withDocument(Document document) {
        Utils.checkNotNull(document, "document");
        this.document = Optional.ofNullable(document);
        return this;
    }

    public StructuredTextItem withDocument(Optional<? extends Document> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    public StructuredTextItem withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    public StructuredTextItem withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StructuredTextItem other = (StructuredTextItem) o;
        return 
            Objects.deepEquals(this.link, other.link) &&
            Objects.deepEquals(this.document, other.document) &&
            Objects.deepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            link,
            document,
            text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StructuredTextItem.class,
                "link", link,
                "document", document,
                "text", text);
    }
    
    public final static class Builder {
 
        private Optional<String> link = Optional.empty();
 
        private Optional<? extends Document> document = Optional.empty();
 
        private Optional<String> text = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder link(String link) {
            Utils.checkNotNull(link, "link");
            this.link = Optional.ofNullable(link);
            return this;
        }

        public Builder link(Optional<String> link) {
            Utils.checkNotNull(link, "link");
            this.link = link;
            return this;
        }

        public Builder document(Document document) {
            Utils.checkNotNull(document, "document");
            this.document = Optional.ofNullable(document);
            return this;
        }

        public Builder document(Optional<? extends Document> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }
        
        public StructuredTextItem build() {
            return new StructuredTextItem(
                link,
                document,
                text);
        }
    }
}
