/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * PermissionsGroupIntersectionDefinition
 * 
 * <p>describes a list of groups that are all required in a permissions constraint
 */
public class PermissionsGroupIntersectionDefinition {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requiredGroups")
    private Optional<? extends List<String>> requiredGroups;

    @JsonCreator
    public PermissionsGroupIntersectionDefinition(
            @JsonProperty("requiredGroups") Optional<? extends List<String>> requiredGroups) {
        Utils.checkNotNull(requiredGroups, "requiredGroups");
        this.requiredGroups = requiredGroups;
    }
    
    public PermissionsGroupIntersectionDefinition() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> requiredGroups() {
        return (Optional<List<String>>) requiredGroups;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PermissionsGroupIntersectionDefinition withRequiredGroups(List<String> requiredGroups) {
        Utils.checkNotNull(requiredGroups, "requiredGroups");
        this.requiredGroups = Optional.ofNullable(requiredGroups);
        return this;
    }

    public PermissionsGroupIntersectionDefinition withRequiredGroups(Optional<? extends List<String>> requiredGroups) {
        Utils.checkNotNull(requiredGroups, "requiredGroups");
        this.requiredGroups = requiredGroups;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PermissionsGroupIntersectionDefinition other = (PermissionsGroupIntersectionDefinition) o;
        return 
            Objects.deepEquals(this.requiredGroups, other.requiredGroups);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requiredGroups);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PermissionsGroupIntersectionDefinition.class,
                "requiredGroups", requiredGroups);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> requiredGroups = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requiredGroups(List<String> requiredGroups) {
            Utils.checkNotNull(requiredGroups, "requiredGroups");
            this.requiredGroups = Optional.ofNullable(requiredGroups);
            return this;
        }

        public Builder requiredGroups(Optional<? extends List<String>> requiredGroups) {
            Utils.checkNotNull(requiredGroups, "requiredGroups");
            this.requiredGroups = requiredGroups;
            return this;
        }
        
        public PermissionsGroupIntersectionDefinition build() {
            return new PermissionsGroupIntersectionDefinition(
                requiredGroups);
        }
    }
}
