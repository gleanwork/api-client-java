/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * DisplayableListItemUIConfig
 * 
 * <p>UI configurations for each item of the list
 */
public class DisplayableListItemUIConfig {

    /**
     * show a "New" pill next to the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showNewIndicator")
    private Optional<Boolean> showNewIndicator;

    @JsonCreator
    public DisplayableListItemUIConfig(
            @JsonProperty("showNewIndicator") Optional<Boolean> showNewIndicator) {
        Utils.checkNotNull(showNewIndicator, "showNewIndicator");
        this.showNewIndicator = showNewIndicator;
    }
    
    public DisplayableListItemUIConfig() {
        this(Optional.empty());
    }

    /**
     * show a "New" pill next to the item
     */
    @JsonIgnore
    public Optional<Boolean> showNewIndicator() {
        return showNewIndicator;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * show a "New" pill next to the item
     */
    public DisplayableListItemUIConfig withShowNewIndicator(boolean showNewIndicator) {
        Utils.checkNotNull(showNewIndicator, "showNewIndicator");
        this.showNewIndicator = Optional.ofNullable(showNewIndicator);
        return this;
    }

    /**
     * show a "New" pill next to the item
     */
    public DisplayableListItemUIConfig withShowNewIndicator(Optional<Boolean> showNewIndicator) {
        Utils.checkNotNull(showNewIndicator, "showNewIndicator");
        this.showNewIndicator = showNewIndicator;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DisplayableListItemUIConfig other = (DisplayableListItemUIConfig) o;
        return 
            Objects.deepEquals(this.showNewIndicator, other.showNewIndicator);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            showNewIndicator);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DisplayableListItemUIConfig.class,
                "showNewIndicator", showNewIndicator);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> showNewIndicator = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * show a "New" pill next to the item
         */
        public Builder showNewIndicator(boolean showNewIndicator) {
            Utils.checkNotNull(showNewIndicator, "showNewIndicator");
            this.showNewIndicator = Optional.ofNullable(showNewIndicator);
            return this;
        }

        /**
         * show a "New" pill next to the item
         */
        public Builder showNewIndicator(Optional<Boolean> showNewIndicator) {
            Utils.checkNotNull(showNewIndicator, "showNewIndicator");
            this.showNewIndicator = showNewIndicator;
            return this;
        }
        
        public DisplayableListItemUIConfig build() {
            return new DisplayableListItemUIConfig(
                showNewIndicator);
        }
    }
}
