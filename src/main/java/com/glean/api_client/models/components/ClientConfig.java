/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * ClientConfig
 * 
 * <p>Configuration settings for a specific client deployment that are not related to any particular datasource
 */
public class ClientConfig {

    /**
     * Configuration settings specific to Assistant features
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assistant")
    private Optional<? extends AssistantConfig> assistant;

    /**
     * Configuration settings related to Tools.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tools")
    @Deprecated
    private Optional<? extends ToolsConfig> tools;

    /**
     * Configuration settings related to Shortcuts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcuts")
    private Optional<? extends ShortcutsConfig> shortcuts;

    /**
     * Configuration settings related to Search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search")
    private Optional<? extends SearchClientConfig> search;

    /**
     * Whether people celebrations is enabled or not for the instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedPeopleCelebrationsEnabled")
    private Optional<Boolean> feedPeopleCelebrationsEnabled;

    /**
     * Whether the suggested feed is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedSuggestedEnabled")
    private Optional<Boolean> feedSuggestedEnabled;

    /**
     * Whether the trending feed is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedTrendingEnabled")
    private Optional<Boolean> feedTrendingEnabled;

    /**
     * Whether the recents feed is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedRecentsEnabled")
    private Optional<Boolean> feedRecentsEnabled;

    /**
     * Whether the mentions feed is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedMentionsEnabled")
    private Optional<Boolean> feedMentionsEnabled;

    /**
     * Whether the GPT agent for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gptAgentEnabled")
    @Deprecated
    private Optional<Boolean> gptAgentEnabled;

    /**
     * Whether the chat history for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatHistoryEnabled")
    @Deprecated
    private Optional<Boolean> chatHistoryEnabled;

    /**
     * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boolValues")
    private Optional<? extends Map<String, Boolean>> boolValues;

    /**
     * A map of {string, integer} pairs for client consumption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerValues")
    private Optional<? extends Map<String, Long>> integerValues;

    /**
     * The user-facing name of the company owning the deployment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyDisplayName")
    private Optional<String> companyDisplayName;

    /**
     * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customSerpMarkdown")
    private Optional<String> customSerpMarkdown;

    /**
     * A demonstrative query to show during new user onboarding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboardingQuery")
    private Optional<String> onboardingQuery;

    /**
     * Determines whether the org chart link in the Directory panel is visible to all users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOrgChartLinkVisible")
    private Optional<Boolean> isOrgChartLinkVisible;

    /**
     * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOrgChartAccessible")
    private Optional<Boolean> isOrgChartAccessible;

    /**
     * Whether or not people data has been set up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPeopleSetup")
    private Optional<Boolean> isPeopleSetup;

    /**
     * Whether or not the deployment is in pilot mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPilotMode")
    private Optional<Boolean> isPilotMode;

    /**
     * URL the company uses to access the web app
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webAppUrl")
    private Optional<String> webAppUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userOutreach")
    private Optional<? extends UserOutreachConfig> userOutreach;

    /**
     * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchLinkUrlTemplate")
    private Optional<String> searchLinkUrlTemplate;

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatLinkUrlTemplate")
    @Deprecated
    private Optional<String> chatLinkUrlTemplate;

    /**
     * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themes")
    private Optional<? extends Themes> themes;

    /**
     * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandings")
    private Optional<? extends Brandings> brandings;

    /**
     * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("greetingFormat")
    private Optional<String> greetingFormat;

    /**
     * Label for the external link at the end of the Task card in order to guide user to the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskSeeAllLabel")
    private Optional<String> taskSeeAllLabel;

    /**
     * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskSeeAllLink")
    private Optional<String> taskSeeAllLink;

    /**
     * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchPlaceholder")
    @Deprecated
    private Optional<String> searchPlaceholder;

    /**
     * Company-wide custom prefix for Go Links.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcutsPrefix")
    @Deprecated
    private Optional<String> shortcutsPrefix;

    /**
     * SSO provider used by the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssoCompanyProvider")
    private Optional<? extends SsoCompanyProvider> ssoCompanyProvider;

    /**
     * whether to show the running ML pipelines banner
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showPipelinesSetupBanner")
    private Optional<Boolean> showPipelinesSetupBanner;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedbackCustomizations")
    private Optional<? extends FeedbackCustomizations> feedbackCustomizations;

    @JsonCreator
    public ClientConfig(
            @JsonProperty("assistant") Optional<? extends AssistantConfig> assistant,
            @JsonProperty("tools") Optional<? extends ToolsConfig> tools,
            @JsonProperty("shortcuts") Optional<? extends ShortcutsConfig> shortcuts,
            @JsonProperty("search") Optional<? extends SearchClientConfig> search,
            @JsonProperty("feedPeopleCelebrationsEnabled") Optional<Boolean> feedPeopleCelebrationsEnabled,
            @JsonProperty("feedSuggestedEnabled") Optional<Boolean> feedSuggestedEnabled,
            @JsonProperty("feedTrendingEnabled") Optional<Boolean> feedTrendingEnabled,
            @JsonProperty("feedRecentsEnabled") Optional<Boolean> feedRecentsEnabled,
            @JsonProperty("feedMentionsEnabled") Optional<Boolean> feedMentionsEnabled,
            @JsonProperty("gptAgentEnabled") Optional<Boolean> gptAgentEnabled,
            @JsonProperty("chatHistoryEnabled") Optional<Boolean> chatHistoryEnabled,
            @JsonProperty("boolValues") Optional<? extends Map<String, Boolean>> boolValues,
            @JsonProperty("integerValues") Optional<? extends Map<String, Long>> integerValues,
            @JsonProperty("companyDisplayName") Optional<String> companyDisplayName,
            @JsonProperty("customSerpMarkdown") Optional<String> customSerpMarkdown,
            @JsonProperty("onboardingQuery") Optional<String> onboardingQuery,
            @JsonProperty("isOrgChartLinkVisible") Optional<Boolean> isOrgChartLinkVisible,
            @JsonProperty("isOrgChartAccessible") Optional<Boolean> isOrgChartAccessible,
            @JsonProperty("isPeopleSetup") Optional<Boolean> isPeopleSetup,
            @JsonProperty("isPilotMode") Optional<Boolean> isPilotMode,
            @JsonProperty("webAppUrl") Optional<String> webAppUrl,
            @JsonProperty("userOutreach") Optional<? extends UserOutreachConfig> userOutreach,
            @JsonProperty("searchLinkUrlTemplate") Optional<String> searchLinkUrlTemplate,
            @JsonProperty("chatLinkUrlTemplate") Optional<String> chatLinkUrlTemplate,
            @JsonProperty("themes") Optional<? extends Themes> themes,
            @JsonProperty("brandings") Optional<? extends Brandings> brandings,
            @JsonProperty("greetingFormat") Optional<String> greetingFormat,
            @JsonProperty("taskSeeAllLabel") Optional<String> taskSeeAllLabel,
            @JsonProperty("taskSeeAllLink") Optional<String> taskSeeAllLink,
            @JsonProperty("searchPlaceholder") Optional<String> searchPlaceholder,
            @JsonProperty("shortcutsPrefix") Optional<String> shortcutsPrefix,
            @JsonProperty("ssoCompanyProvider") Optional<? extends SsoCompanyProvider> ssoCompanyProvider,
            @JsonProperty("showPipelinesSetupBanner") Optional<Boolean> showPipelinesSetupBanner,
            @JsonProperty("feedbackCustomizations") Optional<? extends FeedbackCustomizations> feedbackCustomizations) {
        Utils.checkNotNull(assistant, "assistant");
        Utils.checkNotNull(tools, "tools");
        Utils.checkNotNull(shortcuts, "shortcuts");
        Utils.checkNotNull(search, "search");
        Utils.checkNotNull(feedPeopleCelebrationsEnabled, "feedPeopleCelebrationsEnabled");
        Utils.checkNotNull(feedSuggestedEnabled, "feedSuggestedEnabled");
        Utils.checkNotNull(feedTrendingEnabled, "feedTrendingEnabled");
        Utils.checkNotNull(feedRecentsEnabled, "feedRecentsEnabled");
        Utils.checkNotNull(feedMentionsEnabled, "feedMentionsEnabled");
        Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
        Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
        Utils.checkNotNull(boolValues, "boolValues");
        Utils.checkNotNull(integerValues, "integerValues");
        Utils.checkNotNull(companyDisplayName, "companyDisplayName");
        Utils.checkNotNull(customSerpMarkdown, "customSerpMarkdown");
        Utils.checkNotNull(onboardingQuery, "onboardingQuery");
        Utils.checkNotNull(isOrgChartLinkVisible, "isOrgChartLinkVisible");
        Utils.checkNotNull(isOrgChartAccessible, "isOrgChartAccessible");
        Utils.checkNotNull(isPeopleSetup, "isPeopleSetup");
        Utils.checkNotNull(isPilotMode, "isPilotMode");
        Utils.checkNotNull(webAppUrl, "webAppUrl");
        Utils.checkNotNull(userOutreach, "userOutreach");
        Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
        Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
        Utils.checkNotNull(themes, "themes");
        Utils.checkNotNull(brandings, "brandings");
        Utils.checkNotNull(greetingFormat, "greetingFormat");
        Utils.checkNotNull(taskSeeAllLabel, "taskSeeAllLabel");
        Utils.checkNotNull(taskSeeAllLink, "taskSeeAllLink");
        Utils.checkNotNull(searchPlaceholder, "searchPlaceholder");
        Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
        Utils.checkNotNull(ssoCompanyProvider, "ssoCompanyProvider");
        Utils.checkNotNull(showPipelinesSetupBanner, "showPipelinesSetupBanner");
        Utils.checkNotNull(feedbackCustomizations, "feedbackCustomizations");
        this.assistant = assistant;
        this.tools = tools;
        this.shortcuts = shortcuts;
        this.search = search;
        this.feedPeopleCelebrationsEnabled = feedPeopleCelebrationsEnabled;
        this.feedSuggestedEnabled = feedSuggestedEnabled;
        this.feedTrendingEnabled = feedTrendingEnabled;
        this.feedRecentsEnabled = feedRecentsEnabled;
        this.feedMentionsEnabled = feedMentionsEnabled;
        this.gptAgentEnabled = gptAgentEnabled;
        this.chatHistoryEnabled = chatHistoryEnabled;
        this.boolValues = boolValues;
        this.integerValues = integerValues;
        this.companyDisplayName = companyDisplayName;
        this.customSerpMarkdown = customSerpMarkdown;
        this.onboardingQuery = onboardingQuery;
        this.isOrgChartLinkVisible = isOrgChartLinkVisible;
        this.isOrgChartAccessible = isOrgChartAccessible;
        this.isPeopleSetup = isPeopleSetup;
        this.isPilotMode = isPilotMode;
        this.webAppUrl = webAppUrl;
        this.userOutreach = userOutreach;
        this.searchLinkUrlTemplate = searchLinkUrlTemplate;
        this.chatLinkUrlTemplate = chatLinkUrlTemplate;
        this.themes = themes;
        this.brandings = brandings;
        this.greetingFormat = greetingFormat;
        this.taskSeeAllLabel = taskSeeAllLabel;
        this.taskSeeAllLink = taskSeeAllLink;
        this.searchPlaceholder = searchPlaceholder;
        this.shortcutsPrefix = shortcutsPrefix;
        this.ssoCompanyProvider = ssoCompanyProvider;
        this.showPipelinesSetupBanner = showPipelinesSetupBanner;
        this.feedbackCustomizations = feedbackCustomizations;
    }
    
    public ClientConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Configuration settings specific to Assistant features
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AssistantConfig> assistant() {
        return (Optional<AssistantConfig>) assistant;
    }

    /**
     * Configuration settings related to Tools.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ToolsConfig> tools() {
        return (Optional<ToolsConfig>) tools;
    }

    /**
     * Configuration settings related to Shortcuts
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShortcutsConfig> shortcuts() {
        return (Optional<ShortcutsConfig>) shortcuts;
    }

    /**
     * Configuration settings related to Search
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchClientConfig> search() {
        return (Optional<SearchClientConfig>) search;
    }

    /**
     * Whether people celebrations is enabled or not for the instance
     */
    @JsonIgnore
    public Optional<Boolean> feedPeopleCelebrationsEnabled() {
        return feedPeopleCelebrationsEnabled;
    }

    /**
     * Whether the suggested feed is enabled
     */
    @JsonIgnore
    public Optional<Boolean> feedSuggestedEnabled() {
        return feedSuggestedEnabled;
    }

    /**
     * Whether the trending feed is enabled
     */
    @JsonIgnore
    public Optional<Boolean> feedTrendingEnabled() {
        return feedTrendingEnabled;
    }

    /**
     * Whether the recents feed is enabled
     */
    @JsonIgnore
    public Optional<Boolean> feedRecentsEnabled() {
        return feedRecentsEnabled;
    }

    /**
     * Whether the mentions feed is enabled
     */
    @JsonIgnore
    public Optional<Boolean> feedMentionsEnabled() {
        return feedMentionsEnabled;
    }

    /**
     * Whether the GPT agent for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> gptAgentEnabled() {
        return gptAgentEnabled;
    }

    /**
     * Whether the chat history for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> chatHistoryEnabled() {
        return chatHistoryEnabled;
    }

    /**
     * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Boolean>> boolValues() {
        return (Optional<Map<String, Boolean>>) boolValues;
    }

    /**
     * A map of {string, integer} pairs for client consumption.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Long>> integerValues() {
        return (Optional<Map<String, Long>>) integerValues;
    }

    /**
     * The user-facing name of the company owning the deployment
     */
    @JsonIgnore
    public Optional<String> companyDisplayName() {
        return companyDisplayName;
    }

    /**
     * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
     */
    @JsonIgnore
    public Optional<String> customSerpMarkdown() {
        return customSerpMarkdown;
    }

    /**
     * A demonstrative query to show during new user onboarding
     */
    @JsonIgnore
    public Optional<String> onboardingQuery() {
        return onboardingQuery;
    }

    /**
     * Determines whether the org chart link in the Directory panel is visible to all users.
     */
    @JsonIgnore
    public Optional<Boolean> isOrgChartLinkVisible() {
        return isOrgChartLinkVisible;
    }

    /**
     * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
     */
    @JsonIgnore
    public Optional<Boolean> isOrgChartAccessible() {
        return isOrgChartAccessible;
    }

    /**
     * Whether or not people data has been set up.
     */
    @JsonIgnore
    public Optional<Boolean> isPeopleSetup() {
        return isPeopleSetup;
    }

    /**
     * Whether or not the deployment is in pilot mode.
     */
    @JsonIgnore
    public Optional<Boolean> isPilotMode() {
        return isPilotMode;
    }

    /**
     * URL the company uses to access the web app
     */
    @JsonIgnore
    public Optional<String> webAppUrl() {
        return webAppUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserOutreachConfig> userOutreach() {
        return (Optional<UserOutreachConfig>) userOutreach;
    }

    /**
     * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
     */
    @JsonIgnore
    public Optional<String> searchLinkUrlTemplate() {
        return searchLinkUrlTemplate;
    }

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> chatLinkUrlTemplate() {
        return chatLinkUrlTemplate;
    }

    /**
     * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Themes> themes() {
        return (Optional<Themes>) themes;
    }

    /**
     * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Brandings> brandings() {
        return (Optional<Brandings>) brandings;
    }

    /**
     * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
     */
    @JsonIgnore
    public Optional<String> greetingFormat() {
        return greetingFormat;
    }

    /**
     * Label for the external link at the end of the Task card in order to guide user to the source.
     */
    @JsonIgnore
    public Optional<String> taskSeeAllLabel() {
        return taskSeeAllLabel;
    }

    /**
     * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
     */
    @JsonIgnore
    public Optional<String> taskSeeAllLink() {
        return taskSeeAllLink;
    }

    /**
     * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> searchPlaceholder() {
        return searchPlaceholder;
    }

    /**
     * Company-wide custom prefix for Go Links.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> shortcutsPrefix() {
        return shortcutsPrefix;
    }

    /**
     * SSO provider used by the company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SsoCompanyProvider> ssoCompanyProvider() {
        return (Optional<SsoCompanyProvider>) ssoCompanyProvider;
    }

    /**
     * whether to show the running ML pipelines banner
     */
    @JsonIgnore
    public Optional<Boolean> showPipelinesSetupBanner() {
        return showPipelinesSetupBanner;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeedbackCustomizations> feedbackCustomizations() {
        return (Optional<FeedbackCustomizations>) feedbackCustomizations;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Configuration settings specific to Assistant features
     */
    public ClientConfig withAssistant(AssistantConfig assistant) {
        Utils.checkNotNull(assistant, "assistant");
        this.assistant = Optional.ofNullable(assistant);
        return this;
    }

    /**
     * Configuration settings specific to Assistant features
     */
    public ClientConfig withAssistant(Optional<? extends AssistantConfig> assistant) {
        Utils.checkNotNull(assistant, "assistant");
        this.assistant = assistant;
        return this;
    }

    /**
     * Configuration settings related to Tools.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withTools(ToolsConfig tools) {
        Utils.checkNotNull(tools, "tools");
        this.tools = Optional.ofNullable(tools);
        return this;
    }

    /**
     * Configuration settings related to Tools.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withTools(Optional<? extends ToolsConfig> tools) {
        Utils.checkNotNull(tools, "tools");
        this.tools = tools;
        return this;
    }

    /**
     * Configuration settings related to Shortcuts
     */
    public ClientConfig withShortcuts(ShortcutsConfig shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = Optional.ofNullable(shortcuts);
        return this;
    }

    /**
     * Configuration settings related to Shortcuts
     */
    public ClientConfig withShortcuts(Optional<? extends ShortcutsConfig> shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = shortcuts;
        return this;
    }

    /**
     * Configuration settings related to Search
     */
    public ClientConfig withSearch(SearchClientConfig search) {
        Utils.checkNotNull(search, "search");
        this.search = Optional.ofNullable(search);
        return this;
    }

    /**
     * Configuration settings related to Search
     */
    public ClientConfig withSearch(Optional<? extends SearchClientConfig> search) {
        Utils.checkNotNull(search, "search");
        this.search = search;
        return this;
    }

    /**
     * Whether people celebrations is enabled or not for the instance
     */
    public ClientConfig withFeedPeopleCelebrationsEnabled(boolean feedPeopleCelebrationsEnabled) {
        Utils.checkNotNull(feedPeopleCelebrationsEnabled, "feedPeopleCelebrationsEnabled");
        this.feedPeopleCelebrationsEnabled = Optional.ofNullable(feedPeopleCelebrationsEnabled);
        return this;
    }

    /**
     * Whether people celebrations is enabled or not for the instance
     */
    public ClientConfig withFeedPeopleCelebrationsEnabled(Optional<Boolean> feedPeopleCelebrationsEnabled) {
        Utils.checkNotNull(feedPeopleCelebrationsEnabled, "feedPeopleCelebrationsEnabled");
        this.feedPeopleCelebrationsEnabled = feedPeopleCelebrationsEnabled;
        return this;
    }

    /**
     * Whether the suggested feed is enabled
     */
    public ClientConfig withFeedSuggestedEnabled(boolean feedSuggestedEnabled) {
        Utils.checkNotNull(feedSuggestedEnabled, "feedSuggestedEnabled");
        this.feedSuggestedEnabled = Optional.ofNullable(feedSuggestedEnabled);
        return this;
    }

    /**
     * Whether the suggested feed is enabled
     */
    public ClientConfig withFeedSuggestedEnabled(Optional<Boolean> feedSuggestedEnabled) {
        Utils.checkNotNull(feedSuggestedEnabled, "feedSuggestedEnabled");
        this.feedSuggestedEnabled = feedSuggestedEnabled;
        return this;
    }

    /**
     * Whether the trending feed is enabled
     */
    public ClientConfig withFeedTrendingEnabled(boolean feedTrendingEnabled) {
        Utils.checkNotNull(feedTrendingEnabled, "feedTrendingEnabled");
        this.feedTrendingEnabled = Optional.ofNullable(feedTrendingEnabled);
        return this;
    }

    /**
     * Whether the trending feed is enabled
     */
    public ClientConfig withFeedTrendingEnabled(Optional<Boolean> feedTrendingEnabled) {
        Utils.checkNotNull(feedTrendingEnabled, "feedTrendingEnabled");
        this.feedTrendingEnabled = feedTrendingEnabled;
        return this;
    }

    /**
     * Whether the recents feed is enabled
     */
    public ClientConfig withFeedRecentsEnabled(boolean feedRecentsEnabled) {
        Utils.checkNotNull(feedRecentsEnabled, "feedRecentsEnabled");
        this.feedRecentsEnabled = Optional.ofNullable(feedRecentsEnabled);
        return this;
    }

    /**
     * Whether the recents feed is enabled
     */
    public ClientConfig withFeedRecentsEnabled(Optional<Boolean> feedRecentsEnabled) {
        Utils.checkNotNull(feedRecentsEnabled, "feedRecentsEnabled");
        this.feedRecentsEnabled = feedRecentsEnabled;
        return this;
    }

    /**
     * Whether the mentions feed is enabled
     */
    public ClientConfig withFeedMentionsEnabled(boolean feedMentionsEnabled) {
        Utils.checkNotNull(feedMentionsEnabled, "feedMentionsEnabled");
        this.feedMentionsEnabled = Optional.ofNullable(feedMentionsEnabled);
        return this;
    }

    /**
     * Whether the mentions feed is enabled
     */
    public ClientConfig withFeedMentionsEnabled(Optional<Boolean> feedMentionsEnabled) {
        Utils.checkNotNull(feedMentionsEnabled, "feedMentionsEnabled");
        this.feedMentionsEnabled = feedMentionsEnabled;
        return this;
    }

    /**
     * Whether the GPT agent for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withGptAgentEnabled(boolean gptAgentEnabled) {
        Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
        this.gptAgentEnabled = Optional.ofNullable(gptAgentEnabled);
        return this;
    }

    /**
     * Whether the GPT agent for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withGptAgentEnabled(Optional<Boolean> gptAgentEnabled) {
        Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
        this.gptAgentEnabled = gptAgentEnabled;
        return this;
    }

    /**
     * Whether the chat history for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withChatHistoryEnabled(boolean chatHistoryEnabled) {
        Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
        this.chatHistoryEnabled = Optional.ofNullable(chatHistoryEnabled);
        return this;
    }

    /**
     * Whether the chat history for Chat is enabled
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withChatHistoryEnabled(Optional<Boolean> chatHistoryEnabled) {
        Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
        this.chatHistoryEnabled = chatHistoryEnabled;
        return this;
    }

    /**
     * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
     */
    public ClientConfig withBoolValues(Map<String, Boolean> boolValues) {
        Utils.checkNotNull(boolValues, "boolValues");
        this.boolValues = Optional.ofNullable(boolValues);
        return this;
    }

    /**
     * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
     */
    public ClientConfig withBoolValues(Optional<? extends Map<String, Boolean>> boolValues) {
        Utils.checkNotNull(boolValues, "boolValues");
        this.boolValues = boolValues;
        return this;
    }

    /**
     * A map of {string, integer} pairs for client consumption.
     */
    public ClientConfig withIntegerValues(Map<String, Long> integerValues) {
        Utils.checkNotNull(integerValues, "integerValues");
        this.integerValues = Optional.ofNullable(integerValues);
        return this;
    }

    /**
     * A map of {string, integer} pairs for client consumption.
     */
    public ClientConfig withIntegerValues(Optional<? extends Map<String, Long>> integerValues) {
        Utils.checkNotNull(integerValues, "integerValues");
        this.integerValues = integerValues;
        return this;
    }

    /**
     * The user-facing name of the company owning the deployment
     */
    public ClientConfig withCompanyDisplayName(String companyDisplayName) {
        Utils.checkNotNull(companyDisplayName, "companyDisplayName");
        this.companyDisplayName = Optional.ofNullable(companyDisplayName);
        return this;
    }

    /**
     * The user-facing name of the company owning the deployment
     */
    public ClientConfig withCompanyDisplayName(Optional<String> companyDisplayName) {
        Utils.checkNotNull(companyDisplayName, "companyDisplayName");
        this.companyDisplayName = companyDisplayName;
        return this;
    }

    /**
     * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
     */
    public ClientConfig withCustomSerpMarkdown(String customSerpMarkdown) {
        Utils.checkNotNull(customSerpMarkdown, "customSerpMarkdown");
        this.customSerpMarkdown = Optional.ofNullable(customSerpMarkdown);
        return this;
    }

    /**
     * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
     */
    public ClientConfig withCustomSerpMarkdown(Optional<String> customSerpMarkdown) {
        Utils.checkNotNull(customSerpMarkdown, "customSerpMarkdown");
        this.customSerpMarkdown = customSerpMarkdown;
        return this;
    }

    /**
     * A demonstrative query to show during new user onboarding
     */
    public ClientConfig withOnboardingQuery(String onboardingQuery) {
        Utils.checkNotNull(onboardingQuery, "onboardingQuery");
        this.onboardingQuery = Optional.ofNullable(onboardingQuery);
        return this;
    }

    /**
     * A demonstrative query to show during new user onboarding
     */
    public ClientConfig withOnboardingQuery(Optional<String> onboardingQuery) {
        Utils.checkNotNull(onboardingQuery, "onboardingQuery");
        this.onboardingQuery = onboardingQuery;
        return this;
    }

    /**
     * Determines whether the org chart link in the Directory panel is visible to all users.
     */
    public ClientConfig withIsOrgChartLinkVisible(boolean isOrgChartLinkVisible) {
        Utils.checkNotNull(isOrgChartLinkVisible, "isOrgChartLinkVisible");
        this.isOrgChartLinkVisible = Optional.ofNullable(isOrgChartLinkVisible);
        return this;
    }

    /**
     * Determines whether the org chart link in the Directory panel is visible to all users.
     */
    public ClientConfig withIsOrgChartLinkVisible(Optional<Boolean> isOrgChartLinkVisible) {
        Utils.checkNotNull(isOrgChartLinkVisible, "isOrgChartLinkVisible");
        this.isOrgChartLinkVisible = isOrgChartLinkVisible;
        return this;
    }

    /**
     * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
     */
    public ClientConfig withIsOrgChartAccessible(boolean isOrgChartAccessible) {
        Utils.checkNotNull(isOrgChartAccessible, "isOrgChartAccessible");
        this.isOrgChartAccessible = Optional.ofNullable(isOrgChartAccessible);
        return this;
    }

    /**
     * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
     */
    public ClientConfig withIsOrgChartAccessible(Optional<Boolean> isOrgChartAccessible) {
        Utils.checkNotNull(isOrgChartAccessible, "isOrgChartAccessible");
        this.isOrgChartAccessible = isOrgChartAccessible;
        return this;
    }

    /**
     * Whether or not people data has been set up.
     */
    public ClientConfig withIsPeopleSetup(boolean isPeopleSetup) {
        Utils.checkNotNull(isPeopleSetup, "isPeopleSetup");
        this.isPeopleSetup = Optional.ofNullable(isPeopleSetup);
        return this;
    }

    /**
     * Whether or not people data has been set up.
     */
    public ClientConfig withIsPeopleSetup(Optional<Boolean> isPeopleSetup) {
        Utils.checkNotNull(isPeopleSetup, "isPeopleSetup");
        this.isPeopleSetup = isPeopleSetup;
        return this;
    }

    /**
     * Whether or not the deployment is in pilot mode.
     */
    public ClientConfig withIsPilotMode(boolean isPilotMode) {
        Utils.checkNotNull(isPilotMode, "isPilotMode");
        this.isPilotMode = Optional.ofNullable(isPilotMode);
        return this;
    }

    /**
     * Whether or not the deployment is in pilot mode.
     */
    public ClientConfig withIsPilotMode(Optional<Boolean> isPilotMode) {
        Utils.checkNotNull(isPilotMode, "isPilotMode");
        this.isPilotMode = isPilotMode;
        return this;
    }

    /**
     * URL the company uses to access the web app
     */
    public ClientConfig withWebAppUrl(String webAppUrl) {
        Utils.checkNotNull(webAppUrl, "webAppUrl");
        this.webAppUrl = Optional.ofNullable(webAppUrl);
        return this;
    }

    /**
     * URL the company uses to access the web app
     */
    public ClientConfig withWebAppUrl(Optional<String> webAppUrl) {
        Utils.checkNotNull(webAppUrl, "webAppUrl");
        this.webAppUrl = webAppUrl;
        return this;
    }

    public ClientConfig withUserOutreach(UserOutreachConfig userOutreach) {
        Utils.checkNotNull(userOutreach, "userOutreach");
        this.userOutreach = Optional.ofNullable(userOutreach);
        return this;
    }

    public ClientConfig withUserOutreach(Optional<? extends UserOutreachConfig> userOutreach) {
        Utils.checkNotNull(userOutreach, "userOutreach");
        this.userOutreach = userOutreach;
        return this;
    }

    /**
     * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
     */
    public ClientConfig withSearchLinkUrlTemplate(String searchLinkUrlTemplate) {
        Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
        this.searchLinkUrlTemplate = Optional.ofNullable(searchLinkUrlTemplate);
        return this;
    }

    /**
     * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
     */
    public ClientConfig withSearchLinkUrlTemplate(Optional<String> searchLinkUrlTemplate) {
        Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
        this.searchLinkUrlTemplate = searchLinkUrlTemplate;
        return this;
    }

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withChatLinkUrlTemplate(String chatLinkUrlTemplate) {
        Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
        this.chatLinkUrlTemplate = Optional.ofNullable(chatLinkUrlTemplate);
        return this;
    }

    /**
     * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withChatLinkUrlTemplate(Optional<String> chatLinkUrlTemplate) {
        Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
        this.chatLinkUrlTemplate = chatLinkUrlTemplate;
        return this;
    }

    /**
     * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
     */
    public ClientConfig withThemes(Themes themes) {
        Utils.checkNotNull(themes, "themes");
        this.themes = Optional.ofNullable(themes);
        return this;
    }

    /**
     * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
     */
    public ClientConfig withThemes(Optional<? extends Themes> themes) {
        Utils.checkNotNull(themes, "themes");
        this.themes = themes;
        return this;
    }

    /**
     * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
     */
    public ClientConfig withBrandings(Brandings brandings) {
        Utils.checkNotNull(brandings, "brandings");
        this.brandings = Optional.ofNullable(brandings);
        return this;
    }

    /**
     * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
     */
    public ClientConfig withBrandings(Optional<? extends Brandings> brandings) {
        Utils.checkNotNull(brandings, "brandings");
        this.brandings = brandings;
        return this;
    }

    /**
     * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
     */
    public ClientConfig withGreetingFormat(String greetingFormat) {
        Utils.checkNotNull(greetingFormat, "greetingFormat");
        this.greetingFormat = Optional.ofNullable(greetingFormat);
        return this;
    }

    /**
     * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
     */
    public ClientConfig withGreetingFormat(Optional<String> greetingFormat) {
        Utils.checkNotNull(greetingFormat, "greetingFormat");
        this.greetingFormat = greetingFormat;
        return this;
    }

    /**
     * Label for the external link at the end of the Task card in order to guide user to the source.
     */
    public ClientConfig withTaskSeeAllLabel(String taskSeeAllLabel) {
        Utils.checkNotNull(taskSeeAllLabel, "taskSeeAllLabel");
        this.taskSeeAllLabel = Optional.ofNullable(taskSeeAllLabel);
        return this;
    }

    /**
     * Label for the external link at the end of the Task card in order to guide user to the source.
     */
    public ClientConfig withTaskSeeAllLabel(Optional<String> taskSeeAllLabel) {
        Utils.checkNotNull(taskSeeAllLabel, "taskSeeAllLabel");
        this.taskSeeAllLabel = taskSeeAllLabel;
        return this;
    }

    /**
     * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
     */
    public ClientConfig withTaskSeeAllLink(String taskSeeAllLink) {
        Utils.checkNotNull(taskSeeAllLink, "taskSeeAllLink");
        this.taskSeeAllLink = Optional.ofNullable(taskSeeAllLink);
        return this;
    }

    /**
     * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
     */
    public ClientConfig withTaskSeeAllLink(Optional<String> taskSeeAllLink) {
        Utils.checkNotNull(taskSeeAllLink, "taskSeeAllLink");
        this.taskSeeAllLink = taskSeeAllLink;
        return this;
    }

    /**
     * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withSearchPlaceholder(String searchPlaceholder) {
        Utils.checkNotNull(searchPlaceholder, "searchPlaceholder");
        this.searchPlaceholder = Optional.ofNullable(searchPlaceholder);
        return this;
    }

    /**
     * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withSearchPlaceholder(Optional<String> searchPlaceholder) {
        Utils.checkNotNull(searchPlaceholder, "searchPlaceholder");
        this.searchPlaceholder = searchPlaceholder;
        return this;
    }

    /**
     * Company-wide custom prefix for Go Links.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withShortcutsPrefix(String shortcutsPrefix) {
        Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
        this.shortcutsPrefix = Optional.ofNullable(shortcutsPrefix);
        return this;
    }

    /**
     * Company-wide custom prefix for Go Links.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ClientConfig withShortcutsPrefix(Optional<String> shortcutsPrefix) {
        Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
        this.shortcutsPrefix = shortcutsPrefix;
        return this;
    }

    /**
     * SSO provider used by the company
     */
    public ClientConfig withSsoCompanyProvider(SsoCompanyProvider ssoCompanyProvider) {
        Utils.checkNotNull(ssoCompanyProvider, "ssoCompanyProvider");
        this.ssoCompanyProvider = Optional.ofNullable(ssoCompanyProvider);
        return this;
    }

    /**
     * SSO provider used by the company
     */
    public ClientConfig withSsoCompanyProvider(Optional<? extends SsoCompanyProvider> ssoCompanyProvider) {
        Utils.checkNotNull(ssoCompanyProvider, "ssoCompanyProvider");
        this.ssoCompanyProvider = ssoCompanyProvider;
        return this;
    }

    /**
     * whether to show the running ML pipelines banner
     */
    public ClientConfig withShowPipelinesSetupBanner(boolean showPipelinesSetupBanner) {
        Utils.checkNotNull(showPipelinesSetupBanner, "showPipelinesSetupBanner");
        this.showPipelinesSetupBanner = Optional.ofNullable(showPipelinesSetupBanner);
        return this;
    }

    /**
     * whether to show the running ML pipelines banner
     */
    public ClientConfig withShowPipelinesSetupBanner(Optional<Boolean> showPipelinesSetupBanner) {
        Utils.checkNotNull(showPipelinesSetupBanner, "showPipelinesSetupBanner");
        this.showPipelinesSetupBanner = showPipelinesSetupBanner;
        return this;
    }

    public ClientConfig withFeedbackCustomizations(FeedbackCustomizations feedbackCustomizations) {
        Utils.checkNotNull(feedbackCustomizations, "feedbackCustomizations");
        this.feedbackCustomizations = Optional.ofNullable(feedbackCustomizations);
        return this;
    }

    public ClientConfig withFeedbackCustomizations(Optional<? extends FeedbackCustomizations> feedbackCustomizations) {
        Utils.checkNotNull(feedbackCustomizations, "feedbackCustomizations");
        this.feedbackCustomizations = feedbackCustomizations;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientConfig other = (ClientConfig) o;
        return 
            Objects.deepEquals(this.assistant, other.assistant) &&
            Objects.deepEquals(this.tools, other.tools) &&
            Objects.deepEquals(this.shortcuts, other.shortcuts) &&
            Objects.deepEquals(this.search, other.search) &&
            Objects.deepEquals(this.feedPeopleCelebrationsEnabled, other.feedPeopleCelebrationsEnabled) &&
            Objects.deepEquals(this.feedSuggestedEnabled, other.feedSuggestedEnabled) &&
            Objects.deepEquals(this.feedTrendingEnabled, other.feedTrendingEnabled) &&
            Objects.deepEquals(this.feedRecentsEnabled, other.feedRecentsEnabled) &&
            Objects.deepEquals(this.feedMentionsEnabled, other.feedMentionsEnabled) &&
            Objects.deepEquals(this.gptAgentEnabled, other.gptAgentEnabled) &&
            Objects.deepEquals(this.chatHistoryEnabled, other.chatHistoryEnabled) &&
            Objects.deepEquals(this.boolValues, other.boolValues) &&
            Objects.deepEquals(this.integerValues, other.integerValues) &&
            Objects.deepEquals(this.companyDisplayName, other.companyDisplayName) &&
            Objects.deepEquals(this.customSerpMarkdown, other.customSerpMarkdown) &&
            Objects.deepEquals(this.onboardingQuery, other.onboardingQuery) &&
            Objects.deepEquals(this.isOrgChartLinkVisible, other.isOrgChartLinkVisible) &&
            Objects.deepEquals(this.isOrgChartAccessible, other.isOrgChartAccessible) &&
            Objects.deepEquals(this.isPeopleSetup, other.isPeopleSetup) &&
            Objects.deepEquals(this.isPilotMode, other.isPilotMode) &&
            Objects.deepEquals(this.webAppUrl, other.webAppUrl) &&
            Objects.deepEquals(this.userOutreach, other.userOutreach) &&
            Objects.deepEquals(this.searchLinkUrlTemplate, other.searchLinkUrlTemplate) &&
            Objects.deepEquals(this.chatLinkUrlTemplate, other.chatLinkUrlTemplate) &&
            Objects.deepEquals(this.themes, other.themes) &&
            Objects.deepEquals(this.brandings, other.brandings) &&
            Objects.deepEquals(this.greetingFormat, other.greetingFormat) &&
            Objects.deepEquals(this.taskSeeAllLabel, other.taskSeeAllLabel) &&
            Objects.deepEquals(this.taskSeeAllLink, other.taskSeeAllLink) &&
            Objects.deepEquals(this.searchPlaceholder, other.searchPlaceholder) &&
            Objects.deepEquals(this.shortcutsPrefix, other.shortcutsPrefix) &&
            Objects.deepEquals(this.ssoCompanyProvider, other.ssoCompanyProvider) &&
            Objects.deepEquals(this.showPipelinesSetupBanner, other.showPipelinesSetupBanner) &&
            Objects.deepEquals(this.feedbackCustomizations, other.feedbackCustomizations);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            assistant,
            tools,
            shortcuts,
            search,
            feedPeopleCelebrationsEnabled,
            feedSuggestedEnabled,
            feedTrendingEnabled,
            feedRecentsEnabled,
            feedMentionsEnabled,
            gptAgentEnabled,
            chatHistoryEnabled,
            boolValues,
            integerValues,
            companyDisplayName,
            customSerpMarkdown,
            onboardingQuery,
            isOrgChartLinkVisible,
            isOrgChartAccessible,
            isPeopleSetup,
            isPilotMode,
            webAppUrl,
            userOutreach,
            searchLinkUrlTemplate,
            chatLinkUrlTemplate,
            themes,
            brandings,
            greetingFormat,
            taskSeeAllLabel,
            taskSeeAllLink,
            searchPlaceholder,
            shortcutsPrefix,
            ssoCompanyProvider,
            showPipelinesSetupBanner,
            feedbackCustomizations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientConfig.class,
                "assistant", assistant,
                "tools", tools,
                "shortcuts", shortcuts,
                "search", search,
                "feedPeopleCelebrationsEnabled", feedPeopleCelebrationsEnabled,
                "feedSuggestedEnabled", feedSuggestedEnabled,
                "feedTrendingEnabled", feedTrendingEnabled,
                "feedRecentsEnabled", feedRecentsEnabled,
                "feedMentionsEnabled", feedMentionsEnabled,
                "gptAgentEnabled", gptAgentEnabled,
                "chatHistoryEnabled", chatHistoryEnabled,
                "boolValues", boolValues,
                "integerValues", integerValues,
                "companyDisplayName", companyDisplayName,
                "customSerpMarkdown", customSerpMarkdown,
                "onboardingQuery", onboardingQuery,
                "isOrgChartLinkVisible", isOrgChartLinkVisible,
                "isOrgChartAccessible", isOrgChartAccessible,
                "isPeopleSetup", isPeopleSetup,
                "isPilotMode", isPilotMode,
                "webAppUrl", webAppUrl,
                "userOutreach", userOutreach,
                "searchLinkUrlTemplate", searchLinkUrlTemplate,
                "chatLinkUrlTemplate", chatLinkUrlTemplate,
                "themes", themes,
                "brandings", brandings,
                "greetingFormat", greetingFormat,
                "taskSeeAllLabel", taskSeeAllLabel,
                "taskSeeAllLink", taskSeeAllLink,
                "searchPlaceholder", searchPlaceholder,
                "shortcutsPrefix", shortcutsPrefix,
                "ssoCompanyProvider", ssoCompanyProvider,
                "showPipelinesSetupBanner", showPipelinesSetupBanner,
                "feedbackCustomizations", feedbackCustomizations);
    }
    
    public final static class Builder {
 
        private Optional<? extends AssistantConfig> assistant = Optional.empty();
 
        @Deprecated
        private Optional<? extends ToolsConfig> tools = Optional.empty();
 
        private Optional<? extends ShortcutsConfig> shortcuts = Optional.empty();
 
        private Optional<? extends SearchClientConfig> search = Optional.empty();
 
        private Optional<Boolean> feedPeopleCelebrationsEnabled = Optional.empty();
 
        private Optional<Boolean> feedSuggestedEnabled = Optional.empty();
 
        private Optional<Boolean> feedTrendingEnabled = Optional.empty();
 
        private Optional<Boolean> feedRecentsEnabled = Optional.empty();
 
        private Optional<Boolean> feedMentionsEnabled = Optional.empty();
 
        @Deprecated
        private Optional<Boolean> gptAgentEnabled = Optional.empty();
 
        @Deprecated
        private Optional<Boolean> chatHistoryEnabled = Optional.empty();
 
        private Optional<? extends Map<String, Boolean>> boolValues = Optional.empty();
 
        private Optional<? extends Map<String, Long>> integerValues = Optional.empty();
 
        private Optional<String> companyDisplayName = Optional.empty();
 
        private Optional<String> customSerpMarkdown = Optional.empty();
 
        private Optional<String> onboardingQuery = Optional.empty();
 
        private Optional<Boolean> isOrgChartLinkVisible = Optional.empty();
 
        private Optional<Boolean> isOrgChartAccessible = Optional.empty();
 
        private Optional<Boolean> isPeopleSetup = Optional.empty();
 
        private Optional<Boolean> isPilotMode = Optional.empty();
 
        private Optional<String> webAppUrl = Optional.empty();
 
        private Optional<? extends UserOutreachConfig> userOutreach = Optional.empty();
 
        private Optional<String> searchLinkUrlTemplate = Optional.empty();
 
        @Deprecated
        private Optional<String> chatLinkUrlTemplate = Optional.empty();
 
        private Optional<? extends Themes> themes = Optional.empty();
 
        private Optional<? extends Brandings> brandings = Optional.empty();
 
        private Optional<String> greetingFormat = Optional.empty();
 
        private Optional<String> taskSeeAllLabel = Optional.empty();
 
        private Optional<String> taskSeeAllLink = Optional.empty();
 
        @Deprecated
        private Optional<String> searchPlaceholder = Optional.empty();
 
        @Deprecated
        private Optional<String> shortcutsPrefix = Optional.empty();
 
        private Optional<? extends SsoCompanyProvider> ssoCompanyProvider = Optional.empty();
 
        private Optional<Boolean> showPipelinesSetupBanner = Optional.empty();
 
        private Optional<? extends FeedbackCustomizations> feedbackCustomizations = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Configuration settings specific to Assistant features
         */
        public Builder assistant(AssistantConfig assistant) {
            Utils.checkNotNull(assistant, "assistant");
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * Configuration settings specific to Assistant features
         */
        public Builder assistant(Optional<? extends AssistantConfig> assistant) {
            Utils.checkNotNull(assistant, "assistant");
            this.assistant = assistant;
            return this;
        }

        /**
         * Configuration settings related to Tools.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder tools(ToolsConfig tools) {
            Utils.checkNotNull(tools, "tools");
            this.tools = Optional.ofNullable(tools);
            return this;
        }

        /**
         * Configuration settings related to Tools.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder tools(Optional<? extends ToolsConfig> tools) {
            Utils.checkNotNull(tools, "tools");
            this.tools = tools;
            return this;
        }

        /**
         * Configuration settings related to Shortcuts
         */
        public Builder shortcuts(ShortcutsConfig shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = Optional.ofNullable(shortcuts);
            return this;
        }

        /**
         * Configuration settings related to Shortcuts
         */
        public Builder shortcuts(Optional<? extends ShortcutsConfig> shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = shortcuts;
            return this;
        }

        /**
         * Configuration settings related to Search
         */
        public Builder search(SearchClientConfig search) {
            Utils.checkNotNull(search, "search");
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * Configuration settings related to Search
         */
        public Builder search(Optional<? extends SearchClientConfig> search) {
            Utils.checkNotNull(search, "search");
            this.search = search;
            return this;
        }

        /**
         * Whether people celebrations is enabled or not for the instance
         */
        public Builder feedPeopleCelebrationsEnabled(boolean feedPeopleCelebrationsEnabled) {
            Utils.checkNotNull(feedPeopleCelebrationsEnabled, "feedPeopleCelebrationsEnabled");
            this.feedPeopleCelebrationsEnabled = Optional.ofNullable(feedPeopleCelebrationsEnabled);
            return this;
        }

        /**
         * Whether people celebrations is enabled or not for the instance
         */
        public Builder feedPeopleCelebrationsEnabled(Optional<Boolean> feedPeopleCelebrationsEnabled) {
            Utils.checkNotNull(feedPeopleCelebrationsEnabled, "feedPeopleCelebrationsEnabled");
            this.feedPeopleCelebrationsEnabled = feedPeopleCelebrationsEnabled;
            return this;
        }

        /**
         * Whether the suggested feed is enabled
         */
        public Builder feedSuggestedEnabled(boolean feedSuggestedEnabled) {
            Utils.checkNotNull(feedSuggestedEnabled, "feedSuggestedEnabled");
            this.feedSuggestedEnabled = Optional.ofNullable(feedSuggestedEnabled);
            return this;
        }

        /**
         * Whether the suggested feed is enabled
         */
        public Builder feedSuggestedEnabled(Optional<Boolean> feedSuggestedEnabled) {
            Utils.checkNotNull(feedSuggestedEnabled, "feedSuggestedEnabled");
            this.feedSuggestedEnabled = feedSuggestedEnabled;
            return this;
        }

        /**
         * Whether the trending feed is enabled
         */
        public Builder feedTrendingEnabled(boolean feedTrendingEnabled) {
            Utils.checkNotNull(feedTrendingEnabled, "feedTrendingEnabled");
            this.feedTrendingEnabled = Optional.ofNullable(feedTrendingEnabled);
            return this;
        }

        /**
         * Whether the trending feed is enabled
         */
        public Builder feedTrendingEnabled(Optional<Boolean> feedTrendingEnabled) {
            Utils.checkNotNull(feedTrendingEnabled, "feedTrendingEnabled");
            this.feedTrendingEnabled = feedTrendingEnabled;
            return this;
        }

        /**
         * Whether the recents feed is enabled
         */
        public Builder feedRecentsEnabled(boolean feedRecentsEnabled) {
            Utils.checkNotNull(feedRecentsEnabled, "feedRecentsEnabled");
            this.feedRecentsEnabled = Optional.ofNullable(feedRecentsEnabled);
            return this;
        }

        /**
         * Whether the recents feed is enabled
         */
        public Builder feedRecentsEnabled(Optional<Boolean> feedRecentsEnabled) {
            Utils.checkNotNull(feedRecentsEnabled, "feedRecentsEnabled");
            this.feedRecentsEnabled = feedRecentsEnabled;
            return this;
        }

        /**
         * Whether the mentions feed is enabled
         */
        public Builder feedMentionsEnabled(boolean feedMentionsEnabled) {
            Utils.checkNotNull(feedMentionsEnabled, "feedMentionsEnabled");
            this.feedMentionsEnabled = Optional.ofNullable(feedMentionsEnabled);
            return this;
        }

        /**
         * Whether the mentions feed is enabled
         */
        public Builder feedMentionsEnabled(Optional<Boolean> feedMentionsEnabled) {
            Utils.checkNotNull(feedMentionsEnabled, "feedMentionsEnabled");
            this.feedMentionsEnabled = feedMentionsEnabled;
            return this;
        }

        /**
         * Whether the GPT agent for Chat is enabled
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder gptAgentEnabled(boolean gptAgentEnabled) {
            Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
            this.gptAgentEnabled = Optional.ofNullable(gptAgentEnabled);
            return this;
        }

        /**
         * Whether the GPT agent for Chat is enabled
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder gptAgentEnabled(Optional<Boolean> gptAgentEnabled) {
            Utils.checkNotNull(gptAgentEnabled, "gptAgentEnabled");
            this.gptAgentEnabled = gptAgentEnabled;
            return this;
        }

        /**
         * Whether the chat history for Chat is enabled
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder chatHistoryEnabled(boolean chatHistoryEnabled) {
            Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
            this.chatHistoryEnabled = Optional.ofNullable(chatHistoryEnabled);
            return this;
        }

        /**
         * Whether the chat history for Chat is enabled
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder chatHistoryEnabled(Optional<Boolean> chatHistoryEnabled) {
            Utils.checkNotNull(chatHistoryEnabled, "chatHistoryEnabled");
            this.chatHistoryEnabled = chatHistoryEnabled;
            return this;
        }

        /**
         * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
         */
        public Builder boolValues(Map<String, Boolean> boolValues) {
            Utils.checkNotNull(boolValues, "boolValues");
            this.boolValues = Optional.ofNullable(boolValues);
            return this;
        }

        /**
         * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
         */
        public Builder boolValues(Optional<? extends Map<String, Boolean>> boolValues) {
            Utils.checkNotNull(boolValues, "boolValues");
            this.boolValues = boolValues;
            return this;
        }

        /**
         * A map of {string, integer} pairs for client consumption.
         */
        public Builder integerValues(Map<String, Long> integerValues) {
            Utils.checkNotNull(integerValues, "integerValues");
            this.integerValues = Optional.ofNullable(integerValues);
            return this;
        }

        /**
         * A map of {string, integer} pairs for client consumption.
         */
        public Builder integerValues(Optional<? extends Map<String, Long>> integerValues) {
            Utils.checkNotNull(integerValues, "integerValues");
            this.integerValues = integerValues;
            return this;
        }

        /**
         * The user-facing name of the company owning the deployment
         */
        public Builder companyDisplayName(String companyDisplayName) {
            Utils.checkNotNull(companyDisplayName, "companyDisplayName");
            this.companyDisplayName = Optional.ofNullable(companyDisplayName);
            return this;
        }

        /**
         * The user-facing name of the company owning the deployment
         */
        public Builder companyDisplayName(Optional<String> companyDisplayName) {
            Utils.checkNotNull(companyDisplayName, "companyDisplayName");
            this.companyDisplayName = companyDisplayName;
            return this;
        }

        /**
         * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
         */
        public Builder customSerpMarkdown(String customSerpMarkdown) {
            Utils.checkNotNull(customSerpMarkdown, "customSerpMarkdown");
            this.customSerpMarkdown = Optional.ofNullable(customSerpMarkdown);
            return this;
        }

        /**
         * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
         */
        public Builder customSerpMarkdown(Optional<String> customSerpMarkdown) {
            Utils.checkNotNull(customSerpMarkdown, "customSerpMarkdown");
            this.customSerpMarkdown = customSerpMarkdown;
            return this;
        }

        /**
         * A demonstrative query to show during new user onboarding
         */
        public Builder onboardingQuery(String onboardingQuery) {
            Utils.checkNotNull(onboardingQuery, "onboardingQuery");
            this.onboardingQuery = Optional.ofNullable(onboardingQuery);
            return this;
        }

        /**
         * A demonstrative query to show during new user onboarding
         */
        public Builder onboardingQuery(Optional<String> onboardingQuery) {
            Utils.checkNotNull(onboardingQuery, "onboardingQuery");
            this.onboardingQuery = onboardingQuery;
            return this;
        }

        /**
         * Determines whether the org chart link in the Directory panel is visible to all users.
         */
        public Builder isOrgChartLinkVisible(boolean isOrgChartLinkVisible) {
            Utils.checkNotNull(isOrgChartLinkVisible, "isOrgChartLinkVisible");
            this.isOrgChartLinkVisible = Optional.ofNullable(isOrgChartLinkVisible);
            return this;
        }

        /**
         * Determines whether the org chart link in the Directory panel is visible to all users.
         */
        public Builder isOrgChartLinkVisible(Optional<Boolean> isOrgChartLinkVisible) {
            Utils.checkNotNull(isOrgChartLinkVisible, "isOrgChartLinkVisible");
            this.isOrgChartLinkVisible = isOrgChartLinkVisible;
            return this;
        }

        /**
         * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
         */
        public Builder isOrgChartAccessible(boolean isOrgChartAccessible) {
            Utils.checkNotNull(isOrgChartAccessible, "isOrgChartAccessible");
            this.isOrgChartAccessible = Optional.ofNullable(isOrgChartAccessible);
            return this;
        }

        /**
         * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
         */
        public Builder isOrgChartAccessible(Optional<Boolean> isOrgChartAccessible) {
            Utils.checkNotNull(isOrgChartAccessible, "isOrgChartAccessible");
            this.isOrgChartAccessible = isOrgChartAccessible;
            return this;
        }

        /**
         * Whether or not people data has been set up.
         */
        public Builder isPeopleSetup(boolean isPeopleSetup) {
            Utils.checkNotNull(isPeopleSetup, "isPeopleSetup");
            this.isPeopleSetup = Optional.ofNullable(isPeopleSetup);
            return this;
        }

        /**
         * Whether or not people data has been set up.
         */
        public Builder isPeopleSetup(Optional<Boolean> isPeopleSetup) {
            Utils.checkNotNull(isPeopleSetup, "isPeopleSetup");
            this.isPeopleSetup = isPeopleSetup;
            return this;
        }

        /**
         * Whether or not the deployment is in pilot mode.
         */
        public Builder isPilotMode(boolean isPilotMode) {
            Utils.checkNotNull(isPilotMode, "isPilotMode");
            this.isPilotMode = Optional.ofNullable(isPilotMode);
            return this;
        }

        /**
         * Whether or not the deployment is in pilot mode.
         */
        public Builder isPilotMode(Optional<Boolean> isPilotMode) {
            Utils.checkNotNull(isPilotMode, "isPilotMode");
            this.isPilotMode = isPilotMode;
            return this;
        }

        /**
         * URL the company uses to access the web app
         */
        public Builder webAppUrl(String webAppUrl) {
            Utils.checkNotNull(webAppUrl, "webAppUrl");
            this.webAppUrl = Optional.ofNullable(webAppUrl);
            return this;
        }

        /**
         * URL the company uses to access the web app
         */
        public Builder webAppUrl(Optional<String> webAppUrl) {
            Utils.checkNotNull(webAppUrl, "webAppUrl");
            this.webAppUrl = webAppUrl;
            return this;
        }

        public Builder userOutreach(UserOutreachConfig userOutreach) {
            Utils.checkNotNull(userOutreach, "userOutreach");
            this.userOutreach = Optional.ofNullable(userOutreach);
            return this;
        }

        public Builder userOutreach(Optional<? extends UserOutreachConfig> userOutreach) {
            Utils.checkNotNull(userOutreach, "userOutreach");
            this.userOutreach = userOutreach;
            return this;
        }

        /**
         * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
         */
        public Builder searchLinkUrlTemplate(String searchLinkUrlTemplate) {
            Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
            this.searchLinkUrlTemplate = Optional.ofNullable(searchLinkUrlTemplate);
            return this;
        }

        /**
         * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
         */
        public Builder searchLinkUrlTemplate(Optional<String> searchLinkUrlTemplate) {
            Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
            this.searchLinkUrlTemplate = searchLinkUrlTemplate;
            return this;
        }

        /**
         * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder chatLinkUrlTemplate(String chatLinkUrlTemplate) {
            Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
            this.chatLinkUrlTemplate = Optional.ofNullable(chatLinkUrlTemplate);
            return this;
        }

        /**
         * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder chatLinkUrlTemplate(Optional<String> chatLinkUrlTemplate) {
            Utils.checkNotNull(chatLinkUrlTemplate, "chatLinkUrlTemplate");
            this.chatLinkUrlTemplate = chatLinkUrlTemplate;
            return this;
        }

        /**
         * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
         */
        public Builder themes(Themes themes) {
            Utils.checkNotNull(themes, "themes");
            this.themes = Optional.ofNullable(themes);
            return this;
        }

        /**
         * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
         */
        public Builder themes(Optional<? extends Themes> themes) {
            Utils.checkNotNull(themes, "themes");
            this.themes = themes;
            return this;
        }

        /**
         * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
         */
        public Builder brandings(Brandings brandings) {
            Utils.checkNotNull(brandings, "brandings");
            this.brandings = Optional.ofNullable(brandings);
            return this;
        }

        /**
         * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
         */
        public Builder brandings(Optional<? extends Brandings> brandings) {
            Utils.checkNotNull(brandings, "brandings");
            this.brandings = brandings;
            return this;
        }

        /**
         * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
         */
        public Builder greetingFormat(String greetingFormat) {
            Utils.checkNotNull(greetingFormat, "greetingFormat");
            this.greetingFormat = Optional.ofNullable(greetingFormat);
            return this;
        }

        /**
         * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
         */
        public Builder greetingFormat(Optional<String> greetingFormat) {
            Utils.checkNotNull(greetingFormat, "greetingFormat");
            this.greetingFormat = greetingFormat;
            return this;
        }

        /**
         * Label for the external link at the end of the Task card in order to guide user to the source.
         */
        public Builder taskSeeAllLabel(String taskSeeAllLabel) {
            Utils.checkNotNull(taskSeeAllLabel, "taskSeeAllLabel");
            this.taskSeeAllLabel = Optional.ofNullable(taskSeeAllLabel);
            return this;
        }

        /**
         * Label for the external link at the end of the Task card in order to guide user to the source.
         */
        public Builder taskSeeAllLabel(Optional<String> taskSeeAllLabel) {
            Utils.checkNotNull(taskSeeAllLabel, "taskSeeAllLabel");
            this.taskSeeAllLabel = taskSeeAllLabel;
            return this;
        }

        /**
         * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
         */
        public Builder taskSeeAllLink(String taskSeeAllLink) {
            Utils.checkNotNull(taskSeeAllLink, "taskSeeAllLink");
            this.taskSeeAllLink = Optional.ofNullable(taskSeeAllLink);
            return this;
        }

        /**
         * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
         */
        public Builder taskSeeAllLink(Optional<String> taskSeeAllLink) {
            Utils.checkNotNull(taskSeeAllLink, "taskSeeAllLink");
            this.taskSeeAllLink = taskSeeAllLink;
            return this;
        }

        /**
         * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder searchPlaceholder(String searchPlaceholder) {
            Utils.checkNotNull(searchPlaceholder, "searchPlaceholder");
            this.searchPlaceholder = Optional.ofNullable(searchPlaceholder);
            return this;
        }

        /**
         * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder searchPlaceholder(Optional<String> searchPlaceholder) {
            Utils.checkNotNull(searchPlaceholder, "searchPlaceholder");
            this.searchPlaceholder = searchPlaceholder;
            return this;
        }

        /**
         * Company-wide custom prefix for Go Links.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder shortcutsPrefix(String shortcutsPrefix) {
            Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
            this.shortcutsPrefix = Optional.ofNullable(shortcutsPrefix);
            return this;
        }

        /**
         * Company-wide custom prefix for Go Links.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder shortcutsPrefix(Optional<String> shortcutsPrefix) {
            Utils.checkNotNull(shortcutsPrefix, "shortcutsPrefix");
            this.shortcutsPrefix = shortcutsPrefix;
            return this;
        }

        /**
         * SSO provider used by the company
         */
        public Builder ssoCompanyProvider(SsoCompanyProvider ssoCompanyProvider) {
            Utils.checkNotNull(ssoCompanyProvider, "ssoCompanyProvider");
            this.ssoCompanyProvider = Optional.ofNullable(ssoCompanyProvider);
            return this;
        }

        /**
         * SSO provider used by the company
         */
        public Builder ssoCompanyProvider(Optional<? extends SsoCompanyProvider> ssoCompanyProvider) {
            Utils.checkNotNull(ssoCompanyProvider, "ssoCompanyProvider");
            this.ssoCompanyProvider = ssoCompanyProvider;
            return this;
        }

        /**
         * whether to show the running ML pipelines banner
         */
        public Builder showPipelinesSetupBanner(boolean showPipelinesSetupBanner) {
            Utils.checkNotNull(showPipelinesSetupBanner, "showPipelinesSetupBanner");
            this.showPipelinesSetupBanner = Optional.ofNullable(showPipelinesSetupBanner);
            return this;
        }

        /**
         * whether to show the running ML pipelines banner
         */
        public Builder showPipelinesSetupBanner(Optional<Boolean> showPipelinesSetupBanner) {
            Utils.checkNotNull(showPipelinesSetupBanner, "showPipelinesSetupBanner");
            this.showPipelinesSetupBanner = showPipelinesSetupBanner;
            return this;
        }

        public Builder feedbackCustomizations(FeedbackCustomizations feedbackCustomizations) {
            Utils.checkNotNull(feedbackCustomizations, "feedbackCustomizations");
            this.feedbackCustomizations = Optional.ofNullable(feedbackCustomizations);
            return this;
        }

        public Builder feedbackCustomizations(Optional<? extends FeedbackCustomizations> feedbackCustomizations) {
            Utils.checkNotNull(feedbackCustomizations, "feedbackCustomizations");
            this.feedbackCustomizations = feedbackCustomizations;
            return this;
        }
        
        public ClientConfig build() {
            return new ClientConfig(
                assistant,
                tools,
                shortcuts,
                search,
                feedPeopleCelebrationsEnabled,
                feedSuggestedEnabled,
                feedTrendingEnabled,
                feedRecentsEnabled,
                feedMentionsEnabled,
                gptAgentEnabled,
                chatHistoryEnabled,
                boolValues,
                integerValues,
                companyDisplayName,
                customSerpMarkdown,
                onboardingQuery,
                isOrgChartLinkVisible,
                isOrgChartAccessible,
                isPeopleSetup,
                isPilotMode,
                webAppUrl,
                userOutreach,
                searchLinkUrlTemplate,
                chatLinkUrlTemplate,
                themes,
                brandings,
                greetingFormat,
                taskSeeAllLabel,
                taskSeeAllLink,
                searchPlaceholder,
                shortcutsPrefix,
                ssoCompanyProvider,
                showPipelinesSetupBanner,
                feedbackCustomizations);
        }
    }
}
