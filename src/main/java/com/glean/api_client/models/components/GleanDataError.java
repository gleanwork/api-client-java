/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GleanDataError {

    /**
     * Indicates the gmail results could not be fetched due to bad token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badGmailToken")
    private Optional<Boolean> badGmailToken;

    /**
     * Indicates the outlook results could not be fetched due to bad token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badOutlookToken")
    private Optional<Boolean> badOutlookToken;

    /**
     * Indicates results could not be fetched due to invalid operators in the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invalidOperators")
    private Optional<? extends List<InvalidOperatorValueError>> invalidOperators;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessages")
    private Optional<? extends List<ErrorMessage>> errorMessages;

    @JsonCreator
    public GleanDataError(
            @JsonProperty("badGmailToken") Optional<Boolean> badGmailToken,
            @JsonProperty("badOutlookToken") Optional<Boolean> badOutlookToken,
            @JsonProperty("invalidOperators") Optional<? extends List<InvalidOperatorValueError>> invalidOperators,
            @JsonProperty("errorMessages") Optional<? extends List<ErrorMessage>> errorMessages) {
        Utils.checkNotNull(badGmailToken, "badGmailToken");
        Utils.checkNotNull(badOutlookToken, "badOutlookToken");
        Utils.checkNotNull(invalidOperators, "invalidOperators");
        Utils.checkNotNull(errorMessages, "errorMessages");
        this.badGmailToken = badGmailToken;
        this.badOutlookToken = badOutlookToken;
        this.invalidOperators = invalidOperators;
        this.errorMessages = errorMessages;
    }
    
    public GleanDataError() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the gmail results could not be fetched due to bad token.
     */
    @JsonIgnore
    public Optional<Boolean> badGmailToken() {
        return badGmailToken;
    }

    /**
     * Indicates the outlook results could not be fetched due to bad token.
     */
    @JsonIgnore
    public Optional<Boolean> badOutlookToken() {
        return badOutlookToken;
    }

    /**
     * Indicates results could not be fetched due to invalid operators in the query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<InvalidOperatorValueError>> invalidOperators() {
        return (Optional<List<InvalidOperatorValueError>>) invalidOperators;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ErrorMessage>> errorMessages() {
        return (Optional<List<ErrorMessage>>) errorMessages;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the gmail results could not be fetched due to bad token.
     */
    public GleanDataError withBadGmailToken(boolean badGmailToken) {
        Utils.checkNotNull(badGmailToken, "badGmailToken");
        this.badGmailToken = Optional.ofNullable(badGmailToken);
        return this;
    }

    /**
     * Indicates the gmail results could not be fetched due to bad token.
     */
    public GleanDataError withBadGmailToken(Optional<Boolean> badGmailToken) {
        Utils.checkNotNull(badGmailToken, "badGmailToken");
        this.badGmailToken = badGmailToken;
        return this;
    }

    /**
     * Indicates the outlook results could not be fetched due to bad token.
     */
    public GleanDataError withBadOutlookToken(boolean badOutlookToken) {
        Utils.checkNotNull(badOutlookToken, "badOutlookToken");
        this.badOutlookToken = Optional.ofNullable(badOutlookToken);
        return this;
    }

    /**
     * Indicates the outlook results could not be fetched due to bad token.
     */
    public GleanDataError withBadOutlookToken(Optional<Boolean> badOutlookToken) {
        Utils.checkNotNull(badOutlookToken, "badOutlookToken");
        this.badOutlookToken = badOutlookToken;
        return this;
    }

    /**
     * Indicates results could not be fetched due to invalid operators in the query.
     */
    public GleanDataError withInvalidOperators(List<InvalidOperatorValueError> invalidOperators) {
        Utils.checkNotNull(invalidOperators, "invalidOperators");
        this.invalidOperators = Optional.ofNullable(invalidOperators);
        return this;
    }

    /**
     * Indicates results could not be fetched due to invalid operators in the query.
     */
    public GleanDataError withInvalidOperators(Optional<? extends List<InvalidOperatorValueError>> invalidOperators) {
        Utils.checkNotNull(invalidOperators, "invalidOperators");
        this.invalidOperators = invalidOperators;
        return this;
    }

    public GleanDataError withErrorMessages(List<ErrorMessage> errorMessages) {
        Utils.checkNotNull(errorMessages, "errorMessages");
        this.errorMessages = Optional.ofNullable(errorMessages);
        return this;
    }

    public GleanDataError withErrorMessages(Optional<? extends List<ErrorMessage>> errorMessages) {
        Utils.checkNotNull(errorMessages, "errorMessages");
        this.errorMessages = errorMessages;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GleanDataError other = (GleanDataError) o;
        return 
            Objects.deepEquals(this.badGmailToken, other.badGmailToken) &&
            Objects.deepEquals(this.badOutlookToken, other.badOutlookToken) &&
            Objects.deepEquals(this.invalidOperators, other.invalidOperators) &&
            Objects.deepEquals(this.errorMessages, other.errorMessages);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            badGmailToken,
            badOutlookToken,
            invalidOperators,
            errorMessages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GleanDataError.class,
                "badGmailToken", badGmailToken,
                "badOutlookToken", badOutlookToken,
                "invalidOperators", invalidOperators,
                "errorMessages", errorMessages);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> badGmailToken = Optional.empty();
 
        private Optional<Boolean> badOutlookToken = Optional.empty();
 
        private Optional<? extends List<InvalidOperatorValueError>> invalidOperators = Optional.empty();
 
        private Optional<? extends List<ErrorMessage>> errorMessages = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the gmail results could not be fetched due to bad token.
         */
        public Builder badGmailToken(boolean badGmailToken) {
            Utils.checkNotNull(badGmailToken, "badGmailToken");
            this.badGmailToken = Optional.ofNullable(badGmailToken);
            return this;
        }

        /**
         * Indicates the gmail results could not be fetched due to bad token.
         */
        public Builder badGmailToken(Optional<Boolean> badGmailToken) {
            Utils.checkNotNull(badGmailToken, "badGmailToken");
            this.badGmailToken = badGmailToken;
            return this;
        }

        /**
         * Indicates the outlook results could not be fetched due to bad token.
         */
        public Builder badOutlookToken(boolean badOutlookToken) {
            Utils.checkNotNull(badOutlookToken, "badOutlookToken");
            this.badOutlookToken = Optional.ofNullable(badOutlookToken);
            return this;
        }

        /**
         * Indicates the outlook results could not be fetched due to bad token.
         */
        public Builder badOutlookToken(Optional<Boolean> badOutlookToken) {
            Utils.checkNotNull(badOutlookToken, "badOutlookToken");
            this.badOutlookToken = badOutlookToken;
            return this;
        }

        /**
         * Indicates results could not be fetched due to invalid operators in the query.
         */
        public Builder invalidOperators(List<InvalidOperatorValueError> invalidOperators) {
            Utils.checkNotNull(invalidOperators, "invalidOperators");
            this.invalidOperators = Optional.ofNullable(invalidOperators);
            return this;
        }

        /**
         * Indicates results could not be fetched due to invalid operators in the query.
         */
        public Builder invalidOperators(Optional<? extends List<InvalidOperatorValueError>> invalidOperators) {
            Utils.checkNotNull(invalidOperators, "invalidOperators");
            this.invalidOperators = invalidOperators;
            return this;
        }

        public Builder errorMessages(List<ErrorMessage> errorMessages) {
            Utils.checkNotNull(errorMessages, "errorMessages");
            this.errorMessages = Optional.ofNullable(errorMessages);
            return this;
        }

        public Builder errorMessages(Optional<? extends List<ErrorMessage>> errorMessages) {
            Utils.checkNotNull(errorMessages, "errorMessages");
            this.errorMessages = errorMessages;
            return this;
        }
        
        public GleanDataError build() {
            return new GleanDataError(
                badGmailToken,
                badOutlookToken,
                invalidOperators,
                errorMessages);
        }
    }
}
