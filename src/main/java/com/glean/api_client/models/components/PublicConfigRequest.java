/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * PublicConfigRequest
 * 
 * <p>Will only send back publicly available config and will ignore other keys
 */
public class PublicConfigRequest {

    /**
     * A list of theme keys to include in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themeKeys")
    private Optional<? extends List<String>> themeKeys;

    /**
     * A list of boolean flag keys to include in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boolKeys")
    private Optional<? extends List<String>> boolKeys;

    /**
     * A list of integer flag keys to include in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerKeys")
    private Optional<? extends List<String>> integerKeys;

    @JsonCreator
    public PublicConfigRequest(
            @JsonProperty("themeKeys") Optional<? extends List<String>> themeKeys,
            @JsonProperty("boolKeys") Optional<? extends List<String>> boolKeys,
            @JsonProperty("integerKeys") Optional<? extends List<String>> integerKeys) {
        Utils.checkNotNull(themeKeys, "themeKeys");
        Utils.checkNotNull(boolKeys, "boolKeys");
        Utils.checkNotNull(integerKeys, "integerKeys");
        this.themeKeys = themeKeys;
        this.boolKeys = boolKeys;
        this.integerKeys = integerKeys;
    }
    
    public PublicConfigRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A list of theme keys to include in the response.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> themeKeys() {
        return (Optional<List<String>>) themeKeys;
    }

    /**
     * A list of boolean flag keys to include in the response.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> boolKeys() {
        return (Optional<List<String>>) boolKeys;
    }

    /**
     * A list of integer flag keys to include in the response.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> integerKeys() {
        return (Optional<List<String>>) integerKeys;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of theme keys to include in the response.
     */
    public PublicConfigRequest withThemeKeys(List<String> themeKeys) {
        Utils.checkNotNull(themeKeys, "themeKeys");
        this.themeKeys = Optional.ofNullable(themeKeys);
        return this;
    }

    /**
     * A list of theme keys to include in the response.
     */
    public PublicConfigRequest withThemeKeys(Optional<? extends List<String>> themeKeys) {
        Utils.checkNotNull(themeKeys, "themeKeys");
        this.themeKeys = themeKeys;
        return this;
    }

    /**
     * A list of boolean flag keys to include in the response.
     */
    public PublicConfigRequest withBoolKeys(List<String> boolKeys) {
        Utils.checkNotNull(boolKeys, "boolKeys");
        this.boolKeys = Optional.ofNullable(boolKeys);
        return this;
    }

    /**
     * A list of boolean flag keys to include in the response.
     */
    public PublicConfigRequest withBoolKeys(Optional<? extends List<String>> boolKeys) {
        Utils.checkNotNull(boolKeys, "boolKeys");
        this.boolKeys = boolKeys;
        return this;
    }

    /**
     * A list of integer flag keys to include in the response.
     */
    public PublicConfigRequest withIntegerKeys(List<String> integerKeys) {
        Utils.checkNotNull(integerKeys, "integerKeys");
        this.integerKeys = Optional.ofNullable(integerKeys);
        return this;
    }

    /**
     * A list of integer flag keys to include in the response.
     */
    public PublicConfigRequest withIntegerKeys(Optional<? extends List<String>> integerKeys) {
        Utils.checkNotNull(integerKeys, "integerKeys");
        this.integerKeys = integerKeys;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PublicConfigRequest other = (PublicConfigRequest) o;
        return 
            Objects.deepEquals(this.themeKeys, other.themeKeys) &&
            Objects.deepEquals(this.boolKeys, other.boolKeys) &&
            Objects.deepEquals(this.integerKeys, other.integerKeys);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            themeKeys,
            boolKeys,
            integerKeys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PublicConfigRequest.class,
                "themeKeys", themeKeys,
                "boolKeys", boolKeys,
                "integerKeys", integerKeys);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> themeKeys = Optional.empty();
 
        private Optional<? extends List<String>> boolKeys = Optional.empty();
 
        private Optional<? extends List<String>> integerKeys = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of theme keys to include in the response.
         */
        public Builder themeKeys(List<String> themeKeys) {
            Utils.checkNotNull(themeKeys, "themeKeys");
            this.themeKeys = Optional.ofNullable(themeKeys);
            return this;
        }

        /**
         * A list of theme keys to include in the response.
         */
        public Builder themeKeys(Optional<? extends List<String>> themeKeys) {
            Utils.checkNotNull(themeKeys, "themeKeys");
            this.themeKeys = themeKeys;
            return this;
        }

        /**
         * A list of boolean flag keys to include in the response.
         */
        public Builder boolKeys(List<String> boolKeys) {
            Utils.checkNotNull(boolKeys, "boolKeys");
            this.boolKeys = Optional.ofNullable(boolKeys);
            return this;
        }

        /**
         * A list of boolean flag keys to include in the response.
         */
        public Builder boolKeys(Optional<? extends List<String>> boolKeys) {
            Utils.checkNotNull(boolKeys, "boolKeys");
            this.boolKeys = boolKeys;
            return this;
        }

        /**
         * A list of integer flag keys to include in the response.
         */
        public Builder integerKeys(List<String> integerKeys) {
            Utils.checkNotNull(integerKeys, "integerKeys");
            this.integerKeys = Optional.ofNullable(integerKeys);
            return this;
        }

        /**
         * A list of integer flag keys to include in the response.
         */
        public Builder integerKeys(Optional<? extends List<String>> integerKeys) {
            Utils.checkNotNull(integerKeys, "integerKeys");
            this.integerKeys = integerKeys;
            return this;
        }
        
        public PublicConfigRequest build() {
            return new PublicConfigRequest(
                themeKeys,
                boolKeys,
                integerKeys);
        }
    }
}
