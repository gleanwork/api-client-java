/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class User {

    /**
     * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userID")
    private Optional<String> userID;

    /**
     * An opaque user ID for the authenticated user (ignores actas).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origID")
    private Optional<String> origID;

    @JsonCreator
    public User(
            @JsonProperty("userID") Optional<String> userID,
            @JsonProperty("origID") Optional<String> origID) {
        Utils.checkNotNull(userID, "userID");
        Utils.checkNotNull(origID, "origID");
        this.userID = userID;
        this.origID = origID;
    }
    
    public User() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
     */
    @JsonIgnore
    public Optional<String> userID() {
        return userID;
    }

    /**
     * An opaque user ID for the authenticated user (ignores actas).
     */
    @JsonIgnore
    public Optional<String> origID() {
        return origID;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
     */
    public User withUserID(String userID) {
        Utils.checkNotNull(userID, "userID");
        this.userID = Optional.ofNullable(userID);
        return this;
    }

    /**
     * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
     */
    public User withUserID(Optional<String> userID) {
        Utils.checkNotNull(userID, "userID");
        this.userID = userID;
        return this;
    }

    /**
     * An opaque user ID for the authenticated user (ignores actas).
     */
    public User withOrigID(String origID) {
        Utils.checkNotNull(origID, "origID");
        this.origID = Optional.ofNullable(origID);
        return this;
    }

    /**
     * An opaque user ID for the authenticated user (ignores actas).
     */
    public User withOrigID(Optional<String> origID) {
        Utils.checkNotNull(origID, "origID");
        this.origID = origID;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Objects.deepEquals(this.userID, other.userID) &&
            Objects.deepEquals(this.origID, other.origID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            userID,
            origID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "userID", userID,
                "origID", origID);
    }
    
    public final static class Builder {
 
        private Optional<String> userID = Optional.empty();
 
        private Optional<String> origID = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
         */
        public Builder userID(String userID) {
            Utils.checkNotNull(userID, "userID");
            this.userID = Optional.ofNullable(userID);
            return this;
        }

        /**
         * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
         */
        public Builder userID(Optional<String> userID) {
            Utils.checkNotNull(userID, "userID");
            this.userID = userID;
            return this;
        }

        /**
         * An opaque user ID for the authenticated user (ignores actas).
         */
        public Builder origID(String origID) {
            Utils.checkNotNull(origID, "origID");
            this.origID = Optional.ofNullable(origID);
            return this;
        }

        /**
         * An opaque user ID for the authenticated user (ignores actas).
         */
        public Builder origID(Optional<String> origID) {
            Utils.checkNotNull(origID, "origID");
            this.origID = origID;
            return this;
        }
        
        public User build() {
            return new User(
                userID,
                origID);
        }
    }
}
