/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.utils.LazySingletonValue;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PinCollectionRequest {

    /**
     * Whether to pin or unpin
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private Optional<? extends PinCollectionRequestAction> action;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends CollectionPinMetadata> data;

    @JsonCreator
    public PinCollectionRequest(
            @JsonProperty("action") Optional<? extends PinCollectionRequestAction> action,
            @JsonProperty("data") Optional<? extends CollectionPinMetadata> data) {
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(data, "data");
        this.action = action;
        this.data = data;
    }
    
    public PinCollectionRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether to pin or unpin
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PinCollectionRequestAction> action() {
        return (Optional<PinCollectionRequestAction>) action;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectionPinMetadata> data() {
        return (Optional<CollectionPinMetadata>) data;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether to pin or unpin
     */
    public PinCollectionRequest withAction(PinCollectionRequestAction action) {
        Utils.checkNotNull(action, "action");
        this.action = Optional.ofNullable(action);
        return this;
    }

    /**
     * Whether to pin or unpin
     */
    public PinCollectionRequest withAction(Optional<? extends PinCollectionRequestAction> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    public PinCollectionRequest withData(CollectionPinMetadata data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public PinCollectionRequest withData(Optional<? extends CollectionPinMetadata> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PinCollectionRequest other = (PinCollectionRequest) o;
        return 
            Objects.deepEquals(this.action, other.action) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            action,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PinCollectionRequest.class,
                "action", action,
                "data", data);
    }
    
    public final static class Builder {
 
        private Optional<? extends PinCollectionRequestAction> action;
 
        private Optional<? extends CollectionPinMetadata> data = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to pin or unpin
         */
        public Builder action(PinCollectionRequestAction action) {
            Utils.checkNotNull(action, "action");
            this.action = Optional.ofNullable(action);
            return this;
        }

        /**
         * Whether to pin or unpin
         */
        public Builder action(Optional<? extends PinCollectionRequestAction> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }

        public Builder data(CollectionPinMetadata data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends CollectionPinMetadata> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public PinCollectionRequest build() {
            if (action == null) {
                action = _SINGLETON_VALUE_Action.value();
            }
            return new PinCollectionRequest(
                action,
                data);
        }

        private static final LazySingletonValue<Optional<? extends PinCollectionRequestAction>> _SINGLETON_VALUE_Action =
                new LazySingletonValue<>(
                        "action",
                        "\"PIN\"",
                        new TypeReference<Optional<? extends PinCollectionRequestAction>>() {});
    }
}
