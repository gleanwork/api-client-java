/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class ActivityEvent {

    /**
     * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The type of activity this represents.
     */
    @JsonProperty("action")
    private ActivityEventAction action;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("params")
    private Optional<? extends ActivityEventParams> params;

    /**
     * The ISO 8601 timestamp when the activity began.
     */
    @JsonProperty("timestamp")
    private OffsetDateTime timestamp;

    /**
     * The URL of the activity.
     */
    @JsonProperty("url")
    private String url;

    @JsonCreator
    public ActivityEvent(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("action") ActivityEventAction action,
            @JsonProperty("params") Optional<? extends ActivityEventParams> params,
            @JsonProperty("timestamp") OffsetDateTime timestamp,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(params, "params");
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(url, "url");
        this.id = id;
        this.action = action;
        this.params = params;
        this.timestamp = timestamp;
        this.url = url;
    }
    
    public ActivityEvent(
            ActivityEventAction action,
            OffsetDateTime timestamp,
            String url) {
        this(Optional.empty(), action, Optional.empty(), timestamp, url);
    }

    /**
     * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The type of activity this represents.
     */
    @JsonIgnore
    public ActivityEventAction action() {
        return action;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityEventParams> params() {
        return (Optional<ActivityEventParams>) params;
    }

    /**
     * The ISO 8601 timestamp when the activity began.
     */
    @JsonIgnore
    public OffsetDateTime timestamp() {
        return timestamp;
    }

    /**
     * The URL of the activity.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
     */
    public ActivityEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
     */
    public ActivityEvent withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of activity this represents.
     */
    public ActivityEvent withAction(ActivityEventAction action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    public ActivityEvent withParams(ActivityEventParams params) {
        Utils.checkNotNull(params, "params");
        this.params = Optional.ofNullable(params);
        return this;
    }

    public ActivityEvent withParams(Optional<? extends ActivityEventParams> params) {
        Utils.checkNotNull(params, "params");
        this.params = params;
        return this;
    }

    /**
     * The ISO 8601 timestamp when the activity began.
     */
    public ActivityEvent withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * The URL of the activity.
     */
    public ActivityEvent withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityEvent other = (ActivityEvent) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.action, other.action) &&
            Objects.deepEquals(this.params, other.params) &&
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            action,
            params,
            timestamp,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityEvent.class,
                "id", id,
                "action", action,
                "params", params,
                "timestamp", timestamp,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private ActivityEventAction action;
 
        private Optional<? extends ActivityEventParams> params = Optional.empty();
 
        private OffsetDateTime timestamp;
 
        private String url;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The type of activity this represents.
         */
        public Builder action(ActivityEventAction action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }

        public Builder params(ActivityEventParams params) {
            Utils.checkNotNull(params, "params");
            this.params = Optional.ofNullable(params);
            return this;
        }

        public Builder params(Optional<? extends ActivityEventParams> params) {
            Utils.checkNotNull(params, "params");
            this.params = params;
            return this;
        }

        /**
         * The ISO 8601 timestamp when the activity began.
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * The URL of the activity.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public ActivityEvent build() {
            return new ActivityEvent(
                id,
                action,
                params,
                timestamp,
                url);
        }
    }
}
