/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FeedResult {

    /**
     * Category of the result, one of the requested categories in incoming request.
     */
    @JsonProperty("category")
    private FeedResultCategory category;

    @JsonProperty("primaryEntry")
    private FeedEntry primaryEntry;

    /**
     * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryEntries")
    private Optional<? extends List<FeedEntry>> secondaryEntries;

    /**
     * Rank of the result. Rank is suggested by server. Client side rank may differ.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rank")
    private Optional<Long> rank;

    @JsonCreator
    public FeedResult(
            @JsonProperty("category") FeedResultCategory category,
            @JsonProperty("primaryEntry") FeedEntry primaryEntry,
            @JsonProperty("secondaryEntries") Optional<? extends List<FeedEntry>> secondaryEntries,
            @JsonProperty("rank") Optional<Long> rank) {
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(primaryEntry, "primaryEntry");
        Utils.checkNotNull(secondaryEntries, "secondaryEntries");
        Utils.checkNotNull(rank, "rank");
        this.category = category;
        this.primaryEntry = primaryEntry;
        this.secondaryEntries = secondaryEntries;
        this.rank = rank;
    }
    
    public FeedResult(
            FeedResultCategory category,
            FeedEntry primaryEntry) {
        this(category, primaryEntry, Optional.empty(), Optional.empty());
    }

    /**
     * Category of the result, one of the requested categories in incoming request.
     */
    @JsonIgnore
    public FeedResultCategory category() {
        return category;
    }

    @JsonIgnore
    public FeedEntry primaryEntry() {
        return primaryEntry;
    }

    /**
     * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeedEntry>> secondaryEntries() {
        return (Optional<List<FeedEntry>>) secondaryEntries;
    }

    /**
     * Rank of the result. Rank is suggested by server. Client side rank may differ.
     */
    @JsonIgnore
    public Optional<Long> rank() {
        return rank;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Category of the result, one of the requested categories in incoming request.
     */
    public FeedResult withCategory(FeedResultCategory category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    public FeedResult withPrimaryEntry(FeedEntry primaryEntry) {
        Utils.checkNotNull(primaryEntry, "primaryEntry");
        this.primaryEntry = primaryEntry;
        return this;
    }

    /**
     * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
     */
    public FeedResult withSecondaryEntries(List<FeedEntry> secondaryEntries) {
        Utils.checkNotNull(secondaryEntries, "secondaryEntries");
        this.secondaryEntries = Optional.ofNullable(secondaryEntries);
        return this;
    }

    /**
     * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
     */
    public FeedResult withSecondaryEntries(Optional<? extends List<FeedEntry>> secondaryEntries) {
        Utils.checkNotNull(secondaryEntries, "secondaryEntries");
        this.secondaryEntries = secondaryEntries;
        return this;
    }

    /**
     * Rank of the result. Rank is suggested by server. Client side rank may differ.
     */
    public FeedResult withRank(long rank) {
        Utils.checkNotNull(rank, "rank");
        this.rank = Optional.ofNullable(rank);
        return this;
    }

    /**
     * Rank of the result. Rank is suggested by server. Client side rank may differ.
     */
    public FeedResult withRank(Optional<Long> rank) {
        Utils.checkNotNull(rank, "rank");
        this.rank = rank;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedResult other = (FeedResult) o;
        return 
            Objects.deepEquals(this.category, other.category) &&
            Objects.deepEquals(this.primaryEntry, other.primaryEntry) &&
            Objects.deepEquals(this.secondaryEntries, other.secondaryEntries) &&
            Objects.deepEquals(this.rank, other.rank);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            category,
            primaryEntry,
            secondaryEntries,
            rank);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedResult.class,
                "category", category,
                "primaryEntry", primaryEntry,
                "secondaryEntries", secondaryEntries,
                "rank", rank);
    }
    
    public final static class Builder {
 
        private FeedResultCategory category;
 
        private FeedEntry primaryEntry;
 
        private Optional<? extends List<FeedEntry>> secondaryEntries = Optional.empty();
 
        private Optional<Long> rank = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Category of the result, one of the requested categories in incoming request.
         */
        public Builder category(FeedResultCategory category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        public Builder primaryEntry(FeedEntry primaryEntry) {
            Utils.checkNotNull(primaryEntry, "primaryEntry");
            this.primaryEntry = primaryEntry;
            return this;
        }

        /**
         * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
         */
        public Builder secondaryEntries(List<FeedEntry> secondaryEntries) {
            Utils.checkNotNull(secondaryEntries, "secondaryEntries");
            this.secondaryEntries = Optional.ofNullable(secondaryEntries);
            return this;
        }

        /**
         * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
         */
        public Builder secondaryEntries(Optional<? extends List<FeedEntry>> secondaryEntries) {
            Utils.checkNotNull(secondaryEntries, "secondaryEntries");
            this.secondaryEntries = secondaryEntries;
            return this;
        }

        /**
         * Rank of the result. Rank is suggested by server. Client side rank may differ.
         */
        public Builder rank(long rank) {
            Utils.checkNotNull(rank, "rank");
            this.rank = Optional.ofNullable(rank);
            return this;
        }

        /**
         * Rank of the result. Rank is suggested by server. Client side rank may differ.
         */
        public Builder rank(Optional<Long> rank) {
            Utils.checkNotNull(rank, "rank");
            this.rank = rank;
            return this;
        }
        
        public FeedResult build() {
            return new FeedResult(
                category,
                primaryEntry,
                secondaryEntries,
                rank);
        }
    }
}
