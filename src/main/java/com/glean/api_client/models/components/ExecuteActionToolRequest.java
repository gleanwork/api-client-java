/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class ExecuteActionToolRequest {

    /**
     * Unique identifier for this actionRun execution event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionRunId")
    private Optional<String> actionRunId;

    /**
     * The name of the tool.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Unique identifier of an action instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionInstanceId")
    private Optional<String> actionInstanceId;

    /**
     * The parameters to be passed to the tool for action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    private Optional<? extends Map<String, WriteActionParameter>> parameters;

    @JsonCreator
    public ExecuteActionToolRequest(
            @JsonProperty("actionRunId") Optional<String> actionRunId,
            @JsonProperty("name") String name,
            @JsonProperty("actionInstanceId") Optional<String> actionInstanceId,
            @JsonProperty("parameters") Optional<? extends Map<String, WriteActionParameter>> parameters) {
        Utils.checkNotNull(actionRunId, "actionRunId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        Utils.checkNotNull(parameters, "parameters");
        this.actionRunId = actionRunId;
        this.name = name;
        this.actionInstanceId = actionInstanceId;
        this.parameters = parameters;
    }
    
    public ExecuteActionToolRequest(
            String name) {
        this(Optional.empty(), name, Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for this actionRun execution event.
     */
    @JsonIgnore
    public Optional<String> actionRunId() {
        return actionRunId;
    }

    /**
     * The name of the tool.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Unique identifier of an action instance.
     */
    @JsonIgnore
    public Optional<String> actionInstanceId() {
        return actionInstanceId;
    }

    /**
     * The parameters to be passed to the tool for action.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, WriteActionParameter>> parameters() {
        return (Optional<Map<String, WriteActionParameter>>) parameters;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for this actionRun execution event.
     */
    public ExecuteActionToolRequest withActionRunId(String actionRunId) {
        Utils.checkNotNull(actionRunId, "actionRunId");
        this.actionRunId = Optional.ofNullable(actionRunId);
        return this;
    }

    /**
     * Unique identifier for this actionRun execution event.
     */
    public ExecuteActionToolRequest withActionRunId(Optional<String> actionRunId) {
        Utils.checkNotNull(actionRunId, "actionRunId");
        this.actionRunId = actionRunId;
        return this;
    }

    /**
     * The name of the tool.
     */
    public ExecuteActionToolRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Unique identifier of an action instance.
     */
    public ExecuteActionToolRequest withActionInstanceId(String actionInstanceId) {
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.actionInstanceId = Optional.ofNullable(actionInstanceId);
        return this;
    }

    /**
     * Unique identifier of an action instance.
     */
    public ExecuteActionToolRequest withActionInstanceId(Optional<String> actionInstanceId) {
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.actionInstanceId = actionInstanceId;
        return this;
    }

    /**
     * The parameters to be passed to the tool for action.
     */
    public ExecuteActionToolRequest withParameters(Map<String, WriteActionParameter> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = Optional.ofNullable(parameters);
        return this;
    }

    /**
     * The parameters to be passed to the tool for action.
     */
    public ExecuteActionToolRequest withParameters(Optional<? extends Map<String, WriteActionParameter>> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExecuteActionToolRequest other = (ExecuteActionToolRequest) o;
        return 
            Objects.deepEquals(this.actionRunId, other.actionRunId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.actionInstanceId, other.actionInstanceId) &&
            Objects.deepEquals(this.parameters, other.parameters);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            actionRunId,
            name,
            actionInstanceId,
            parameters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExecuteActionToolRequest.class,
                "actionRunId", actionRunId,
                "name", name,
                "actionInstanceId", actionInstanceId,
                "parameters", parameters);
    }
    
    public final static class Builder {
 
        private Optional<String> actionRunId = Optional.empty();
 
        private String name;
 
        private Optional<String> actionInstanceId = Optional.empty();
 
        private Optional<? extends Map<String, WriteActionParameter>> parameters = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for this actionRun execution event.
         */
        public Builder actionRunId(String actionRunId) {
            Utils.checkNotNull(actionRunId, "actionRunId");
            this.actionRunId = Optional.ofNullable(actionRunId);
            return this;
        }

        /**
         * Unique identifier for this actionRun execution event.
         */
        public Builder actionRunId(Optional<String> actionRunId) {
            Utils.checkNotNull(actionRunId, "actionRunId");
            this.actionRunId = actionRunId;
            return this;
        }

        /**
         * The name of the tool.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Unique identifier of an action instance.
         */
        public Builder actionInstanceId(String actionInstanceId) {
            Utils.checkNotNull(actionInstanceId, "actionInstanceId");
            this.actionInstanceId = Optional.ofNullable(actionInstanceId);
            return this;
        }

        /**
         * Unique identifier of an action instance.
         */
        public Builder actionInstanceId(Optional<String> actionInstanceId) {
            Utils.checkNotNull(actionInstanceId, "actionInstanceId");
            this.actionInstanceId = actionInstanceId;
            return this;
        }

        /**
         * The parameters to be passed to the tool for action.
         */
        public Builder parameters(Map<String, WriteActionParameter> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        /**
         * The parameters to be passed to the tool for action.
         */
        public Builder parameters(Optional<? extends Map<String, WriteActionParameter>> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }
        
        public ExecuteActionToolRequest build() {
            return new ExecuteActionToolRequest(
                actionRunId,
                name,
                actionInstanceId,
                parameters);
        }
    }
}
