/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * AlertData
 * 
 * <p>Admin alert related information that is used to construct the admin alert email
 */
public class AlertData {

    /**
     * Banner type to display for this alert
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bannerType")
    private Optional<? extends BannerType> bannerType;

    /**
     * Text to display for the alert banner
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bannerText")
    private Optional<String> bannerText;

    /**
     * Text for what happened section of an admin alert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertDescription")
    private Optional<String> alertDescription;

    /**
     * Text for why this matters section of an admin alert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relevanceDescription")
    private Optional<String> relevanceDescription;

    /**
     * Text for to do section before actual steps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolutionStepsDescription")
    private Optional<String> resolutionStepsDescription;

    /**
     * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolutionSteps")
    private Optional<? extends List<ResolutionStep>> resolutionSteps;

    /**
     * Help link for the alert that the admin can reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("helpLink")
    private Optional<String> helpLink;

    /**
     * The name of the admin alert
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The time that the alert was triggered
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggeredTime")
    private Optional<OffsetDateTime> triggeredTime;

    /**
     * Human readable name of the project instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectName")
    private Optional<String> projectName;

    /**
     * Datasource that the alert is related to (possibly null)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * datasource instance's user set display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceDisplayName")
    private Optional<String> instanceDisplayName;

    /**
     * datasource instance's name e.g. confluence_0a0odwv
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceName")
    private Optional<String> instanceName;

    /**
     * custom text in subject line
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailSubjectDescription")
    private Optional<String> emailSubjectDescription;

    @JsonCreator
    public AlertData(
            @JsonProperty("bannerType") Optional<? extends BannerType> bannerType,
            @JsonProperty("bannerText") Optional<String> bannerText,
            @JsonProperty("alertDescription") Optional<String> alertDescription,
            @JsonProperty("relevanceDescription") Optional<String> relevanceDescription,
            @JsonProperty("resolutionStepsDescription") Optional<String> resolutionStepsDescription,
            @JsonProperty("resolutionSteps") Optional<? extends List<ResolutionStep>> resolutionSteps,
            @JsonProperty("helpLink") Optional<String> helpLink,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("triggeredTime") Optional<OffsetDateTime> triggeredTime,
            @JsonProperty("projectName") Optional<String> projectName,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("instanceDisplayName") Optional<String> instanceDisplayName,
            @JsonProperty("instanceName") Optional<String> instanceName,
            @JsonProperty("emailSubjectDescription") Optional<String> emailSubjectDescription) {
        Utils.checkNotNull(bannerType, "bannerType");
        Utils.checkNotNull(bannerText, "bannerText");
        Utils.checkNotNull(alertDescription, "alertDescription");
        Utils.checkNotNull(relevanceDescription, "relevanceDescription");
        Utils.checkNotNull(resolutionStepsDescription, "resolutionStepsDescription");
        Utils.checkNotNull(resolutionSteps, "resolutionSteps");
        Utils.checkNotNull(helpLink, "helpLink");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(triggeredTime, "triggeredTime");
        Utils.checkNotNull(projectName, "projectName");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(instanceDisplayName, "instanceDisplayName");
        Utils.checkNotNull(instanceName, "instanceName");
        Utils.checkNotNull(emailSubjectDescription, "emailSubjectDescription");
        this.bannerType = bannerType;
        this.bannerText = bannerText;
        this.alertDescription = alertDescription;
        this.relevanceDescription = relevanceDescription;
        this.resolutionStepsDescription = resolutionStepsDescription;
        this.resolutionSteps = resolutionSteps;
        this.helpLink = helpLink;
        this.name = name;
        this.triggeredTime = triggeredTime;
        this.projectName = projectName;
        this.datasource = datasource;
        this.instanceDisplayName = instanceDisplayName;
        this.instanceName = instanceName;
        this.emailSubjectDescription = emailSubjectDescription;
    }
    
    public AlertData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Banner type to display for this alert
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BannerType> bannerType() {
        return (Optional<BannerType>) bannerType;
    }

    /**
     * Text to display for the alert banner
     */
    @JsonIgnore
    public Optional<String> bannerText() {
        return bannerText;
    }

    /**
     * Text for what happened section of an admin alert.
     */
    @JsonIgnore
    public Optional<String> alertDescription() {
        return alertDescription;
    }

    /**
     * Text for why this matters section of an admin alert.
     */
    @JsonIgnore
    public Optional<String> relevanceDescription() {
        return relevanceDescription;
    }

    /**
     * Text for to do section before actual steps.
     */
    @JsonIgnore
    public Optional<String> resolutionStepsDescription() {
        return resolutionStepsDescription;
    }

    /**
     * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ResolutionStep>> resolutionSteps() {
        return (Optional<List<ResolutionStep>>) resolutionSteps;
    }

    /**
     * Help link for the alert that the admin can reference
     */
    @JsonIgnore
    public Optional<String> helpLink() {
        return helpLink;
    }

    /**
     * The name of the admin alert
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The time that the alert was triggered
     */
    @JsonIgnore
    public Optional<OffsetDateTime> triggeredTime() {
        return triggeredTime;
    }

    /**
     * Human readable name of the project instance
     */
    @JsonIgnore
    public Optional<String> projectName() {
        return projectName;
    }

    /**
     * Datasource that the alert is related to (possibly null)
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * datasource instance's user set display name
     */
    @JsonIgnore
    public Optional<String> instanceDisplayName() {
        return instanceDisplayName;
    }

    /**
     * datasource instance's name e.g. confluence_0a0odwv
     */
    @JsonIgnore
    public Optional<String> instanceName() {
        return instanceName;
    }

    /**
     * custom text in subject line
     */
    @JsonIgnore
    public Optional<String> emailSubjectDescription() {
        return emailSubjectDescription;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Banner type to display for this alert
     */
    public AlertData withBannerType(BannerType bannerType) {
        Utils.checkNotNull(bannerType, "bannerType");
        this.bannerType = Optional.ofNullable(bannerType);
        return this;
    }

    /**
     * Banner type to display for this alert
     */
    public AlertData withBannerType(Optional<? extends BannerType> bannerType) {
        Utils.checkNotNull(bannerType, "bannerType");
        this.bannerType = bannerType;
        return this;
    }

    /**
     * Text to display for the alert banner
     */
    public AlertData withBannerText(String bannerText) {
        Utils.checkNotNull(bannerText, "bannerText");
        this.bannerText = Optional.ofNullable(bannerText);
        return this;
    }

    /**
     * Text to display for the alert banner
     */
    public AlertData withBannerText(Optional<String> bannerText) {
        Utils.checkNotNull(bannerText, "bannerText");
        this.bannerText = bannerText;
        return this;
    }

    /**
     * Text for what happened section of an admin alert.
     */
    public AlertData withAlertDescription(String alertDescription) {
        Utils.checkNotNull(alertDescription, "alertDescription");
        this.alertDescription = Optional.ofNullable(alertDescription);
        return this;
    }

    /**
     * Text for what happened section of an admin alert.
     */
    public AlertData withAlertDescription(Optional<String> alertDescription) {
        Utils.checkNotNull(alertDescription, "alertDescription");
        this.alertDescription = alertDescription;
        return this;
    }

    /**
     * Text for why this matters section of an admin alert.
     */
    public AlertData withRelevanceDescription(String relevanceDescription) {
        Utils.checkNotNull(relevanceDescription, "relevanceDescription");
        this.relevanceDescription = Optional.ofNullable(relevanceDescription);
        return this;
    }

    /**
     * Text for why this matters section of an admin alert.
     */
    public AlertData withRelevanceDescription(Optional<String> relevanceDescription) {
        Utils.checkNotNull(relevanceDescription, "relevanceDescription");
        this.relevanceDescription = relevanceDescription;
        return this;
    }

    /**
     * Text for to do section before actual steps.
     */
    public AlertData withResolutionStepsDescription(String resolutionStepsDescription) {
        Utils.checkNotNull(resolutionStepsDescription, "resolutionStepsDescription");
        this.resolutionStepsDescription = Optional.ofNullable(resolutionStepsDescription);
        return this;
    }

    /**
     * Text for to do section before actual steps.
     */
    public AlertData withResolutionStepsDescription(Optional<String> resolutionStepsDescription) {
        Utils.checkNotNull(resolutionStepsDescription, "resolutionStepsDescription");
        this.resolutionStepsDescription = resolutionStepsDescription;
        return this;
    }

    /**
     * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
     */
    public AlertData withResolutionSteps(List<ResolutionStep> resolutionSteps) {
        Utils.checkNotNull(resolutionSteps, "resolutionSteps");
        this.resolutionSteps = Optional.ofNullable(resolutionSteps);
        return this;
    }

    /**
     * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
     */
    public AlertData withResolutionSteps(Optional<? extends List<ResolutionStep>> resolutionSteps) {
        Utils.checkNotNull(resolutionSteps, "resolutionSteps");
        this.resolutionSteps = resolutionSteps;
        return this;
    }

    /**
     * Help link for the alert that the admin can reference
     */
    public AlertData withHelpLink(String helpLink) {
        Utils.checkNotNull(helpLink, "helpLink");
        this.helpLink = Optional.ofNullable(helpLink);
        return this;
    }

    /**
     * Help link for the alert that the admin can reference
     */
    public AlertData withHelpLink(Optional<String> helpLink) {
        Utils.checkNotNull(helpLink, "helpLink");
        this.helpLink = helpLink;
        return this;
    }

    /**
     * The name of the admin alert
     */
    public AlertData withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the admin alert
     */
    public AlertData withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The time that the alert was triggered
     */
    public AlertData withTriggeredTime(OffsetDateTime triggeredTime) {
        Utils.checkNotNull(triggeredTime, "triggeredTime");
        this.triggeredTime = Optional.ofNullable(triggeredTime);
        return this;
    }

    /**
     * The time that the alert was triggered
     */
    public AlertData withTriggeredTime(Optional<OffsetDateTime> triggeredTime) {
        Utils.checkNotNull(triggeredTime, "triggeredTime");
        this.triggeredTime = triggeredTime;
        return this;
    }

    /**
     * Human readable name of the project instance
     */
    public AlertData withProjectName(String projectName) {
        Utils.checkNotNull(projectName, "projectName");
        this.projectName = Optional.ofNullable(projectName);
        return this;
    }

    /**
     * Human readable name of the project instance
     */
    public AlertData withProjectName(Optional<String> projectName) {
        Utils.checkNotNull(projectName, "projectName");
        this.projectName = projectName;
        return this;
    }

    /**
     * Datasource that the alert is related to (possibly null)
     */
    public AlertData withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * Datasource that the alert is related to (possibly null)
     */
    public AlertData withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * datasource instance's user set display name
     */
    public AlertData withInstanceDisplayName(String instanceDisplayName) {
        Utils.checkNotNull(instanceDisplayName, "instanceDisplayName");
        this.instanceDisplayName = Optional.ofNullable(instanceDisplayName);
        return this;
    }

    /**
     * datasource instance's user set display name
     */
    public AlertData withInstanceDisplayName(Optional<String> instanceDisplayName) {
        Utils.checkNotNull(instanceDisplayName, "instanceDisplayName");
        this.instanceDisplayName = instanceDisplayName;
        return this;
    }

    /**
     * datasource instance's name e.g. confluence_0a0odwv
     */
    public AlertData withInstanceName(String instanceName) {
        Utils.checkNotNull(instanceName, "instanceName");
        this.instanceName = Optional.ofNullable(instanceName);
        return this;
    }

    /**
     * datasource instance's name e.g. confluence_0a0odwv
     */
    public AlertData withInstanceName(Optional<String> instanceName) {
        Utils.checkNotNull(instanceName, "instanceName");
        this.instanceName = instanceName;
        return this;
    }

    /**
     * custom text in subject line
     */
    public AlertData withEmailSubjectDescription(String emailSubjectDescription) {
        Utils.checkNotNull(emailSubjectDescription, "emailSubjectDescription");
        this.emailSubjectDescription = Optional.ofNullable(emailSubjectDescription);
        return this;
    }

    /**
     * custom text in subject line
     */
    public AlertData withEmailSubjectDescription(Optional<String> emailSubjectDescription) {
        Utils.checkNotNull(emailSubjectDescription, "emailSubjectDescription");
        this.emailSubjectDescription = emailSubjectDescription;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AlertData other = (AlertData) o;
        return 
            Objects.deepEquals(this.bannerType, other.bannerType) &&
            Objects.deepEquals(this.bannerText, other.bannerText) &&
            Objects.deepEquals(this.alertDescription, other.alertDescription) &&
            Objects.deepEquals(this.relevanceDescription, other.relevanceDescription) &&
            Objects.deepEquals(this.resolutionStepsDescription, other.resolutionStepsDescription) &&
            Objects.deepEquals(this.resolutionSteps, other.resolutionSteps) &&
            Objects.deepEquals(this.helpLink, other.helpLink) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.triggeredTime, other.triggeredTime) &&
            Objects.deepEquals(this.projectName, other.projectName) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.instanceDisplayName, other.instanceDisplayName) &&
            Objects.deepEquals(this.instanceName, other.instanceName) &&
            Objects.deepEquals(this.emailSubjectDescription, other.emailSubjectDescription);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bannerType,
            bannerText,
            alertDescription,
            relevanceDescription,
            resolutionStepsDescription,
            resolutionSteps,
            helpLink,
            name,
            triggeredTime,
            projectName,
            datasource,
            instanceDisplayName,
            instanceName,
            emailSubjectDescription);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AlertData.class,
                "bannerType", bannerType,
                "bannerText", bannerText,
                "alertDescription", alertDescription,
                "relevanceDescription", relevanceDescription,
                "resolutionStepsDescription", resolutionStepsDescription,
                "resolutionSteps", resolutionSteps,
                "helpLink", helpLink,
                "name", name,
                "triggeredTime", triggeredTime,
                "projectName", projectName,
                "datasource", datasource,
                "instanceDisplayName", instanceDisplayName,
                "instanceName", instanceName,
                "emailSubjectDescription", emailSubjectDescription);
    }
    
    public final static class Builder {
 
        private Optional<? extends BannerType> bannerType = Optional.empty();
 
        private Optional<String> bannerText = Optional.empty();
 
        private Optional<String> alertDescription = Optional.empty();
 
        private Optional<String> relevanceDescription = Optional.empty();
 
        private Optional<String> resolutionStepsDescription = Optional.empty();
 
        private Optional<? extends List<ResolutionStep>> resolutionSteps = Optional.empty();
 
        private Optional<String> helpLink = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<OffsetDateTime> triggeredTime = Optional.empty();
 
        private Optional<String> projectName = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> instanceDisplayName = Optional.empty();
 
        private Optional<String> instanceName = Optional.empty();
 
        private Optional<String> emailSubjectDescription = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Banner type to display for this alert
         */
        public Builder bannerType(BannerType bannerType) {
            Utils.checkNotNull(bannerType, "bannerType");
            this.bannerType = Optional.ofNullable(bannerType);
            return this;
        }

        /**
         * Banner type to display for this alert
         */
        public Builder bannerType(Optional<? extends BannerType> bannerType) {
            Utils.checkNotNull(bannerType, "bannerType");
            this.bannerType = bannerType;
            return this;
        }

        /**
         * Text to display for the alert banner
         */
        public Builder bannerText(String bannerText) {
            Utils.checkNotNull(bannerText, "bannerText");
            this.bannerText = Optional.ofNullable(bannerText);
            return this;
        }

        /**
         * Text to display for the alert banner
         */
        public Builder bannerText(Optional<String> bannerText) {
            Utils.checkNotNull(bannerText, "bannerText");
            this.bannerText = bannerText;
            return this;
        }

        /**
         * Text for what happened section of an admin alert.
         */
        public Builder alertDescription(String alertDescription) {
            Utils.checkNotNull(alertDescription, "alertDescription");
            this.alertDescription = Optional.ofNullable(alertDescription);
            return this;
        }

        /**
         * Text for what happened section of an admin alert.
         */
        public Builder alertDescription(Optional<String> alertDescription) {
            Utils.checkNotNull(alertDescription, "alertDescription");
            this.alertDescription = alertDescription;
            return this;
        }

        /**
         * Text for why this matters section of an admin alert.
         */
        public Builder relevanceDescription(String relevanceDescription) {
            Utils.checkNotNull(relevanceDescription, "relevanceDescription");
            this.relevanceDescription = Optional.ofNullable(relevanceDescription);
            return this;
        }

        /**
         * Text for why this matters section of an admin alert.
         */
        public Builder relevanceDescription(Optional<String> relevanceDescription) {
            Utils.checkNotNull(relevanceDescription, "relevanceDescription");
            this.relevanceDescription = relevanceDescription;
            return this;
        }

        /**
         * Text for to do section before actual steps.
         */
        public Builder resolutionStepsDescription(String resolutionStepsDescription) {
            Utils.checkNotNull(resolutionStepsDescription, "resolutionStepsDescription");
            this.resolutionStepsDescription = Optional.ofNullable(resolutionStepsDescription);
            return this;
        }

        /**
         * Text for to do section before actual steps.
         */
        public Builder resolutionStepsDescription(Optional<String> resolutionStepsDescription) {
            Utils.checkNotNull(resolutionStepsDescription, "resolutionStepsDescription");
            this.resolutionStepsDescription = resolutionStepsDescription;
            return this;
        }

        /**
         * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
         */
        public Builder resolutionSteps(List<ResolutionStep> resolutionSteps) {
            Utils.checkNotNull(resolutionSteps, "resolutionSteps");
            this.resolutionSteps = Optional.ofNullable(resolutionSteps);
            return this;
        }

        /**
         * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
         */
        public Builder resolutionSteps(Optional<? extends List<ResolutionStep>> resolutionSteps) {
            Utils.checkNotNull(resolutionSteps, "resolutionSteps");
            this.resolutionSteps = resolutionSteps;
            return this;
        }

        /**
         * Help link for the alert that the admin can reference
         */
        public Builder helpLink(String helpLink) {
            Utils.checkNotNull(helpLink, "helpLink");
            this.helpLink = Optional.ofNullable(helpLink);
            return this;
        }

        /**
         * Help link for the alert that the admin can reference
         */
        public Builder helpLink(Optional<String> helpLink) {
            Utils.checkNotNull(helpLink, "helpLink");
            this.helpLink = helpLink;
            return this;
        }

        /**
         * The name of the admin alert
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the admin alert
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The time that the alert was triggered
         */
        public Builder triggeredTime(OffsetDateTime triggeredTime) {
            Utils.checkNotNull(triggeredTime, "triggeredTime");
            this.triggeredTime = Optional.ofNullable(triggeredTime);
            return this;
        }

        /**
         * The time that the alert was triggered
         */
        public Builder triggeredTime(Optional<OffsetDateTime> triggeredTime) {
            Utils.checkNotNull(triggeredTime, "triggeredTime");
            this.triggeredTime = triggeredTime;
            return this;
        }

        /**
         * Human readable name of the project instance
         */
        public Builder projectName(String projectName) {
            Utils.checkNotNull(projectName, "projectName");
            this.projectName = Optional.ofNullable(projectName);
            return this;
        }

        /**
         * Human readable name of the project instance
         */
        public Builder projectName(Optional<String> projectName) {
            Utils.checkNotNull(projectName, "projectName");
            this.projectName = projectName;
            return this;
        }

        /**
         * Datasource that the alert is related to (possibly null)
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * Datasource that the alert is related to (possibly null)
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * datasource instance's user set display name
         */
        public Builder instanceDisplayName(String instanceDisplayName) {
            Utils.checkNotNull(instanceDisplayName, "instanceDisplayName");
            this.instanceDisplayName = Optional.ofNullable(instanceDisplayName);
            return this;
        }

        /**
         * datasource instance's user set display name
         */
        public Builder instanceDisplayName(Optional<String> instanceDisplayName) {
            Utils.checkNotNull(instanceDisplayName, "instanceDisplayName");
            this.instanceDisplayName = instanceDisplayName;
            return this;
        }

        /**
         * datasource instance's name e.g. confluence_0a0odwv
         */
        public Builder instanceName(String instanceName) {
            Utils.checkNotNull(instanceName, "instanceName");
            this.instanceName = Optional.ofNullable(instanceName);
            return this;
        }

        /**
         * datasource instance's name e.g. confluence_0a0odwv
         */
        public Builder instanceName(Optional<String> instanceName) {
            Utils.checkNotNull(instanceName, "instanceName");
            this.instanceName = instanceName;
            return this;
        }

        /**
         * custom text in subject line
         */
        public Builder emailSubjectDescription(String emailSubjectDescription) {
            Utils.checkNotNull(emailSubjectDescription, "emailSubjectDescription");
            this.emailSubjectDescription = Optional.ofNullable(emailSubjectDescription);
            return this;
        }

        /**
         * custom text in subject line
         */
        public Builder emailSubjectDescription(Optional<String> emailSubjectDescription) {
            Utils.checkNotNull(emailSubjectDescription, "emailSubjectDescription");
            this.emailSubjectDescription = emailSubjectDescription;
            return this;
        }
        
        public AlertData build() {
            return new AlertData(
                bannerType,
                bannerText,
                alertDescription,
                relevanceDescription,
                resolutionStepsDescription,
                resolutionSteps,
                helpLink,
                name,
                triggeredTime,
                projectName,
                datasource,
                instanceDisplayName,
                instanceName,
                emailSubjectDescription);
        }
    }
}
