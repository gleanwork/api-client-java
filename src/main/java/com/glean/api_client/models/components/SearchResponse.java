/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SearchResponse {

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    private Optional<? extends SessionInfo> sessionInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<SearchResult>> results;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredResults")
    private Optional<? extends List<StructuredResult>> structuredResults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generatedQnaResult")
    private Optional<? extends GeneratedQna> generatedQnaResult;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorInfo")
    private Optional<? extends GleanDataError> gleanDataError;

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestID")
    private Optional<String> requestID;

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backendTimeMillis")
    private Optional<Long> backendTimeMillis;

    /**
     * List of experiment ids for the corresponding request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experimentIds")
    private Optional<? extends List<Long>> experimentIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends SearchResponseMetadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetResults")
    private Optional<? extends List<FacetResult>> facetResults;

    /**
     * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultTabs")
    private Optional<? extends List<ResultTab>> resultTabs;

    /**
     * The unique IDs of the result tabs to which this response belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultTabIds")
    private Optional<? extends List<String>> resultTabIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultsDescription")
    private Optional<? extends ResultsDescription> resultsDescription;

    /**
     * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewrittenFacetFilters")
    private Optional<? extends List<FacetFilter>> rewrittenFacetFilters;

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasMoreResults")
    private Optional<Boolean> hasMoreResults;

    @JsonCreator
    public SearchResponse(
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("sessionInfo") Optional<? extends SessionInfo> sessionInfo,
            @JsonProperty("results") Optional<? extends List<SearchResult>> results,
            @JsonProperty("structuredResults") Optional<? extends List<StructuredResult>> structuredResults,
            @JsonProperty("generatedQnaResult") Optional<? extends GeneratedQna> generatedQnaResult,
            @JsonProperty("errorInfo") Optional<? extends GleanDataError> gleanDataError,
            @JsonProperty("requestID") Optional<String> requestID,
            @JsonProperty("backendTimeMillis") Optional<Long> backendTimeMillis,
            @JsonProperty("experimentIds") Optional<? extends List<Long>> experimentIds,
            @JsonProperty("metadata") Optional<? extends SearchResponseMetadata> metadata,
            @JsonProperty("facetResults") Optional<? extends List<FacetResult>> facetResults,
            @JsonProperty("resultTabs") Optional<? extends List<ResultTab>> resultTabs,
            @JsonProperty("resultTabIds") Optional<? extends List<String>> resultTabIds,
            @JsonProperty("resultsDescription") Optional<? extends ResultsDescription> resultsDescription,
            @JsonProperty("rewrittenFacetFilters") Optional<? extends List<FacetFilter>> rewrittenFacetFilters,
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("hasMoreResults") Optional<Boolean> hasMoreResults) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(structuredResults, "structuredResults");
        Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
        Utils.checkNotNull(gleanDataError, "gleanDataError");
        Utils.checkNotNull(requestID, "requestID");
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        Utils.checkNotNull(experimentIds, "experimentIds");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(facetResults, "facetResults");
        Utils.checkNotNull(resultTabs, "resultTabs");
        Utils.checkNotNull(resultTabIds, "resultTabIds");
        Utils.checkNotNull(resultsDescription, "resultsDescription");
        Utils.checkNotNull(rewrittenFacetFilters, "rewrittenFacetFilters");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.trackingToken = trackingToken;
        this.sessionInfo = sessionInfo;
        this.results = results;
        this.structuredResults = structuredResults;
        this.generatedQnaResult = generatedQnaResult;
        this.gleanDataError = gleanDataError;
        this.requestID = requestID;
        this.backendTimeMillis = backendTimeMillis;
        this.experimentIds = experimentIds;
        this.metadata = metadata;
        this.facetResults = facetResults;
        this.resultTabs = resultTabs;
        this.resultTabIds = resultTabIds;
        this.resultsDescription = resultsDescription;
        this.rewrittenFacetFilters = rewrittenFacetFilters;
        this.cursor = cursor;
        this.hasMoreResults = hasMoreResults;
    }
    
    public SearchResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SessionInfo> sessionInfo() {
        return (Optional<SessionInfo>) sessionInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SearchResult>> results() {
        return (Optional<List<SearchResult>>) results;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<StructuredResult>> structuredResults() {
        return (Optional<List<StructuredResult>>) structuredResults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GeneratedQna> generatedQnaResult() {
        return (Optional<GeneratedQna>) generatedQnaResult;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GleanDataError> gleanDataError() {
        return (Optional<GleanDataError>) gleanDataError;
    }

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    @JsonIgnore
    public Optional<String> requestID() {
        return requestID;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonIgnore
    public Optional<Long> backendTimeMillis() {
        return backendTimeMillis;
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> experimentIds() {
        return (Optional<List<Long>>) experimentIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchResponseMetadata> metadata() {
        return (Optional<SearchResponseMetadata>) metadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetResult>> facetResults() {
        return (Optional<List<FacetResult>>) facetResults;
    }

    /**
     * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ResultTab>> resultTabs() {
        return (Optional<List<ResultTab>>) resultTabs;
    }

    /**
     * The unique IDs of the result tabs to which this response belongs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> resultTabIds() {
        return (Optional<List<String>>) resultTabIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResultsDescription> resultsDescription() {
        return (Optional<ResultsDescription>) resultsDescription;
    }

    /**
     * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> rewrittenFacetFilters() {
        return (Optional<List<FacetFilter>>) rewrittenFacetFilters;
    }

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    @JsonIgnore
    public Optional<Boolean> hasMoreResults() {
        return hasMoreResults;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    public SearchResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    public SearchResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public SearchResponse withSessionInfo(SessionInfo sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = Optional.ofNullable(sessionInfo);
        return this;
    }

    public SearchResponse withSessionInfo(Optional<? extends SessionInfo> sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = sessionInfo;
        return this;
    }

    public SearchResponse withResults(List<SearchResult> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public SearchResponse withResults(Optional<? extends List<SearchResult>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    public SearchResponse withStructuredResults(List<StructuredResult> structuredResults) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        this.structuredResults = Optional.ofNullable(structuredResults);
        return this;
    }

    public SearchResponse withStructuredResults(Optional<? extends List<StructuredResult>> structuredResults) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        this.structuredResults = structuredResults;
        return this;
    }

    public SearchResponse withGeneratedQnaResult(GeneratedQna generatedQnaResult) {
        Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
        this.generatedQnaResult = Optional.ofNullable(generatedQnaResult);
        return this;
    }

    public SearchResponse withGeneratedQnaResult(Optional<? extends GeneratedQna> generatedQnaResult) {
        Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
        this.generatedQnaResult = generatedQnaResult;
        return this;
    }

    public SearchResponse withGleanDataError(GleanDataError gleanDataError) {
        Utils.checkNotNull(gleanDataError, "gleanDataError");
        this.gleanDataError = Optional.ofNullable(gleanDataError);
        return this;
    }

    public SearchResponse withGleanDataError(Optional<? extends GleanDataError> gleanDataError) {
        Utils.checkNotNull(gleanDataError, "gleanDataError");
        this.gleanDataError = gleanDataError;
        return this;
    }

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    public SearchResponse withRequestID(String requestID) {
        Utils.checkNotNull(requestID, "requestID");
        this.requestID = Optional.ofNullable(requestID);
        return this;
    }

    /**
     * A platform-generated request ID to correlate backend logs.
     */
    public SearchResponse withRequestID(Optional<String> requestID) {
        Utils.checkNotNull(requestID, "requestID");
        this.requestID = requestID;
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public SearchResponse withBackendTimeMillis(long backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public SearchResponse withBackendTimeMillis(Optional<Long> backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = backendTimeMillis;
        return this;
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    public SearchResponse withExperimentIds(List<Long> experimentIds) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        this.experimentIds = Optional.ofNullable(experimentIds);
        return this;
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    public SearchResponse withExperimentIds(Optional<? extends List<Long>> experimentIds) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        this.experimentIds = experimentIds;
        return this;
    }

    public SearchResponse withMetadata(SearchResponseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public SearchResponse withMetadata(Optional<? extends SearchResponseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public SearchResponse withFacetResults(List<FacetResult> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = Optional.ofNullable(facetResults);
        return this;
    }

    public SearchResponse withFacetResults(Optional<? extends List<FacetResult>> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = facetResults;
        return this;
    }

    /**
     * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
     */
    public SearchResponse withResultTabs(List<ResultTab> resultTabs) {
        Utils.checkNotNull(resultTabs, "resultTabs");
        this.resultTabs = Optional.ofNullable(resultTabs);
        return this;
    }

    /**
     * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
     */
    public SearchResponse withResultTabs(Optional<? extends List<ResultTab>> resultTabs) {
        Utils.checkNotNull(resultTabs, "resultTabs");
        this.resultTabs = resultTabs;
        return this;
    }

    /**
     * The unique IDs of the result tabs to which this response belongs.
     */
    public SearchResponse withResultTabIds(List<String> resultTabIds) {
        Utils.checkNotNull(resultTabIds, "resultTabIds");
        this.resultTabIds = Optional.ofNullable(resultTabIds);
        return this;
    }

    /**
     * The unique IDs of the result tabs to which this response belongs.
     */
    public SearchResponse withResultTabIds(Optional<? extends List<String>> resultTabIds) {
        Utils.checkNotNull(resultTabIds, "resultTabIds");
        this.resultTabIds = resultTabIds;
        return this;
    }

    public SearchResponse withResultsDescription(ResultsDescription resultsDescription) {
        Utils.checkNotNull(resultsDescription, "resultsDescription");
        this.resultsDescription = Optional.ofNullable(resultsDescription);
        return this;
    }

    public SearchResponse withResultsDescription(Optional<? extends ResultsDescription> resultsDescription) {
        Utils.checkNotNull(resultsDescription, "resultsDescription");
        this.resultsDescription = resultsDescription;
        return this;
    }

    /**
     * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
     */
    public SearchResponse withRewrittenFacetFilters(List<FacetFilter> rewrittenFacetFilters) {
        Utils.checkNotNull(rewrittenFacetFilters, "rewrittenFacetFilters");
        this.rewrittenFacetFilters = Optional.ofNullable(rewrittenFacetFilters);
        return this;
    }

    /**
     * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
     */
    public SearchResponse withRewrittenFacetFilters(Optional<? extends List<FacetFilter>> rewrittenFacetFilters) {
        Utils.checkNotNull(rewrittenFacetFilters, "rewrittenFacetFilters");
        this.rewrittenFacetFilters = rewrittenFacetFilters;
        return this;
    }

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    public SearchResponse withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    public SearchResponse withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    public SearchResponse withHasMoreResults(boolean hasMoreResults) {
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.hasMoreResults = Optional.ofNullable(hasMoreResults);
        return this;
    }

    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    public SearchResponse withHasMoreResults(Optional<Boolean> hasMoreResults) {
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.hasMoreResults = hasMoreResults;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchResponse other = (SearchResponse) o;
        return 
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.sessionInfo, other.sessionInfo) &&
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.structuredResults, other.structuredResults) &&
            Objects.deepEquals(this.generatedQnaResult, other.generatedQnaResult) &&
            Objects.deepEquals(this.gleanDataError, other.gleanDataError) &&
            Objects.deepEquals(this.requestID, other.requestID) &&
            Objects.deepEquals(this.backendTimeMillis, other.backendTimeMillis) &&
            Objects.deepEquals(this.experimentIds, other.experimentIds) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.facetResults, other.facetResults) &&
            Objects.deepEquals(this.resultTabs, other.resultTabs) &&
            Objects.deepEquals(this.resultTabIds, other.resultTabIds) &&
            Objects.deepEquals(this.resultsDescription, other.resultsDescription) &&
            Objects.deepEquals(this.rewrittenFacetFilters, other.rewrittenFacetFilters) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.hasMoreResults, other.hasMoreResults);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            trackingToken,
            sessionInfo,
            results,
            structuredResults,
            generatedQnaResult,
            gleanDataError,
            requestID,
            backendTimeMillis,
            experimentIds,
            metadata,
            facetResults,
            resultTabs,
            resultTabIds,
            resultsDescription,
            rewrittenFacetFilters,
            cursor,
            hasMoreResults);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchResponse.class,
                "trackingToken", trackingToken,
                "sessionInfo", sessionInfo,
                "results", results,
                "structuredResults", structuredResults,
                "generatedQnaResult", generatedQnaResult,
                "gleanDataError", gleanDataError,
                "requestID", requestID,
                "backendTimeMillis", backendTimeMillis,
                "experimentIds", experimentIds,
                "metadata", metadata,
                "facetResults", facetResults,
                "resultTabs", resultTabs,
                "resultTabIds", resultTabIds,
                "resultsDescription", resultsDescription,
                "rewrittenFacetFilters", rewrittenFacetFilters,
                "cursor", cursor,
                "hasMoreResults", hasMoreResults);
    }
    
    public final static class Builder {
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends SessionInfo> sessionInfo = Optional.empty();
 
        private Optional<? extends List<SearchResult>> results = Optional.empty();
 
        private Optional<? extends List<StructuredResult>> structuredResults = Optional.empty();
 
        private Optional<? extends GeneratedQna> generatedQnaResult = Optional.empty();
 
        private Optional<? extends GleanDataError> gleanDataError = Optional.empty();
 
        private Optional<String> requestID = Optional.empty();
 
        private Optional<Long> backendTimeMillis = Optional.empty();
 
        private Optional<? extends List<Long>> experimentIds = Optional.empty();
 
        private Optional<? extends SearchResponseMetadata> metadata = Optional.empty();
 
        private Optional<? extends List<FacetResult>> facetResults = Optional.empty();
 
        private Optional<? extends List<ResultTab>> resultTabs = Optional.empty();
 
        private Optional<? extends List<String>> resultTabIds = Optional.empty();
 
        private Optional<? extends ResultsDescription> resultsDescription = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> rewrittenFacetFilters = Optional.empty();
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<Boolean> hasMoreResults = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A token that should be passed for additional requests related to this request (such as more results requests).
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * A token that should be passed for additional requests related to this request (such as more results requests).
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder sessionInfo(SessionInfo sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = Optional.ofNullable(sessionInfo);
            return this;
        }

        public Builder sessionInfo(Optional<? extends SessionInfo> sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = sessionInfo;
            return this;
        }

        public Builder results(List<SearchResult> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<SearchResult>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        public Builder structuredResults(List<StructuredResult> structuredResults) {
            Utils.checkNotNull(structuredResults, "structuredResults");
            this.structuredResults = Optional.ofNullable(structuredResults);
            return this;
        }

        public Builder structuredResults(Optional<? extends List<StructuredResult>> structuredResults) {
            Utils.checkNotNull(structuredResults, "structuredResults");
            this.structuredResults = structuredResults;
            return this;
        }

        public Builder generatedQnaResult(GeneratedQna generatedQnaResult) {
            Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
            this.generatedQnaResult = Optional.ofNullable(generatedQnaResult);
            return this;
        }

        public Builder generatedQnaResult(Optional<? extends GeneratedQna> generatedQnaResult) {
            Utils.checkNotNull(generatedQnaResult, "generatedQnaResult");
            this.generatedQnaResult = generatedQnaResult;
            return this;
        }

        public Builder gleanDataError(GleanDataError gleanDataError) {
            Utils.checkNotNull(gleanDataError, "gleanDataError");
            this.gleanDataError = Optional.ofNullable(gleanDataError);
            return this;
        }

        public Builder gleanDataError(Optional<? extends GleanDataError> gleanDataError) {
            Utils.checkNotNull(gleanDataError, "gleanDataError");
            this.gleanDataError = gleanDataError;
            return this;
        }

        /**
         * A platform-generated request ID to correlate backend logs.
         */
        public Builder requestID(String requestID) {
            Utils.checkNotNull(requestID, "requestID");
            this.requestID = Optional.ofNullable(requestID);
            return this;
        }

        /**
         * A platform-generated request ID to correlate backend logs.
         */
        public Builder requestID(Optional<String> requestID) {
            Utils.checkNotNull(requestID, "requestID");
            this.requestID = requestID;
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(long backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(Optional<Long> backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = backendTimeMillis;
            return this;
        }

        /**
         * List of experiment ids for the corresponding request.
         */
        public Builder experimentIds(List<Long> experimentIds) {
            Utils.checkNotNull(experimentIds, "experimentIds");
            this.experimentIds = Optional.ofNullable(experimentIds);
            return this;
        }

        /**
         * List of experiment ids for the corresponding request.
         */
        public Builder experimentIds(Optional<? extends List<Long>> experimentIds) {
            Utils.checkNotNull(experimentIds, "experimentIds");
            this.experimentIds = experimentIds;
            return this;
        }

        public Builder metadata(SearchResponseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends SearchResponseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder facetResults(List<FacetResult> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = Optional.ofNullable(facetResults);
            return this;
        }

        public Builder facetResults(Optional<? extends List<FacetResult>> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = facetResults;
            return this;
        }

        /**
         * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
         */
        public Builder resultTabs(List<ResultTab> resultTabs) {
            Utils.checkNotNull(resultTabs, "resultTabs");
            this.resultTabs = Optional.ofNullable(resultTabs);
            return this;
        }

        /**
         * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
         */
        public Builder resultTabs(Optional<? extends List<ResultTab>> resultTabs) {
            Utils.checkNotNull(resultTabs, "resultTabs");
            this.resultTabs = resultTabs;
            return this;
        }

        /**
         * The unique IDs of the result tabs to which this response belongs.
         */
        public Builder resultTabIds(List<String> resultTabIds) {
            Utils.checkNotNull(resultTabIds, "resultTabIds");
            this.resultTabIds = Optional.ofNullable(resultTabIds);
            return this;
        }

        /**
         * The unique IDs of the result tabs to which this response belongs.
         */
        public Builder resultTabIds(Optional<? extends List<String>> resultTabIds) {
            Utils.checkNotNull(resultTabIds, "resultTabIds");
            this.resultTabIds = resultTabIds;
            return this;
        }

        public Builder resultsDescription(ResultsDescription resultsDescription) {
            Utils.checkNotNull(resultsDescription, "resultsDescription");
            this.resultsDescription = Optional.ofNullable(resultsDescription);
            return this;
        }

        public Builder resultsDescription(Optional<? extends ResultsDescription> resultsDescription) {
            Utils.checkNotNull(resultsDescription, "resultsDescription");
            this.resultsDescription = resultsDescription;
            return this;
        }

        /**
         * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
         */
        public Builder rewrittenFacetFilters(List<FacetFilter> rewrittenFacetFilters) {
            Utils.checkNotNull(rewrittenFacetFilters, "rewrittenFacetFilters");
            this.rewrittenFacetFilters = Optional.ofNullable(rewrittenFacetFilters);
            return this;
        }

        /**
         * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
         */
        public Builder rewrittenFacetFilters(Optional<? extends List<FacetFilter>> rewrittenFacetFilters) {
            Utils.checkNotNull(rewrittenFacetFilters, "rewrittenFacetFilters");
            this.rewrittenFacetFilters = rewrittenFacetFilters;
            return this;
        }

        /**
         * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * Whether more results are available. Use cursor to retrieve them.
         */
        public Builder hasMoreResults(boolean hasMoreResults) {
            Utils.checkNotNull(hasMoreResults, "hasMoreResults");
            this.hasMoreResults = Optional.ofNullable(hasMoreResults);
            return this;
        }

        /**
         * Whether more results are available. Use cursor to retrieve them.
         */
        public Builder hasMoreResults(Optional<Boolean> hasMoreResults) {
            Utils.checkNotNull(hasMoreResults, "hasMoreResults");
            this.hasMoreResults = hasMoreResults;
            return this;
        }
        
        public SearchResponse build() {
            return new SearchResponse(
                trackingToken,
                sessionInfo,
                results,
                structuredResults,
                generatedQnaResult,
                gleanDataError,
                requestID,
                backendTimeMillis,
                experimentIds,
                metadata,
                facetResults,
                resultTabs,
                resultTabIds,
                resultsDescription,
                rewrittenFacetFilters,
                cursor,
                hasMoreResults);
        }
    }
}
