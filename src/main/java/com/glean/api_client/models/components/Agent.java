/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class Agent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<? extends Person> author;

    /**
     * Server Unix timestamp of the creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTimestamp")
    private Optional<Long> createTimestamp;

    /**
     * Server Unix timestamp of the last update time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdateTimestamp")
    private Optional<Long> lastUpdateTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdatedBy")
    private Optional<? extends Person> lastUpdatedBy;

    /**
     * The ID of the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    @JsonCreator
    public Agent(
            @JsonProperty("author") Optional<? extends Person> author,
            @JsonProperty("createTimestamp") Optional<Long> createTimestamp,
            @JsonProperty("lastUpdateTimestamp") Optional<Long> lastUpdateTimestamp,
            @JsonProperty("lastUpdatedBy") Optional<? extends Person> lastUpdatedBy,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(permissions, "permissions");
        this.author = author;
        this.createTimestamp = createTimestamp;
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        this.lastUpdatedBy = lastUpdatedBy;
        this.id = id;
        this.name = name;
        this.permissions = permissions;
    }
    
    public Agent() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> author() {
        return (Optional<Person>) author;
    }

    /**
     * Server Unix timestamp of the creation time.
     */
    @JsonIgnore
    public Optional<Long> createTimestamp() {
        return createTimestamp;
    }

    /**
     * Server Unix timestamp of the last update time.
     */
    @JsonIgnore
    public Optional<Long> lastUpdateTimestamp() {
        return lastUpdateTimestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> lastUpdatedBy() {
        return (Optional<Person>) lastUpdatedBy;
    }

    /**
     * The ID of the agent.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of the agent.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Agent withAuthor(Person author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    public Agent withAuthor(Optional<? extends Person> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    /**
     * Server Unix timestamp of the creation time.
     */
    public Agent withCreateTimestamp(long createTimestamp) {
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        this.createTimestamp = Optional.ofNullable(createTimestamp);
        return this;
    }

    /**
     * Server Unix timestamp of the creation time.
     */
    public Agent withCreateTimestamp(Optional<Long> createTimestamp) {
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        this.createTimestamp = createTimestamp;
        return this;
    }

    /**
     * Server Unix timestamp of the last update time.
     */
    public Agent withLastUpdateTimestamp(long lastUpdateTimestamp) {
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        this.lastUpdateTimestamp = Optional.ofNullable(lastUpdateTimestamp);
        return this;
    }

    /**
     * Server Unix timestamp of the last update time.
     */
    public Agent withLastUpdateTimestamp(Optional<Long> lastUpdateTimestamp) {
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        return this;
    }

    public Agent withLastUpdatedBy(Person lastUpdatedBy) {
        Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
        this.lastUpdatedBy = Optional.ofNullable(lastUpdatedBy);
        return this;
    }

    public Agent withLastUpdatedBy(Optional<? extends Person> lastUpdatedBy) {
        Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    /**
     * The ID of the agent.
     */
    public Agent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the agent.
     */
    public Agent withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the agent.
     */
    public Agent withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the agent.
     */
    public Agent withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Agent withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public Agent withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Agent other = (Agent) o;
        return 
            Objects.deepEquals(this.author, other.author) &&
            Objects.deepEquals(this.createTimestamp, other.createTimestamp) &&
            Objects.deepEquals(this.lastUpdateTimestamp, other.lastUpdateTimestamp) &&
            Objects.deepEquals(this.lastUpdatedBy, other.lastUpdatedBy) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.permissions, other.permissions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            author,
            createTimestamp,
            lastUpdateTimestamp,
            lastUpdatedBy,
            id,
            name,
            permissions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Agent.class,
                "author", author,
                "createTimestamp", createTimestamp,
                "lastUpdateTimestamp", lastUpdateTimestamp,
                "lastUpdatedBy", lastUpdatedBy,
                "id", id,
                "name", name,
                "permissions", permissions);
    }
    
    public final static class Builder {
 
        private Optional<? extends Person> author = Optional.empty();
 
        private Optional<Long> createTimestamp = Optional.empty();
 
        private Optional<Long> lastUpdateTimestamp = Optional.empty();
 
        private Optional<? extends Person> lastUpdatedBy = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder author(Person author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        public Builder author(Optional<? extends Person> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        /**
         * Server Unix timestamp of the creation time.
         */
        public Builder createTimestamp(long createTimestamp) {
            Utils.checkNotNull(createTimestamp, "createTimestamp");
            this.createTimestamp = Optional.ofNullable(createTimestamp);
            return this;
        }

        /**
         * Server Unix timestamp of the creation time.
         */
        public Builder createTimestamp(Optional<Long> createTimestamp) {
            Utils.checkNotNull(createTimestamp, "createTimestamp");
            this.createTimestamp = createTimestamp;
            return this;
        }

        /**
         * Server Unix timestamp of the last update time.
         */
        public Builder lastUpdateTimestamp(long lastUpdateTimestamp) {
            Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
            this.lastUpdateTimestamp = Optional.ofNullable(lastUpdateTimestamp);
            return this;
        }

        /**
         * Server Unix timestamp of the last update time.
         */
        public Builder lastUpdateTimestamp(Optional<Long> lastUpdateTimestamp) {
            Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
            this.lastUpdateTimestamp = lastUpdateTimestamp;
            return this;
        }

        public Builder lastUpdatedBy(Person lastUpdatedBy) {
            Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
            this.lastUpdatedBy = Optional.ofNullable(lastUpdatedBy);
            return this;
        }

        public Builder lastUpdatedBy(Optional<? extends Person> lastUpdatedBy) {
            Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * The ID of the agent.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the agent.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the agent.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the agent.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }
        
        public Agent build() {
            return new Agent(
                author,
                createTimestamp,
                lastUpdateTimestamp,
                lastUpdatedBy,
                id,
                name,
                permissions);
        }
    }
}
