/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * ProductTerms
 * 
 * <p>Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
 */
public class ProductTerms {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Assistant")
    private Optional<? extends ProductTerm> assistant;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GleanAssistant")
    private Optional<? extends ProductTerm> gleanAssistant;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PublicKnowledge")
    private Optional<? extends ProductTerm> publicKnowledge;

    @JsonCreator
    public ProductTerms(
            @JsonProperty("Assistant") Optional<? extends ProductTerm> assistant,
            @JsonProperty("GleanAssistant") Optional<? extends ProductTerm> gleanAssistant,
            @JsonProperty("PublicKnowledge") Optional<? extends ProductTerm> publicKnowledge) {
        Utils.checkNotNull(assistant, "assistant");
        Utils.checkNotNull(gleanAssistant, "gleanAssistant");
        Utils.checkNotNull(publicKnowledge, "publicKnowledge");
        this.assistant = assistant;
        this.gleanAssistant = gleanAssistant;
        this.publicKnowledge = publicKnowledge;
    }
    
    public ProductTerms() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductTerm> assistant() {
        return (Optional<ProductTerm>) assistant;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductTerm> gleanAssistant() {
        return (Optional<ProductTerm>) gleanAssistant;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductTerm> publicKnowledge() {
        return (Optional<ProductTerm>) publicKnowledge;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ProductTerms withAssistant(ProductTerm assistant) {
        Utils.checkNotNull(assistant, "assistant");
        this.assistant = Optional.ofNullable(assistant);
        return this;
    }

    public ProductTerms withAssistant(Optional<? extends ProductTerm> assistant) {
        Utils.checkNotNull(assistant, "assistant");
        this.assistant = assistant;
        return this;
    }

    public ProductTerms withGleanAssistant(ProductTerm gleanAssistant) {
        Utils.checkNotNull(gleanAssistant, "gleanAssistant");
        this.gleanAssistant = Optional.ofNullable(gleanAssistant);
        return this;
    }

    public ProductTerms withGleanAssistant(Optional<? extends ProductTerm> gleanAssistant) {
        Utils.checkNotNull(gleanAssistant, "gleanAssistant");
        this.gleanAssistant = gleanAssistant;
        return this;
    }

    public ProductTerms withPublicKnowledge(ProductTerm publicKnowledge) {
        Utils.checkNotNull(publicKnowledge, "publicKnowledge");
        this.publicKnowledge = Optional.ofNullable(publicKnowledge);
        return this;
    }

    public ProductTerms withPublicKnowledge(Optional<? extends ProductTerm> publicKnowledge) {
        Utils.checkNotNull(publicKnowledge, "publicKnowledge");
        this.publicKnowledge = publicKnowledge;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductTerms other = (ProductTerms) o;
        return 
            Objects.deepEquals(this.assistant, other.assistant) &&
            Objects.deepEquals(this.gleanAssistant, other.gleanAssistant) &&
            Objects.deepEquals(this.publicKnowledge, other.publicKnowledge);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            assistant,
            gleanAssistant,
            publicKnowledge);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductTerms.class,
                "assistant", assistant,
                "gleanAssistant", gleanAssistant,
                "publicKnowledge", publicKnowledge);
    }
    
    public final static class Builder {
 
        private Optional<? extends ProductTerm> assistant = Optional.empty();
 
        private Optional<? extends ProductTerm> gleanAssistant = Optional.empty();
 
        private Optional<? extends ProductTerm> publicKnowledge = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder assistant(ProductTerm assistant) {
            Utils.checkNotNull(assistant, "assistant");
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        public Builder assistant(Optional<? extends ProductTerm> assistant) {
            Utils.checkNotNull(assistant, "assistant");
            this.assistant = assistant;
            return this;
        }

        public Builder gleanAssistant(ProductTerm gleanAssistant) {
            Utils.checkNotNull(gleanAssistant, "gleanAssistant");
            this.gleanAssistant = Optional.ofNullable(gleanAssistant);
            return this;
        }

        public Builder gleanAssistant(Optional<? extends ProductTerm> gleanAssistant) {
            Utils.checkNotNull(gleanAssistant, "gleanAssistant");
            this.gleanAssistant = gleanAssistant;
            return this;
        }

        public Builder publicKnowledge(ProductTerm publicKnowledge) {
            Utils.checkNotNull(publicKnowledge, "publicKnowledge");
            this.publicKnowledge = Optional.ofNullable(publicKnowledge);
            return this;
        }

        public Builder publicKnowledge(Optional<? extends ProductTerm> publicKnowledge) {
            Utils.checkNotNull(publicKnowledge, "publicKnowledge");
            this.publicKnowledge = publicKnowledge;
            return this;
        }
        
        public ProductTerms build() {
            return new ProductTerms(
                assistant,
                gleanAssistant,
                publicKnowledge);
        }
    }
}
