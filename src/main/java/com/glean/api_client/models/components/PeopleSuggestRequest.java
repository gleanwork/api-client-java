/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * PeopleSuggestRequest
 * 
 * <p>Includes request params for type of suggestions.
 */
public class PeopleSuggestRequest {

    /**
     * Categories of data requested. Request can include single or multiple categories.
     */
    @JsonProperty("categories")
    private List<PeopleSuggestionCategory> categories;

    /**
     * Departments that the data is requested for. If empty, corresponds to whole company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonCreator
    public PeopleSuggestRequest(
            @JsonProperty("categories") List<PeopleSuggestionCategory> categories,
            @JsonProperty("departments") Optional<? extends List<String>> departments) {
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(departments, "departments");
        this.categories = categories;
        this.departments = departments;
    }
    
    public PeopleSuggestRequest(
            List<PeopleSuggestionCategory> categories) {
        this(categories, Optional.empty());
    }

    /**
     * Categories of data requested. Request can include single or multiple categories.
     */
    @JsonIgnore
    public List<PeopleSuggestionCategory> categories() {
        return categories;
    }

    /**
     * Departments that the data is requested for. If empty, corresponds to whole company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Categories of data requested. Request can include single or multiple categories.
     */
    public PeopleSuggestRequest withCategories(List<PeopleSuggestionCategory> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * Departments that the data is requested for. If empty, corresponds to whole company.
     */
    public PeopleSuggestRequest withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * Departments that the data is requested for. If empty, corresponds to whole company.
     */
    public PeopleSuggestRequest withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PeopleSuggestRequest other = (PeopleSuggestRequest) o;
        return 
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            categories,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PeopleSuggestRequest.class,
                "categories", categories,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private List<PeopleSuggestionCategory> categories;
 
        private Optional<? extends List<String>> departments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Categories of data requested. Request can include single or multiple categories.
         */
        public Builder categories(List<PeopleSuggestionCategory> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * Departments that the data is requested for. If empty, corresponds to whole company.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * Departments that the data is requested for. If empty, corresponds to whole company.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public PeopleSuggestRequest build() {
            return new PeopleSuggestRequest(
                categories,
                departments);
        }
    }
}
