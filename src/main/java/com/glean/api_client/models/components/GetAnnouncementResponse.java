/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetAnnouncementResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("announcement")
    private Optional<? extends Announcement> announcement;

    /**
     * An opaque token that represents this particular announcement. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends AnnouncementError> error;

    @JsonCreator
    public GetAnnouncementResponse(
            @JsonProperty("announcement") Optional<? extends Announcement> announcement,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("error") Optional<? extends AnnouncementError> error) {
        Utils.checkNotNull(announcement, "announcement");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(error, "error");
        this.announcement = announcement;
        this.trackingToken = trackingToken;
        this.error = error;
    }
    
    public GetAnnouncementResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Announcement> announcement() {
        return (Optional<Announcement>) announcement;
    }

    /**
     * An opaque token that represents this particular announcement. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnnouncementError> error() {
        return (Optional<AnnouncementError>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetAnnouncementResponse withAnnouncement(Announcement announcement) {
        Utils.checkNotNull(announcement, "announcement");
        this.announcement = Optional.ofNullable(announcement);
        return this;
    }

    public GetAnnouncementResponse withAnnouncement(Optional<? extends Announcement> announcement) {
        Utils.checkNotNull(announcement, "announcement");
        this.announcement = announcement;
        return this;
    }

    /**
     * An opaque token that represents this particular announcement. To be used for /feedback reporting.
     */
    public GetAnnouncementResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular announcement. To be used for /feedback reporting.
     */
    public GetAnnouncementResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public GetAnnouncementResponse withError(AnnouncementError error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public GetAnnouncementResponse withError(Optional<? extends AnnouncementError> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAnnouncementResponse other = (GetAnnouncementResponse) o;
        return 
            Objects.deepEquals(this.announcement, other.announcement) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            announcement,
            trackingToken,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAnnouncementResponse.class,
                "announcement", announcement,
                "trackingToken", trackingToken,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<? extends Announcement> announcement = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends AnnouncementError> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder announcement(Announcement announcement) {
            Utils.checkNotNull(announcement, "announcement");
            this.announcement = Optional.ofNullable(announcement);
            return this;
        }

        public Builder announcement(Optional<? extends Announcement> announcement) {
            Utils.checkNotNull(announcement, "announcement");
            this.announcement = announcement;
            return this;
        }

        /**
         * An opaque token that represents this particular announcement. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular announcement. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder error(AnnouncementError error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends AnnouncementError> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public GetAnnouncementResponse build() {
            return new GetAnnouncementResponse(
                announcement,
                trackingToken,
                error);
        }
    }
}
