/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UiConfig {

    /**
     * defines how to render this particular displayable list card
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    private Optional<? extends Format> format;

    /**
     * UI configurations for each item of the list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalFlags")
    private Optional<? extends DisplayableListItemUIConfig> additionalFlags;

    @JsonCreator
    public UiConfig(
            @JsonProperty("format") Optional<? extends Format> format,
            @JsonProperty("additionalFlags") Optional<? extends DisplayableListItemUIConfig> additionalFlags) {
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(additionalFlags, "additionalFlags");
        this.format = format;
        this.additionalFlags = additionalFlags;
    }
    
    public UiConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * defines how to render this particular displayable list card
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Format> format() {
        return (Optional<Format>) format;
    }

    /**
     * UI configurations for each item of the list
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DisplayableListItemUIConfig> additionalFlags() {
        return (Optional<DisplayableListItemUIConfig>) additionalFlags;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * defines how to render this particular displayable list card
     */
    public UiConfig withFormat(Format format) {
        Utils.checkNotNull(format, "format");
        this.format = Optional.ofNullable(format);
        return this;
    }

    /**
     * defines how to render this particular displayable list card
     */
    public UiConfig withFormat(Optional<? extends Format> format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * UI configurations for each item of the list
     */
    public UiConfig withAdditionalFlags(DisplayableListItemUIConfig additionalFlags) {
        Utils.checkNotNull(additionalFlags, "additionalFlags");
        this.additionalFlags = Optional.ofNullable(additionalFlags);
        return this;
    }

    /**
     * UI configurations for each item of the list
     */
    public UiConfig withAdditionalFlags(Optional<? extends DisplayableListItemUIConfig> additionalFlags) {
        Utils.checkNotNull(additionalFlags, "additionalFlags");
        this.additionalFlags = additionalFlags;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UiConfig other = (UiConfig) o;
        return 
            Objects.deepEquals(this.format, other.format) &&
            Objects.deepEquals(this.additionalFlags, other.additionalFlags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            format,
            additionalFlags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UiConfig.class,
                "format", format,
                "additionalFlags", additionalFlags);
    }
    
    public final static class Builder {
 
        private Optional<? extends Format> format = Optional.empty();
 
        private Optional<? extends DisplayableListItemUIConfig> additionalFlags = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * defines how to render this particular displayable list card
         */
        public Builder format(Format format) {
            Utils.checkNotNull(format, "format");
            this.format = Optional.ofNullable(format);
            return this;
        }

        /**
         * defines how to render this particular displayable list card
         */
        public Builder format(Optional<? extends Format> format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        /**
         * UI configurations for each item of the list
         */
        public Builder additionalFlags(DisplayableListItemUIConfig additionalFlags) {
            Utils.checkNotNull(additionalFlags, "additionalFlags");
            this.additionalFlags = Optional.ofNullable(additionalFlags);
            return this;
        }

        /**
         * UI configurations for each item of the list
         */
        public Builder additionalFlags(Optional<? extends DisplayableListItemUIConfig> additionalFlags) {
            Utils.checkNotNull(additionalFlags, "additionalFlags");
            this.additionalFlags = additionalFlags;
            return this;
        }
        
        public UiConfig build() {
            return new UiConfig(
                format,
                additionalFlags);
        }
    }
}
