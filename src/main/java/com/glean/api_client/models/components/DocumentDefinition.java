/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * DocumentDefinition
 * 
 * <p>Indexable document structure
 */
public class DocumentDefinition {

    /**
     * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filename")
    private Optional<String> filename;

    /**
     * The container name for the content (Folder for example for file content).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    private Optional<String> container;

    /**
     * This represents the datasource sepcific id of the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerDatasourceId")
    private Optional<String> containerDatasourceId;

    /**
     * This represents the object type of the container. It cannot have spaces or _
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerObjectType")
    private Optional<String> containerObjectType;

    @JsonProperty("datasource")
    private String datasource;

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    private Optional<String> objectType;

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewURL")
    private Optional<String> viewURL;

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Describes text content or base64 encoded binary content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends ContentDefinition> summary;

    /**
     * Describes text content or base64 encoded binary content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<? extends ContentDefinition> body;

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<? extends UserReferenceDefinition> author;

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    private Optional<? extends UserReferenceDefinition> owner;

    /**
     * describes the access control details of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends DocumentPermissionsDefinition> permissions;

    /**
     * The creation time, in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Long> createdAt;

    /**
     * The last update time, in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<Long> updatedAt;

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends UserReferenceDefinition> updatedBy;

    /**
     * Labels associated with the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;

    /**
     * describes the interactions on the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interactions")
    private Optional<? extends DocumentInteractionsDefinition> interactions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * Additional variations of the URL that this document points to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalUrls")
    private Optional<? extends List<String>> additionalUrls;

    /**
     * Comments associated with the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<? extends List<CommentDefinition>> comments;

    /**
     * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customProperties")
    private Optional<? extends List<CustomProperty>> customProperties;

    @JsonCreator
    public DocumentDefinition(
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("filename") Optional<String> filename,
            @JsonProperty("container") Optional<String> container,
            @JsonProperty("containerDatasourceId") Optional<String> containerDatasourceId,
            @JsonProperty("containerObjectType") Optional<String> containerObjectType,
            @JsonProperty("datasource") String datasource,
            @JsonProperty("objectType") Optional<String> objectType,
            @JsonProperty("viewURL") Optional<String> viewURL,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("summary") Optional<? extends ContentDefinition> summary,
            @JsonProperty("body") Optional<? extends ContentDefinition> body,
            @JsonProperty("author") Optional<? extends UserReferenceDefinition> author,
            @JsonProperty("owner") Optional<? extends UserReferenceDefinition> owner,
            @JsonProperty("permissions") Optional<? extends DocumentPermissionsDefinition> permissions,
            @JsonProperty("createdAt") Optional<Long> createdAt,
            @JsonProperty("updatedAt") Optional<Long> updatedAt,
            @JsonProperty("updatedBy") Optional<? extends UserReferenceDefinition> updatedBy,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("interactions") Optional<? extends DocumentInteractionsDefinition> interactions,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("additionalUrls") Optional<? extends List<String>> additionalUrls,
            @JsonProperty("comments") Optional<? extends List<CommentDefinition>> comments,
            @JsonProperty("customProperties") Optional<? extends List<CustomProperty>> customProperties) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(filename, "filename");
        Utils.checkNotNull(container, "container");
        Utils.checkNotNull(containerDatasourceId, "containerDatasourceId");
        Utils.checkNotNull(containerObjectType, "containerObjectType");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(objectType, "objectType");
        Utils.checkNotNull(viewURL, "viewURL");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(owner, "owner");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(interactions, "interactions");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(additionalUrls, "additionalUrls");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(customProperties, "customProperties");
        this.title = title;
        this.filename = filename;
        this.container = container;
        this.containerDatasourceId = containerDatasourceId;
        this.containerObjectType = containerObjectType;
        this.datasource = datasource;
        this.objectType = objectType;
        this.viewURL = viewURL;
        this.id = id;
        this.summary = summary;
        this.body = body;
        this.author = author;
        this.owner = owner;
        this.permissions = permissions;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.tags = tags;
        this.interactions = interactions;
        this.status = status;
        this.additionalUrls = additionalUrls;
        this.comments = comments;
        this.customProperties = customProperties;
    }
    
    public DocumentDefinition(
            String datasource) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), datasource, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
     */
    @JsonIgnore
    public Optional<String> filename() {
        return filename;
    }

    /**
     * The container name for the content (Folder for example for file content).
     */
    @JsonIgnore
    public Optional<String> container() {
        return container;
    }

    /**
     * This represents the datasource sepcific id of the container.
     */
    @JsonIgnore
    public Optional<String> containerDatasourceId() {
        return containerDatasourceId;
    }

    /**
     * This represents the object type of the container. It cannot have spaces or _
     */
    @JsonIgnore
    public Optional<String> containerObjectType() {
        return containerObjectType;
    }

    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    @JsonIgnore
    public Optional<String> objectType() {
        return objectType;
    }

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
     */
    @JsonIgnore
    public Optional<String> viewURL() {
        return viewURL;
    }

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentDefinition> summary() {
        return (Optional<ContentDefinition>) summary;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentDefinition> body() {
        return (Optional<ContentDefinition>) body;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserReferenceDefinition> author() {
        return (Optional<UserReferenceDefinition>) author;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserReferenceDefinition> owner() {
        return (Optional<UserReferenceDefinition>) owner;
    }

    /**
     * describes the access control details of the document
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentPermissionsDefinition> permissions() {
        return (Optional<DocumentPermissionsDefinition>) permissions;
    }

    /**
     * The creation time, in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * The last update time, in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserReferenceDefinition> updatedBy() {
        return (Optional<UserReferenceDefinition>) updatedBy;
    }

    /**
     * Labels associated with the document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    /**
     * describes the interactions on the document
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentInteractionsDefinition> interactions() {
        return (Optional<DocumentInteractionsDefinition>) interactions;
    }

    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Additional variations of the URL that this document points to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> additionalUrls() {
        return (Optional<List<String>>) additionalUrls;
    }

    /**
     * Comments associated with the document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommentDefinition>> comments() {
        return (Optional<List<CommentDefinition>>) comments;
    }

    /**
     * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomProperty>> customProperties() {
        return (Optional<List<CustomProperty>>) customProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
     */
    public DocumentDefinition withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
     */
    public DocumentDefinition withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
     */
    public DocumentDefinition withFilename(String filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = Optional.ofNullable(filename);
        return this;
    }

    /**
     * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
     */
    public DocumentDefinition withFilename(Optional<String> filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = filename;
        return this;
    }

    /**
     * The container name for the content (Folder for example for file content).
     */
    public DocumentDefinition withContainer(String container) {
        Utils.checkNotNull(container, "container");
        this.container = Optional.ofNullable(container);
        return this;
    }

    /**
     * The container name for the content (Folder for example for file content).
     */
    public DocumentDefinition withContainer(Optional<String> container) {
        Utils.checkNotNull(container, "container");
        this.container = container;
        return this;
    }

    /**
     * This represents the datasource sepcific id of the container.
     */
    public DocumentDefinition withContainerDatasourceId(String containerDatasourceId) {
        Utils.checkNotNull(containerDatasourceId, "containerDatasourceId");
        this.containerDatasourceId = Optional.ofNullable(containerDatasourceId);
        return this;
    }

    /**
     * This represents the datasource sepcific id of the container.
     */
    public DocumentDefinition withContainerDatasourceId(Optional<String> containerDatasourceId) {
        Utils.checkNotNull(containerDatasourceId, "containerDatasourceId");
        this.containerDatasourceId = containerDatasourceId;
        return this;
    }

    /**
     * This represents the object type of the container. It cannot have spaces or _
     */
    public DocumentDefinition withContainerObjectType(String containerObjectType) {
        Utils.checkNotNull(containerObjectType, "containerObjectType");
        this.containerObjectType = Optional.ofNullable(containerObjectType);
        return this;
    }

    /**
     * This represents the object type of the container. It cannot have spaces or _
     */
    public DocumentDefinition withContainerObjectType(Optional<String> containerObjectType) {
        Utils.checkNotNull(containerObjectType, "containerObjectType");
        this.containerObjectType = containerObjectType;
        return this;
    }

    public DocumentDefinition withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    public DocumentDefinition withObjectType(String objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = Optional.ofNullable(objectType);
        return this;
    }

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    public DocumentDefinition withObjectType(Optional<String> objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = objectType;
        return this;
    }

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
     */
    public DocumentDefinition withViewURL(String viewURL) {
        Utils.checkNotNull(viewURL, "viewURL");
        this.viewURL = Optional.ofNullable(viewURL);
        return this;
    }

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
     */
    public DocumentDefinition withViewURL(Optional<String> viewURL) {
        Utils.checkNotNull(viewURL, "viewURL");
        this.viewURL = viewURL;
        return this;
    }

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    public DocumentDefinition withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    public DocumentDefinition withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    public DocumentDefinition withSummary(ContentDefinition summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    public DocumentDefinition withSummary(Optional<? extends ContentDefinition> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    public DocumentDefinition withBody(ContentDefinition body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    public DocumentDefinition withBody(Optional<? extends ContentDefinition> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public DocumentDefinition withAuthor(UserReferenceDefinition author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public DocumentDefinition withAuthor(Optional<? extends UserReferenceDefinition> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public DocumentDefinition withOwner(UserReferenceDefinition owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = Optional.ofNullable(owner);
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public DocumentDefinition withOwner(Optional<? extends UserReferenceDefinition> owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = owner;
        return this;
    }

    /**
     * describes the access control details of the document
     */
    public DocumentDefinition withPermissions(DocumentPermissionsDefinition permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    /**
     * describes the access control details of the document
     */
    public DocumentDefinition withPermissions(Optional<? extends DocumentPermissionsDefinition> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * The creation time, in epoch seconds.
     */
    public DocumentDefinition withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The creation time, in epoch seconds.
     */
    public DocumentDefinition withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The last update time, in epoch seconds.
     */
    public DocumentDefinition withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * The last update time, in epoch seconds.
     */
    public DocumentDefinition withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public DocumentDefinition withUpdatedBy(UserReferenceDefinition updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public DocumentDefinition withUpdatedBy(Optional<? extends UserReferenceDefinition> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Labels associated with the document.
     */
    public DocumentDefinition withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * Labels associated with the document.
     */
    public DocumentDefinition withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * describes the interactions on the document
     */
    public DocumentDefinition withInteractions(DocumentInteractionsDefinition interactions) {
        Utils.checkNotNull(interactions, "interactions");
        this.interactions = Optional.ofNullable(interactions);
        return this;
    }

    /**
     * describes the interactions on the document
     */
    public DocumentDefinition withInteractions(Optional<? extends DocumentInteractionsDefinition> interactions) {
        Utils.checkNotNull(interactions, "interactions");
        this.interactions = interactions;
        return this;
    }

    public DocumentDefinition withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public DocumentDefinition withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Additional variations of the URL that this document points to.
     */
    public DocumentDefinition withAdditionalUrls(List<String> additionalUrls) {
        Utils.checkNotNull(additionalUrls, "additionalUrls");
        this.additionalUrls = Optional.ofNullable(additionalUrls);
        return this;
    }

    /**
     * Additional variations of the URL that this document points to.
     */
    public DocumentDefinition withAdditionalUrls(Optional<? extends List<String>> additionalUrls) {
        Utils.checkNotNull(additionalUrls, "additionalUrls");
        this.additionalUrls = additionalUrls;
        return this;
    }

    /**
     * Comments associated with the document.
     */
    public DocumentDefinition withComments(List<CommentDefinition> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    /**
     * Comments associated with the document.
     */
    public DocumentDefinition withComments(Optional<? extends List<CommentDefinition>> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    /**
     * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
     */
    public DocumentDefinition withCustomProperties(List<CustomProperty> customProperties) {
        Utils.checkNotNull(customProperties, "customProperties");
        this.customProperties = Optional.ofNullable(customProperties);
        return this;
    }

    /**
     * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
     */
    public DocumentDefinition withCustomProperties(Optional<? extends List<CustomProperty>> customProperties) {
        Utils.checkNotNull(customProperties, "customProperties");
        this.customProperties = customProperties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentDefinition other = (DocumentDefinition) o;
        return 
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.filename, other.filename) &&
            Objects.deepEquals(this.container, other.container) &&
            Objects.deepEquals(this.containerDatasourceId, other.containerDatasourceId) &&
            Objects.deepEquals(this.containerObjectType, other.containerObjectType) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.objectType, other.objectType) &&
            Objects.deepEquals(this.viewURL, other.viewURL) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.summary, other.summary) &&
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.author, other.author) &&
            Objects.deepEquals(this.owner, other.owner) &&
            Objects.deepEquals(this.permissions, other.permissions) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.interactions, other.interactions) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.additionalUrls, other.additionalUrls) &&
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.customProperties, other.customProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            title,
            filename,
            container,
            containerDatasourceId,
            containerObjectType,
            datasource,
            objectType,
            viewURL,
            id,
            summary,
            body,
            author,
            owner,
            permissions,
            createdAt,
            updatedAt,
            updatedBy,
            tags,
            interactions,
            status,
            additionalUrls,
            comments,
            customProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentDefinition.class,
                "title", title,
                "filename", filename,
                "container", container,
                "containerDatasourceId", containerDatasourceId,
                "containerObjectType", containerObjectType,
                "datasource", datasource,
                "objectType", objectType,
                "viewURL", viewURL,
                "id", id,
                "summary", summary,
                "body", body,
                "author", author,
                "owner", owner,
                "permissions", permissions,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy,
                "tags", tags,
                "interactions", interactions,
                "status", status,
                "additionalUrls", additionalUrls,
                "comments", comments,
                "customProperties", customProperties);
    }
    
    public final static class Builder {
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> filename = Optional.empty();
 
        private Optional<String> container = Optional.empty();
 
        private Optional<String> containerDatasourceId = Optional.empty();
 
        private Optional<String> containerObjectType = Optional.empty();
 
        private String datasource;
 
        private Optional<String> objectType = Optional.empty();
 
        private Optional<String> viewURL = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends ContentDefinition> summary = Optional.empty();
 
        private Optional<? extends ContentDefinition> body = Optional.empty();
 
        private Optional<? extends UserReferenceDefinition> author = Optional.empty();
 
        private Optional<? extends UserReferenceDefinition> owner = Optional.empty();
 
        private Optional<? extends DocumentPermissionsDefinition> permissions = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<Long> updatedAt = Optional.empty();
 
        private Optional<? extends UserReferenceDefinition> updatedBy = Optional.empty();
 
        private Optional<? extends List<String>> tags = Optional.empty();
 
        private Optional<? extends DocumentInteractionsDefinition> interactions = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<? extends List<String>> additionalUrls = Optional.empty();
 
        private Optional<? extends List<CommentDefinition>> comments = Optional.empty();
 
        private Optional<? extends List<CustomProperty>> customProperties = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
         */
        public Builder filename(String filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = Optional.ofNullable(filename);
            return this;
        }

        /**
         * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
         */
        public Builder filename(Optional<String> filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = filename;
            return this;
        }

        /**
         * The container name for the content (Folder for example for file content).
         */
        public Builder container(String container) {
            Utils.checkNotNull(container, "container");
            this.container = Optional.ofNullable(container);
            return this;
        }

        /**
         * The container name for the content (Folder for example for file content).
         */
        public Builder container(Optional<String> container) {
            Utils.checkNotNull(container, "container");
            this.container = container;
            return this;
        }

        /**
         * This represents the datasource sepcific id of the container.
         */
        public Builder containerDatasourceId(String containerDatasourceId) {
            Utils.checkNotNull(containerDatasourceId, "containerDatasourceId");
            this.containerDatasourceId = Optional.ofNullable(containerDatasourceId);
            return this;
        }

        /**
         * This represents the datasource sepcific id of the container.
         */
        public Builder containerDatasourceId(Optional<String> containerDatasourceId) {
            Utils.checkNotNull(containerDatasourceId, "containerDatasourceId");
            this.containerDatasourceId = containerDatasourceId;
            return this;
        }

        /**
         * This represents the object type of the container. It cannot have spaces or _
         */
        public Builder containerObjectType(String containerObjectType) {
            Utils.checkNotNull(containerObjectType, "containerObjectType");
            this.containerObjectType = Optional.ofNullable(containerObjectType);
            return this;
        }

        /**
         * This represents the object type of the container. It cannot have spaces or _
         */
        public Builder containerObjectType(Optional<String> containerObjectType) {
            Utils.checkNotNull(containerObjectType, "containerObjectType");
            this.containerObjectType = containerObjectType;
            return this;
        }

        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
         */
        public Builder objectType(String objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = Optional.ofNullable(objectType);
            return this;
        }

        /**
         * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
         */
        public Builder objectType(Optional<String> objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = objectType;
            return this;
        }

        /**
         * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
         */
        public Builder viewURL(String viewURL) {
            Utils.checkNotNull(viewURL, "viewURL");
            this.viewURL = Optional.ofNullable(viewURL);
            return this;
        }

        /**
         * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
         */
        public Builder viewURL(Optional<String> viewURL) {
            Utils.checkNotNull(viewURL, "viewURL");
            this.viewURL = viewURL;
            return this;
        }

        /**
         * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Describes text content or base64 encoded binary content
         */
        public Builder summary(ContentDefinition summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        /**
         * Describes text content or base64 encoded binary content
         */
        public Builder summary(Optional<? extends ContentDefinition> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        /**
         * Describes text content or base64 encoded binary content
         */
        public Builder body(ContentDefinition body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        /**
         * Describes text content or base64 encoded binary content
         */
        public Builder body(Optional<? extends ContentDefinition> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder author(UserReferenceDefinition author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder author(Optional<? extends UserReferenceDefinition> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder owner(UserReferenceDefinition owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = Optional.ofNullable(owner);
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder owner(Optional<? extends UserReferenceDefinition> owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = owner;
            return this;
        }

        /**
         * describes the access control details of the document
         */
        public Builder permissions(DocumentPermissionsDefinition permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        /**
         * describes the access control details of the document
         */
        public Builder permissions(Optional<? extends DocumentPermissionsDefinition> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * The creation time, in epoch seconds.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The creation time, in epoch seconds.
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The last update time, in epoch seconds.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * The last update time, in epoch seconds.
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder updatedBy(UserReferenceDefinition updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder updatedBy(Optional<? extends UserReferenceDefinition> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * Labels associated with the document.
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * Labels associated with the document.
         */
        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * describes the interactions on the document
         */
        public Builder interactions(DocumentInteractionsDefinition interactions) {
            Utils.checkNotNull(interactions, "interactions");
            this.interactions = Optional.ofNullable(interactions);
            return this;
        }

        /**
         * describes the interactions on the document
         */
        public Builder interactions(Optional<? extends DocumentInteractionsDefinition> interactions) {
            Utils.checkNotNull(interactions, "interactions");
            this.interactions = interactions;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Additional variations of the URL that this document points to.
         */
        public Builder additionalUrls(List<String> additionalUrls) {
            Utils.checkNotNull(additionalUrls, "additionalUrls");
            this.additionalUrls = Optional.ofNullable(additionalUrls);
            return this;
        }

        /**
         * Additional variations of the URL that this document points to.
         */
        public Builder additionalUrls(Optional<? extends List<String>> additionalUrls) {
            Utils.checkNotNull(additionalUrls, "additionalUrls");
            this.additionalUrls = additionalUrls;
            return this;
        }

        /**
         * Comments associated with the document.
         */
        public Builder comments(List<CommentDefinition> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * Comments associated with the document.
         */
        public Builder comments(Optional<? extends List<CommentDefinition>> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        /**
         * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
         */
        public Builder customProperties(List<CustomProperty> customProperties) {
            Utils.checkNotNull(customProperties, "customProperties");
            this.customProperties = Optional.ofNullable(customProperties);
            return this;
        }

        /**
         * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
         */
        public Builder customProperties(Optional<? extends List<CustomProperty>> customProperties) {
            Utils.checkNotNull(customProperties, "customProperties");
            this.customProperties = customProperties;
            return this;
        }
        
        public DocumentDefinition build() {
            return new DocumentDefinition(
                title,
                filename,
                container,
                containerDatasourceId,
                containerObjectType,
                datasource,
                objectType,
                viewURL,
                id,
                summary,
                body,
                author,
                owner,
                permissions,
                createdAt,
                updatedAt,
                updatedBy,
                tags,
                interactions,
                status,
                additionalUrls,
                comments,
                customProperties);
        }
    }
}
