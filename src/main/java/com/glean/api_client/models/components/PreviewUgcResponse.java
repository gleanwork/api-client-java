/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PreviewUgcResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("announcement")
    private Optional<? extends Announcement> announcement;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answer")
    private Optional<? extends Answer> answer;

    @JsonCreator
    public PreviewUgcResponse(
            @JsonProperty("announcement") Optional<? extends Announcement> announcement,
            @JsonProperty("answer") Optional<? extends Answer> answer) {
        Utils.checkNotNull(announcement, "announcement");
        Utils.checkNotNull(answer, "answer");
        this.announcement = announcement;
        this.answer = answer;
    }
    
    public PreviewUgcResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Announcement> announcement() {
        return (Optional<Announcement>) announcement;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Answer> answer() {
        return (Optional<Answer>) answer;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PreviewUgcResponse withAnnouncement(Announcement announcement) {
        Utils.checkNotNull(announcement, "announcement");
        this.announcement = Optional.ofNullable(announcement);
        return this;
    }

    public PreviewUgcResponse withAnnouncement(Optional<? extends Announcement> announcement) {
        Utils.checkNotNull(announcement, "announcement");
        this.announcement = announcement;
        return this;
    }

    public PreviewUgcResponse withAnswer(Answer answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = Optional.ofNullable(answer);
        return this;
    }

    public PreviewUgcResponse withAnswer(Optional<? extends Answer> answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = answer;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreviewUgcResponse other = (PreviewUgcResponse) o;
        return 
            Objects.deepEquals(this.announcement, other.announcement) &&
            Objects.deepEquals(this.answer, other.answer);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            announcement,
            answer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PreviewUgcResponse.class,
                "announcement", announcement,
                "answer", answer);
    }
    
    public final static class Builder {
 
        private Optional<? extends Announcement> announcement = Optional.empty();
 
        private Optional<? extends Answer> answer = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder announcement(Announcement announcement) {
            Utils.checkNotNull(announcement, "announcement");
            this.announcement = Optional.ofNullable(announcement);
            return this;
        }

        public Builder announcement(Optional<? extends Announcement> announcement) {
            Utils.checkNotNull(announcement, "announcement");
            this.announcement = announcement;
            return this;
        }

        public Builder answer(Answer answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = Optional.ofNullable(answer);
            return this;
        }

        public Builder answer(Optional<? extends Answer> answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = answer;
            return this;
        }
        
        public PreviewUgcResponse build() {
            return new PreviewUgcResponse(
                announcement,
                answer);
        }
    }
}
