/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ReferenceRange
 * 
 * <p>Each text range from the response can correspond to an array of snippets from the citation source.
 */
public class ReferenceRange {

    /**
     * A subsection of a given string to which some special formatting should be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textRange")
    private Optional<? extends TextRange> textRange;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snippets")
    private Optional<? extends List<SearchResultSnippet>> snippets;

    @JsonCreator
    public ReferenceRange(
            @JsonProperty("textRange") Optional<? extends TextRange> textRange,
            @JsonProperty("snippets") Optional<? extends List<SearchResultSnippet>> snippets) {
        Utils.checkNotNull(textRange, "textRange");
        Utils.checkNotNull(snippets, "snippets");
        this.textRange = textRange;
        this.snippets = snippets;
    }
    
    public ReferenceRange() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A subsection of a given string to which some special formatting should be applied.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TextRange> textRange() {
        return (Optional<TextRange>) textRange;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SearchResultSnippet>> snippets() {
        return (Optional<List<SearchResultSnippet>>) snippets;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A subsection of a given string to which some special formatting should be applied.
     */
    public ReferenceRange withTextRange(TextRange textRange) {
        Utils.checkNotNull(textRange, "textRange");
        this.textRange = Optional.ofNullable(textRange);
        return this;
    }

    /**
     * A subsection of a given string to which some special formatting should be applied.
     */
    public ReferenceRange withTextRange(Optional<? extends TextRange> textRange) {
        Utils.checkNotNull(textRange, "textRange");
        this.textRange = textRange;
        return this;
    }

    public ReferenceRange withSnippets(List<SearchResultSnippet> snippets) {
        Utils.checkNotNull(snippets, "snippets");
        this.snippets = Optional.ofNullable(snippets);
        return this;
    }

    public ReferenceRange withSnippets(Optional<? extends List<SearchResultSnippet>> snippets) {
        Utils.checkNotNull(snippets, "snippets");
        this.snippets = snippets;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReferenceRange other = (ReferenceRange) o;
        return 
            Objects.deepEquals(this.textRange, other.textRange) &&
            Objects.deepEquals(this.snippets, other.snippets);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            textRange,
            snippets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReferenceRange.class,
                "textRange", textRange,
                "snippets", snippets);
    }
    
    public final static class Builder {
 
        private Optional<? extends TextRange> textRange = Optional.empty();
 
        private Optional<? extends List<SearchResultSnippet>> snippets = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A subsection of a given string to which some special formatting should be applied.
         */
        public Builder textRange(TextRange textRange) {
            Utils.checkNotNull(textRange, "textRange");
            this.textRange = Optional.ofNullable(textRange);
            return this;
        }

        /**
         * A subsection of a given string to which some special formatting should be applied.
         */
        public Builder textRange(Optional<? extends TextRange> textRange) {
            Utils.checkNotNull(textRange, "textRange");
            this.textRange = textRange;
            return this;
        }

        public Builder snippets(List<SearchResultSnippet> snippets) {
            Utils.checkNotNull(snippets, "snippets");
            this.snippets = Optional.ofNullable(snippets);
            return this;
        }

        public Builder snippets(Optional<? extends List<SearchResultSnippet>> snippets) {
            Utils.checkNotNull(snippets, "snippets");
            this.snippets = snippets;
            return this;
        }
        
        public ReferenceRange build() {
            return new ReferenceRange(
                textRange,
                snippets);
        }
    }
}
