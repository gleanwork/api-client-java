/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * AgentClientConfig
 * 
 * <p>Describes the configurations that GleanChat has based on an AgentConfig.
 */
public class AgentClientConfig {

    /**
     * Describes the agent that executes the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentConfig")
    private Optional<? extends AgentConfig> agentConfig;

    /**
     * The character limit of an input to GleanChat under the specified AgentConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputCharLimit")
    private Optional<Long> inputCharLimit;

    @JsonCreator
    public AgentClientConfig(
            @JsonProperty("agentConfig") Optional<? extends AgentConfig> agentConfig,
            @JsonProperty("inputCharLimit") Optional<Long> inputCharLimit) {
        Utils.checkNotNull(agentConfig, "agentConfig");
        Utils.checkNotNull(inputCharLimit, "inputCharLimit");
        this.agentConfig = agentConfig;
        this.inputCharLimit = inputCharLimit;
    }
    
    public AgentClientConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Describes the agent that executes the request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AgentConfig> agentConfig() {
        return (Optional<AgentConfig>) agentConfig;
    }

    /**
     * The character limit of an input to GleanChat under the specified AgentConfig.
     */
    @JsonIgnore
    public Optional<Long> inputCharLimit() {
        return inputCharLimit;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the agent that executes the request.
     */
    public AgentClientConfig withAgentConfig(AgentConfig agentConfig) {
        Utils.checkNotNull(agentConfig, "agentConfig");
        this.agentConfig = Optional.ofNullable(agentConfig);
        return this;
    }

    /**
     * Describes the agent that executes the request.
     */
    public AgentClientConfig withAgentConfig(Optional<? extends AgentConfig> agentConfig) {
        Utils.checkNotNull(agentConfig, "agentConfig");
        this.agentConfig = agentConfig;
        return this;
    }

    /**
     * The character limit of an input to GleanChat under the specified AgentConfig.
     */
    public AgentClientConfig withInputCharLimit(long inputCharLimit) {
        Utils.checkNotNull(inputCharLimit, "inputCharLimit");
        this.inputCharLimit = Optional.ofNullable(inputCharLimit);
        return this;
    }

    /**
     * The character limit of an input to GleanChat under the specified AgentConfig.
     */
    public AgentClientConfig withInputCharLimit(Optional<Long> inputCharLimit) {
        Utils.checkNotNull(inputCharLimit, "inputCharLimit");
        this.inputCharLimit = inputCharLimit;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgentClientConfig other = (AgentClientConfig) o;
        return 
            Objects.deepEquals(this.agentConfig, other.agentConfig) &&
            Objects.deepEquals(this.inputCharLimit, other.inputCharLimit);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agentConfig,
            inputCharLimit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgentClientConfig.class,
                "agentConfig", agentConfig,
                "inputCharLimit", inputCharLimit);
    }
    
    public final static class Builder {
 
        private Optional<? extends AgentConfig> agentConfig = Optional.empty();
 
        private Optional<Long> inputCharLimit = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the agent that executes the request.
         */
        public Builder agentConfig(AgentConfig agentConfig) {
            Utils.checkNotNull(agentConfig, "agentConfig");
            this.agentConfig = Optional.ofNullable(agentConfig);
            return this;
        }

        /**
         * Describes the agent that executes the request.
         */
        public Builder agentConfig(Optional<? extends AgentConfig> agentConfig) {
            Utils.checkNotNull(agentConfig, "agentConfig");
            this.agentConfig = agentConfig;
            return this;
        }

        /**
         * The character limit of an input to GleanChat under the specified AgentConfig.
         */
        public Builder inputCharLimit(long inputCharLimit) {
            Utils.checkNotNull(inputCharLimit, "inputCharLimit");
            this.inputCharLimit = Optional.ofNullable(inputCharLimit);
            return this;
        }

        /**
         * The character limit of an input to GleanChat under the specified AgentConfig.
         */
        public Builder inputCharLimit(Optional<Long> inputCharLimit) {
            Utils.checkNotNull(inputCharLimit, "inputCharLimit");
            this.inputCharLimit = inputCharLimit;
            return this;
        }
        
        public AgentClientConfig build() {
            return new AgentClientConfig(
                agentConfig,
                inputCharLimit);
        }
    }
}
