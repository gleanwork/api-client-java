/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ContentInsightsResponse {

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastLogTimestamp")
    private Optional<Long> lastLogTimestamp;

    /**
     * Insights for documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentInsights")
    private Optional<? extends List<DocumentInsight>> documentInsights;

    /**
     * list of departments applicable for contents tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    /**
     * Min threshold in size of departments while populating results, otherwise 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minDepartmentSizeThreshold")
    private Optional<Long> minDepartmentSizeThreshold;

    /**
     * Minimum number of visitors to a document required to be included in insights.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minVisitorThreshold")
    private Optional<Long> minVisitorThreshold;

    @JsonCreator
    public ContentInsightsResponse(
            @JsonProperty("lastLogTimestamp") Optional<Long> lastLogTimestamp,
            @JsonProperty("documentInsights") Optional<? extends List<DocumentInsight>> documentInsights,
            @JsonProperty("departments") Optional<? extends List<String>> departments,
            @JsonProperty("minDepartmentSizeThreshold") Optional<Long> minDepartmentSizeThreshold,
            @JsonProperty("minVisitorThreshold") Optional<Long> minVisitorThreshold) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        Utils.checkNotNull(documentInsights, "documentInsights");
        Utils.checkNotNull(departments, "departments");
        Utils.checkNotNull(minDepartmentSizeThreshold, "minDepartmentSizeThreshold");
        Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
        this.lastLogTimestamp = lastLogTimestamp;
        this.documentInsights = documentInsights;
        this.departments = departments;
        this.minDepartmentSizeThreshold = minDepartmentSizeThreshold;
        this.minVisitorThreshold = minVisitorThreshold;
    }
    
    public ContentInsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastLogTimestamp() {
        return lastLogTimestamp;
    }

    /**
     * Insights for documents.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DocumentInsight>> documentInsights() {
        return (Optional<List<DocumentInsight>>) documentInsights;
    }

    /**
     * list of departments applicable for contents tab.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    /**
     * Min threshold in size of departments while populating results, otherwise 0.
     */
    @JsonIgnore
    public Optional<Long> minDepartmentSizeThreshold() {
        return minDepartmentSizeThreshold;
    }

    /**
     * Minimum number of visitors to a document required to be included in insights.
     */
    @JsonIgnore
    public Optional<Long> minVisitorThreshold() {
        return minVisitorThreshold;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public ContentInsightsResponse withLastLogTimestamp(long lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
        return this;
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public ContentInsightsResponse withLastLogTimestamp(Optional<Long> lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = lastLogTimestamp;
        return this;
    }

    /**
     * Insights for documents.
     */
    public ContentInsightsResponse withDocumentInsights(List<DocumentInsight> documentInsights) {
        Utils.checkNotNull(documentInsights, "documentInsights");
        this.documentInsights = Optional.ofNullable(documentInsights);
        return this;
    }

    /**
     * Insights for documents.
     */
    public ContentInsightsResponse withDocumentInsights(Optional<? extends List<DocumentInsight>> documentInsights) {
        Utils.checkNotNull(documentInsights, "documentInsights");
        this.documentInsights = documentInsights;
        return this;
    }

    /**
     * list of departments applicable for contents tab.
     */
    public ContentInsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * list of departments applicable for contents tab.
     */
    public ContentInsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    /**
     * Min threshold in size of departments while populating results, otherwise 0.
     */
    public ContentInsightsResponse withMinDepartmentSizeThreshold(long minDepartmentSizeThreshold) {
        Utils.checkNotNull(minDepartmentSizeThreshold, "minDepartmentSizeThreshold");
        this.minDepartmentSizeThreshold = Optional.ofNullable(minDepartmentSizeThreshold);
        return this;
    }

    /**
     * Min threshold in size of departments while populating results, otherwise 0.
     */
    public ContentInsightsResponse withMinDepartmentSizeThreshold(Optional<Long> minDepartmentSizeThreshold) {
        Utils.checkNotNull(minDepartmentSizeThreshold, "minDepartmentSizeThreshold");
        this.minDepartmentSizeThreshold = minDepartmentSizeThreshold;
        return this;
    }

    /**
     * Minimum number of visitors to a document required to be included in insights.
     */
    public ContentInsightsResponse withMinVisitorThreshold(long minVisitorThreshold) {
        Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
        this.minVisitorThreshold = Optional.ofNullable(minVisitorThreshold);
        return this;
    }

    /**
     * Minimum number of visitors to a document required to be included in insights.
     */
    public ContentInsightsResponse withMinVisitorThreshold(Optional<Long> minVisitorThreshold) {
        Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
        this.minVisitorThreshold = minVisitorThreshold;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentInsightsResponse other = (ContentInsightsResponse) o;
        return 
            Objects.deepEquals(this.lastLogTimestamp, other.lastLogTimestamp) &&
            Objects.deepEquals(this.documentInsights, other.documentInsights) &&
            Objects.deepEquals(this.departments, other.departments) &&
            Objects.deepEquals(this.minDepartmentSizeThreshold, other.minDepartmentSizeThreshold) &&
            Objects.deepEquals(this.minVisitorThreshold, other.minVisitorThreshold);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lastLogTimestamp,
            documentInsights,
            departments,
            minDepartmentSizeThreshold,
            minVisitorThreshold);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentInsightsResponse.class,
                "lastLogTimestamp", lastLogTimestamp,
                "documentInsights", documentInsights,
                "departments", departments,
                "minDepartmentSizeThreshold", minDepartmentSizeThreshold,
                "minVisitorThreshold", minVisitorThreshold);
    }
    
    public final static class Builder {
 
        private Optional<Long> lastLogTimestamp = Optional.empty();
 
        private Optional<? extends List<DocumentInsight>> documentInsights = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
 
        private Optional<Long> minDepartmentSizeThreshold = Optional.empty();
 
        private Optional<Long> minVisitorThreshold = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(long lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
            return this;
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(Optional<Long> lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = lastLogTimestamp;
            return this;
        }

        /**
         * Insights for documents.
         */
        public Builder documentInsights(List<DocumentInsight> documentInsights) {
            Utils.checkNotNull(documentInsights, "documentInsights");
            this.documentInsights = Optional.ofNullable(documentInsights);
            return this;
        }

        /**
         * Insights for documents.
         */
        public Builder documentInsights(Optional<? extends List<DocumentInsight>> documentInsights) {
            Utils.checkNotNull(documentInsights, "documentInsights");
            this.documentInsights = documentInsights;
            return this;
        }

        /**
         * list of departments applicable for contents tab.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * list of departments applicable for contents tab.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }

        /**
         * Min threshold in size of departments while populating results, otherwise 0.
         */
        public Builder minDepartmentSizeThreshold(long minDepartmentSizeThreshold) {
            Utils.checkNotNull(minDepartmentSizeThreshold, "minDepartmentSizeThreshold");
            this.minDepartmentSizeThreshold = Optional.ofNullable(minDepartmentSizeThreshold);
            return this;
        }

        /**
         * Min threshold in size of departments while populating results, otherwise 0.
         */
        public Builder minDepartmentSizeThreshold(Optional<Long> minDepartmentSizeThreshold) {
            Utils.checkNotNull(minDepartmentSizeThreshold, "minDepartmentSizeThreshold");
            this.minDepartmentSizeThreshold = minDepartmentSizeThreshold;
            return this;
        }

        /**
         * Minimum number of visitors to a document required to be included in insights.
         */
        public Builder minVisitorThreshold(long minVisitorThreshold) {
            Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
            this.minVisitorThreshold = Optional.ofNullable(minVisitorThreshold);
            return this;
        }

        /**
         * Minimum number of visitors to a document required to be included in insights.
         */
        public Builder minVisitorThreshold(Optional<Long> minVisitorThreshold) {
            Utils.checkNotNull(minVisitorThreshold, "minVisitorThreshold");
            this.minVisitorThreshold = minVisitorThreshold;
            return this;
        }
        
        public ContentInsightsResponse build() {
            return new ContentInsightsResponse(
                lastLogTimestamp,
                documentInsights,
                departments,
                minDepartmentSizeThreshold,
                minVisitorThreshold);
        }
    }
}
