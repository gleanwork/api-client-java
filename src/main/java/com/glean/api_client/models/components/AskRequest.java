/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AskRequest {

    /**
     * Whether to apply only question detection and not answering.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectOnly")
    private Optional<Boolean> detectOnly;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AskExperimentalMetadata")
    private Optional<? extends AskExperimentalMetadata> askExperimentalMetadata;

    @JsonProperty("searchRequest")
    private SearchRequest searchRequest;

    /**
     * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludedDocumentSpecs")
    @Deprecated
    private Optional<? extends List<DocumentSpecUnion>> excludedDocumentSpecs;

    /**
     * Search operators to append to the query
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operators")
    private Optional<String> operators;

    /**
     * Which backend to use to fulfill the requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backend")
    private Optional<? extends Backend> backend;

    /**
     * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatApplicationId")
    private Optional<String> chatApplicationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inclusions")
    private Optional<? extends ChatRestrictionFilters> inclusions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclusions")
    private Optional<? extends ChatRestrictionFilters> exclusions;

    @JsonCreator
    public AskRequest(
            @JsonProperty("detectOnly") Optional<Boolean> detectOnly,
            @JsonProperty("AskExperimentalMetadata") Optional<? extends AskExperimentalMetadata> askExperimentalMetadata,
            @JsonProperty("searchRequest") SearchRequest searchRequest,
            @JsonProperty("excludedDocumentSpecs") Optional<? extends List<DocumentSpecUnion>> excludedDocumentSpecs,
            @JsonProperty("operators") Optional<String> operators,
            @JsonProperty("backend") Optional<? extends Backend> backend,
            @JsonProperty("chatApplicationId") Optional<String> chatApplicationId,
            @JsonProperty("inclusions") Optional<? extends ChatRestrictionFilters> inclusions,
            @JsonProperty("exclusions") Optional<? extends ChatRestrictionFilters> exclusions) {
        Utils.checkNotNull(detectOnly, "detectOnly");
        Utils.checkNotNull(askExperimentalMetadata, "askExperimentalMetadata");
        Utils.checkNotNull(searchRequest, "searchRequest");
        Utils.checkNotNull(excludedDocumentSpecs, "excludedDocumentSpecs");
        Utils.checkNotNull(operators, "operators");
        Utils.checkNotNull(backend, "backend");
        Utils.checkNotNull(chatApplicationId, "chatApplicationId");
        Utils.checkNotNull(inclusions, "inclusions");
        Utils.checkNotNull(exclusions, "exclusions");
        this.detectOnly = detectOnly;
        this.askExperimentalMetadata = askExperimentalMetadata;
        this.searchRequest = searchRequest;
        this.excludedDocumentSpecs = excludedDocumentSpecs;
        this.operators = operators;
        this.backend = backend;
        this.chatApplicationId = chatApplicationId;
        this.inclusions = inclusions;
        this.exclusions = exclusions;
    }
    
    public AskRequest(
            SearchRequest searchRequest) {
        this(Optional.empty(), Optional.empty(), searchRequest, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether to apply only question detection and not answering.
     */
    @JsonIgnore
    public Optional<Boolean> detectOnly() {
        return detectOnly;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AskExperimentalMetadata> askExperimentalMetadata() {
        return (Optional<AskExperimentalMetadata>) askExperimentalMetadata;
    }

    @JsonIgnore
    public SearchRequest searchRequest() {
        return searchRequest;
    }

    /**
     * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DocumentSpecUnion>> excludedDocumentSpecs() {
        return (Optional<List<DocumentSpecUnion>>) excludedDocumentSpecs;
    }

    /**
     * Search operators to append to the query
     */
    @JsonIgnore
    public Optional<String> operators() {
        return operators;
    }

    /**
     * Which backend to use to fulfill the requests.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Backend> backend() {
        return (Optional<Backend>) backend;
    }

    /**
     * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
     */
    @JsonIgnore
    public Optional<String> chatApplicationId() {
        return chatApplicationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatRestrictionFilters> inclusions() {
        return (Optional<ChatRestrictionFilters>) inclusions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatRestrictionFilters> exclusions() {
        return (Optional<ChatRestrictionFilters>) exclusions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether to apply only question detection and not answering.
     */
    public AskRequest withDetectOnly(boolean detectOnly) {
        Utils.checkNotNull(detectOnly, "detectOnly");
        this.detectOnly = Optional.ofNullable(detectOnly);
        return this;
    }

    /**
     * Whether to apply only question detection and not answering.
     */
    public AskRequest withDetectOnly(Optional<Boolean> detectOnly) {
        Utils.checkNotNull(detectOnly, "detectOnly");
        this.detectOnly = detectOnly;
        return this;
    }

    public AskRequest withAskExperimentalMetadata(AskExperimentalMetadata askExperimentalMetadata) {
        Utils.checkNotNull(askExperimentalMetadata, "askExperimentalMetadata");
        this.askExperimentalMetadata = Optional.ofNullable(askExperimentalMetadata);
        return this;
    }

    public AskRequest withAskExperimentalMetadata(Optional<? extends AskExperimentalMetadata> askExperimentalMetadata) {
        Utils.checkNotNull(askExperimentalMetadata, "askExperimentalMetadata");
        this.askExperimentalMetadata = askExperimentalMetadata;
        return this;
    }

    public AskRequest withSearchRequest(SearchRequest searchRequest) {
        Utils.checkNotNull(searchRequest, "searchRequest");
        this.searchRequest = searchRequest;
        return this;
    }

    /**
     * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public AskRequest withExcludedDocumentSpecs(List<DocumentSpecUnion> excludedDocumentSpecs) {
        Utils.checkNotNull(excludedDocumentSpecs, "excludedDocumentSpecs");
        this.excludedDocumentSpecs = Optional.ofNullable(excludedDocumentSpecs);
        return this;
    }

    /**
     * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public AskRequest withExcludedDocumentSpecs(Optional<? extends List<DocumentSpecUnion>> excludedDocumentSpecs) {
        Utils.checkNotNull(excludedDocumentSpecs, "excludedDocumentSpecs");
        this.excludedDocumentSpecs = excludedDocumentSpecs;
        return this;
    }

    /**
     * Search operators to append to the query
     */
    public AskRequest withOperators(String operators) {
        Utils.checkNotNull(operators, "operators");
        this.operators = Optional.ofNullable(operators);
        return this;
    }

    /**
     * Search operators to append to the query
     */
    public AskRequest withOperators(Optional<String> operators) {
        Utils.checkNotNull(operators, "operators");
        this.operators = operators;
        return this;
    }

    /**
     * Which backend to use to fulfill the requests.
     */
    public AskRequest withBackend(Backend backend) {
        Utils.checkNotNull(backend, "backend");
        this.backend = Optional.ofNullable(backend);
        return this;
    }

    /**
     * Which backend to use to fulfill the requests.
     */
    public AskRequest withBackend(Optional<? extends Backend> backend) {
        Utils.checkNotNull(backend, "backend");
        this.backend = backend;
        return this;
    }

    /**
     * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
     */
    public AskRequest withChatApplicationId(String chatApplicationId) {
        Utils.checkNotNull(chatApplicationId, "chatApplicationId");
        this.chatApplicationId = Optional.ofNullable(chatApplicationId);
        return this;
    }

    /**
     * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
     */
    public AskRequest withChatApplicationId(Optional<String> chatApplicationId) {
        Utils.checkNotNull(chatApplicationId, "chatApplicationId");
        this.chatApplicationId = chatApplicationId;
        return this;
    }

    public AskRequest withInclusions(ChatRestrictionFilters inclusions) {
        Utils.checkNotNull(inclusions, "inclusions");
        this.inclusions = Optional.ofNullable(inclusions);
        return this;
    }

    public AskRequest withInclusions(Optional<? extends ChatRestrictionFilters> inclusions) {
        Utils.checkNotNull(inclusions, "inclusions");
        this.inclusions = inclusions;
        return this;
    }

    public AskRequest withExclusions(ChatRestrictionFilters exclusions) {
        Utils.checkNotNull(exclusions, "exclusions");
        this.exclusions = Optional.ofNullable(exclusions);
        return this;
    }

    public AskRequest withExclusions(Optional<? extends ChatRestrictionFilters> exclusions) {
        Utils.checkNotNull(exclusions, "exclusions");
        this.exclusions = exclusions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AskRequest other = (AskRequest) o;
        return 
            Objects.deepEquals(this.detectOnly, other.detectOnly) &&
            Objects.deepEquals(this.askExperimentalMetadata, other.askExperimentalMetadata) &&
            Objects.deepEquals(this.searchRequest, other.searchRequest) &&
            Objects.deepEquals(this.excludedDocumentSpecs, other.excludedDocumentSpecs) &&
            Objects.deepEquals(this.operators, other.operators) &&
            Objects.deepEquals(this.backend, other.backend) &&
            Objects.deepEquals(this.chatApplicationId, other.chatApplicationId) &&
            Objects.deepEquals(this.inclusions, other.inclusions) &&
            Objects.deepEquals(this.exclusions, other.exclusions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            detectOnly,
            askExperimentalMetadata,
            searchRequest,
            excludedDocumentSpecs,
            operators,
            backend,
            chatApplicationId,
            inclusions,
            exclusions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AskRequest.class,
                "detectOnly", detectOnly,
                "askExperimentalMetadata", askExperimentalMetadata,
                "searchRequest", searchRequest,
                "excludedDocumentSpecs", excludedDocumentSpecs,
                "operators", operators,
                "backend", backend,
                "chatApplicationId", chatApplicationId,
                "inclusions", inclusions,
                "exclusions", exclusions);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> detectOnly = Optional.empty();
 
        private Optional<? extends AskExperimentalMetadata> askExperimentalMetadata = Optional.empty();
 
        private SearchRequest searchRequest;
 
        @Deprecated
        private Optional<? extends List<DocumentSpecUnion>> excludedDocumentSpecs = Optional.empty();
 
        private Optional<String> operators = Optional.empty();
 
        private Optional<? extends Backend> backend = Optional.empty();
 
        private Optional<String> chatApplicationId = Optional.empty();
 
        private Optional<? extends ChatRestrictionFilters> inclusions = Optional.empty();
 
        private Optional<? extends ChatRestrictionFilters> exclusions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to apply only question detection and not answering.
         */
        public Builder detectOnly(boolean detectOnly) {
            Utils.checkNotNull(detectOnly, "detectOnly");
            this.detectOnly = Optional.ofNullable(detectOnly);
            return this;
        }

        /**
         * Whether to apply only question detection and not answering.
         */
        public Builder detectOnly(Optional<Boolean> detectOnly) {
            Utils.checkNotNull(detectOnly, "detectOnly");
            this.detectOnly = detectOnly;
            return this;
        }

        public Builder askExperimentalMetadata(AskExperimentalMetadata askExperimentalMetadata) {
            Utils.checkNotNull(askExperimentalMetadata, "askExperimentalMetadata");
            this.askExperimentalMetadata = Optional.ofNullable(askExperimentalMetadata);
            return this;
        }

        public Builder askExperimentalMetadata(Optional<? extends AskExperimentalMetadata> askExperimentalMetadata) {
            Utils.checkNotNull(askExperimentalMetadata, "askExperimentalMetadata");
            this.askExperimentalMetadata = askExperimentalMetadata;
            return this;
        }

        public Builder searchRequest(SearchRequest searchRequest) {
            Utils.checkNotNull(searchRequest, "searchRequest");
            this.searchRequest = searchRequest;
            return this;
        }

        /**
         * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder excludedDocumentSpecs(List<DocumentSpecUnion> excludedDocumentSpecs) {
            Utils.checkNotNull(excludedDocumentSpecs, "excludedDocumentSpecs");
            this.excludedDocumentSpecs = Optional.ofNullable(excludedDocumentSpecs);
            return this;
        }

        /**
         * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder excludedDocumentSpecs(Optional<? extends List<DocumentSpecUnion>> excludedDocumentSpecs) {
            Utils.checkNotNull(excludedDocumentSpecs, "excludedDocumentSpecs");
            this.excludedDocumentSpecs = excludedDocumentSpecs;
            return this;
        }

        /**
         * Search operators to append to the query
         */
        public Builder operators(String operators) {
            Utils.checkNotNull(operators, "operators");
            this.operators = Optional.ofNullable(operators);
            return this;
        }

        /**
         * Search operators to append to the query
         */
        public Builder operators(Optional<String> operators) {
            Utils.checkNotNull(operators, "operators");
            this.operators = operators;
            return this;
        }

        /**
         * Which backend to use to fulfill the requests.
         */
        public Builder backend(Backend backend) {
            Utils.checkNotNull(backend, "backend");
            this.backend = Optional.ofNullable(backend);
            return this;
        }

        /**
         * Which backend to use to fulfill the requests.
         */
        public Builder backend(Optional<? extends Backend> backend) {
            Utils.checkNotNull(backend, "backend");
            this.backend = backend;
            return this;
        }

        /**
         * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
         */
        public Builder chatApplicationId(String chatApplicationId) {
            Utils.checkNotNull(chatApplicationId, "chatApplicationId");
            this.chatApplicationId = Optional.ofNullable(chatApplicationId);
            return this;
        }

        /**
         * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
         */
        public Builder chatApplicationId(Optional<String> chatApplicationId) {
            Utils.checkNotNull(chatApplicationId, "chatApplicationId");
            this.chatApplicationId = chatApplicationId;
            return this;
        }

        public Builder inclusions(ChatRestrictionFilters inclusions) {
            Utils.checkNotNull(inclusions, "inclusions");
            this.inclusions = Optional.ofNullable(inclusions);
            return this;
        }

        public Builder inclusions(Optional<? extends ChatRestrictionFilters> inclusions) {
            Utils.checkNotNull(inclusions, "inclusions");
            this.inclusions = inclusions;
            return this;
        }

        public Builder exclusions(ChatRestrictionFilters exclusions) {
            Utils.checkNotNull(exclusions, "exclusions");
            this.exclusions = Optional.ofNullable(exclusions);
            return this;
        }

        public Builder exclusions(Optional<? extends ChatRestrictionFilters> exclusions) {
            Utils.checkNotNull(exclusions, "exclusions");
            this.exclusions = exclusions;
            return this;
        }
        
        public AskRequest build() {
            return new AskRequest(
                detectOnly,
                askExperimentalMetadata,
                searchRequest,
                excludedDocumentSpecs,
                operators,
                backend,
                chatApplicationId,
                inclusions,
                exclusions);
        }
    }
}
