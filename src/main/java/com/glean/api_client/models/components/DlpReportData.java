/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

/**
 * DlpReportData
 * 
 * <p>Dlp report metadata which is used to construct report email
 */
public class DlpReportData {

    /**
     * The frequency of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<? extends Frequency> frequency;

    /**
     * The time the report was requested, applicable only for one time reports
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestTime")
    private Optional<OffsetDateTime> requestTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportName")
    private Optional<String> reportName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends DlpSimpleResult> status;

    @JsonCreator
    public DlpReportData(
            @JsonProperty("frequency") Optional<? extends Frequency> frequency,
            @JsonProperty("requestTime") Optional<OffsetDateTime> requestTime,
            @JsonProperty("reportName") Optional<String> reportName,
            @JsonProperty("status") Optional<? extends DlpSimpleResult> status) {
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(requestTime, "requestTime");
        Utils.checkNotNull(reportName, "reportName");
        Utils.checkNotNull(status, "status");
        this.frequency = frequency;
        this.requestTime = requestTime;
        this.reportName = reportName;
        this.status = status;
    }
    
    public DlpReportData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The frequency of the report
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Frequency> frequency() {
        return (Optional<Frequency>) frequency;
    }

    /**
     * The time the report was requested, applicable only for one time reports
     */
    @JsonIgnore
    public Optional<OffsetDateTime> requestTime() {
        return requestTime;
    }

    @JsonIgnore
    public Optional<String> reportName() {
        return reportName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpSimpleResult> status() {
        return (Optional<DlpSimpleResult>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The frequency of the report
     */
    public DlpReportData withFrequency(Frequency frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * The frequency of the report
     */
    public DlpReportData withFrequency(Optional<? extends Frequency> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    /**
     * The time the report was requested, applicable only for one time reports
     */
    public DlpReportData withRequestTime(OffsetDateTime requestTime) {
        Utils.checkNotNull(requestTime, "requestTime");
        this.requestTime = Optional.ofNullable(requestTime);
        return this;
    }

    /**
     * The time the report was requested, applicable only for one time reports
     */
    public DlpReportData withRequestTime(Optional<OffsetDateTime> requestTime) {
        Utils.checkNotNull(requestTime, "requestTime");
        this.requestTime = requestTime;
        return this;
    }

    public DlpReportData withReportName(String reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = Optional.ofNullable(reportName);
        return this;
    }

    public DlpReportData withReportName(Optional<String> reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = reportName;
        return this;
    }

    public DlpReportData withStatus(DlpSimpleResult status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public DlpReportData withStatus(Optional<? extends DlpSimpleResult> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DlpReportData other = (DlpReportData) o;
        return 
            Objects.deepEquals(this.frequency, other.frequency) &&
            Objects.deepEquals(this.requestTime, other.requestTime) &&
            Objects.deepEquals(this.reportName, other.reportName) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            frequency,
            requestTime,
            reportName,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DlpReportData.class,
                "frequency", frequency,
                "requestTime", requestTime,
                "reportName", reportName,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends Frequency> frequency = Optional.empty();
 
        private Optional<OffsetDateTime> requestTime = Optional.empty();
 
        private Optional<String> reportName = Optional.empty();
 
        private Optional<? extends DlpSimpleResult> status = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The frequency of the report
         */
        public Builder frequency(Frequency frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * The frequency of the report
         */
        public Builder frequency(Optional<? extends Frequency> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }

        /**
         * The time the report was requested, applicable only for one time reports
         */
        public Builder requestTime(OffsetDateTime requestTime) {
            Utils.checkNotNull(requestTime, "requestTime");
            this.requestTime = Optional.ofNullable(requestTime);
            return this;
        }

        /**
         * The time the report was requested, applicable only for one time reports
         */
        public Builder requestTime(Optional<OffsetDateTime> requestTime) {
            Utils.checkNotNull(requestTime, "requestTime");
            this.requestTime = requestTime;
            return this;
        }

        public Builder reportName(String reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = Optional.ofNullable(reportName);
            return this;
        }

        public Builder reportName(Optional<String> reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = reportName;
            return this;
        }

        public Builder status(DlpSimpleResult status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends DlpSimpleResult> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public DlpReportData build() {
            return new DlpReportData(
                frequency,
                requestTime,
                reportName,
                status);
        }
    }
}
