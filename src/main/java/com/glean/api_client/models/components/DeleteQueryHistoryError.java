/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class DeleteQueryHistoryError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorType")
    private Optional<? extends DeleteQueryHistoryErrorErrorType> errorType;

    @JsonCreator
    public DeleteQueryHistoryError(
            @JsonProperty("errorType") Optional<? extends DeleteQueryHistoryErrorErrorType> errorType) {
        Utils.checkNotNull(errorType, "errorType");
        this.errorType = errorType;
    }
    
    public DeleteQueryHistoryError() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeleteQueryHistoryErrorErrorType> errorType() {
        return (Optional<DeleteQueryHistoryErrorErrorType>) errorType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DeleteQueryHistoryError withErrorType(DeleteQueryHistoryErrorErrorType errorType) {
        Utils.checkNotNull(errorType, "errorType");
        this.errorType = Optional.ofNullable(errorType);
        return this;
    }

    public DeleteQueryHistoryError withErrorType(Optional<? extends DeleteQueryHistoryErrorErrorType> errorType) {
        Utils.checkNotNull(errorType, "errorType");
        this.errorType = errorType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteQueryHistoryError other = (DeleteQueryHistoryError) o;
        return 
            Objects.deepEquals(this.errorType, other.errorType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            errorType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteQueryHistoryError.class,
                "errorType", errorType);
    }
    
    public final static class Builder {
 
        private Optional<? extends DeleteQueryHistoryErrorErrorType> errorType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder errorType(DeleteQueryHistoryErrorErrorType errorType) {
            Utils.checkNotNull(errorType, "errorType");
            this.errorType = Optional.ofNullable(errorType);
            return this;
        }

        public Builder errorType(Optional<? extends DeleteQueryHistoryErrorErrorType> errorType) {
            Utils.checkNotNull(errorType, "errorType");
            this.errorType = errorType;
            return this;
        }
        
        public DeleteQueryHistoryError build() {
            return new DeleteQueryHistoryError(
                errorType);
        }
    }
}
