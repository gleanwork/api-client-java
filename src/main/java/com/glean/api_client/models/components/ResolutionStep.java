/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ResolutionStep
 * 
 * <p>A step to take to resolve an alert
 */
public class ResolutionStep {

    /**
     * text for what step to take
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stepText")
    private Optional<String> stepText;

    /**
     * optional link url for instructions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    private Optional<String> link;

    /**
     * optional metadata for the step
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<String>> metadata;

    @JsonCreator
    public ResolutionStep(
            @JsonProperty("stepText") Optional<String> stepText,
            @JsonProperty("link") Optional<String> link,
            @JsonProperty("metadata") Optional<? extends List<String>> metadata) {
        Utils.checkNotNull(stepText, "stepText");
        Utils.checkNotNull(link, "link");
        Utils.checkNotNull(metadata, "metadata");
        this.stepText = stepText;
        this.link = link;
        this.metadata = metadata;
    }
    
    public ResolutionStep() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * text for what step to take
     */
    @JsonIgnore
    public Optional<String> stepText() {
        return stepText;
    }

    /**
     * optional link url for instructions
     */
    @JsonIgnore
    public Optional<String> link() {
        return link;
    }

    /**
     * optional metadata for the step
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> metadata() {
        return (Optional<List<String>>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * text for what step to take
     */
    public ResolutionStep withStepText(String stepText) {
        Utils.checkNotNull(stepText, "stepText");
        this.stepText = Optional.ofNullable(stepText);
        return this;
    }

    /**
     * text for what step to take
     */
    public ResolutionStep withStepText(Optional<String> stepText) {
        Utils.checkNotNull(stepText, "stepText");
        this.stepText = stepText;
        return this;
    }

    /**
     * optional link url for instructions
     */
    public ResolutionStep withLink(String link) {
        Utils.checkNotNull(link, "link");
        this.link = Optional.ofNullable(link);
        return this;
    }

    /**
     * optional link url for instructions
     */
    public ResolutionStep withLink(Optional<String> link) {
        Utils.checkNotNull(link, "link");
        this.link = link;
        return this;
    }

    /**
     * optional metadata for the step
     */
    public ResolutionStep withMetadata(List<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * optional metadata for the step
     */
    public ResolutionStep withMetadata(Optional<? extends List<String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResolutionStep other = (ResolutionStep) o;
        return 
            Objects.deepEquals(this.stepText, other.stepText) &&
            Objects.deepEquals(this.link, other.link) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            stepText,
            link,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResolutionStep.class,
                "stepText", stepText,
                "link", link,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<String> stepText = Optional.empty();
 
        private Optional<String> link = Optional.empty();
 
        private Optional<? extends List<String>> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * text for what step to take
         */
        public Builder stepText(String stepText) {
            Utils.checkNotNull(stepText, "stepText");
            this.stepText = Optional.ofNullable(stepText);
            return this;
        }

        /**
         * text for what step to take
         */
        public Builder stepText(Optional<String> stepText) {
            Utils.checkNotNull(stepText, "stepText");
            this.stepText = stepText;
            return this;
        }

        /**
         * optional link url for instructions
         */
        public Builder link(String link) {
            Utils.checkNotNull(link, "link");
            this.link = Optional.ofNullable(link);
            return this;
        }

        /**
         * optional link url for instructions
         */
        public Builder link(Optional<String> link) {
            Utils.checkNotNull(link, "link");
            this.link = link;
            return this;
        }

        /**
         * optional metadata for the step
         */
        public Builder metadata(List<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * optional metadata for the step
         */
        public Builder metadata(Optional<? extends List<String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public ResolutionStep build() {
            return new ResolutionStep(
                stepText,
                link,
                metadata);
        }
    }
}
