/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Brandings
 * 
 * <p>Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
 */
public class Brandings {

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("light")
    private Optional<? extends Branding> light;

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dark")
    private Optional<? extends Branding> dark;

    /**
     * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productTerms")
    private Optional<? extends ProductTerms> productTerms;

    @JsonCreator
    public Brandings(
            @JsonProperty("light") Optional<? extends Branding> light,
            @JsonProperty("dark") Optional<? extends Branding> dark,
            @JsonProperty("productTerms") Optional<? extends ProductTerms> productTerms) {
        Utils.checkNotNull(light, "light");
        Utils.checkNotNull(dark, "dark");
        Utils.checkNotNull(productTerms, "productTerms");
        this.light = light;
        this.dark = dark;
        this.productTerms = productTerms;
    }
    
    public Brandings() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Branding> light() {
        return (Optional<Branding>) light;
    }

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Branding> dark() {
        return (Optional<Branding>) dark;
    }

    /**
     * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductTerms> productTerms() {
        return (Optional<ProductTerms>) productTerms;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    public Brandings withLight(Branding light) {
        Utils.checkNotNull(light, "light");
        this.light = Optional.ofNullable(light);
        return this;
    }

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    public Brandings withLight(Optional<? extends Branding> light) {
        Utils.checkNotNull(light, "light");
        this.light = light;
        return this;
    }

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    public Brandings withDark(Branding dark) {
        Utils.checkNotNull(dark, "dark");
        this.dark = Optional.ofNullable(dark);
        return this;
    }

    /**
     * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
     */
    public Brandings withDark(Optional<? extends Branding> dark) {
        Utils.checkNotNull(dark, "dark");
        this.dark = dark;
        return this;
    }

    /**
     * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
     */
    public Brandings withProductTerms(ProductTerms productTerms) {
        Utils.checkNotNull(productTerms, "productTerms");
        this.productTerms = Optional.ofNullable(productTerms);
        return this;
    }

    /**
     * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
     */
    public Brandings withProductTerms(Optional<? extends ProductTerms> productTerms) {
        Utils.checkNotNull(productTerms, "productTerms");
        this.productTerms = productTerms;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Brandings other = (Brandings) o;
        return 
            Objects.deepEquals(this.light, other.light) &&
            Objects.deepEquals(this.dark, other.dark) &&
            Objects.deepEquals(this.productTerms, other.productTerms);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            light,
            dark,
            productTerms);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Brandings.class,
                "light", light,
                "dark", dark,
                "productTerms", productTerms);
    }
    
    public final static class Builder {
 
        private Optional<? extends Branding> light = Optional.empty();
 
        private Optional<? extends Branding> dark = Optional.empty();
 
        private Optional<? extends ProductTerms> productTerms = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
         */
        public Builder light(Branding light) {
            Utils.checkNotNull(light, "light");
            this.light = Optional.ofNullable(light);
            return this;
        }

        /**
         * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
         */
        public Builder light(Optional<? extends Branding> light) {
            Utils.checkNotNull(light, "light");
            this.light = light;
            return this;
        }

        /**
         * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
         */
        public Builder dark(Branding dark) {
            Utils.checkNotNull(dark, "dark");
            this.dark = Optional.ofNullable(dark);
            return this;
        }

        /**
         * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
         */
        public Builder dark(Optional<? extends Branding> dark) {
            Utils.checkNotNull(dark, "dark");
            this.dark = dark;
            return this;
        }

        /**
         * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
         */
        public Builder productTerms(ProductTerms productTerms) {
            Utils.checkNotNull(productTerms, "productTerms");
            this.productTerms = Optional.ofNullable(productTerms);
            return this;
        }

        /**
         * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
         */
        public Builder productTerms(Optional<? extends ProductTerms> productTerms) {
            Utils.checkNotNull(productTerms, "productTerms");
            this.productTerms = productTerms;
            return this;
        }
        
        public Brandings build() {
            return new Brandings(
                light,
                dark,
                productTerms);
        }
    }
}
