/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class FeedResponse {

    /**
     * List of experiment ids for the corresponding request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experimentIds")
    private Optional<? extends List<Long>> experimentIds;

    /**
     * An opaque token that represents this particular feed response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    /**
     * Server unix timestamp (in seconds since epoch UTC).
     */
    @JsonProperty("serverTimestamp")
    private long serverTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<FeedResult>> results;

    /**
     * Map from category to the list of facets that can be used to filter the entry's content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetResults")
    private Optional<? extends Map<String, List<FacetResult>>> facetResults;

    /**
     * The time window (in hours) used for generating user mentions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mentionsTimeWindowInHours")
    private Optional<Long> mentionsTimeWindowInHours;

    @JsonCreator
    public FeedResponse(
            @JsonProperty("experimentIds") Optional<? extends List<Long>> experimentIds,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("serverTimestamp") long serverTimestamp,
            @JsonProperty("results") Optional<? extends List<FeedResult>> results,
            @JsonProperty("facetResults") Optional<? extends Map<String, List<FacetResult>>> facetResults,
            @JsonProperty("mentionsTimeWindowInHours") Optional<Long> mentionsTimeWindowInHours) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(serverTimestamp, "serverTimestamp");
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(facetResults, "facetResults");
        Utils.checkNotNull(mentionsTimeWindowInHours, "mentionsTimeWindowInHours");
        this.experimentIds = experimentIds;
        this.trackingToken = trackingToken;
        this.serverTimestamp = serverTimestamp;
        this.results = results;
        this.facetResults = facetResults;
        this.mentionsTimeWindowInHours = mentionsTimeWindowInHours;
    }
    
    public FeedResponse(
            long serverTimestamp) {
        this(Optional.empty(), Optional.empty(), serverTimestamp, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> experimentIds() {
        return (Optional<List<Long>>) experimentIds;
    }

    /**
     * An opaque token that represents this particular feed response.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    /**
     * Server unix timestamp (in seconds since epoch UTC).
     */
    @JsonIgnore
    public long serverTimestamp() {
        return serverTimestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeedResult>> results() {
        return (Optional<List<FeedResult>>) results;
    }

    /**
     * Map from category to the list of facets that can be used to filter the entry's content.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<FacetResult>>> facetResults() {
        return (Optional<Map<String, List<FacetResult>>>) facetResults;
    }

    /**
     * The time window (in hours) used for generating user mentions.
     */
    @JsonIgnore
    public Optional<Long> mentionsTimeWindowInHours() {
        return mentionsTimeWindowInHours;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of experiment ids for the corresponding request.
     */
    public FeedResponse withExperimentIds(List<Long> experimentIds) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        this.experimentIds = Optional.ofNullable(experimentIds);
        return this;
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    public FeedResponse withExperimentIds(Optional<? extends List<Long>> experimentIds) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        this.experimentIds = experimentIds;
        return this;
    }

    /**
     * An opaque token that represents this particular feed response.
     */
    public FeedResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular feed response.
     */
    public FeedResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    /**
     * Server unix timestamp (in seconds since epoch UTC).
     */
    public FeedResponse withServerTimestamp(long serverTimestamp) {
        Utils.checkNotNull(serverTimestamp, "serverTimestamp");
        this.serverTimestamp = serverTimestamp;
        return this;
    }

    public FeedResponse withResults(List<FeedResult> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public FeedResponse withResults(Optional<? extends List<FeedResult>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    /**
     * Map from category to the list of facets that can be used to filter the entry's content.
     */
    public FeedResponse withFacetResults(Map<String, List<FacetResult>> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = Optional.ofNullable(facetResults);
        return this;
    }

    /**
     * Map from category to the list of facets that can be used to filter the entry's content.
     */
    public FeedResponse withFacetResults(Optional<? extends Map<String, List<FacetResult>>> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = facetResults;
        return this;
    }

    /**
     * The time window (in hours) used for generating user mentions.
     */
    public FeedResponse withMentionsTimeWindowInHours(long mentionsTimeWindowInHours) {
        Utils.checkNotNull(mentionsTimeWindowInHours, "mentionsTimeWindowInHours");
        this.mentionsTimeWindowInHours = Optional.ofNullable(mentionsTimeWindowInHours);
        return this;
    }

    /**
     * The time window (in hours) used for generating user mentions.
     */
    public FeedResponse withMentionsTimeWindowInHours(Optional<Long> mentionsTimeWindowInHours) {
        Utils.checkNotNull(mentionsTimeWindowInHours, "mentionsTimeWindowInHours");
        this.mentionsTimeWindowInHours = mentionsTimeWindowInHours;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedResponse other = (FeedResponse) o;
        return 
            Objects.deepEquals(this.experimentIds, other.experimentIds) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.serverTimestamp, other.serverTimestamp) &&
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.facetResults, other.facetResults) &&
            Objects.deepEquals(this.mentionsTimeWindowInHours, other.mentionsTimeWindowInHours);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            experimentIds,
            trackingToken,
            serverTimestamp,
            results,
            facetResults,
            mentionsTimeWindowInHours);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedResponse.class,
                "experimentIds", experimentIds,
                "trackingToken", trackingToken,
                "serverTimestamp", serverTimestamp,
                "results", results,
                "facetResults", facetResults,
                "mentionsTimeWindowInHours", mentionsTimeWindowInHours);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Long>> experimentIds = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Long serverTimestamp;
 
        private Optional<? extends List<FeedResult>> results = Optional.empty();
 
        private Optional<? extends Map<String, List<FacetResult>>> facetResults = Optional.empty();
 
        private Optional<Long> mentionsTimeWindowInHours = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of experiment ids for the corresponding request.
         */
        public Builder experimentIds(List<Long> experimentIds) {
            Utils.checkNotNull(experimentIds, "experimentIds");
            this.experimentIds = Optional.ofNullable(experimentIds);
            return this;
        }

        /**
         * List of experiment ids for the corresponding request.
         */
        public Builder experimentIds(Optional<? extends List<Long>> experimentIds) {
            Utils.checkNotNull(experimentIds, "experimentIds");
            this.experimentIds = experimentIds;
            return this;
        }

        /**
         * An opaque token that represents this particular feed response.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular feed response.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        /**
         * Server unix timestamp (in seconds since epoch UTC).
         */
        public Builder serverTimestamp(long serverTimestamp) {
            Utils.checkNotNull(serverTimestamp, "serverTimestamp");
            this.serverTimestamp = serverTimestamp;
            return this;
        }

        public Builder results(List<FeedResult> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<FeedResult>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        /**
         * Map from category to the list of facets that can be used to filter the entry's content.
         */
        public Builder facetResults(Map<String, List<FacetResult>> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = Optional.ofNullable(facetResults);
            return this;
        }

        /**
         * Map from category to the list of facets that can be used to filter the entry's content.
         */
        public Builder facetResults(Optional<? extends Map<String, List<FacetResult>>> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = facetResults;
            return this;
        }

        /**
         * The time window (in hours) used for generating user mentions.
         */
        public Builder mentionsTimeWindowInHours(long mentionsTimeWindowInHours) {
            Utils.checkNotNull(mentionsTimeWindowInHours, "mentionsTimeWindowInHours");
            this.mentionsTimeWindowInHours = Optional.ofNullable(mentionsTimeWindowInHours);
            return this;
        }

        /**
         * The time window (in hours) used for generating user mentions.
         */
        public Builder mentionsTimeWindowInHours(Optional<Long> mentionsTimeWindowInHours) {
            Utils.checkNotNull(mentionsTimeWindowInHours, "mentionsTimeWindowInHours");
            this.mentionsTimeWindowInHours = mentionsTimeWindowInHours;
            return this;
        }
        
        public FeedResponse build() {
            return new FeedResponse(
                experimentIds,
                trackingToken,
                serverTimestamp,
                results,
                facetResults,
                mentionsTimeWindowInHours);
        }
    }
}
