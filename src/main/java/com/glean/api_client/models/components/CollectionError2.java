/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.models.errors.ErrorCode;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CollectionError2 {

    @JsonProperty("errorCode")
    private ErrorCode errorCode;

    @JsonCreator
    public CollectionError2(
            @JsonProperty("errorCode") ErrorCode errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
    }

    @JsonIgnore
    public ErrorCode errorCode() {
        return errorCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CollectionError2 withErrorCode(ErrorCode errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollectionError2 other = (CollectionError2) o;
        return 
            Objects.deepEquals(this.errorCode, other.errorCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            errorCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CollectionError2.class,
                "errorCode", errorCode);
    }
    
    public final static class Builder {
 
        private ErrorCode errorCode;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder errorCode(ErrorCode errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }
        
        public CollectionError2 build() {
            return new CollectionError2(
                errorCode);
        }
    }
}
