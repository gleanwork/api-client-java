/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * WebSearchConfig
 * 
 * <p>Configuration settings related to web search
 */
public class WebSearchConfig {

    /**
     * Whether web search is enabled for the deployment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * The action instance ID of the web search action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionInstanceId")
    private Optional<String> actionInstanceId;

    @JsonCreator
    public WebSearchConfig(
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("actionInstanceId") Optional<String> actionInstanceId) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.enabled = enabled;
        this.actionInstanceId = actionInstanceId;
    }
    
    public WebSearchConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether web search is enabled for the deployment.
     */
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * The action instance ID of the web search action.
     */
    @JsonIgnore
    public Optional<String> actionInstanceId() {
        return actionInstanceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether web search is enabled for the deployment.
     */
    public WebSearchConfig withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Whether web search is enabled for the deployment.
     */
    public WebSearchConfig withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * The action instance ID of the web search action.
     */
    public WebSearchConfig withActionInstanceId(String actionInstanceId) {
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.actionInstanceId = Optional.ofNullable(actionInstanceId);
        return this;
    }

    /**
     * The action instance ID of the web search action.
     */
    public WebSearchConfig withActionInstanceId(Optional<String> actionInstanceId) {
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.actionInstanceId = actionInstanceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebSearchConfig other = (WebSearchConfig) o;
        return 
            Objects.deepEquals(this.enabled, other.enabled) &&
            Objects.deepEquals(this.actionInstanceId, other.actionInstanceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            enabled,
            actionInstanceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebSearchConfig.class,
                "enabled", enabled,
                "actionInstanceId", actionInstanceId);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> enabled = Optional.empty();
 
        private Optional<String> actionInstanceId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether web search is enabled for the deployment.
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Whether web search is enabled for the deployment.
         */
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * The action instance ID of the web search action.
         */
        public Builder actionInstanceId(String actionInstanceId) {
            Utils.checkNotNull(actionInstanceId, "actionInstanceId");
            this.actionInstanceId = Optional.ofNullable(actionInstanceId);
            return this;
        }

        /**
         * The action instance ID of the web search action.
         */
        public Builder actionInstanceId(Optional<String> actionInstanceId) {
            Utils.checkNotNull(actionInstanceId, "actionInstanceId");
            this.actionInstanceId = actionInstanceId;
            return this;
        }
        
        public WebSearchConfig build() {
            return new WebSearchConfig(
                enabled,
                actionInstanceId);
        }
    }
}
