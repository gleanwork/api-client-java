/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ManualFeedbackInfo {

    /**
     * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends ManualFeedbackInfoSource> source;

    /**
     * The issue the user indicated in the feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issue")
    @Deprecated
    private Optional<String> issue;

    /**
     * The issue(s) the user indicated in the feedback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issues")
    private Optional<? extends List<Issue>> issues;

    /**
     * URLs of images uploaded by user when providing feedback
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrls")
    private Optional<? extends List<String>> imageUrls;

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("obscuredQuery")
    private Optional<String> obscuredQuery;

    /**
     * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeTab")
    private Optional<String> activeTab;

    /**
     * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<String> comments;

    /**
     * The array of search result Glean Document IDs, ordered by top to bottom result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchResults")
    private Optional<? extends List<String>> searchResults;

    /**
     * The array of previous messages in a chat session, ordered by oldest to newest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousMessages")
    private Optional<? extends List<String>> previousMessages;

    /**
     * Array of previous request/response exchanges, ordered by oldest to newest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatTranscript")
    private Optional<? extends List<FeedbackChatExchange>> chatTranscript;

    /**
     * How many times this query has been run in the past.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numQueriesFromFirstRun")
    private Optional<Long> numQueriesFromFirstRun;

    /**
     * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vote")
    private Optional<? extends Vote> vote;

    /**
     * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    private Optional<Long> rating;

    /**
     * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<String> ratingKey;

    /**
     * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingScale")
    private Optional<Long> ratingScale;

    @JsonCreator
    public ManualFeedbackInfo(
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("source") Optional<? extends ManualFeedbackInfoSource> source,
            @JsonProperty("issue") Optional<String> issue,
            @JsonProperty("issues") Optional<? extends List<Issue>> issues,
            @JsonProperty("imageUrls") Optional<? extends List<String>> imageUrls,
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("obscuredQuery") Optional<String> obscuredQuery,
            @JsonProperty("activeTab") Optional<String> activeTab,
            @JsonProperty("comments") Optional<String> comments,
            @JsonProperty("searchResults") Optional<? extends List<String>> searchResults,
            @JsonProperty("previousMessages") Optional<? extends List<String>> previousMessages,
            @JsonProperty("chatTranscript") Optional<? extends List<FeedbackChatExchange>> chatTranscript,
            @JsonProperty("numQueriesFromFirstRun") Optional<Long> numQueriesFromFirstRun,
            @JsonProperty("vote") Optional<? extends Vote> vote,
            @JsonProperty("rating") Optional<Long> rating,
            @JsonProperty("ratingKey") Optional<String> ratingKey,
            @JsonProperty("ratingScale") Optional<Long> ratingScale) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(issue, "issue");
        Utils.checkNotNull(issues, "issues");
        Utils.checkNotNull(imageUrls, "imageUrls");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(obscuredQuery, "obscuredQuery");
        Utils.checkNotNull(activeTab, "activeTab");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(searchResults, "searchResults");
        Utils.checkNotNull(previousMessages, "previousMessages");
        Utils.checkNotNull(chatTranscript, "chatTranscript");
        Utils.checkNotNull(numQueriesFromFirstRun, "numQueriesFromFirstRun");
        Utils.checkNotNull(vote, "vote");
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(ratingScale, "ratingScale");
        this.email = email;
        this.source = source;
        this.issue = issue;
        this.issues = issues;
        this.imageUrls = imageUrls;
        this.query = query;
        this.obscuredQuery = obscuredQuery;
        this.activeTab = activeTab;
        this.comments = comments;
        this.searchResults = searchResults;
        this.previousMessages = previousMessages;
        this.chatTranscript = chatTranscript;
        this.numQueriesFromFirstRun = numQueriesFromFirstRun;
        this.vote = vote;
        this.rating = rating;
        this.ratingKey = ratingKey;
        this.ratingScale = ratingScale;
    }
    
    public ManualFeedbackInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ManualFeedbackInfoSource> source() {
        return (Optional<ManualFeedbackInfoSource>) source;
    }

    /**
     * The issue the user indicated in the feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> issue() {
        return issue;
    }

    /**
     * The issue(s) the user indicated in the feedback.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Issue>> issues() {
        return (Optional<List<Issue>>) issues;
    }

    /**
     * URLs of images uploaded by user when providing feedback
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> imageUrls() {
        return (Optional<List<String>>) imageUrls;
    }

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
     */
    @JsonIgnore
    public Optional<String> obscuredQuery() {
        return obscuredQuery;
    }

    /**
     * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
     */
    @JsonIgnore
    public Optional<String> activeTab() {
        return activeTab;
    }

    /**
     * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
     */
    @JsonIgnore
    public Optional<String> comments() {
        return comments;
    }

    /**
     * The array of search result Glean Document IDs, ordered by top to bottom result.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> searchResults() {
        return (Optional<List<String>>) searchResults;
    }

    /**
     * The array of previous messages in a chat session, ordered by oldest to newest.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> previousMessages() {
        return (Optional<List<String>>) previousMessages;
    }

    /**
     * Array of previous request/response exchanges, ordered by oldest to newest.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeedbackChatExchange>> chatTranscript() {
        return (Optional<List<FeedbackChatExchange>>) chatTranscript;
    }

    /**
     * How many times this query has been run in the past.
     */
    @JsonIgnore
    public Optional<Long> numQueriesFromFirstRun() {
        return numQueriesFromFirstRun;
    }

    /**
     * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Vote> vote() {
        return (Optional<Vote>) vote;
    }

    /**
     * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
     */
    @JsonIgnore
    public Optional<Long> rating() {
        return rating;
    }

    /**
     * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
     */
    @JsonIgnore
    public Optional<String> ratingKey() {
        return ratingKey;
    }

    /**
     * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
     */
    @JsonIgnore
    public Optional<Long> ratingScale() {
        return ratingScale;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withSource(ManualFeedbackInfoSource source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withSource(Optional<? extends ManualFeedbackInfoSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * The issue the user indicated in the feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ManualFeedbackInfo withIssue(String issue) {
        Utils.checkNotNull(issue, "issue");
        this.issue = Optional.ofNullable(issue);
        return this;
    }

    /**
     * The issue the user indicated in the feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ManualFeedbackInfo withIssue(Optional<String> issue) {
        Utils.checkNotNull(issue, "issue");
        this.issue = issue;
        return this;
    }

    /**
     * The issue(s) the user indicated in the feedback.
     */
    public ManualFeedbackInfo withIssues(List<Issue> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = Optional.ofNullable(issues);
        return this;
    }

    /**
     * The issue(s) the user indicated in the feedback.
     */
    public ManualFeedbackInfo withIssues(Optional<? extends List<Issue>> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = issues;
        return this;
    }

    /**
     * URLs of images uploaded by user when providing feedback
     */
    public ManualFeedbackInfo withImageUrls(List<String> imageUrls) {
        Utils.checkNotNull(imageUrls, "imageUrls");
        this.imageUrls = Optional.ofNullable(imageUrls);
        return this;
    }

    /**
     * URLs of images uploaded by user when providing feedback
     */
    public ManualFeedbackInfo withImageUrls(Optional<? extends List<String>> imageUrls) {
        Utils.checkNotNull(imageUrls, "imageUrls");
        this.imageUrls = imageUrls;
        return this;
    }

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
     */
    public ManualFeedbackInfo withObscuredQuery(String obscuredQuery) {
        Utils.checkNotNull(obscuredQuery, "obscuredQuery");
        this.obscuredQuery = Optional.ofNullable(obscuredQuery);
        return this;
    }

    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
     */
    public ManualFeedbackInfo withObscuredQuery(Optional<String> obscuredQuery) {
        Utils.checkNotNull(obscuredQuery, "obscuredQuery");
        this.obscuredQuery = obscuredQuery;
        return this;
    }

    /**
     * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
     */
    public ManualFeedbackInfo withActiveTab(String activeTab) {
        Utils.checkNotNull(activeTab, "activeTab");
        this.activeTab = Optional.ofNullable(activeTab);
        return this;
    }

    /**
     * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
     */
    public ManualFeedbackInfo withActiveTab(Optional<String> activeTab) {
        Utils.checkNotNull(activeTab, "activeTab");
        this.activeTab = activeTab;
        return this;
    }

    /**
     * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
     */
    public ManualFeedbackInfo withComments(String comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    /**
     * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
     */
    public ManualFeedbackInfo withComments(Optional<String> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    /**
     * The array of search result Glean Document IDs, ordered by top to bottom result.
     */
    public ManualFeedbackInfo withSearchResults(List<String> searchResults) {
        Utils.checkNotNull(searchResults, "searchResults");
        this.searchResults = Optional.ofNullable(searchResults);
        return this;
    }

    /**
     * The array of search result Glean Document IDs, ordered by top to bottom result.
     */
    public ManualFeedbackInfo withSearchResults(Optional<? extends List<String>> searchResults) {
        Utils.checkNotNull(searchResults, "searchResults");
        this.searchResults = searchResults;
        return this;
    }

    /**
     * The array of previous messages in a chat session, ordered by oldest to newest.
     */
    public ManualFeedbackInfo withPreviousMessages(List<String> previousMessages) {
        Utils.checkNotNull(previousMessages, "previousMessages");
        this.previousMessages = Optional.ofNullable(previousMessages);
        return this;
    }

    /**
     * The array of previous messages in a chat session, ordered by oldest to newest.
     */
    public ManualFeedbackInfo withPreviousMessages(Optional<? extends List<String>> previousMessages) {
        Utils.checkNotNull(previousMessages, "previousMessages");
        this.previousMessages = previousMessages;
        return this;
    }

    /**
     * Array of previous request/response exchanges, ordered by oldest to newest.
     */
    public ManualFeedbackInfo withChatTranscript(List<FeedbackChatExchange> chatTranscript) {
        Utils.checkNotNull(chatTranscript, "chatTranscript");
        this.chatTranscript = Optional.ofNullable(chatTranscript);
        return this;
    }

    /**
     * Array of previous request/response exchanges, ordered by oldest to newest.
     */
    public ManualFeedbackInfo withChatTranscript(Optional<? extends List<FeedbackChatExchange>> chatTranscript) {
        Utils.checkNotNull(chatTranscript, "chatTranscript");
        this.chatTranscript = chatTranscript;
        return this;
    }

    /**
     * How many times this query has been run in the past.
     */
    public ManualFeedbackInfo withNumQueriesFromFirstRun(long numQueriesFromFirstRun) {
        Utils.checkNotNull(numQueriesFromFirstRun, "numQueriesFromFirstRun");
        this.numQueriesFromFirstRun = Optional.ofNullable(numQueriesFromFirstRun);
        return this;
    }

    /**
     * How many times this query has been run in the past.
     */
    public ManualFeedbackInfo withNumQueriesFromFirstRun(Optional<Long> numQueriesFromFirstRun) {
        Utils.checkNotNull(numQueriesFromFirstRun, "numQueriesFromFirstRun");
        this.numQueriesFromFirstRun = numQueriesFromFirstRun;
        return this;
    }

    /**
     * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withVote(Vote vote) {
        Utils.checkNotNull(vote, "vote");
        this.vote = Optional.ofNullable(vote);
        return this;
    }

    /**
     * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    public ManualFeedbackInfo withVote(Optional<? extends Vote> vote) {
        Utils.checkNotNull(vote, "vote");
        this.vote = vote;
        return this;
    }

    /**
     * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
     */
    public ManualFeedbackInfo withRating(long rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = Optional.ofNullable(rating);
        return this;
    }

    /**
     * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
     */
    public ManualFeedbackInfo withRating(Optional<Long> rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    /**
     * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
     */
    public ManualFeedbackInfo withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    /**
     * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
     */
    public ManualFeedbackInfo withRatingKey(Optional<String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    /**
     * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
     */
    public ManualFeedbackInfo withRatingScale(long ratingScale) {
        Utils.checkNotNull(ratingScale, "ratingScale");
        this.ratingScale = Optional.ofNullable(ratingScale);
        return this;
    }

    /**
     * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
     */
    public ManualFeedbackInfo withRatingScale(Optional<Long> ratingScale) {
        Utils.checkNotNull(ratingScale, "ratingScale");
        this.ratingScale = ratingScale;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ManualFeedbackInfo other = (ManualFeedbackInfo) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.issue, other.issue) &&
            Objects.deepEquals(this.issues, other.issues) &&
            Objects.deepEquals(this.imageUrls, other.imageUrls) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.obscuredQuery, other.obscuredQuery) &&
            Objects.deepEquals(this.activeTab, other.activeTab) &&
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.searchResults, other.searchResults) &&
            Objects.deepEquals(this.previousMessages, other.previousMessages) &&
            Objects.deepEquals(this.chatTranscript, other.chatTranscript) &&
            Objects.deepEquals(this.numQueriesFromFirstRun, other.numQueriesFromFirstRun) &&
            Objects.deepEquals(this.vote, other.vote) &&
            Objects.deepEquals(this.rating, other.rating) &&
            Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            Objects.deepEquals(this.ratingScale, other.ratingScale);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            source,
            issue,
            issues,
            imageUrls,
            query,
            obscuredQuery,
            activeTab,
            comments,
            searchResults,
            previousMessages,
            chatTranscript,
            numQueriesFromFirstRun,
            vote,
            rating,
            ratingKey,
            ratingScale);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ManualFeedbackInfo.class,
                "email", email,
                "source", source,
                "issue", issue,
                "issues", issues,
                "imageUrls", imageUrls,
                "query", query,
                "obscuredQuery", obscuredQuery,
                "activeTab", activeTab,
                "comments", comments,
                "searchResults", searchResults,
                "previousMessages", previousMessages,
                "chatTranscript", chatTranscript,
                "numQueriesFromFirstRun", numQueriesFromFirstRun,
                "vote", vote,
                "rating", rating,
                "ratingKey", ratingKey,
                "ratingScale", ratingScale);
    }
    
    public final static class Builder {
 
        private Optional<String> email = Optional.empty();
 
        private Optional<? extends ManualFeedbackInfoSource> source = Optional.empty();
 
        @Deprecated
        private Optional<String> issue = Optional.empty();
 
        private Optional<? extends List<Issue>> issues = Optional.empty();
 
        private Optional<? extends List<String>> imageUrls = Optional.empty();
 
        private Optional<String> query = Optional.empty();
 
        private Optional<String> obscuredQuery = Optional.empty();
 
        private Optional<String> activeTab = Optional.empty();
 
        private Optional<String> comments = Optional.empty();
 
        private Optional<? extends List<String>> searchResults = Optional.empty();
 
        private Optional<? extends List<String>> previousMessages = Optional.empty();
 
        private Optional<? extends List<FeedbackChatExchange>> chatTranscript = Optional.empty();
 
        private Optional<Long> numQueriesFromFirstRun = Optional.empty();
 
        private Optional<? extends Vote> vote = Optional.empty();
 
        private Optional<Long> rating = Optional.empty();
 
        private Optional<String> ratingKey = Optional.empty();
 
        private Optional<Long> ratingScale = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder source(ManualFeedbackInfoSource source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder source(Optional<? extends ManualFeedbackInfoSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        /**
         * The issue the user indicated in the feedback.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder issue(String issue) {
            Utils.checkNotNull(issue, "issue");
            this.issue = Optional.ofNullable(issue);
            return this;
        }

        /**
         * The issue the user indicated in the feedback.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder issue(Optional<String> issue) {
            Utils.checkNotNull(issue, "issue");
            this.issue = issue;
            return this;
        }

        /**
         * The issue(s) the user indicated in the feedback.
         */
        public Builder issues(List<Issue> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = Optional.ofNullable(issues);
            return this;
        }

        /**
         * The issue(s) the user indicated in the feedback.
         */
        public Builder issues(Optional<? extends List<Issue>> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = issues;
            return this;
        }

        /**
         * URLs of images uploaded by user when providing feedback
         */
        public Builder imageUrls(List<String> imageUrls) {
            Utils.checkNotNull(imageUrls, "imageUrls");
            this.imageUrls = Optional.ofNullable(imageUrls);
            return this;
        }

        /**
         * URLs of images uploaded by user when providing feedback
         */
        public Builder imageUrls(Optional<? extends List<String>> imageUrls) {
            Utils.checkNotNull(imageUrls, "imageUrls");
            this.imageUrls = imageUrls;
            return this;
        }

        /**
         * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
         */
        public Builder obscuredQuery(String obscuredQuery) {
            Utils.checkNotNull(obscuredQuery, "obscuredQuery");
            this.obscuredQuery = Optional.ofNullable(obscuredQuery);
            return this;
        }

        /**
         * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
         */
        public Builder obscuredQuery(Optional<String> obscuredQuery) {
            Utils.checkNotNull(obscuredQuery, "obscuredQuery");
            this.obscuredQuery = obscuredQuery;
            return this;
        }

        /**
         * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
         */
        public Builder activeTab(String activeTab) {
            Utils.checkNotNull(activeTab, "activeTab");
            this.activeTab = Optional.ofNullable(activeTab);
            return this;
        }

        /**
         * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
         */
        public Builder activeTab(Optional<String> activeTab) {
            Utils.checkNotNull(activeTab, "activeTab");
            this.activeTab = activeTab;
            return this;
        }

        /**
         * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
         */
        public Builder comments(String comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
         */
        public Builder comments(Optional<String> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        /**
         * The array of search result Glean Document IDs, ordered by top to bottom result.
         */
        public Builder searchResults(List<String> searchResults) {
            Utils.checkNotNull(searchResults, "searchResults");
            this.searchResults = Optional.ofNullable(searchResults);
            return this;
        }

        /**
         * The array of search result Glean Document IDs, ordered by top to bottom result.
         */
        public Builder searchResults(Optional<? extends List<String>> searchResults) {
            Utils.checkNotNull(searchResults, "searchResults");
            this.searchResults = searchResults;
            return this;
        }

        /**
         * The array of previous messages in a chat session, ordered by oldest to newest.
         */
        public Builder previousMessages(List<String> previousMessages) {
            Utils.checkNotNull(previousMessages, "previousMessages");
            this.previousMessages = Optional.ofNullable(previousMessages);
            return this;
        }

        /**
         * The array of previous messages in a chat session, ordered by oldest to newest.
         */
        public Builder previousMessages(Optional<? extends List<String>> previousMessages) {
            Utils.checkNotNull(previousMessages, "previousMessages");
            this.previousMessages = previousMessages;
            return this;
        }

        /**
         * Array of previous request/response exchanges, ordered by oldest to newest.
         */
        public Builder chatTranscript(List<FeedbackChatExchange> chatTranscript) {
            Utils.checkNotNull(chatTranscript, "chatTranscript");
            this.chatTranscript = Optional.ofNullable(chatTranscript);
            return this;
        }

        /**
         * Array of previous request/response exchanges, ordered by oldest to newest.
         */
        public Builder chatTranscript(Optional<? extends List<FeedbackChatExchange>> chatTranscript) {
            Utils.checkNotNull(chatTranscript, "chatTranscript");
            this.chatTranscript = chatTranscript;
            return this;
        }

        /**
         * How many times this query has been run in the past.
         */
        public Builder numQueriesFromFirstRun(long numQueriesFromFirstRun) {
            Utils.checkNotNull(numQueriesFromFirstRun, "numQueriesFromFirstRun");
            this.numQueriesFromFirstRun = Optional.ofNullable(numQueriesFromFirstRun);
            return this;
        }

        /**
         * How many times this query has been run in the past.
         */
        public Builder numQueriesFromFirstRun(Optional<Long> numQueriesFromFirstRun) {
            Utils.checkNotNull(numQueriesFromFirstRun, "numQueriesFromFirstRun");
            this.numQueriesFromFirstRun = numQueriesFromFirstRun;
            return this;
        }

        /**
         * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder vote(Vote vote) {
            Utils.checkNotNull(vote, "vote");
            this.vote = Optional.ofNullable(vote);
            return this;
        }

        /**
         * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
         */
        public Builder vote(Optional<? extends Vote> vote) {
            Utils.checkNotNull(vote, "vote");
            this.vote = vote;
            return this;
        }

        /**
         * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
         */
        public Builder rating(long rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = Optional.ofNullable(rating);
            return this;
        }

        /**
         * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
         */
        public Builder rating(Optional<Long> rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }

        /**
         * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
         */
        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        /**
         * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
         */
        public Builder ratingKey(Optional<String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        /**
         * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
         */
        public Builder ratingScale(long ratingScale) {
            Utils.checkNotNull(ratingScale, "ratingScale");
            this.ratingScale = Optional.ofNullable(ratingScale);
            return this;
        }

        /**
         * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
         */
        public Builder ratingScale(Optional<Long> ratingScale) {
            Utils.checkNotNull(ratingScale, "ratingScale");
            this.ratingScale = ratingScale;
            return this;
        }
        
        public ManualFeedbackInfo build() {
            return new ManualFeedbackInfo(
                email,
                source,
                issue,
                issues,
                imageUrls,
                query,
                obscuredQuery,
                activeTab,
                comments,
                searchResults,
                previousMessages,
                chatTranscript,
                numQueriesFromFirstRun,
                vote,
                rating,
                ratingKey,
                ratingScale);
        }
    }
}
