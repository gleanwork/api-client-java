/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UserRoleSpecification {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocumentSpec")
    private Optional<? extends DocumentSpecUnion> sourceDocumentSpec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("person")
    private Optional<? extends Person> person;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    private Optional<? extends Group> group;

    /**
     * A user's role with respect to a specific document.
     */
    @JsonProperty("role")
    private UserRole role;

    @JsonCreator
    public UserRoleSpecification(
            @JsonProperty("sourceDocumentSpec") Optional<? extends DocumentSpecUnion> sourceDocumentSpec,
            @JsonProperty("person") Optional<? extends Person> person,
            @JsonProperty("group") Optional<? extends Group> group,
            @JsonProperty("role") UserRole role) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        Utils.checkNotNull(person, "person");
        Utils.checkNotNull(group, "group");
        Utils.checkNotNull(role, "role");
        this.sourceDocumentSpec = sourceDocumentSpec;
        this.person = person;
        this.group = group;
        this.role = role;
    }
    
    public UserRoleSpecification(
            UserRole role) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), role);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSpecUnion> sourceDocumentSpec() {
        return (Optional<DocumentSpecUnion>) sourceDocumentSpec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> person() {
        return (Optional<Person>) person;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Group> group() {
        return (Optional<Group>) group;
    }

    /**
     * A user's role with respect to a specific document.
     */
    @JsonIgnore
    public UserRole role() {
        return role;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UserRoleSpecification withSourceDocumentSpec(DocumentSpecUnion sourceDocumentSpec) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        this.sourceDocumentSpec = Optional.ofNullable(sourceDocumentSpec);
        return this;
    }

    public UserRoleSpecification withSourceDocumentSpec(Optional<? extends DocumentSpecUnion> sourceDocumentSpec) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        this.sourceDocumentSpec = sourceDocumentSpec;
        return this;
    }

    public UserRoleSpecification withPerson(Person person) {
        Utils.checkNotNull(person, "person");
        this.person = Optional.ofNullable(person);
        return this;
    }

    public UserRoleSpecification withPerson(Optional<? extends Person> person) {
        Utils.checkNotNull(person, "person");
        this.person = person;
        return this;
    }

    public UserRoleSpecification withGroup(Group group) {
        Utils.checkNotNull(group, "group");
        this.group = Optional.ofNullable(group);
        return this;
    }

    public UserRoleSpecification withGroup(Optional<? extends Group> group) {
        Utils.checkNotNull(group, "group");
        this.group = group;
        return this;
    }

    /**
     * A user's role with respect to a specific document.
     */
    public UserRoleSpecification withRole(UserRole role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserRoleSpecification other = (UserRoleSpecification) o;
        return 
            Objects.deepEquals(this.sourceDocumentSpec, other.sourceDocumentSpec) &&
            Objects.deepEquals(this.person, other.person) &&
            Objects.deepEquals(this.group, other.group) &&
            Objects.deepEquals(this.role, other.role);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceDocumentSpec,
            person,
            group,
            role);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserRoleSpecification.class,
                "sourceDocumentSpec", sourceDocumentSpec,
                "person", person,
                "group", group,
                "role", role);
    }
    
    public final static class Builder {
 
        private Optional<? extends DocumentSpecUnion> sourceDocumentSpec = Optional.empty();
 
        private Optional<? extends Person> person = Optional.empty();
 
        private Optional<? extends Group> group = Optional.empty();
 
        private UserRole role;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sourceDocumentSpec(DocumentSpecUnion sourceDocumentSpec) {
            Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
            this.sourceDocumentSpec = Optional.ofNullable(sourceDocumentSpec);
            return this;
        }

        public Builder sourceDocumentSpec(Optional<? extends DocumentSpecUnion> sourceDocumentSpec) {
            Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
            this.sourceDocumentSpec = sourceDocumentSpec;
            return this;
        }

        public Builder person(Person person) {
            Utils.checkNotNull(person, "person");
            this.person = Optional.ofNullable(person);
            return this;
        }

        public Builder person(Optional<? extends Person> person) {
            Utils.checkNotNull(person, "person");
            this.person = person;
            return this;
        }

        public Builder group(Group group) {
            Utils.checkNotNull(group, "group");
            this.group = Optional.ofNullable(group);
            return this;
        }

        public Builder group(Optional<? extends Group> group) {
            Utils.checkNotNull(group, "group");
            this.group = group;
            return this;
        }

        /**
         * A user's role with respect to a specific document.
         */
        public Builder role(UserRole role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }
        
        public UserRoleSpecification build() {
            return new UserRoleSpecification(
                sourceDocumentSpec,
                person,
                group,
                role);
        }
    }
}
