/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class CustomFieldValueHyperlink {

    /**
     * Anchor text for hyperlink.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlAnchor")
    private Optional<String> urlAnchor;

    /**
     * Link for this URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlLink")
    private Optional<String> urlLink;

    @JsonCreator
    public CustomFieldValueHyperlink(
            @JsonProperty("urlAnchor") Optional<String> urlAnchor,
            @JsonProperty("urlLink") Optional<String> urlLink) {
        Utils.checkNotNull(urlAnchor, "urlAnchor");
        Utils.checkNotNull(urlLink, "urlLink");
        this.urlAnchor = urlAnchor;
        this.urlLink = urlLink;
    }
    
    public CustomFieldValueHyperlink() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Anchor text for hyperlink.
     */
    @JsonIgnore
    public Optional<String> urlAnchor() {
        return urlAnchor;
    }

    /**
     * Link for this URL.
     */
    @JsonIgnore
    public Optional<String> urlLink() {
        return urlLink;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Anchor text for hyperlink.
     */
    public CustomFieldValueHyperlink withUrlAnchor(String urlAnchor) {
        Utils.checkNotNull(urlAnchor, "urlAnchor");
        this.urlAnchor = Optional.ofNullable(urlAnchor);
        return this;
    }

    /**
     * Anchor text for hyperlink.
     */
    public CustomFieldValueHyperlink withUrlAnchor(Optional<String> urlAnchor) {
        Utils.checkNotNull(urlAnchor, "urlAnchor");
        this.urlAnchor = urlAnchor;
        return this;
    }

    /**
     * Link for this URL.
     */
    public CustomFieldValueHyperlink withUrlLink(String urlLink) {
        Utils.checkNotNull(urlLink, "urlLink");
        this.urlLink = Optional.ofNullable(urlLink);
        return this;
    }

    /**
     * Link for this URL.
     */
    public CustomFieldValueHyperlink withUrlLink(Optional<String> urlLink) {
        Utils.checkNotNull(urlLink, "urlLink");
        this.urlLink = urlLink;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomFieldValueHyperlink other = (CustomFieldValueHyperlink) o;
        return 
            Objects.deepEquals(this.urlAnchor, other.urlAnchor) &&
            Objects.deepEquals(this.urlLink, other.urlLink);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            urlAnchor,
            urlLink);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomFieldValueHyperlink.class,
                "urlAnchor", urlAnchor,
                "urlLink", urlLink);
    }
    
    public final static class Builder {
 
        private Optional<String> urlAnchor = Optional.empty();
 
        private Optional<String> urlLink = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Anchor text for hyperlink.
         */
        public Builder urlAnchor(String urlAnchor) {
            Utils.checkNotNull(urlAnchor, "urlAnchor");
            this.urlAnchor = Optional.ofNullable(urlAnchor);
            return this;
        }

        /**
         * Anchor text for hyperlink.
         */
        public Builder urlAnchor(Optional<String> urlAnchor) {
            Utils.checkNotNull(urlAnchor, "urlAnchor");
            this.urlAnchor = urlAnchor;
            return this;
        }

        /**
         * Link for this URL.
         */
        public Builder urlLink(String urlLink) {
            Utils.checkNotNull(urlLink, "urlLink");
            this.urlLink = Optional.ofNullable(urlLink);
            return this;
        }

        /**
         * Link for this URL.
         */
        public Builder urlLink(Optional<String> urlLink) {
            Utils.checkNotNull(urlLink, "urlLink");
            this.urlLink = urlLink;
            return this;
        }
        
        public CustomFieldValueHyperlink build() {
            return new CustomFieldValueHyperlink(
                urlAnchor,
                urlLink);
        }
    }
}
