/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

/**
 * DebugDocumentsRequest
 * 
 * <p>Describes the request body of the /debug/{datasource}/documents API call.
 */
public class DebugDocumentsRequest {

    /**
     * Documents to fetch debug information for
     */
    @JsonProperty("debugDocuments")
    private List<DebugDocumentRequest> debugDocuments;

    @JsonCreator
    public DebugDocumentsRequest(
            @JsonProperty("debugDocuments") List<DebugDocumentRequest> debugDocuments) {
        Utils.checkNotNull(debugDocuments, "debugDocuments");
        this.debugDocuments = debugDocuments;
    }

    /**
     * Documents to fetch debug information for
     */
    @JsonIgnore
    public List<DebugDocumentRequest> debugDocuments() {
        return debugDocuments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Documents to fetch debug information for
     */
    public DebugDocumentsRequest withDebugDocuments(List<DebugDocumentRequest> debugDocuments) {
        Utils.checkNotNull(debugDocuments, "debugDocuments");
        this.debugDocuments = debugDocuments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugDocumentsRequest other = (DebugDocumentsRequest) o;
        return 
            Objects.deepEquals(this.debugDocuments, other.debugDocuments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            debugDocuments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugDocumentsRequest.class,
                "debugDocuments", debugDocuments);
    }
    
    public final static class Builder {
 
        private List<DebugDocumentRequest> debugDocuments;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Documents to fetch debug information for
         */
        public Builder debugDocuments(List<DebugDocumentRequest> debugDocuments) {
            Utils.checkNotNull(debugDocuments, "debugDocuments");
            this.debugDocuments = debugDocuments;
            return this;
        }
        
        public DebugDocumentsRequest build() {
            return new DebugDocumentsRequest(
                debugDocuments);
        }
    }
}
