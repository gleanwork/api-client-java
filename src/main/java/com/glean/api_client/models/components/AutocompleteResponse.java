/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AutocompleteResponse {

    /**
     * List of experiment ids for the corresponding request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experimentIds")
    private Optional<? extends List<Long>> experimentIds;

    /**
     * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    private Optional<? extends SessionInfo> sessionInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<AutocompleteResult>> results;

    /**
     * Subsections of the results list from which distinct sections should be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private Optional<? extends List<AutocompleteResultGroup>> groups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorInfo")
    private Optional<? extends GleanDataError> gleanDataError;

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backendTimeMillis")
    private Optional<Long> backendTimeMillis;

    @JsonCreator
    public AutocompleteResponse(
            @JsonProperty("experimentIds") Optional<? extends List<Long>> experimentIds,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("sessionInfo") Optional<? extends SessionInfo> sessionInfo,
            @JsonProperty("results") Optional<? extends List<AutocompleteResult>> results,
            @JsonProperty("groups") Optional<? extends List<AutocompleteResultGroup>> groups,
            @JsonProperty("errorInfo") Optional<? extends GleanDataError> gleanDataError,
            @JsonProperty("backendTimeMillis") Optional<Long> backendTimeMillis) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(gleanDataError, "gleanDataError");
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.experimentIds = experimentIds;
        this.trackingToken = trackingToken;
        this.sessionInfo = sessionInfo;
        this.results = results;
        this.groups = groups;
        this.gleanDataError = gleanDataError;
        this.backendTimeMillis = backendTimeMillis;
    }
    
    public AutocompleteResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> experimentIds() {
        return (Optional<List<Long>>) experimentIds;
    }

    /**
     * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SessionInfo> sessionInfo() {
        return (Optional<SessionInfo>) sessionInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AutocompleteResult>> results() {
        return (Optional<List<AutocompleteResult>>) results;
    }

    /**
     * Subsections of the results list from which distinct sections should be created.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AutocompleteResultGroup>> groups() {
        return (Optional<List<AutocompleteResultGroup>>) groups;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GleanDataError> gleanDataError() {
        return (Optional<GleanDataError>) gleanDataError;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonIgnore
    public Optional<Long> backendTimeMillis() {
        return backendTimeMillis;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of experiment ids for the corresponding request.
     */
    public AutocompleteResponse withExperimentIds(List<Long> experimentIds) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        this.experimentIds = Optional.ofNullable(experimentIds);
        return this;
    }

    /**
     * List of experiment ids for the corresponding request.
     */
    public AutocompleteResponse withExperimentIds(Optional<? extends List<Long>> experimentIds) {
        Utils.checkNotNull(experimentIds, "experimentIds");
        this.experimentIds = experimentIds;
        return this;
    }

    /**
     * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
     */
    public AutocompleteResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
     */
    public AutocompleteResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public AutocompleteResponse withSessionInfo(SessionInfo sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = Optional.ofNullable(sessionInfo);
        return this;
    }

    public AutocompleteResponse withSessionInfo(Optional<? extends SessionInfo> sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = sessionInfo;
        return this;
    }

    public AutocompleteResponse withResults(List<AutocompleteResult> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public AutocompleteResponse withResults(Optional<? extends List<AutocompleteResult>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    /**
     * Subsections of the results list from which distinct sections should be created.
     */
    public AutocompleteResponse withGroups(List<AutocompleteResultGroup> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = Optional.ofNullable(groups);
        return this;
    }

    /**
     * Subsections of the results list from which distinct sections should be created.
     */
    public AutocompleteResponse withGroups(Optional<? extends List<AutocompleteResultGroup>> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    public AutocompleteResponse withGleanDataError(GleanDataError gleanDataError) {
        Utils.checkNotNull(gleanDataError, "gleanDataError");
        this.gleanDataError = Optional.ofNullable(gleanDataError);
        return this;
    }

    public AutocompleteResponse withGleanDataError(Optional<? extends GleanDataError> gleanDataError) {
        Utils.checkNotNull(gleanDataError, "gleanDataError");
        this.gleanDataError = gleanDataError;
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public AutocompleteResponse withBackendTimeMillis(long backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public AutocompleteResponse withBackendTimeMillis(Optional<Long> backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = backendTimeMillis;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AutocompleteResponse other = (AutocompleteResponse) o;
        return 
            Objects.deepEquals(this.experimentIds, other.experimentIds) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.sessionInfo, other.sessionInfo) &&
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.groups, other.groups) &&
            Objects.deepEquals(this.gleanDataError, other.gleanDataError) &&
            Objects.deepEquals(this.backendTimeMillis, other.backendTimeMillis);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            experimentIds,
            trackingToken,
            sessionInfo,
            results,
            groups,
            gleanDataError,
            backendTimeMillis);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AutocompleteResponse.class,
                "experimentIds", experimentIds,
                "trackingToken", trackingToken,
                "sessionInfo", sessionInfo,
                "results", results,
                "groups", groups,
                "gleanDataError", gleanDataError,
                "backendTimeMillis", backendTimeMillis);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Long>> experimentIds = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends SessionInfo> sessionInfo = Optional.empty();
 
        private Optional<? extends List<AutocompleteResult>> results = Optional.empty();
 
        private Optional<? extends List<AutocompleteResultGroup>> groups = Optional.empty();
 
        private Optional<? extends GleanDataError> gleanDataError = Optional.empty();
 
        private Optional<Long> backendTimeMillis = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of experiment ids for the corresponding request.
         */
        public Builder experimentIds(List<Long> experimentIds) {
            Utils.checkNotNull(experimentIds, "experimentIds");
            this.experimentIds = Optional.ofNullable(experimentIds);
            return this;
        }

        /**
         * List of experiment ids for the corresponding request.
         */
        public Builder experimentIds(Optional<? extends List<Long>> experimentIds) {
            Utils.checkNotNull(experimentIds, "experimentIds");
            this.experimentIds = experimentIds;
            return this;
        }

        /**
         * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder sessionInfo(SessionInfo sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = Optional.ofNullable(sessionInfo);
            return this;
        }

        public Builder sessionInfo(Optional<? extends SessionInfo> sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = sessionInfo;
            return this;
        }

        public Builder results(List<AutocompleteResult> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<AutocompleteResult>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        /**
         * Subsections of the results list from which distinct sections should be created.
         */
        public Builder groups(List<AutocompleteResultGroup> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = Optional.ofNullable(groups);
            return this;
        }

        /**
         * Subsections of the results list from which distinct sections should be created.
         */
        public Builder groups(Optional<? extends List<AutocompleteResultGroup>> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }

        public Builder gleanDataError(GleanDataError gleanDataError) {
            Utils.checkNotNull(gleanDataError, "gleanDataError");
            this.gleanDataError = Optional.ofNullable(gleanDataError);
            return this;
        }

        public Builder gleanDataError(Optional<? extends GleanDataError> gleanDataError) {
            Utils.checkNotNull(gleanDataError, "gleanDataError");
            this.gleanDataError = gleanDataError;
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(long backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(Optional<Long> backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = backendTimeMillis;
            return this;
        }
        
        public AutocompleteResponse build() {
            return new AutocompleteResponse(
                experimentIds,
                trackingToken,
                sessionInfo,
                results,
                groups,
                gleanDataError,
                backendTimeMillis);
        }
    }
}
