/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.utils.LazySingletonValue;
import com.glean.api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * EmployeeInfoDefinition
 * 
 * <p>Describes employee info
 */
public class EmployeeInfoDefinition {

    /**
     * The employee's email
     */
    @JsonProperty("email")
    private String email;

    /**
     * The first name of the employee. **Note**: The value cannot be empty
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<String> firstName;

    /**
     * The last name of the employee. **Note**: The value cannot be empty
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<String> lastName;

    /**
     * The preferred name or nickname of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredName")
    private Optional<String> preferredName;

    /**
     * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The employee's phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    /**
     * The employee's location (city/office name etc).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    @Deprecated
    private Optional<String> location;

    /**
     * Detailed location with information about country, state, city etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredLocation")
    private Optional<? extends StructuredLocation> structuredLocation;

    /**
     * The employee's role title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The employee's profile pic
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    private Optional<String> photoUrl;

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessUnit")
    private Optional<String> businessUnit;

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonProperty("department")
    private String department;

    /**
     * The datasource profiles of the employee, e.g. `Slack`,`Github`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceProfiles")
    private Optional<? extends List<DatasourceProfile>> datasourceProfiles;

    /**
     * Info about the employee's team(s)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teams")
    private Optional<? extends List<EmployeeTeamInfo>> teams;

    /**
     * The date when the employee started
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<LocalDate> startDate;

    /**
     * If a former employee, the last date of employment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    private Optional<LocalDate> endDate;

    /**
     * Short biography or mission statement of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bio")
    private Optional<String> bio;

    /**
     * She/her, He/his or other pronoun.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pronoun")
    private Optional<String> pronoun;

    /**
     * Other names associated with the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alsoKnownAs")
    private Optional<? extends List<String>> alsoKnownAs;

    /**
     * Link to internal company person profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileUrl")
    private Optional<String> profileUrl;

    /**
     * List of social network profiles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("socialNetworks")
    private Optional<? extends List<SocialNetworkDefinition>> socialNetworks;

    /**
     * The email of the employee's manager
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managerEmail")
    private Optional<String> managerEmail;

    /**
     * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managerId")
    private Optional<String> managerId;

    /**
     * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationships")
    private Optional<? extends List<EntityRelationship>> relationships;

    /**
     * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * List of additional fields with more information about the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalFields")
    private Optional<? extends List<AdditionalFieldDefinition>> additionalFields;

    @JsonCreator
    public EmployeeInfoDefinition(
            @JsonProperty("email") String email,
            @JsonProperty("firstName") Optional<String> firstName,
            @JsonProperty("lastName") Optional<String> lastName,
            @JsonProperty("preferredName") Optional<String> preferredName,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("structuredLocation") Optional<? extends StructuredLocation> structuredLocation,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("photoUrl") Optional<String> photoUrl,
            @JsonProperty("businessUnit") Optional<String> businessUnit,
            @JsonProperty("department") String department,
            @JsonProperty("datasourceProfiles") Optional<? extends List<DatasourceProfile>> datasourceProfiles,
            @JsonProperty("teams") Optional<? extends List<EmployeeTeamInfo>> teams,
            @JsonProperty("startDate") Optional<LocalDate> startDate,
            @JsonProperty("endDate") Optional<LocalDate> endDate,
            @JsonProperty("bio") Optional<String> bio,
            @JsonProperty("pronoun") Optional<String> pronoun,
            @JsonProperty("alsoKnownAs") Optional<? extends List<String>> alsoKnownAs,
            @JsonProperty("profileUrl") Optional<String> profileUrl,
            @JsonProperty("socialNetworks") Optional<? extends List<SocialNetworkDefinition>> socialNetworks,
            @JsonProperty("managerEmail") Optional<String> managerEmail,
            @JsonProperty("managerId") Optional<String> managerId,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("relationships") Optional<? extends List<EntityRelationship>> relationships,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("additionalFields") Optional<? extends List<AdditionalFieldDefinition>> additionalFields) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(preferredName, "preferredName");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(structuredLocation, "structuredLocation");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(businessUnit, "businessUnit");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        Utils.checkNotNull(teams, "teams");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(bio, "bio");
        Utils.checkNotNull(pronoun, "pronoun");
        Utils.checkNotNull(alsoKnownAs, "alsoKnownAs");
        Utils.checkNotNull(profileUrl, "profileUrl");
        Utils.checkNotNull(socialNetworks, "socialNetworks");
        Utils.checkNotNull(managerEmail, "managerEmail");
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(relationships, "relationships");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(additionalFields, "additionalFields");
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.preferredName = preferredName;
        this.id = id;
        this.phoneNumber = phoneNumber;
        this.location = location;
        this.structuredLocation = structuredLocation;
        this.title = title;
        this.photoUrl = photoUrl;
        this.businessUnit = businessUnit;
        this.department = department;
        this.datasourceProfiles = datasourceProfiles;
        this.teams = teams;
        this.startDate = startDate;
        this.endDate = endDate;
        this.bio = bio;
        this.pronoun = pronoun;
        this.alsoKnownAs = alsoKnownAs;
        this.profileUrl = profileUrl;
        this.socialNetworks = socialNetworks;
        this.managerEmail = managerEmail;
        this.managerId = managerId;
        this.type = type;
        this.relationships = relationships;
        this.status = status;
        this.additionalFields = additionalFields;
    }
    
    public EmployeeInfoDefinition(
            String email,
            String department) {
        this(email, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), department, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The employee's email
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The first name of the employee. **Note**: The value cannot be empty
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the employee. **Note**: The value cannot be empty
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * The preferred name or nickname of the employee
     */
    @JsonIgnore
    public Optional<String> preferredName() {
        return preferredName;
    }

    /**
     * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The employee's phone number.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * The employee's location (city/office name etc).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    /**
     * Detailed location with information about country, state, city etc.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredLocation> structuredLocation() {
        return (Optional<StructuredLocation>) structuredLocation;
    }

    /**
     * The employee's role title.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The employee's profile pic
     */
    @JsonIgnore
    public Optional<String> photoUrl() {
        return photoUrl;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonIgnore
    public Optional<String> businessUnit() {
        return businessUnit;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonIgnore
    public String department() {
        return department;
    }

    /**
     * The datasource profiles of the employee, e.g. `Slack`,`Github`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DatasourceProfile>> datasourceProfiles() {
        return (Optional<List<DatasourceProfile>>) datasourceProfiles;
    }

    /**
     * Info about the employee's team(s)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EmployeeTeamInfo>> teams() {
        return (Optional<List<EmployeeTeamInfo>>) teams;
    }

    /**
     * The date when the employee started
     */
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return startDate;
    }

    /**
     * If a former employee, the last date of employment.
     */
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return endDate;
    }

    /**
     * Short biography or mission statement of the employee.
     */
    @JsonIgnore
    public Optional<String> bio() {
        return bio;
    }

    /**
     * She/her, He/his or other pronoun.
     */
    @JsonIgnore
    public Optional<String> pronoun() {
        return pronoun;
    }

    /**
     * Other names associated with the employee.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> alsoKnownAs() {
        return (Optional<List<String>>) alsoKnownAs;
    }

    /**
     * Link to internal company person profile.
     */
    @JsonIgnore
    public Optional<String> profileUrl() {
        return profileUrl;
    }

    /**
     * List of social network profiles.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialNetworkDefinition>> socialNetworks() {
        return (Optional<List<SocialNetworkDefinition>>) socialNetworks;
    }

    /**
     * The email of the employee's manager
     */
    @JsonIgnore
    public Optional<String> managerEmail() {
        return managerEmail;
    }

    /**
     * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
     */
    @JsonIgnore
    public Optional<String> managerId() {
        return managerId;
    }

    /**
     * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EntityRelationship>> relationships() {
        return (Optional<List<EntityRelationship>>) relationships;
    }

    /**
     * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * List of additional fields with more information about the employee.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AdditionalFieldDefinition>> additionalFields() {
        return (Optional<List<AdditionalFieldDefinition>>) additionalFields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The employee's email
     */
    public EmployeeInfoDefinition withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The first name of the employee. **Note**: The value cannot be empty
     */
    public EmployeeInfoDefinition withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The first name of the employee. **Note**: The value cannot be empty
     */
    public EmployeeInfoDefinition withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the employee. **Note**: The value cannot be empty
     */
    public EmployeeInfoDefinition withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The last name of the employee. **Note**: The value cannot be empty
     */
    public EmployeeInfoDefinition withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The preferred name or nickname of the employee
     */
    public EmployeeInfoDefinition withPreferredName(String preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = Optional.ofNullable(preferredName);
        return this;
    }

    /**
     * The preferred name or nickname of the employee
     */
    public EmployeeInfoDefinition withPreferredName(Optional<String> preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = preferredName;
        return this;
    }

    /**
     * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
     */
    public EmployeeInfoDefinition withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
     */
    public EmployeeInfoDefinition withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The employee's phone number.
     */
    public EmployeeInfoDefinition withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * The employee's phone number.
     */
    public EmployeeInfoDefinition withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The employee's location (city/office name etc).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EmployeeInfoDefinition withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    /**
     * The employee's location (city/office name etc).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EmployeeInfoDefinition withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * Detailed location with information about country, state, city etc.
     */
    public EmployeeInfoDefinition withStructuredLocation(StructuredLocation structuredLocation) {
        Utils.checkNotNull(structuredLocation, "structuredLocation");
        this.structuredLocation = Optional.ofNullable(structuredLocation);
        return this;
    }

    /**
     * Detailed location with information about country, state, city etc.
     */
    public EmployeeInfoDefinition withStructuredLocation(Optional<? extends StructuredLocation> structuredLocation) {
        Utils.checkNotNull(structuredLocation, "structuredLocation");
        this.structuredLocation = structuredLocation;
        return this;
    }

    /**
     * The employee's role title.
     */
    public EmployeeInfoDefinition withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The employee's role title.
     */
    public EmployeeInfoDefinition withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The employee's profile pic
     */
    public EmployeeInfoDefinition withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = Optional.ofNullable(photoUrl);
        return this;
    }

    /**
     * The employee's profile pic
     */
    public EmployeeInfoDefinition withPhotoUrl(Optional<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public EmployeeInfoDefinition withBusinessUnit(String businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = Optional.ofNullable(businessUnit);
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public EmployeeInfoDefinition withBusinessUnit(Optional<String> businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = businessUnit;
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public EmployeeInfoDefinition withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * The datasource profiles of the employee, e.g. `Slack`,`Github`.
     */
    public EmployeeInfoDefinition withDatasourceProfiles(List<DatasourceProfile> datasourceProfiles) {
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        this.datasourceProfiles = Optional.ofNullable(datasourceProfiles);
        return this;
    }

    /**
     * The datasource profiles of the employee, e.g. `Slack`,`Github`.
     */
    public EmployeeInfoDefinition withDatasourceProfiles(Optional<? extends List<DatasourceProfile>> datasourceProfiles) {
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        this.datasourceProfiles = datasourceProfiles;
        return this;
    }

    /**
     * Info about the employee's team(s)
     */
    public EmployeeInfoDefinition withTeams(List<EmployeeTeamInfo> teams) {
        Utils.checkNotNull(teams, "teams");
        this.teams = Optional.ofNullable(teams);
        return this;
    }

    /**
     * Info about the employee's team(s)
     */
    public EmployeeInfoDefinition withTeams(Optional<? extends List<EmployeeTeamInfo>> teams) {
        Utils.checkNotNull(teams, "teams");
        this.teams = teams;
        return this;
    }

    /**
     * The date when the employee started
     */
    public EmployeeInfoDefinition withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date when the employee started
     */
    public EmployeeInfoDefinition withStartDate(Optional<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * If a former employee, the last date of employment.
     */
    public EmployeeInfoDefinition withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * If a former employee, the last date of employment.
     */
    public EmployeeInfoDefinition withEndDate(Optional<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Short biography or mission statement of the employee.
     */
    public EmployeeInfoDefinition withBio(String bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = Optional.ofNullable(bio);
        return this;
    }

    /**
     * Short biography or mission statement of the employee.
     */
    public EmployeeInfoDefinition withBio(Optional<String> bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = bio;
        return this;
    }

    /**
     * She/her, He/his or other pronoun.
     */
    public EmployeeInfoDefinition withPronoun(String pronoun) {
        Utils.checkNotNull(pronoun, "pronoun");
        this.pronoun = Optional.ofNullable(pronoun);
        return this;
    }

    /**
     * She/her, He/his or other pronoun.
     */
    public EmployeeInfoDefinition withPronoun(Optional<String> pronoun) {
        Utils.checkNotNull(pronoun, "pronoun");
        this.pronoun = pronoun;
        return this;
    }

    /**
     * Other names associated with the employee.
     */
    public EmployeeInfoDefinition withAlsoKnownAs(List<String> alsoKnownAs) {
        Utils.checkNotNull(alsoKnownAs, "alsoKnownAs");
        this.alsoKnownAs = Optional.ofNullable(alsoKnownAs);
        return this;
    }

    /**
     * Other names associated with the employee.
     */
    public EmployeeInfoDefinition withAlsoKnownAs(Optional<? extends List<String>> alsoKnownAs) {
        Utils.checkNotNull(alsoKnownAs, "alsoKnownAs");
        this.alsoKnownAs = alsoKnownAs;
        return this;
    }

    /**
     * Link to internal company person profile.
     */
    public EmployeeInfoDefinition withProfileUrl(String profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = Optional.ofNullable(profileUrl);
        return this;
    }

    /**
     * Link to internal company person profile.
     */
    public EmployeeInfoDefinition withProfileUrl(Optional<String> profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = profileUrl;
        return this;
    }

    /**
     * List of social network profiles.
     */
    public EmployeeInfoDefinition withSocialNetworks(List<SocialNetworkDefinition> socialNetworks) {
        Utils.checkNotNull(socialNetworks, "socialNetworks");
        this.socialNetworks = Optional.ofNullable(socialNetworks);
        return this;
    }

    /**
     * List of social network profiles.
     */
    public EmployeeInfoDefinition withSocialNetworks(Optional<? extends List<SocialNetworkDefinition>> socialNetworks) {
        Utils.checkNotNull(socialNetworks, "socialNetworks");
        this.socialNetworks = socialNetworks;
        return this;
    }

    /**
     * The email of the employee's manager
     */
    public EmployeeInfoDefinition withManagerEmail(String managerEmail) {
        Utils.checkNotNull(managerEmail, "managerEmail");
        this.managerEmail = Optional.ofNullable(managerEmail);
        return this;
    }

    /**
     * The email of the employee's manager
     */
    public EmployeeInfoDefinition withManagerEmail(Optional<String> managerEmail) {
        Utils.checkNotNull(managerEmail, "managerEmail");
        this.managerEmail = managerEmail;
        return this;
    }

    /**
     * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
     */
    public EmployeeInfoDefinition withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = Optional.ofNullable(managerId);
        return this;
    }

    /**
     * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
     */
    public EmployeeInfoDefinition withManagerId(Optional<String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    /**
     * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
     */
    public EmployeeInfoDefinition withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
     */
    public EmployeeInfoDefinition withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
     */
    public EmployeeInfoDefinition withRelationships(List<EntityRelationship> relationships) {
        Utils.checkNotNull(relationships, "relationships");
        this.relationships = Optional.ofNullable(relationships);
        return this;
    }

    /**
     * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
     */
    public EmployeeInfoDefinition withRelationships(Optional<? extends List<EntityRelationship>> relationships) {
        Utils.checkNotNull(relationships, "relationships");
        this.relationships = relationships;
        return this;
    }

    /**
     * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
     */
    public EmployeeInfoDefinition withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
     */
    public EmployeeInfoDefinition withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * List of additional fields with more information about the employee.
     */
    public EmployeeInfoDefinition withAdditionalFields(List<AdditionalFieldDefinition> additionalFields) {
        Utils.checkNotNull(additionalFields, "additionalFields");
        this.additionalFields = Optional.ofNullable(additionalFields);
        return this;
    }

    /**
     * List of additional fields with more information about the employee.
     */
    public EmployeeInfoDefinition withAdditionalFields(Optional<? extends List<AdditionalFieldDefinition>> additionalFields) {
        Utils.checkNotNull(additionalFields, "additionalFields");
        this.additionalFields = additionalFields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeInfoDefinition other = (EmployeeInfoDefinition) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.preferredName, other.preferredName) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.structuredLocation, other.structuredLocation) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            Objects.deepEquals(this.businessUnit, other.businessUnit) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.datasourceProfiles, other.datasourceProfiles) &&
            Objects.deepEquals(this.teams, other.teams) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.bio, other.bio) &&
            Objects.deepEquals(this.pronoun, other.pronoun) &&
            Objects.deepEquals(this.alsoKnownAs, other.alsoKnownAs) &&
            Objects.deepEquals(this.profileUrl, other.profileUrl) &&
            Objects.deepEquals(this.socialNetworks, other.socialNetworks) &&
            Objects.deepEquals(this.managerEmail, other.managerEmail) &&
            Objects.deepEquals(this.managerId, other.managerId) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.relationships, other.relationships) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.additionalFields, other.additionalFields);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            firstName,
            lastName,
            preferredName,
            id,
            phoneNumber,
            location,
            structuredLocation,
            title,
            photoUrl,
            businessUnit,
            department,
            datasourceProfiles,
            teams,
            startDate,
            endDate,
            bio,
            pronoun,
            alsoKnownAs,
            profileUrl,
            socialNetworks,
            managerEmail,
            managerId,
            type,
            relationships,
            status,
            additionalFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeInfoDefinition.class,
                "email", email,
                "firstName", firstName,
                "lastName", lastName,
                "preferredName", preferredName,
                "id", id,
                "phoneNumber", phoneNumber,
                "location", location,
                "structuredLocation", structuredLocation,
                "title", title,
                "photoUrl", photoUrl,
                "businessUnit", businessUnit,
                "department", department,
                "datasourceProfiles", datasourceProfiles,
                "teams", teams,
                "startDate", startDate,
                "endDate", endDate,
                "bio", bio,
                "pronoun", pronoun,
                "alsoKnownAs", alsoKnownAs,
                "profileUrl", profileUrl,
                "socialNetworks", socialNetworks,
                "managerEmail", managerEmail,
                "managerId", managerId,
                "type", type,
                "relationships", relationships,
                "status", status,
                "additionalFields", additionalFields);
    }
    
    public final static class Builder {
 
        private String email;
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> preferredName = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        @Deprecated
        private Optional<String> location = Optional.empty();
 
        private Optional<? extends StructuredLocation> structuredLocation = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> photoUrl = Optional.empty();
 
        private Optional<String> businessUnit = Optional.empty();
 
        private String department;
 
        private Optional<? extends List<DatasourceProfile>> datasourceProfiles = Optional.empty();
 
        private Optional<? extends List<EmployeeTeamInfo>> teams = Optional.empty();
 
        private Optional<LocalDate> startDate = Optional.empty();
 
        private Optional<LocalDate> endDate = Optional.empty();
 
        private Optional<String> bio = Optional.empty();
 
        private Optional<String> pronoun = Optional.empty();
 
        private Optional<? extends List<String>> alsoKnownAs = Optional.empty();
 
        private Optional<String> profileUrl = Optional.empty();
 
        private Optional<? extends List<SocialNetworkDefinition>> socialNetworks = Optional.empty();
 
        private Optional<String> managerEmail = Optional.empty();
 
        private Optional<String> managerId = Optional.empty();
 
        private Optional<String> type;
 
        private Optional<? extends List<EntityRelationship>> relationships = Optional.empty();
 
        private Optional<String> status;
 
        private Optional<? extends List<AdditionalFieldDefinition>> additionalFields = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The employee's email
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The first name of the employee. **Note**: The value cannot be empty
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The first name of the employee. **Note**: The value cannot be empty
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the employee. **Note**: The value cannot be empty
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The last name of the employee. **Note**: The value cannot be empty
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The preferred name or nickname of the employee
         */
        public Builder preferredName(String preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = Optional.ofNullable(preferredName);
            return this;
        }

        /**
         * The preferred name or nickname of the employee
         */
        public Builder preferredName(Optional<String> preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = preferredName;
            return this;
        }

        /**
         * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The employee's phone number.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * The employee's phone number.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * The employee's location (city/office name etc).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        /**
         * The employee's location (city/office name etc).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        /**
         * Detailed location with information about country, state, city etc.
         */
        public Builder structuredLocation(StructuredLocation structuredLocation) {
            Utils.checkNotNull(structuredLocation, "structuredLocation");
            this.structuredLocation = Optional.ofNullable(structuredLocation);
            return this;
        }

        /**
         * Detailed location with information about country, state, city etc.
         */
        public Builder structuredLocation(Optional<? extends StructuredLocation> structuredLocation) {
            Utils.checkNotNull(structuredLocation, "structuredLocation");
            this.structuredLocation = structuredLocation;
            return this;
        }

        /**
         * The employee's role title.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The employee's role title.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The employee's profile pic
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = Optional.ofNullable(photoUrl);
            return this;
        }

        /**
         * The employee's profile pic
         */
        public Builder photoUrl(Optional<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(String businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = Optional.ofNullable(businessUnit);
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(Optional<String> businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = businessUnit;
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * The datasource profiles of the employee, e.g. `Slack`,`Github`.
         */
        public Builder datasourceProfiles(List<DatasourceProfile> datasourceProfiles) {
            Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
            this.datasourceProfiles = Optional.ofNullable(datasourceProfiles);
            return this;
        }

        /**
         * The datasource profiles of the employee, e.g. `Slack`,`Github`.
         */
        public Builder datasourceProfiles(Optional<? extends List<DatasourceProfile>> datasourceProfiles) {
            Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
            this.datasourceProfiles = datasourceProfiles;
            return this;
        }

        /**
         * Info about the employee's team(s)
         */
        public Builder teams(List<EmployeeTeamInfo> teams) {
            Utils.checkNotNull(teams, "teams");
            this.teams = Optional.ofNullable(teams);
            return this;
        }

        /**
         * Info about the employee's team(s)
         */
        public Builder teams(Optional<? extends List<EmployeeTeamInfo>> teams) {
            Utils.checkNotNull(teams, "teams");
            this.teams = teams;
            return this;
        }

        /**
         * The date when the employee started
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date when the employee started
         */
        public Builder startDate(Optional<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * If a former employee, the last date of employment.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * If a former employee, the last date of employment.
         */
        public Builder endDate(Optional<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Short biography or mission statement of the employee.
         */
        public Builder bio(String bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = Optional.ofNullable(bio);
            return this;
        }

        /**
         * Short biography or mission statement of the employee.
         */
        public Builder bio(Optional<String> bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = bio;
            return this;
        }

        /**
         * She/her, He/his or other pronoun.
         */
        public Builder pronoun(String pronoun) {
            Utils.checkNotNull(pronoun, "pronoun");
            this.pronoun = Optional.ofNullable(pronoun);
            return this;
        }

        /**
         * She/her, He/his or other pronoun.
         */
        public Builder pronoun(Optional<String> pronoun) {
            Utils.checkNotNull(pronoun, "pronoun");
            this.pronoun = pronoun;
            return this;
        }

        /**
         * Other names associated with the employee.
         */
        public Builder alsoKnownAs(List<String> alsoKnownAs) {
            Utils.checkNotNull(alsoKnownAs, "alsoKnownAs");
            this.alsoKnownAs = Optional.ofNullable(alsoKnownAs);
            return this;
        }

        /**
         * Other names associated with the employee.
         */
        public Builder alsoKnownAs(Optional<? extends List<String>> alsoKnownAs) {
            Utils.checkNotNull(alsoKnownAs, "alsoKnownAs");
            this.alsoKnownAs = alsoKnownAs;
            return this;
        }

        /**
         * Link to internal company person profile.
         */
        public Builder profileUrl(String profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = Optional.ofNullable(profileUrl);
            return this;
        }

        /**
         * Link to internal company person profile.
         */
        public Builder profileUrl(Optional<String> profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = profileUrl;
            return this;
        }

        /**
         * List of social network profiles.
         */
        public Builder socialNetworks(List<SocialNetworkDefinition> socialNetworks) {
            Utils.checkNotNull(socialNetworks, "socialNetworks");
            this.socialNetworks = Optional.ofNullable(socialNetworks);
            return this;
        }

        /**
         * List of social network profiles.
         */
        public Builder socialNetworks(Optional<? extends List<SocialNetworkDefinition>> socialNetworks) {
            Utils.checkNotNull(socialNetworks, "socialNetworks");
            this.socialNetworks = socialNetworks;
            return this;
        }

        /**
         * The email of the employee's manager
         */
        public Builder managerEmail(String managerEmail) {
            Utils.checkNotNull(managerEmail, "managerEmail");
            this.managerEmail = Optional.ofNullable(managerEmail);
            return this;
        }

        /**
         * The email of the employee's manager
         */
        public Builder managerEmail(Optional<String> managerEmail) {
            Utils.checkNotNull(managerEmail, "managerEmail");
            this.managerEmail = managerEmail;
            return this;
        }

        /**
         * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
         */
        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = Optional.ofNullable(managerId);
            return this;
        }

        /**
         * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
         */
        public Builder managerId(Optional<String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }

        /**
         * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
         */
        public Builder relationships(List<EntityRelationship> relationships) {
            Utils.checkNotNull(relationships, "relationships");
            this.relationships = Optional.ofNullable(relationships);
            return this;
        }

        /**
         * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
         */
        public Builder relationships(Optional<? extends List<EntityRelationship>> relationships) {
            Utils.checkNotNull(relationships, "relationships");
            this.relationships = relationships;
            return this;
        }

        /**
         * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * List of additional fields with more information about the employee.
         */
        public Builder additionalFields(List<AdditionalFieldDefinition> additionalFields) {
            Utils.checkNotNull(additionalFields, "additionalFields");
            this.additionalFields = Optional.ofNullable(additionalFields);
            return this;
        }

        /**
         * List of additional fields with more information about the employee.
         */
        public Builder additionalFields(Optional<? extends List<AdditionalFieldDefinition>> additionalFields) {
            Utils.checkNotNull(additionalFields, "additionalFields");
            this.additionalFields = additionalFields;
            return this;
        }
        
        public EmployeeInfoDefinition build() {
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }
            if (status == null) {
                status = _SINGLETON_VALUE_Status.value();
            }
            return new EmployeeInfoDefinition(
                email,
                firstName,
                lastName,
                preferredName,
                id,
                phoneNumber,
                location,
                structuredLocation,
                title,
                photoUrl,
                businessUnit,
                department,
                datasourceProfiles,
                teams,
                startDate,
                endDate,
                bio,
                pronoun,
                alsoKnownAs,
                profileUrl,
                socialNetworks,
                managerEmail,
                managerId,
                type,
                relationships,
                status,
                additionalFields);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"FULL_TIME\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Status =
                new LazySingletonValue<>(
                        "status",
                        "\"CURRENT\"",
                        new TypeReference<Optional<String>>() {});
    }
}
