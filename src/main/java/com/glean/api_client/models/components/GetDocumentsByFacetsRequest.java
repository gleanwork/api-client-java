/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetDocumentsByFacetsRequest {

    /**
     * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourcesFilter")
    private Optional<? extends List<String>> datasourcesFilter;

    /**
     * A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
     */
    @JsonProperty("filterSets")
    private List<FacetFilterSet> filterSets;

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    @JsonCreator
    public GetDocumentsByFacetsRequest(
            @JsonProperty("datasourcesFilter") Optional<? extends List<String>> datasourcesFilter,
            @JsonProperty("filterSets") List<FacetFilterSet> filterSets,
            @JsonProperty("cursor") Optional<String> cursor) {
        Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
        Utils.checkNotNull(filterSets, "filterSets");
        Utils.checkNotNull(cursor, "cursor");
        this.datasourcesFilter = datasourcesFilter;
        this.filterSets = filterSets;
        this.cursor = cursor;
    }
    
    public GetDocumentsByFacetsRequest(
            List<FacetFilterSet> filterSets) {
        this(Optional.empty(), filterSets, Optional.empty());
    }

    /**
     * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> datasourcesFilter() {
        return (Optional<List<String>>) datasourcesFilter;
    }

    /**
     * A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
     */
    @JsonIgnore
    public List<FacetFilterSet> filterSets() {
        return filterSets;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
     */
    public GetDocumentsByFacetsRequest withDatasourcesFilter(List<String> datasourcesFilter) {
        Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
        this.datasourcesFilter = Optional.ofNullable(datasourcesFilter);
        return this;
    }

    /**
     * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
     */
    public GetDocumentsByFacetsRequest withDatasourcesFilter(Optional<? extends List<String>> datasourcesFilter) {
        Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
        this.datasourcesFilter = datasourcesFilter;
        return this;
    }

    /**
     * A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
     */
    public GetDocumentsByFacetsRequest withFilterSets(List<FacetFilterSet> filterSets) {
        Utils.checkNotNull(filterSets, "filterSets");
        this.filterSets = filterSets;
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public GetDocumentsByFacetsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public GetDocumentsByFacetsRequest withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentsByFacetsRequest other = (GetDocumentsByFacetsRequest) o;
        return 
            Objects.deepEquals(this.datasourcesFilter, other.datasourcesFilter) &&
            Objects.deepEquals(this.filterSets, other.filterSets) &&
            Objects.deepEquals(this.cursor, other.cursor);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasourcesFilter,
            filterSets,
            cursor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentsByFacetsRequest.class,
                "datasourcesFilter", datasourcesFilter,
                "filterSets", filterSets,
                "cursor", cursor);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> datasourcesFilter = Optional.empty();
 
        private List<FacetFilterSet> filterSets;
 
        private Optional<String> cursor = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
         */
        public Builder datasourcesFilter(List<String> datasourcesFilter) {
            Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
            this.datasourcesFilter = Optional.ofNullable(datasourcesFilter);
            return this;
        }

        /**
         * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
         */
        public Builder datasourcesFilter(Optional<? extends List<String>> datasourcesFilter) {
            Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
            this.datasourcesFilter = datasourcesFilter;
            return this;
        }

        /**
         * A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
         */
        public Builder filterSets(List<FacetFilterSet> filterSets) {
            Utils.checkNotNull(filterSets, "filterSets");
            this.filterSets = filterSets;
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }
        
        public GetDocumentsByFacetsRequest build() {
            return new GetDocumentsByFacetsRequest(
                datasourcesFilter,
                filterSets,
                cursor);
        }
    }
}
