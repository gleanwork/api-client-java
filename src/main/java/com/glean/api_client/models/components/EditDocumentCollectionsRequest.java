/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class EditDocumentCollectionsRequest {

    /**
     * IDs of Collections to which a document is added.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedCollections")
    private Optional<? extends List<Long>> addedCollections;

    /**
     * IDs of Collections from which a document is removed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedCollections")
    private Optional<? extends List<Long>> removedCollections;

    /**
     * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentId")
    private Optional<String> documentId;

    /**
     * The URL of the item being added to or removed from Collections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * Custom title of the document if adding a non-indexed URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of this CollectionItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public EditDocumentCollectionsRequest(
            @JsonProperty("addedCollections") Optional<? extends List<Long>> addedCollections,
            @JsonProperty("removedCollections") Optional<? extends List<Long>> removedCollections,
            @JsonProperty("documentId") Optional<String> documentId,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(addedCollections, "addedCollections");
        Utils.checkNotNull(removedCollections, "removedCollections");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        this.addedCollections = addedCollections;
        this.removedCollections = removedCollections;
        this.documentId = documentId;
        this.url = url;
        this.name = name;
        this.description = description;
    }
    
    public EditDocumentCollectionsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * IDs of Collections to which a document is added.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> addedCollections() {
        return (Optional<List<Long>>) addedCollections;
    }

    /**
     * IDs of Collections from which a document is removed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> removedCollections() {
        return (Optional<List<Long>>) removedCollections;
    }

    /**
     * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
     */
    @JsonIgnore
    public Optional<String> documentId() {
        return documentId;
    }

    /**
     * The URL of the item being added to or removed from Collections.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * Custom title of the document if adding a non-indexed URL.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of this CollectionItem.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * IDs of Collections to which a document is added.
     */
    public EditDocumentCollectionsRequest withAddedCollections(List<Long> addedCollections) {
        Utils.checkNotNull(addedCollections, "addedCollections");
        this.addedCollections = Optional.ofNullable(addedCollections);
        return this;
    }

    /**
     * IDs of Collections to which a document is added.
     */
    public EditDocumentCollectionsRequest withAddedCollections(Optional<? extends List<Long>> addedCollections) {
        Utils.checkNotNull(addedCollections, "addedCollections");
        this.addedCollections = addedCollections;
        return this;
    }

    /**
     * IDs of Collections from which a document is removed.
     */
    public EditDocumentCollectionsRequest withRemovedCollections(List<Long> removedCollections) {
        Utils.checkNotNull(removedCollections, "removedCollections");
        this.removedCollections = Optional.ofNullable(removedCollections);
        return this;
    }

    /**
     * IDs of Collections from which a document is removed.
     */
    public EditDocumentCollectionsRequest withRemovedCollections(Optional<? extends List<Long>> removedCollections) {
        Utils.checkNotNull(removedCollections, "removedCollections");
        this.removedCollections = removedCollections;
        return this;
    }

    /**
     * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
     */
    public EditDocumentCollectionsRequest withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = Optional.ofNullable(documentId);
        return this;
    }

    /**
     * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
     */
    public EditDocumentCollectionsRequest withDocumentId(Optional<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The URL of the item being added to or removed from Collections.
     */
    public EditDocumentCollectionsRequest withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL of the item being added to or removed from Collections.
     */
    public EditDocumentCollectionsRequest withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Custom title of the document if adding a non-indexed URL.
     */
    public EditDocumentCollectionsRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Custom title of the document if adding a non-indexed URL.
     */
    public EditDocumentCollectionsRequest withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of this CollectionItem.
     */
    public EditDocumentCollectionsRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of this CollectionItem.
     */
    public EditDocumentCollectionsRequest withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditDocumentCollectionsRequest other = (EditDocumentCollectionsRequest) o;
        return 
            Objects.deepEquals(this.addedCollections, other.addedCollections) &&
            Objects.deepEquals(this.removedCollections, other.removedCollections) &&
            Objects.deepEquals(this.documentId, other.documentId) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addedCollections,
            removedCollections,
            documentId,
            url,
            name,
            description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EditDocumentCollectionsRequest.class,
                "addedCollections", addedCollections,
                "removedCollections", removedCollections,
                "documentId", documentId,
                "url", url,
                "name", name,
                "description", description);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Long>> addedCollections = Optional.empty();
 
        private Optional<? extends List<Long>> removedCollections = Optional.empty();
 
        private Optional<String> documentId = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> description = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IDs of Collections to which a document is added.
         */
        public Builder addedCollections(List<Long> addedCollections) {
            Utils.checkNotNull(addedCollections, "addedCollections");
            this.addedCollections = Optional.ofNullable(addedCollections);
            return this;
        }

        /**
         * IDs of Collections to which a document is added.
         */
        public Builder addedCollections(Optional<? extends List<Long>> addedCollections) {
            Utils.checkNotNull(addedCollections, "addedCollections");
            this.addedCollections = addedCollections;
            return this;
        }

        /**
         * IDs of Collections from which a document is removed.
         */
        public Builder removedCollections(List<Long> removedCollections) {
            Utils.checkNotNull(removedCollections, "removedCollections");
            this.removedCollections = Optional.ofNullable(removedCollections);
            return this;
        }

        /**
         * IDs of Collections from which a document is removed.
         */
        public Builder removedCollections(Optional<? extends List<Long>> removedCollections) {
            Utils.checkNotNull(removedCollections, "removedCollections");
            this.removedCollections = removedCollections;
            return this;
        }

        /**
         * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = Optional.ofNullable(documentId);
            return this;
        }

        /**
         * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
         */
        public Builder documentId(Optional<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        /**
         * The URL of the item being added to or removed from Collections.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL of the item being added to or removed from Collections.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Custom title of the document if adding a non-indexed URL.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Custom title of the document if adding a non-indexed URL.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of this CollectionItem.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of this CollectionItem.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }
        
        public EditDocumentCollectionsRequest build() {
            return new EditDocumentCollectionsRequest(
                addedCollections,
                removedCollections,
                documentId,
                url,
                name,
                description);
        }
    }
}
