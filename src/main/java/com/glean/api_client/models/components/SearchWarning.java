/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SearchWarning {

    /**
     * The type of the warning.
     */
    @JsonProperty("warningType")
    private WarningType warningType;

    /**
     * The last term we considered in the user's long query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUsedTerm")
    private Optional<String> lastUsedTerm;

    /**
     * The query after ignoring/removing quotes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotesIgnoredQuery")
    private Optional<String> quotesIgnoredQuery;

    /**
     * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoredTerms")
    private Optional<? extends List<String>> ignoredTerms;

    @JsonCreator
    public SearchWarning(
            @JsonProperty("warningType") WarningType warningType,
            @JsonProperty("lastUsedTerm") Optional<String> lastUsedTerm,
            @JsonProperty("quotesIgnoredQuery") Optional<String> quotesIgnoredQuery,
            @JsonProperty("ignoredTerms") Optional<? extends List<String>> ignoredTerms) {
        Utils.checkNotNull(warningType, "warningType");
        Utils.checkNotNull(lastUsedTerm, "lastUsedTerm");
        Utils.checkNotNull(quotesIgnoredQuery, "quotesIgnoredQuery");
        Utils.checkNotNull(ignoredTerms, "ignoredTerms");
        this.warningType = warningType;
        this.lastUsedTerm = lastUsedTerm;
        this.quotesIgnoredQuery = quotesIgnoredQuery;
        this.ignoredTerms = ignoredTerms;
    }
    
    public SearchWarning(
            WarningType warningType) {
        this(warningType, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of the warning.
     */
    @JsonIgnore
    public WarningType warningType() {
        return warningType;
    }

    /**
     * The last term we considered in the user's long query.
     */
    @JsonIgnore
    public Optional<String> lastUsedTerm() {
        return lastUsedTerm;
    }

    /**
     * The query after ignoring/removing quotes.
     */
    @JsonIgnore
    public Optional<String> quotesIgnoredQuery() {
        return quotesIgnoredQuery;
    }

    /**
     * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> ignoredTerms() {
        return (Optional<List<String>>) ignoredTerms;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of the warning.
     */
    public SearchWarning withWarningType(WarningType warningType) {
        Utils.checkNotNull(warningType, "warningType");
        this.warningType = warningType;
        return this;
    }

    /**
     * The last term we considered in the user's long query.
     */
    public SearchWarning withLastUsedTerm(String lastUsedTerm) {
        Utils.checkNotNull(lastUsedTerm, "lastUsedTerm");
        this.lastUsedTerm = Optional.ofNullable(lastUsedTerm);
        return this;
    }

    /**
     * The last term we considered in the user's long query.
     */
    public SearchWarning withLastUsedTerm(Optional<String> lastUsedTerm) {
        Utils.checkNotNull(lastUsedTerm, "lastUsedTerm");
        this.lastUsedTerm = lastUsedTerm;
        return this;
    }

    /**
     * The query after ignoring/removing quotes.
     */
    public SearchWarning withQuotesIgnoredQuery(String quotesIgnoredQuery) {
        Utils.checkNotNull(quotesIgnoredQuery, "quotesIgnoredQuery");
        this.quotesIgnoredQuery = Optional.ofNullable(quotesIgnoredQuery);
        return this;
    }

    /**
     * The query after ignoring/removing quotes.
     */
    public SearchWarning withQuotesIgnoredQuery(Optional<String> quotesIgnoredQuery) {
        Utils.checkNotNull(quotesIgnoredQuery, "quotesIgnoredQuery");
        this.quotesIgnoredQuery = quotesIgnoredQuery;
        return this;
    }

    /**
     * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
     */
    public SearchWarning withIgnoredTerms(List<String> ignoredTerms) {
        Utils.checkNotNull(ignoredTerms, "ignoredTerms");
        this.ignoredTerms = Optional.ofNullable(ignoredTerms);
        return this;
    }

    /**
     * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
     */
    public SearchWarning withIgnoredTerms(Optional<? extends List<String>> ignoredTerms) {
        Utils.checkNotNull(ignoredTerms, "ignoredTerms");
        this.ignoredTerms = ignoredTerms;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchWarning other = (SearchWarning) o;
        return 
            Objects.deepEquals(this.warningType, other.warningType) &&
            Objects.deepEquals(this.lastUsedTerm, other.lastUsedTerm) &&
            Objects.deepEquals(this.quotesIgnoredQuery, other.quotesIgnoredQuery) &&
            Objects.deepEquals(this.ignoredTerms, other.ignoredTerms);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            warningType,
            lastUsedTerm,
            quotesIgnoredQuery,
            ignoredTerms);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchWarning.class,
                "warningType", warningType,
                "lastUsedTerm", lastUsedTerm,
                "quotesIgnoredQuery", quotesIgnoredQuery,
                "ignoredTerms", ignoredTerms);
    }
    
    public final static class Builder {
 
        private WarningType warningType;
 
        private Optional<String> lastUsedTerm = Optional.empty();
 
        private Optional<String> quotesIgnoredQuery = Optional.empty();
 
        private Optional<? extends List<String>> ignoredTerms = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of the warning.
         */
        public Builder warningType(WarningType warningType) {
            Utils.checkNotNull(warningType, "warningType");
            this.warningType = warningType;
            return this;
        }

        /**
         * The last term we considered in the user's long query.
         */
        public Builder lastUsedTerm(String lastUsedTerm) {
            Utils.checkNotNull(lastUsedTerm, "lastUsedTerm");
            this.lastUsedTerm = Optional.ofNullable(lastUsedTerm);
            return this;
        }

        /**
         * The last term we considered in the user's long query.
         */
        public Builder lastUsedTerm(Optional<String> lastUsedTerm) {
            Utils.checkNotNull(lastUsedTerm, "lastUsedTerm");
            this.lastUsedTerm = lastUsedTerm;
            return this;
        }

        /**
         * The query after ignoring/removing quotes.
         */
        public Builder quotesIgnoredQuery(String quotesIgnoredQuery) {
            Utils.checkNotNull(quotesIgnoredQuery, "quotesIgnoredQuery");
            this.quotesIgnoredQuery = Optional.ofNullable(quotesIgnoredQuery);
            return this;
        }

        /**
         * The query after ignoring/removing quotes.
         */
        public Builder quotesIgnoredQuery(Optional<String> quotesIgnoredQuery) {
            Utils.checkNotNull(quotesIgnoredQuery, "quotesIgnoredQuery");
            this.quotesIgnoredQuery = quotesIgnoredQuery;
            return this;
        }

        /**
         * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
         */
        public Builder ignoredTerms(List<String> ignoredTerms) {
            Utils.checkNotNull(ignoredTerms, "ignoredTerms");
            this.ignoredTerms = Optional.ofNullable(ignoredTerms);
            return this;
        }

        /**
         * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
         */
        public Builder ignoredTerms(Optional<? extends List<String>> ignoredTerms) {
            Utils.checkNotNull(ignoredTerms, "ignoredTerms");
            this.ignoredTerms = ignoredTerms;
            return this;
        }
        
        public SearchWarning build() {
            return new SearchWarning(
                warningType,
                lastUsedTerm,
                quotesIgnoredQuery,
                ignoredTerms);
        }
    }
}
