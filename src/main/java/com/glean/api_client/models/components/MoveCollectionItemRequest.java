/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class MoveCollectionItemRequest {

    /**
     * The ID of the Collection to move items in.
     */
    @JsonProperty("collectionId")
    private long collectionId;

    /**
     * The item ID of the item being moved.
     */
    @JsonProperty("itemId")
    private String itemId;

    /**
     * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newNextItemId")
    private Optional<String> newNextItemId;

    @JsonCreator
    public MoveCollectionItemRequest(
            @JsonProperty("collectionId") long collectionId,
            @JsonProperty("itemId") String itemId,
            @JsonProperty("newNextItemId") Optional<String> newNextItemId) {
        Utils.checkNotNull(collectionId, "collectionId");
        Utils.checkNotNull(itemId, "itemId");
        Utils.checkNotNull(newNextItemId, "newNextItemId");
        this.collectionId = collectionId;
        this.itemId = itemId;
        this.newNextItemId = newNextItemId;
    }
    
    public MoveCollectionItemRequest(
            long collectionId,
            String itemId) {
        this(collectionId, itemId, Optional.empty());
    }

    /**
     * The ID of the Collection to move items in.
     */
    @JsonIgnore
    public long collectionId() {
        return collectionId;
    }

    /**
     * The item ID of the item being moved.
     */
    @JsonIgnore
    public String itemId() {
        return itemId;
    }

    /**
     * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
     */
    @JsonIgnore
    public Optional<String> newNextItemId() {
        return newNextItemId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the Collection to move items in.
     */
    public MoveCollectionItemRequest withCollectionId(long collectionId) {
        Utils.checkNotNull(collectionId, "collectionId");
        this.collectionId = collectionId;
        return this;
    }

    /**
     * The item ID of the item being moved.
     */
    public MoveCollectionItemRequest withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    /**
     * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
     */
    public MoveCollectionItemRequest withNewNextItemId(String newNextItemId) {
        Utils.checkNotNull(newNextItemId, "newNextItemId");
        this.newNextItemId = Optional.ofNullable(newNextItemId);
        return this;
    }

    /**
     * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
     */
    public MoveCollectionItemRequest withNewNextItemId(Optional<String> newNextItemId) {
        Utils.checkNotNull(newNextItemId, "newNextItemId");
        this.newNextItemId = newNextItemId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MoveCollectionItemRequest other = (MoveCollectionItemRequest) o;
        return 
            Objects.deepEquals(this.collectionId, other.collectionId) &&
            Objects.deepEquals(this.itemId, other.itemId) &&
            Objects.deepEquals(this.newNextItemId, other.newNextItemId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            collectionId,
            itemId,
            newNextItemId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MoveCollectionItemRequest.class,
                "collectionId", collectionId,
                "itemId", itemId,
                "newNextItemId", newNextItemId);
    }
    
    public final static class Builder {
 
        private Long collectionId;
 
        private String itemId;
 
        private Optional<String> newNextItemId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the Collection to move items in.
         */
        public Builder collectionId(long collectionId) {
            Utils.checkNotNull(collectionId, "collectionId");
            this.collectionId = collectionId;
            return this;
        }

        /**
         * The item ID of the item being moved.
         */
        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }

        /**
         * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
         */
        public Builder newNextItemId(String newNextItemId) {
            Utils.checkNotNull(newNextItemId, "newNextItemId");
            this.newNextItemId = Optional.ofNullable(newNextItemId);
            return this;
        }

        /**
         * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
         */
        public Builder newNextItemId(Optional<String> newNextItemId) {
            Utils.checkNotNull(newNextItemId, "newNextItemId");
            this.newNextItemId = newNextItemId;
            return this;
        }
        
        public MoveCollectionItemRequest build() {
            return new MoveCollectionItemRequest(
                collectionId,
                itemId,
                newNextItemId);
        }
    }
}
