/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetChatResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatResult")
    private Optional<? extends ChatResult> chatResult;

    @JsonCreator
    public GetChatResponse(
            @JsonProperty("chatResult") Optional<? extends ChatResult> chatResult) {
        Utils.checkNotNull(chatResult, "chatResult");
        this.chatResult = chatResult;
    }
    
    public GetChatResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatResult> chatResult() {
        return (Optional<ChatResult>) chatResult;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetChatResponse withChatResult(ChatResult chatResult) {
        Utils.checkNotNull(chatResult, "chatResult");
        this.chatResult = Optional.ofNullable(chatResult);
        return this;
    }

    public GetChatResponse withChatResult(Optional<? extends ChatResult> chatResult) {
        Utils.checkNotNull(chatResult, "chatResult");
        this.chatResult = chatResult;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChatResponse other = (GetChatResponse) o;
        return 
            Objects.deepEquals(this.chatResult, other.chatResult);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            chatResult);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChatResponse.class,
                "chatResult", chatResult);
    }
    
    public final static class Builder {
 
        private Optional<? extends ChatResult> chatResult = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder chatResult(ChatResult chatResult) {
            Utils.checkNotNull(chatResult, "chatResult");
            this.chatResult = Optional.ofNullable(chatResult);
            return this;
        }

        public Builder chatResult(Optional<? extends ChatResult> chatResult) {
            Utils.checkNotNull(chatResult, "chatResult");
            this.chatResult = chatResult;
            return this;
        }
        
        public GetChatResponse build() {
            return new GetChatResponse(
                chatResult);
        }
    }
}
