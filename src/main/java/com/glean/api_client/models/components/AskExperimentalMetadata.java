/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class AskExperimentalMetadata {

    /**
     * Whether or not the query (i.e. the slack message) has a mention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QueryHasMentions")
    private Optional<Boolean> queryHasMentions;

    /**
     * Whether or not the query (i.e. the slack message) is length appropriate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QueryIsLengthAppropriate")
    private Optional<Boolean> queryIsLengthAppropriate;

    /**
     * Whether or not the query (i.e. the slack message) has a question term.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QueryIsAnswerable")
    private Optional<Boolean> queryIsAnswerable;

    @JsonCreator
    public AskExperimentalMetadata(
            @JsonProperty("QueryHasMentions") Optional<Boolean> queryHasMentions,
            @JsonProperty("QueryIsLengthAppropriate") Optional<Boolean> queryIsLengthAppropriate,
            @JsonProperty("QueryIsAnswerable") Optional<Boolean> queryIsAnswerable) {
        Utils.checkNotNull(queryHasMentions, "queryHasMentions");
        Utils.checkNotNull(queryIsLengthAppropriate, "queryIsLengthAppropriate");
        Utils.checkNotNull(queryIsAnswerable, "queryIsAnswerable");
        this.queryHasMentions = queryHasMentions;
        this.queryIsLengthAppropriate = queryIsLengthAppropriate;
        this.queryIsAnswerable = queryIsAnswerable;
    }
    
    public AskExperimentalMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether or not the query (i.e. the slack message) has a mention.
     */
    @JsonIgnore
    public Optional<Boolean> queryHasMentions() {
        return queryHasMentions;
    }

    /**
     * Whether or not the query (i.e. the slack message) is length appropriate.
     */
    @JsonIgnore
    public Optional<Boolean> queryIsLengthAppropriate() {
        return queryIsLengthAppropriate;
    }

    /**
     * Whether or not the query (i.e. the slack message) has a question term.
     */
    @JsonIgnore
    public Optional<Boolean> queryIsAnswerable() {
        return queryIsAnswerable;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether or not the query (i.e. the slack message) has a mention.
     */
    public AskExperimentalMetadata withQueryHasMentions(boolean queryHasMentions) {
        Utils.checkNotNull(queryHasMentions, "queryHasMentions");
        this.queryHasMentions = Optional.ofNullable(queryHasMentions);
        return this;
    }

    /**
     * Whether or not the query (i.e. the slack message) has a mention.
     */
    public AskExperimentalMetadata withQueryHasMentions(Optional<Boolean> queryHasMentions) {
        Utils.checkNotNull(queryHasMentions, "queryHasMentions");
        this.queryHasMentions = queryHasMentions;
        return this;
    }

    /**
     * Whether or not the query (i.e. the slack message) is length appropriate.
     */
    public AskExperimentalMetadata withQueryIsLengthAppropriate(boolean queryIsLengthAppropriate) {
        Utils.checkNotNull(queryIsLengthAppropriate, "queryIsLengthAppropriate");
        this.queryIsLengthAppropriate = Optional.ofNullable(queryIsLengthAppropriate);
        return this;
    }

    /**
     * Whether or not the query (i.e. the slack message) is length appropriate.
     */
    public AskExperimentalMetadata withQueryIsLengthAppropriate(Optional<Boolean> queryIsLengthAppropriate) {
        Utils.checkNotNull(queryIsLengthAppropriate, "queryIsLengthAppropriate");
        this.queryIsLengthAppropriate = queryIsLengthAppropriate;
        return this;
    }

    /**
     * Whether or not the query (i.e. the slack message) has a question term.
     */
    public AskExperimentalMetadata withQueryIsAnswerable(boolean queryIsAnswerable) {
        Utils.checkNotNull(queryIsAnswerable, "queryIsAnswerable");
        this.queryIsAnswerable = Optional.ofNullable(queryIsAnswerable);
        return this;
    }

    /**
     * Whether or not the query (i.e. the slack message) has a question term.
     */
    public AskExperimentalMetadata withQueryIsAnswerable(Optional<Boolean> queryIsAnswerable) {
        Utils.checkNotNull(queryIsAnswerable, "queryIsAnswerable");
        this.queryIsAnswerable = queryIsAnswerable;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AskExperimentalMetadata other = (AskExperimentalMetadata) o;
        return 
            Objects.deepEquals(this.queryHasMentions, other.queryHasMentions) &&
            Objects.deepEquals(this.queryIsLengthAppropriate, other.queryIsLengthAppropriate) &&
            Objects.deepEquals(this.queryIsAnswerable, other.queryIsAnswerable);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            queryHasMentions,
            queryIsLengthAppropriate,
            queryIsAnswerable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AskExperimentalMetadata.class,
                "queryHasMentions", queryHasMentions,
                "queryIsLengthAppropriate", queryIsLengthAppropriate,
                "queryIsAnswerable", queryIsAnswerable);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> queryHasMentions = Optional.empty();
 
        private Optional<Boolean> queryIsLengthAppropriate = Optional.empty();
 
        private Optional<Boolean> queryIsAnswerable = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not the query (i.e. the slack message) has a mention.
         */
        public Builder queryHasMentions(boolean queryHasMentions) {
            Utils.checkNotNull(queryHasMentions, "queryHasMentions");
            this.queryHasMentions = Optional.ofNullable(queryHasMentions);
            return this;
        }

        /**
         * Whether or not the query (i.e. the slack message) has a mention.
         */
        public Builder queryHasMentions(Optional<Boolean> queryHasMentions) {
            Utils.checkNotNull(queryHasMentions, "queryHasMentions");
            this.queryHasMentions = queryHasMentions;
            return this;
        }

        /**
         * Whether or not the query (i.e. the slack message) is length appropriate.
         */
        public Builder queryIsLengthAppropriate(boolean queryIsLengthAppropriate) {
            Utils.checkNotNull(queryIsLengthAppropriate, "queryIsLengthAppropriate");
            this.queryIsLengthAppropriate = Optional.ofNullable(queryIsLengthAppropriate);
            return this;
        }

        /**
         * Whether or not the query (i.e. the slack message) is length appropriate.
         */
        public Builder queryIsLengthAppropriate(Optional<Boolean> queryIsLengthAppropriate) {
            Utils.checkNotNull(queryIsLengthAppropriate, "queryIsLengthAppropriate");
            this.queryIsLengthAppropriate = queryIsLengthAppropriate;
            return this;
        }

        /**
         * Whether or not the query (i.e. the slack message) has a question term.
         */
        public Builder queryIsAnswerable(boolean queryIsAnswerable) {
            Utils.checkNotNull(queryIsAnswerable, "queryIsAnswerable");
            this.queryIsAnswerable = Optional.ofNullable(queryIsAnswerable);
            return this;
        }

        /**
         * Whether or not the query (i.e. the slack message) has a question term.
         */
        public Builder queryIsAnswerable(Optional<Boolean> queryIsAnswerable) {
            Utils.checkNotNull(queryIsAnswerable, "queryIsAnswerable");
            this.queryIsAnswerable = queryIsAnswerable;
            return this;
        }
        
        public AskExperimentalMetadata build() {
            return new AskExperimentalMetadata(
                queryHasMentions,
                queryIsLengthAppropriate,
                queryIsAnswerable);
        }
    }
}
