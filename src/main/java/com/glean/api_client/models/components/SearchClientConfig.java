/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * SearchClientConfig
 * 
 * <p>Configuration settings related to Search
 */
public class SearchClientConfig {

    /**
     * Whether search is available or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private Optional<Boolean> available;

    /**
     * Custom autocomplete box placeholder to replace rotating prompts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placeholder")
    private Optional<String> placeholder;

    @JsonCreator
    public SearchClientConfig(
            @JsonProperty("available") Optional<Boolean> available,
            @JsonProperty("placeholder") Optional<String> placeholder) {
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(placeholder, "placeholder");
        this.available = available;
        this.placeholder = placeholder;
    }
    
    public SearchClientConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether search is available or not.
     */
    @JsonIgnore
    public Optional<Boolean> available() {
        return available;
    }

    /**
     * Custom autocomplete box placeholder to replace rotating prompts
     */
    @JsonIgnore
    public Optional<String> placeholder() {
        return placeholder;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether search is available or not.
     */
    public SearchClientConfig withAvailable(boolean available) {
        Utils.checkNotNull(available, "available");
        this.available = Optional.ofNullable(available);
        return this;
    }

    /**
     * Whether search is available or not.
     */
    public SearchClientConfig withAvailable(Optional<Boolean> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    /**
     * Custom autocomplete box placeholder to replace rotating prompts
     */
    public SearchClientConfig withPlaceholder(String placeholder) {
        Utils.checkNotNull(placeholder, "placeholder");
        this.placeholder = Optional.ofNullable(placeholder);
        return this;
    }

    /**
     * Custom autocomplete box placeholder to replace rotating prompts
     */
    public SearchClientConfig withPlaceholder(Optional<String> placeholder) {
        Utils.checkNotNull(placeholder, "placeholder");
        this.placeholder = placeholder;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchClientConfig other = (SearchClientConfig) o;
        return 
            Objects.deepEquals(this.available, other.available) &&
            Objects.deepEquals(this.placeholder, other.placeholder);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            available,
            placeholder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchClientConfig.class,
                "available", available,
                "placeholder", placeholder);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> available = Optional.empty();
 
        private Optional<String> placeholder = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether search is available or not.
         */
        public Builder available(boolean available) {
            Utils.checkNotNull(available, "available");
            this.available = Optional.ofNullable(available);
            return this;
        }

        /**
         * Whether search is available or not.
         */
        public Builder available(Optional<Boolean> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        /**
         * Custom autocomplete box placeholder to replace rotating prompts
         */
        public Builder placeholder(String placeholder) {
            Utils.checkNotNull(placeholder, "placeholder");
            this.placeholder = Optional.ofNullable(placeholder);
            return this;
        }

        /**
         * Custom autocomplete box placeholder to replace rotating prompts
         */
        public Builder placeholder(Optional<String> placeholder) {
            Utils.checkNotNull(placeholder, "placeholder");
            this.placeholder = placeholder;
            return this;
        }
        
        public SearchClientConfig build() {
            return new SearchClientConfig(
                available,
                placeholder);
        }
    }
}
