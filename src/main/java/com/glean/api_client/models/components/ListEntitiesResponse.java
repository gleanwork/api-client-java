/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListEntitiesResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<Person>> results;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teamResults")
    private Optional<? extends List<Team>> teamResults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customEntityResults")
    private Optional<? extends List<CustomEntity>> customEntityResults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetResults")
    private Optional<? extends List<FacetResult>> facetResults;

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    /**
     * The total number of entities available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalCount")
    private Optional<Long> totalCount;

    /**
     * Whether or not more entities can be fetched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasMoreResults")
    private Optional<Boolean> hasMoreResults;

    /**
     * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOptions")
    private Optional<? extends List<EntitiesSortOrder>> sortOptions;

    /**
     * list of Person attributes that are custom setup by deployment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFacetNames")
    private Optional<? extends List<String>> customFacetNames;

    @JsonCreator
    public ListEntitiesResponse(
            @JsonProperty("results") Optional<? extends List<Person>> results,
            @JsonProperty("teamResults") Optional<? extends List<Team>> teamResults,
            @JsonProperty("customEntityResults") Optional<? extends List<CustomEntity>> customEntityResults,
            @JsonProperty("facetResults") Optional<? extends List<FacetResult>> facetResults,
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("totalCount") Optional<Long> totalCount,
            @JsonProperty("hasMoreResults") Optional<Boolean> hasMoreResults,
            @JsonProperty("sortOptions") Optional<? extends List<EntitiesSortOrder>> sortOptions,
            @JsonProperty("customFacetNames") Optional<? extends List<String>> customFacetNames) {
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(teamResults, "teamResults");
        Utils.checkNotNull(customEntityResults, "customEntityResults");
        Utils.checkNotNull(facetResults, "facetResults");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(totalCount, "totalCount");
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        Utils.checkNotNull(sortOptions, "sortOptions");
        Utils.checkNotNull(customFacetNames, "customFacetNames");
        this.results = results;
        this.teamResults = teamResults;
        this.customEntityResults = customEntityResults;
        this.facetResults = facetResults;
        this.cursor = cursor;
        this.totalCount = totalCount;
        this.hasMoreResults = hasMoreResults;
        this.sortOptions = sortOptions;
        this.customFacetNames = customFacetNames;
    }
    
    public ListEntitiesResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> results() {
        return (Optional<List<Person>>) results;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Team>> teamResults() {
        return (Optional<List<Team>>) teamResults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomEntity>> customEntityResults() {
        return (Optional<List<CustomEntity>>) customEntityResults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetResult>> facetResults() {
        return (Optional<List<FacetResult>>) facetResults;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * The total number of entities available
     */
    @JsonIgnore
    public Optional<Long> totalCount() {
        return totalCount;
    }

    /**
     * Whether or not more entities can be fetched.
     */
    @JsonIgnore
    public Optional<Boolean> hasMoreResults() {
        return hasMoreResults;
    }

    /**
     * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EntitiesSortOrder>> sortOptions() {
        return (Optional<List<EntitiesSortOrder>>) sortOptions;
    }

    /**
     * list of Person attributes that are custom setup by deployment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> customFacetNames() {
        return (Optional<List<String>>) customFacetNames;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListEntitiesResponse withResults(List<Person> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public ListEntitiesResponse withResults(Optional<? extends List<Person>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    public ListEntitiesResponse withTeamResults(List<Team> teamResults) {
        Utils.checkNotNull(teamResults, "teamResults");
        this.teamResults = Optional.ofNullable(teamResults);
        return this;
    }

    public ListEntitiesResponse withTeamResults(Optional<? extends List<Team>> teamResults) {
        Utils.checkNotNull(teamResults, "teamResults");
        this.teamResults = teamResults;
        return this;
    }

    public ListEntitiesResponse withCustomEntityResults(List<CustomEntity> customEntityResults) {
        Utils.checkNotNull(customEntityResults, "customEntityResults");
        this.customEntityResults = Optional.ofNullable(customEntityResults);
        return this;
    }

    public ListEntitiesResponse withCustomEntityResults(Optional<? extends List<CustomEntity>> customEntityResults) {
        Utils.checkNotNull(customEntityResults, "customEntityResults");
        this.customEntityResults = customEntityResults;
        return this;
    }

    public ListEntitiesResponse withFacetResults(List<FacetResult> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = Optional.ofNullable(facetResults);
        return this;
    }

    public ListEntitiesResponse withFacetResults(Optional<? extends List<FacetResult>> facetResults) {
        Utils.checkNotNull(facetResults, "facetResults");
        this.facetResults = facetResults;
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public ListEntitiesResponse withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public ListEntitiesResponse withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The total number of entities available
     */
    public ListEntitiesResponse withTotalCount(long totalCount) {
        Utils.checkNotNull(totalCount, "totalCount");
        this.totalCount = Optional.ofNullable(totalCount);
        return this;
    }

    /**
     * The total number of entities available
     */
    public ListEntitiesResponse withTotalCount(Optional<Long> totalCount) {
        Utils.checkNotNull(totalCount, "totalCount");
        this.totalCount = totalCount;
        return this;
    }

    /**
     * Whether or not more entities can be fetched.
     */
    public ListEntitiesResponse withHasMoreResults(boolean hasMoreResults) {
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.hasMoreResults = Optional.ofNullable(hasMoreResults);
        return this;
    }

    /**
     * Whether or not more entities can be fetched.
     */
    public ListEntitiesResponse withHasMoreResults(Optional<Boolean> hasMoreResults) {
        Utils.checkNotNull(hasMoreResults, "hasMoreResults");
        this.hasMoreResults = hasMoreResults;
        return this;
    }

    /**
     * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
     */
    public ListEntitiesResponse withSortOptions(List<EntitiesSortOrder> sortOptions) {
        Utils.checkNotNull(sortOptions, "sortOptions");
        this.sortOptions = Optional.ofNullable(sortOptions);
        return this;
    }

    /**
     * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
     */
    public ListEntitiesResponse withSortOptions(Optional<? extends List<EntitiesSortOrder>> sortOptions) {
        Utils.checkNotNull(sortOptions, "sortOptions");
        this.sortOptions = sortOptions;
        return this;
    }

    /**
     * list of Person attributes that are custom setup by deployment
     */
    public ListEntitiesResponse withCustomFacetNames(List<String> customFacetNames) {
        Utils.checkNotNull(customFacetNames, "customFacetNames");
        this.customFacetNames = Optional.ofNullable(customFacetNames);
        return this;
    }

    /**
     * list of Person attributes that are custom setup by deployment
     */
    public ListEntitiesResponse withCustomFacetNames(Optional<? extends List<String>> customFacetNames) {
        Utils.checkNotNull(customFacetNames, "customFacetNames");
        this.customFacetNames = customFacetNames;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListEntitiesResponse other = (ListEntitiesResponse) o;
        return 
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.teamResults, other.teamResults) &&
            Objects.deepEquals(this.customEntityResults, other.customEntityResults) &&
            Objects.deepEquals(this.facetResults, other.facetResults) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.totalCount, other.totalCount) &&
            Objects.deepEquals(this.hasMoreResults, other.hasMoreResults) &&
            Objects.deepEquals(this.sortOptions, other.sortOptions) &&
            Objects.deepEquals(this.customFacetNames, other.customFacetNames);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            results,
            teamResults,
            customEntityResults,
            facetResults,
            cursor,
            totalCount,
            hasMoreResults,
            sortOptions,
            customFacetNames);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListEntitiesResponse.class,
                "results", results,
                "teamResults", teamResults,
                "customEntityResults", customEntityResults,
                "facetResults", facetResults,
                "cursor", cursor,
                "totalCount", totalCount,
                "hasMoreResults", hasMoreResults,
                "sortOptions", sortOptions,
                "customFacetNames", customFacetNames);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Person>> results = Optional.empty();
 
        private Optional<? extends List<Team>> teamResults = Optional.empty();
 
        private Optional<? extends List<CustomEntity>> customEntityResults = Optional.empty();
 
        private Optional<? extends List<FacetResult>> facetResults = Optional.empty();
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<Long> totalCount = Optional.empty();
 
        private Optional<Boolean> hasMoreResults = Optional.empty();
 
        private Optional<? extends List<EntitiesSortOrder>> sortOptions = Optional.empty();
 
        private Optional<? extends List<String>> customFacetNames = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder results(List<Person> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<Person>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        public Builder teamResults(List<Team> teamResults) {
            Utils.checkNotNull(teamResults, "teamResults");
            this.teamResults = Optional.ofNullable(teamResults);
            return this;
        }

        public Builder teamResults(Optional<? extends List<Team>> teamResults) {
            Utils.checkNotNull(teamResults, "teamResults");
            this.teamResults = teamResults;
            return this;
        }

        public Builder customEntityResults(List<CustomEntity> customEntityResults) {
            Utils.checkNotNull(customEntityResults, "customEntityResults");
            this.customEntityResults = Optional.ofNullable(customEntityResults);
            return this;
        }

        public Builder customEntityResults(Optional<? extends List<CustomEntity>> customEntityResults) {
            Utils.checkNotNull(customEntityResults, "customEntityResults");
            this.customEntityResults = customEntityResults;
            return this;
        }

        public Builder facetResults(List<FacetResult> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = Optional.ofNullable(facetResults);
            return this;
        }

        public Builder facetResults(Optional<? extends List<FacetResult>> facetResults) {
            Utils.checkNotNull(facetResults, "facetResults");
            this.facetResults = facetResults;
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The total number of entities available
         */
        public Builder totalCount(long totalCount) {
            Utils.checkNotNull(totalCount, "totalCount");
            this.totalCount = Optional.ofNullable(totalCount);
            return this;
        }

        /**
         * The total number of entities available
         */
        public Builder totalCount(Optional<Long> totalCount) {
            Utils.checkNotNull(totalCount, "totalCount");
            this.totalCount = totalCount;
            return this;
        }

        /**
         * Whether or not more entities can be fetched.
         */
        public Builder hasMoreResults(boolean hasMoreResults) {
            Utils.checkNotNull(hasMoreResults, "hasMoreResults");
            this.hasMoreResults = Optional.ofNullable(hasMoreResults);
            return this;
        }

        /**
         * Whether or not more entities can be fetched.
         */
        public Builder hasMoreResults(Optional<Boolean> hasMoreResults) {
            Utils.checkNotNull(hasMoreResults, "hasMoreResults");
            this.hasMoreResults = hasMoreResults;
            return this;
        }

        /**
         * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
         */
        public Builder sortOptions(List<EntitiesSortOrder> sortOptions) {
            Utils.checkNotNull(sortOptions, "sortOptions");
            this.sortOptions = Optional.ofNullable(sortOptions);
            return this;
        }

        /**
         * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
         */
        public Builder sortOptions(Optional<? extends List<EntitiesSortOrder>> sortOptions) {
            Utils.checkNotNull(sortOptions, "sortOptions");
            this.sortOptions = sortOptions;
            return this;
        }

        /**
         * list of Person attributes that are custom setup by deployment
         */
        public Builder customFacetNames(List<String> customFacetNames) {
            Utils.checkNotNull(customFacetNames, "customFacetNames");
            this.customFacetNames = Optional.ofNullable(customFacetNames);
            return this;
        }

        /**
         * list of Person attributes that are custom setup by deployment
         */
        public Builder customFacetNames(Optional<? extends List<String>> customFacetNames) {
            Utils.checkNotNull(customFacetNames, "customFacetNames");
            this.customFacetNames = customFacetNames;
            return this;
        }
        
        public ListEntitiesResponse build() {
            return new ListEntitiesResponse(
                results,
                teamResults,
                customEntityResults,
                facetResults,
                cursor,
                totalCount,
                hasMoreResults,
                sortOptions,
                customFacetNames);
        }
    }
}
