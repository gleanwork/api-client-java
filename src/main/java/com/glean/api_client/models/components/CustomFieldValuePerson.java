/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CustomFieldValuePerson {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("person")
    private Optional<? extends Person> person;

    @JsonCreator
    public CustomFieldValuePerson(
            @JsonProperty("person") Optional<? extends Person> person) {
        Utils.checkNotNull(person, "person");
        this.person = person;
    }
    
    public CustomFieldValuePerson() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> person() {
        return (Optional<Person>) person;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CustomFieldValuePerson withPerson(Person person) {
        Utils.checkNotNull(person, "person");
        this.person = Optional.ofNullable(person);
        return this;
    }

    public CustomFieldValuePerson withPerson(Optional<? extends Person> person) {
        Utils.checkNotNull(person, "person");
        this.person = person;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomFieldValuePerson other = (CustomFieldValuePerson) o;
        return 
            Objects.deepEquals(this.person, other.person);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            person);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomFieldValuePerson.class,
                "person", person);
    }
    
    public final static class Builder {
 
        private Optional<? extends Person> person = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder person(Person person) {
            Utils.checkNotNull(person, "person");
            this.person = Optional.ofNullable(person);
            return this;
        }

        public Builder person(Optional<? extends Person> person) {
            Utils.checkNotNull(person, "person");
            this.person = person;
            return this;
        }
        
        public CustomFieldValuePerson build() {
            return new CustomFieldValuePerson(
                person);
        }
    }
}
