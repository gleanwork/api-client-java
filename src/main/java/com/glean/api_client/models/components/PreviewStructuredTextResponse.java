/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PreviewStructuredTextResponse {

    @JsonProperty("structuredText")
    private StructuredText structuredText;

    /**
     * A list of links the user doesn't have access to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docsInaccessibleToUser")
    private Optional<? extends List<String>> docsInaccessibleToUser;

    @JsonProperty("combinedAnswerText")
    private StructuredText combinedAnswerText;

    @JsonCreator
    public PreviewStructuredTextResponse(
            @JsonProperty("structuredText") StructuredText structuredText,
            @JsonProperty("docsInaccessibleToUser") Optional<? extends List<String>> docsInaccessibleToUser,
            @JsonProperty("combinedAnswerText") StructuredText combinedAnswerText) {
        Utils.checkNotNull(structuredText, "structuredText");
        Utils.checkNotNull(docsInaccessibleToUser, "docsInaccessibleToUser");
        Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
        this.structuredText = structuredText;
        this.docsInaccessibleToUser = docsInaccessibleToUser;
        this.combinedAnswerText = combinedAnswerText;
    }
    
    public PreviewStructuredTextResponse(
            StructuredText structuredText,
            StructuredText combinedAnswerText) {
        this(structuredText, Optional.empty(), combinedAnswerText);
    }

    @JsonIgnore
    public StructuredText structuredText() {
        return structuredText;
    }

    /**
     * A list of links the user doesn't have access to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> docsInaccessibleToUser() {
        return (Optional<List<String>>) docsInaccessibleToUser;
    }

    @JsonIgnore
    public StructuredText combinedAnswerText() {
        return combinedAnswerText;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PreviewStructuredTextResponse withStructuredText(StructuredText structuredText) {
        Utils.checkNotNull(structuredText, "structuredText");
        this.structuredText = structuredText;
        return this;
    }

    /**
     * A list of links the user doesn't have access to.
     */
    public PreviewStructuredTextResponse withDocsInaccessibleToUser(List<String> docsInaccessibleToUser) {
        Utils.checkNotNull(docsInaccessibleToUser, "docsInaccessibleToUser");
        this.docsInaccessibleToUser = Optional.ofNullable(docsInaccessibleToUser);
        return this;
    }

    /**
     * A list of links the user doesn't have access to.
     */
    public PreviewStructuredTextResponse withDocsInaccessibleToUser(Optional<? extends List<String>> docsInaccessibleToUser) {
        Utils.checkNotNull(docsInaccessibleToUser, "docsInaccessibleToUser");
        this.docsInaccessibleToUser = docsInaccessibleToUser;
        return this;
    }

    public PreviewStructuredTextResponse withCombinedAnswerText(StructuredText combinedAnswerText) {
        Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
        this.combinedAnswerText = combinedAnswerText;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreviewStructuredTextResponse other = (PreviewStructuredTextResponse) o;
        return 
            Objects.deepEquals(this.structuredText, other.structuredText) &&
            Objects.deepEquals(this.docsInaccessibleToUser, other.docsInaccessibleToUser) &&
            Objects.deepEquals(this.combinedAnswerText, other.combinedAnswerText);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            structuredText,
            docsInaccessibleToUser,
            combinedAnswerText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PreviewStructuredTextResponse.class,
                "structuredText", structuredText,
                "docsInaccessibleToUser", docsInaccessibleToUser,
                "combinedAnswerText", combinedAnswerText);
    }
    
    public final static class Builder {
 
        private StructuredText structuredText;
 
        private Optional<? extends List<String>> docsInaccessibleToUser = Optional.empty();
 
        private StructuredText combinedAnswerText;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder structuredText(StructuredText structuredText) {
            Utils.checkNotNull(structuredText, "structuredText");
            this.structuredText = structuredText;
            return this;
        }

        /**
         * A list of links the user doesn't have access to.
         */
        public Builder docsInaccessibleToUser(List<String> docsInaccessibleToUser) {
            Utils.checkNotNull(docsInaccessibleToUser, "docsInaccessibleToUser");
            this.docsInaccessibleToUser = Optional.ofNullable(docsInaccessibleToUser);
            return this;
        }

        /**
         * A list of links the user doesn't have access to.
         */
        public Builder docsInaccessibleToUser(Optional<? extends List<String>> docsInaccessibleToUser) {
            Utils.checkNotNull(docsInaccessibleToUser, "docsInaccessibleToUser");
            this.docsInaccessibleToUser = docsInaccessibleToUser;
            return this;
        }

        public Builder combinedAnswerText(StructuredText combinedAnswerText) {
            Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
            this.combinedAnswerText = combinedAnswerText;
            return this;
        }
        
        public PreviewStructuredTextResponse build() {
            return new PreviewStructuredTextResponse(
                structuredText,
                docsInaccessibleToUser,
                combinedAnswerText);
        }
    }
}
