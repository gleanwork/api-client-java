/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class UpdateDraftAnnouncementRequest {

    /**
     * The date and time at which the announcement becomes active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<OffsetDateTime> startTime;

    /**
     * The date and time at which the announcement expires.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<OffsetDateTime> endTime;

    /**
     * The headline of the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<? extends StructuredText> body;

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emoji")
    private Optional<String> emoji;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    private Optional<? extends Thumbnail> thumbnail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banner")
    private Optional<? extends Thumbnail> banner;

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocumentId")
    private Optional<String> sourceDocumentId;

    /**
     * Whether or not to hide an author attribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideAttribution")
    private Optional<Boolean> hideAttribution;

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private Optional<? extends UpdateDraftAnnouncementRequestChannel> channel;

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postType")
    private Optional<? extends UpdateDraftAnnouncementRequestPostType> postType;

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPrioritized")
    private Optional<Boolean> isPrioritized;

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewUrl")
    private Optional<String> viewUrl;

    /**
     * The opaque id of the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    /**
     * The opaque id of the draft.
     */
    @JsonProperty("draftId")
    private long draftId;

    @JsonCreator
    public UpdateDraftAnnouncementRequest(
            @JsonProperty("startTime") Optional<OffsetDateTime> startTime,
            @JsonProperty("endTime") Optional<OffsetDateTime> endTime,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("body") Optional<? extends StructuredText> body,
            @JsonProperty("emoji") Optional<String> emoji,
            @JsonProperty("thumbnail") Optional<? extends Thumbnail> thumbnail,
            @JsonProperty("banner") Optional<? extends Thumbnail> banner,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("sourceDocumentId") Optional<String> sourceDocumentId,
            @JsonProperty("hideAttribution") Optional<Boolean> hideAttribution,
            @JsonProperty("channel") Optional<? extends UpdateDraftAnnouncementRequestChannel> channel,
            @JsonProperty("postType") Optional<? extends UpdateDraftAnnouncementRequestPostType> postType,
            @JsonProperty("isPrioritized") Optional<Boolean> isPrioritized,
            @JsonProperty("viewUrl") Optional<String> viewUrl,
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("draftId") long draftId) {
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(emoji, "emoji");
        Utils.checkNotNull(thumbnail, "thumbnail");
        Utils.checkNotNull(banner, "banner");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
        Utils.checkNotNull(hideAttribution, "hideAttribution");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(postType, "postType");
        Utils.checkNotNull(isPrioritized, "isPrioritized");
        Utils.checkNotNull(viewUrl, "viewUrl");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(draftId, "draftId");
        this.startTime = startTime;
        this.endTime = endTime;
        this.title = title;
        this.body = body;
        this.emoji = emoji;
        this.thumbnail = thumbnail;
        this.banner = banner;
        this.audienceFilters = audienceFilters;
        this.sourceDocumentId = sourceDocumentId;
        this.hideAttribution = hideAttribution;
        this.channel = channel;
        this.postType = postType;
        this.isPrioritized = isPrioritized;
        this.viewUrl = viewUrl;
        this.id = id;
        this.draftId = draftId;
    }
    
    public UpdateDraftAnnouncementRequest(
            long draftId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), draftId);
    }

    /**
     * The date and time at which the announcement becomes active.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startTime() {
        return startTime;
    }

    /**
     * The date and time at which the announcement expires.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> endTime() {
        return endTime;
    }

    /**
     * The headline of the announcement.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredText> body() {
        return (Optional<StructuredText>) body;
    }

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    @JsonIgnore
    public Optional<String> emoji() {
        return emoji;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Thumbnail> thumbnail() {
        return (Optional<Thumbnail>) thumbnail;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Thumbnail> banner() {
        return (Optional<Thumbnail>) banner;
    }

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    @JsonIgnore
    public Optional<String> sourceDocumentId() {
        return sourceDocumentId;
    }

    /**
     * Whether or not to hide an author attribution.
     */
    @JsonIgnore
    public Optional<Boolean> hideAttribution() {
        return hideAttribution;
    }

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateDraftAnnouncementRequestChannel> channel() {
        return (Optional<UpdateDraftAnnouncementRequestChannel>) channel;
    }

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateDraftAnnouncementRequestPostType> postType() {
        return (Optional<UpdateDraftAnnouncementRequestPostType>) postType;
    }

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    @JsonIgnore
    public Optional<Boolean> isPrioritized() {
        return isPrioritized;
    }

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    @JsonIgnore
    public Optional<String> viewUrl() {
        return viewUrl;
    }

    /**
     * The opaque id of the announcement.
     */
    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    /**
     * The opaque id of the draft.
     */
    @JsonIgnore
    public long draftId() {
        return draftId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The date and time at which the announcement becomes active.
     */
    public UpdateDraftAnnouncementRequest withStartTime(OffsetDateTime startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * The date and time at which the announcement becomes active.
     */
    public UpdateDraftAnnouncementRequest withStartTime(Optional<OffsetDateTime> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * The date and time at which the announcement expires.
     */
    public UpdateDraftAnnouncementRequest withEndTime(OffsetDateTime endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * The date and time at which the announcement expires.
     */
    public UpdateDraftAnnouncementRequest withEndTime(Optional<OffsetDateTime> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * The headline of the announcement.
     */
    public UpdateDraftAnnouncementRequest withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The headline of the announcement.
     */
    public UpdateDraftAnnouncementRequest withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public UpdateDraftAnnouncementRequest withBody(StructuredText body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    public UpdateDraftAnnouncementRequest withBody(Optional<? extends StructuredText> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    public UpdateDraftAnnouncementRequest withEmoji(String emoji) {
        Utils.checkNotNull(emoji, "emoji");
        this.emoji = Optional.ofNullable(emoji);
        return this;
    }

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    public UpdateDraftAnnouncementRequest withEmoji(Optional<String> emoji) {
        Utils.checkNotNull(emoji, "emoji");
        this.emoji = emoji;
        return this;
    }

    public UpdateDraftAnnouncementRequest withThumbnail(Thumbnail thumbnail) {
        Utils.checkNotNull(thumbnail, "thumbnail");
        this.thumbnail = Optional.ofNullable(thumbnail);
        return this;
    }

    public UpdateDraftAnnouncementRequest withThumbnail(Optional<? extends Thumbnail> thumbnail) {
        Utils.checkNotNull(thumbnail, "thumbnail");
        this.thumbnail = thumbnail;
        return this;
    }

    public UpdateDraftAnnouncementRequest withBanner(Thumbnail banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = Optional.ofNullable(banner);
        return this;
    }

    public UpdateDraftAnnouncementRequest withBanner(Optional<? extends Thumbnail> banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = banner;
        return this;
    }

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    public UpdateDraftAnnouncementRequest withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    public UpdateDraftAnnouncementRequest withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    public UpdateDraftAnnouncementRequest withSourceDocumentId(String sourceDocumentId) {
        Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
        this.sourceDocumentId = Optional.ofNullable(sourceDocumentId);
        return this;
    }

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    public UpdateDraftAnnouncementRequest withSourceDocumentId(Optional<String> sourceDocumentId) {
        Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
        this.sourceDocumentId = sourceDocumentId;
        return this;
    }

    /**
     * Whether or not to hide an author attribution.
     */
    public UpdateDraftAnnouncementRequest withHideAttribution(boolean hideAttribution) {
        Utils.checkNotNull(hideAttribution, "hideAttribution");
        this.hideAttribution = Optional.ofNullable(hideAttribution);
        return this;
    }

    /**
     * Whether or not to hide an author attribution.
     */
    public UpdateDraftAnnouncementRequest withHideAttribution(Optional<Boolean> hideAttribution) {
        Utils.checkNotNull(hideAttribution, "hideAttribution");
        this.hideAttribution = hideAttribution;
        return this;
    }

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    public UpdateDraftAnnouncementRequest withChannel(UpdateDraftAnnouncementRequestChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    public UpdateDraftAnnouncementRequest withChannel(Optional<? extends UpdateDraftAnnouncementRequestChannel> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    public UpdateDraftAnnouncementRequest withPostType(UpdateDraftAnnouncementRequestPostType postType) {
        Utils.checkNotNull(postType, "postType");
        this.postType = Optional.ofNullable(postType);
        return this;
    }

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    public UpdateDraftAnnouncementRequest withPostType(Optional<? extends UpdateDraftAnnouncementRequestPostType> postType) {
        Utils.checkNotNull(postType, "postType");
        this.postType = postType;
        return this;
    }

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    public UpdateDraftAnnouncementRequest withIsPrioritized(boolean isPrioritized) {
        Utils.checkNotNull(isPrioritized, "isPrioritized");
        this.isPrioritized = Optional.ofNullable(isPrioritized);
        return this;
    }

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    public UpdateDraftAnnouncementRequest withIsPrioritized(Optional<Boolean> isPrioritized) {
        Utils.checkNotNull(isPrioritized, "isPrioritized");
        this.isPrioritized = isPrioritized;
        return this;
    }

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    public UpdateDraftAnnouncementRequest withViewUrl(String viewUrl) {
        Utils.checkNotNull(viewUrl, "viewUrl");
        this.viewUrl = Optional.ofNullable(viewUrl);
        return this;
    }

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    public UpdateDraftAnnouncementRequest withViewUrl(Optional<String> viewUrl) {
        Utils.checkNotNull(viewUrl, "viewUrl");
        this.viewUrl = viewUrl;
        return this;
    }

    /**
     * The opaque id of the announcement.
     */
    public UpdateDraftAnnouncementRequest withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The opaque id of the announcement.
     */
    public UpdateDraftAnnouncementRequest withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The opaque id of the draft.
     */
    public UpdateDraftAnnouncementRequest withDraftId(long draftId) {
        Utils.checkNotNull(draftId, "draftId");
        this.draftId = draftId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDraftAnnouncementRequest other = (UpdateDraftAnnouncementRequest) o;
        return 
            Objects.deepEquals(this.startTime, other.startTime) &&
            Objects.deepEquals(this.endTime, other.endTime) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.emoji, other.emoji) &&
            Objects.deepEquals(this.thumbnail, other.thumbnail) &&
            Objects.deepEquals(this.banner, other.banner) &&
            Objects.deepEquals(this.audienceFilters, other.audienceFilters) &&
            Objects.deepEquals(this.sourceDocumentId, other.sourceDocumentId) &&
            Objects.deepEquals(this.hideAttribution, other.hideAttribution) &&
            Objects.deepEquals(this.channel, other.channel) &&
            Objects.deepEquals(this.postType, other.postType) &&
            Objects.deepEquals(this.isPrioritized, other.isPrioritized) &&
            Objects.deepEquals(this.viewUrl, other.viewUrl) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.draftId, other.draftId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startTime,
            endTime,
            title,
            body,
            emoji,
            thumbnail,
            banner,
            audienceFilters,
            sourceDocumentId,
            hideAttribution,
            channel,
            postType,
            isPrioritized,
            viewUrl,
            id,
            draftId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDraftAnnouncementRequest.class,
                "startTime", startTime,
                "endTime", endTime,
                "title", title,
                "body", body,
                "emoji", emoji,
                "thumbnail", thumbnail,
                "banner", banner,
                "audienceFilters", audienceFilters,
                "sourceDocumentId", sourceDocumentId,
                "hideAttribution", hideAttribution,
                "channel", channel,
                "postType", postType,
                "isPrioritized", isPrioritized,
                "viewUrl", viewUrl,
                "id", id,
                "draftId", draftId);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> startTime = Optional.empty();
 
        private Optional<OffsetDateTime> endTime = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends StructuredText> body = Optional.empty();
 
        private Optional<String> emoji = Optional.empty();
 
        private Optional<? extends Thumbnail> thumbnail = Optional.empty();
 
        private Optional<? extends Thumbnail> banner = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<String> sourceDocumentId = Optional.empty();
 
        private Optional<Boolean> hideAttribution = Optional.empty();
 
        private Optional<? extends UpdateDraftAnnouncementRequestChannel> channel = Optional.empty();
 
        private Optional<? extends UpdateDraftAnnouncementRequestPostType> postType = Optional.empty();
 
        private Optional<Boolean> isPrioritized = Optional.empty();
 
        private Optional<String> viewUrl = Optional.empty();
 
        private Optional<Long> id = Optional.empty();
 
        private Long draftId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The date and time at which the announcement becomes active.
         */
        public Builder startTime(OffsetDateTime startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * The date and time at which the announcement becomes active.
         */
        public Builder startTime(Optional<OffsetDateTime> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * The date and time at which the announcement expires.
         */
        public Builder endTime(OffsetDateTime endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * The date and time at which the announcement expires.
         */
        public Builder endTime(Optional<OffsetDateTime> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        /**
         * The headline of the announcement.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The headline of the announcement.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder body(StructuredText body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        public Builder body(Optional<? extends StructuredText> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * An emoji used to indicate the nature of the announcement.
         */
        public Builder emoji(String emoji) {
            Utils.checkNotNull(emoji, "emoji");
            this.emoji = Optional.ofNullable(emoji);
            return this;
        }

        /**
         * An emoji used to indicate the nature of the announcement.
         */
        public Builder emoji(Optional<String> emoji) {
            Utils.checkNotNull(emoji, "emoji");
            this.emoji = emoji;
            return this;
        }

        public Builder thumbnail(Thumbnail thumbnail) {
            Utils.checkNotNull(thumbnail, "thumbnail");
            this.thumbnail = Optional.ofNullable(thumbnail);
            return this;
        }

        public Builder thumbnail(Optional<? extends Thumbnail> thumbnail) {
            Utils.checkNotNull(thumbnail, "thumbnail");
            this.thumbnail = thumbnail;
            return this;
        }

        public Builder banner(Thumbnail banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = Optional.ofNullable(banner);
            return this;
        }

        public Builder banner(Optional<? extends Thumbnail> banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = banner;
            return this;
        }

        /**
         * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
         */
        public Builder sourceDocumentId(String sourceDocumentId) {
            Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
            this.sourceDocumentId = Optional.ofNullable(sourceDocumentId);
            return this;
        }

        /**
         * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
         */
        public Builder sourceDocumentId(Optional<String> sourceDocumentId) {
            Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
            this.sourceDocumentId = sourceDocumentId;
            return this;
        }

        /**
         * Whether or not to hide an author attribution.
         */
        public Builder hideAttribution(boolean hideAttribution) {
            Utils.checkNotNull(hideAttribution, "hideAttribution");
            this.hideAttribution = Optional.ofNullable(hideAttribution);
            return this;
        }

        /**
         * Whether or not to hide an author attribution.
         */
        public Builder hideAttribution(Optional<Boolean> hideAttribution) {
            Utils.checkNotNull(hideAttribution, "hideAttribution");
            this.hideAttribution = hideAttribution;
            return this;
        }

        /**
         * This determines whether this is a Social Feed post or a regular announcement.
         */
        public Builder channel(UpdateDraftAnnouncementRequestChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * This determines whether this is a Social Feed post or a regular announcement.
         */
        public Builder channel(Optional<? extends UpdateDraftAnnouncementRequestChannel> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
         */
        public Builder postType(UpdateDraftAnnouncementRequestPostType postType) {
            Utils.checkNotNull(postType, "postType");
            this.postType = Optional.ofNullable(postType);
            return this;
        }

        /**
         * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
         */
        public Builder postType(Optional<? extends UpdateDraftAnnouncementRequestPostType> postType) {
            Utils.checkNotNull(postType, "postType");
            this.postType = postType;
            return this;
        }

        /**
         * Used by the Social Feed to pin posts to the front of the feed.
         */
        public Builder isPrioritized(boolean isPrioritized) {
            Utils.checkNotNull(isPrioritized, "isPrioritized");
            this.isPrioritized = Optional.ofNullable(isPrioritized);
            return this;
        }

        /**
         * Used by the Social Feed to pin posts to the front of the feed.
         */
        public Builder isPrioritized(Optional<Boolean> isPrioritized) {
            Utils.checkNotNull(isPrioritized, "isPrioritized");
            this.isPrioritized = isPrioritized;
            return this;
        }

        /**
         * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
         */
        public Builder viewUrl(String viewUrl) {
            Utils.checkNotNull(viewUrl, "viewUrl");
            this.viewUrl = Optional.ofNullable(viewUrl);
            return this;
        }

        /**
         * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
         */
        public Builder viewUrl(Optional<String> viewUrl) {
            Utils.checkNotNull(viewUrl, "viewUrl");
            this.viewUrl = viewUrl;
            return this;
        }

        /**
         * The opaque id of the announcement.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The opaque id of the announcement.
         */
        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The opaque id of the draft.
         */
        public Builder draftId(long draftId) {
            Utils.checkNotNull(draftId, "draftId");
            this.draftId = draftId;
            return this;
        }
        
        public UpdateDraftAnnouncementRequest build() {
            return new UpdateDraftAnnouncementRequest(
                startTime,
                endTime,
                title,
                body,
                emoji,
                thumbnail,
                banner,
                audienceFilters,
                sourceDocumentId,
                hideAttribution,
                channel,
                postType,
                isPrioritized,
                viewUrl,
                id,
                draftId);
        }
    }
}
