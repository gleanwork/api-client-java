/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class ListPinsResponse {

    /**
     * List of pinned documents.
     */
    @JsonProperty("pins")
    private List<PinDocument> pins;

    @JsonCreator
    public ListPinsResponse(
            @JsonProperty("pins") List<PinDocument> pins) {
        Utils.checkNotNull(pins, "pins");
        this.pins = pins;
    }

    /**
     * List of pinned documents.
     */
    @JsonIgnore
    public List<PinDocument> pins() {
        return pins;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of pinned documents.
     */
    public ListPinsResponse withPins(List<PinDocument> pins) {
        Utils.checkNotNull(pins, "pins");
        this.pins = pins;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListPinsResponse other = (ListPinsResponse) o;
        return 
            Objects.deepEquals(this.pins, other.pins);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pins);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListPinsResponse.class,
                "pins", pins);
    }
    
    public final static class Builder {
 
        private List<PinDocument> pins;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of pinned documents.
         */
        public Builder pins(List<PinDocument> pins) {
            Utils.checkNotNull(pins, "pins");
            this.pins = pins;
            return this;
        }
        
        public ListPinsResponse build() {
            return new ListPinsResponse(
                pins);
        }
    }
}
