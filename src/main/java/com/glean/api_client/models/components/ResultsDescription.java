/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ResultsDescription {

    /**
     * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    /**
     * Defines how to render an icon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconConfig")
    private Optional<? extends IconConfig> iconConfig;

    @JsonCreator
    public ResultsDescription(
            @JsonProperty("text") Optional<String> text,
            @JsonProperty("iconConfig") Optional<? extends IconConfig> iconConfig) {
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.text = text;
        this.iconConfig = iconConfig;
    }
    
    public ResultsDescription() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
     */
    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    /**
     * Defines how to render an icon
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IconConfig> iconConfig() {
        return (Optional<IconConfig>) iconConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
     */
    public ResultsDescription withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    /**
     * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
     */
    public ResultsDescription withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public ResultsDescription withIconConfig(IconConfig iconConfig) {
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.iconConfig = Optional.ofNullable(iconConfig);
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public ResultsDescription withIconConfig(Optional<? extends IconConfig> iconConfig) {
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.iconConfig = iconConfig;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResultsDescription other = (ResultsDescription) o;
        return 
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.iconConfig, other.iconConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            text,
            iconConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResultsDescription.class,
                "text", text,
                "iconConfig", iconConfig);
    }
    
    public final static class Builder {
 
        private Optional<String> text = Optional.empty();
 
        private Optional<? extends IconConfig> iconConfig = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
         */
        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder iconConfig(IconConfig iconConfig) {
            Utils.checkNotNull(iconConfig, "iconConfig");
            this.iconConfig = Optional.ofNullable(iconConfig);
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder iconConfig(Optional<? extends IconConfig> iconConfig) {
            Utils.checkNotNull(iconConfig, "iconConfig");
            this.iconConfig = iconConfig;
            return this;
        }
        
        public ResultsDescription build() {
            return new ResultsDescription(
                text,
                iconConfig);
        }
    }
}
