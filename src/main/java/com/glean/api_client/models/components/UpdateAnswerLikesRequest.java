/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class UpdateAnswerLikesRequest {

    /**
     * The opaque id of the answer to like.
     */
    @JsonProperty("answerId")
    private long answerId;

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID is unavailable. If both are available, using the Answer ID is preferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answerDocId")
    private Optional<String> answerDocId;

    @JsonProperty("action")
    private UpdateAnswerLikesRequestAction action;

    @JsonCreator
    public UpdateAnswerLikesRequest(
            @JsonProperty("answerId") long answerId,
            @JsonProperty("answerDocId") Optional<String> answerDocId,
            @JsonProperty("action") UpdateAnswerLikesRequestAction action) {
        Utils.checkNotNull(answerId, "answerId");
        Utils.checkNotNull(answerDocId, "answerDocId");
        Utils.checkNotNull(action, "action");
        this.answerId = answerId;
        this.answerDocId = answerDocId;
        this.action = action;
    }
    
    public UpdateAnswerLikesRequest(
            long answerId,
            UpdateAnswerLikesRequestAction action) {
        this(answerId, Optional.empty(), action);
    }

    /**
     * The opaque id of the answer to like.
     */
    @JsonIgnore
    public long answerId() {
        return answerId;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID is unavailable. If both are available, using the Answer ID is preferred.
     */
    @JsonIgnore
    public Optional<String> answerDocId() {
        return answerDocId;
    }

    @JsonIgnore
    public UpdateAnswerLikesRequestAction action() {
        return action;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The opaque id of the answer to like.
     */
    public UpdateAnswerLikesRequest withAnswerId(long answerId) {
        Utils.checkNotNull(answerId, "answerId");
        this.answerId = answerId;
        return this;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID is unavailable. If both are available, using the Answer ID is preferred.
     */
    public UpdateAnswerLikesRequest withAnswerDocId(String answerDocId) {
        Utils.checkNotNull(answerDocId, "answerDocId");
        this.answerDocId = Optional.ofNullable(answerDocId);
        return this;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID is unavailable. If both are available, using the Answer ID is preferred.
     */
    public UpdateAnswerLikesRequest withAnswerDocId(Optional<String> answerDocId) {
        Utils.checkNotNull(answerDocId, "answerDocId");
        this.answerDocId = answerDocId;
        return this;
    }

    public UpdateAnswerLikesRequest withAction(UpdateAnswerLikesRequestAction action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateAnswerLikesRequest other = (UpdateAnswerLikesRequest) o;
        return 
            Objects.deepEquals(this.answerId, other.answerId) &&
            Objects.deepEquals(this.answerDocId, other.answerDocId) &&
            Objects.deepEquals(this.action, other.action);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            answerId,
            answerDocId,
            action);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateAnswerLikesRequest.class,
                "answerId", answerId,
                "answerDocId", answerDocId,
                "action", action);
    }
    
    public final static class Builder {
 
        private Long answerId;
 
        private Optional<String> answerDocId = Optional.empty();
 
        private UpdateAnswerLikesRequestAction action;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The opaque id of the answer to like.
         */
        public Builder answerId(long answerId) {
            Utils.checkNotNull(answerId, "answerId");
            this.answerId = answerId;
            return this;
        }

        /**
         * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID is unavailable. If both are available, using the Answer ID is preferred.
         */
        public Builder answerDocId(String answerDocId) {
            Utils.checkNotNull(answerDocId, "answerDocId");
            this.answerDocId = Optional.ofNullable(answerDocId);
            return this;
        }

        /**
         * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID is unavailable. If both are available, using the Answer ID is preferred.
         */
        public Builder answerDocId(Optional<String> answerDocId) {
            Utils.checkNotNull(answerDocId, "answerDocId");
            this.answerDocId = answerDocId;
            return this;
        }

        public Builder action(UpdateAnswerLikesRequestAction action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }
        
        public UpdateAnswerLikesRequest build() {
            return new UpdateAnswerLikesRequest(
                answerId,
                answerDocId,
                action);
        }
    }
}
