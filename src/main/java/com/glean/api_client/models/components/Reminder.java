/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class Reminder {

    @JsonProperty("assignee")
    private Person assignee;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestor")
    private Optional<? extends Person> requestor;

    /**
     * Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
     */
    @JsonProperty("remindAt")
    private long remindAt;

    /**
     * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Long> createdAt;

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<String> reason;

    @JsonCreator
    public Reminder(
            @JsonProperty("assignee") Person assignee,
            @JsonProperty("requestor") Optional<? extends Person> requestor,
            @JsonProperty("remindAt") long remindAt,
            @JsonProperty("createdAt") Optional<Long> createdAt,
            @JsonProperty("reason") Optional<String> reason) {
        Utils.checkNotNull(assignee, "assignee");
        Utils.checkNotNull(requestor, "requestor");
        Utils.checkNotNull(remindAt, "remindAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(reason, "reason");
        this.assignee = assignee;
        this.requestor = requestor;
        this.remindAt = remindAt;
        this.createdAt = createdAt;
        this.reason = reason;
    }
    
    public Reminder(
            Person assignee,
            long remindAt) {
        this(assignee, Optional.empty(), remindAt, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Person assignee() {
        return assignee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> requestor() {
        return (Optional<Person>) requestor;
    }

    /**
     * Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
     */
    @JsonIgnore
    public long remindAt() {
        return remindAt;
    }

    /**
     * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    @JsonIgnore
    public Optional<String> reason() {
        return reason;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Reminder withAssignee(Person assignee) {
        Utils.checkNotNull(assignee, "assignee");
        this.assignee = assignee;
        return this;
    }

    public Reminder withRequestor(Person requestor) {
        Utils.checkNotNull(requestor, "requestor");
        this.requestor = Optional.ofNullable(requestor);
        return this;
    }

    public Reminder withRequestor(Optional<? extends Person> requestor) {
        Utils.checkNotNull(requestor, "requestor");
        this.requestor = requestor;
        return this;
    }

    /**
     * Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
     */
    public Reminder withRemindAt(long remindAt) {
        Utils.checkNotNull(remindAt, "remindAt");
        this.remindAt = remindAt;
        return this;
    }

    /**
     * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
     */
    public Reminder withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
     */
    public Reminder withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    public Reminder withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }

    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    public Reminder withReason(Optional<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Reminder other = (Reminder) o;
        return 
            Objects.deepEquals(this.assignee, other.assignee) &&
            Objects.deepEquals(this.requestor, other.requestor) &&
            Objects.deepEquals(this.remindAt, other.remindAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.reason, other.reason);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            assignee,
            requestor,
            remindAt,
            createdAt,
            reason);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Reminder.class,
                "assignee", assignee,
                "requestor", requestor,
                "remindAt", remindAt,
                "createdAt", createdAt,
                "reason", reason);
    }
    
    public final static class Builder {
 
        private Person assignee;
 
        private Optional<? extends Person> requestor = Optional.empty();
 
        private Long remindAt;
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<String> reason = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder assignee(Person assignee) {
            Utils.checkNotNull(assignee, "assignee");
            this.assignee = assignee;
            return this;
        }

        public Builder requestor(Person requestor) {
            Utils.checkNotNull(requestor, "requestor");
            this.requestor = Optional.ofNullable(requestor);
            return this;
        }

        public Builder requestor(Optional<? extends Person> requestor) {
            Utils.checkNotNull(requestor, "requestor");
            this.requestor = requestor;
            return this;
        }

        /**
         * Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
         */
        public Builder remindAt(long remindAt) {
            Utils.checkNotNull(remindAt, "remindAt");
            this.remindAt = remindAt;
            return this;
        }

        /**
         * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
         */
        public Builder reason(Optional<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }
        
        public Reminder build() {
            return new Reminder(
                assignee,
                requestor,
                remindAt,
                createdAt,
                reason);
        }
    }
}
