/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetShortcutResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcut")
    private Optional<? extends Shortcut> shortcut;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends ShortcutError> error;

    @JsonCreator
    public GetShortcutResponse(
            @JsonProperty("shortcut") Optional<? extends Shortcut> shortcut,
            @JsonProperty("error") Optional<? extends ShortcutError> error) {
        Utils.checkNotNull(shortcut, "shortcut");
        Utils.checkNotNull(error, "error");
        this.shortcut = shortcut;
        this.error = error;
    }
    
    public GetShortcutResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Shortcut> shortcut() {
        return (Optional<Shortcut>) shortcut;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShortcutError> error() {
        return (Optional<ShortcutError>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetShortcutResponse withShortcut(Shortcut shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = Optional.ofNullable(shortcut);
        return this;
    }

    public GetShortcutResponse withShortcut(Optional<? extends Shortcut> shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = shortcut;
        return this;
    }

    public GetShortcutResponse withError(ShortcutError error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public GetShortcutResponse withError(Optional<? extends ShortcutError> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetShortcutResponse other = (GetShortcutResponse) o;
        return 
            Objects.deepEquals(this.shortcut, other.shortcut) &&
            Objects.deepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            shortcut,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetShortcutResponse.class,
                "shortcut", shortcut,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<? extends Shortcut> shortcut = Optional.empty();
 
        private Optional<? extends ShortcutError> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder shortcut(Shortcut shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = Optional.ofNullable(shortcut);
            return this;
        }

        public Builder shortcut(Optional<? extends Shortcut> shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = shortcut;
            return this;
        }

        public Builder error(ShortcutError error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends ShortcutError> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public GetShortcutResponse build() {
            return new GetShortcutResponse(
                shortcut,
                error);
        }
    }
}
