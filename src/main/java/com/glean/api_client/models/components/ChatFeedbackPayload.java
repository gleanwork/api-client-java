/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ChatFeedbackPayload
 * 
 * <p>Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
 */
public class ChatFeedbackPayload {

    /**
     * Rating given to the conversation (currently either "upvoted" or "downvoted").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    private Optional<String> rating;

    /**
     * The type(s) of issue being reported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issues")
    private Optional<? extends List<String>> issues;

    /**
     * Additional freeform comments provided by the reporter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<String> comments;

    /**
     * Previous messages in this conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousMessages")
    private Optional<? extends List<String>> previousMessages;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatTranscript")
    private Optional<? extends List<FeedbackChatExchange>> chatTranscript;

    @JsonCreator
    public ChatFeedbackPayload(
            @JsonProperty("rating") Optional<String> rating,
            @JsonProperty("issues") Optional<? extends List<String>> issues,
            @JsonProperty("comments") Optional<String> comments,
            @JsonProperty("previousMessages") Optional<? extends List<String>> previousMessages,
            @JsonProperty("chatTranscript") Optional<? extends List<FeedbackChatExchange>> chatTranscript) {
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(issues, "issues");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(previousMessages, "previousMessages");
        Utils.checkNotNull(chatTranscript, "chatTranscript");
        this.rating = rating;
        this.issues = issues;
        this.comments = comments;
        this.previousMessages = previousMessages;
        this.chatTranscript = chatTranscript;
    }
    
    public ChatFeedbackPayload() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Rating given to the conversation (currently either "upvoted" or "downvoted").
     */
    @JsonIgnore
    public Optional<String> rating() {
        return rating;
    }

    /**
     * The type(s) of issue being reported.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> issues() {
        return (Optional<List<String>>) issues;
    }

    /**
     * Additional freeform comments provided by the reporter.
     */
    @JsonIgnore
    public Optional<String> comments() {
        return comments;
    }

    /**
     * Previous messages in this conversation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> previousMessages() {
        return (Optional<List<String>>) previousMessages;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeedbackChatExchange>> chatTranscript() {
        return (Optional<List<FeedbackChatExchange>>) chatTranscript;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Rating given to the conversation (currently either "upvoted" or "downvoted").
     */
    public ChatFeedbackPayload withRating(String rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = Optional.ofNullable(rating);
        return this;
    }

    /**
     * Rating given to the conversation (currently either "upvoted" or "downvoted").
     */
    public ChatFeedbackPayload withRating(Optional<String> rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    /**
     * The type(s) of issue being reported.
     */
    public ChatFeedbackPayload withIssues(List<String> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = Optional.ofNullable(issues);
        return this;
    }

    /**
     * The type(s) of issue being reported.
     */
    public ChatFeedbackPayload withIssues(Optional<? extends List<String>> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = issues;
        return this;
    }

    /**
     * Additional freeform comments provided by the reporter.
     */
    public ChatFeedbackPayload withComments(String comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    /**
     * Additional freeform comments provided by the reporter.
     */
    public ChatFeedbackPayload withComments(Optional<String> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    /**
     * Previous messages in this conversation.
     */
    public ChatFeedbackPayload withPreviousMessages(List<String> previousMessages) {
        Utils.checkNotNull(previousMessages, "previousMessages");
        this.previousMessages = Optional.ofNullable(previousMessages);
        return this;
    }

    /**
     * Previous messages in this conversation.
     */
    public ChatFeedbackPayload withPreviousMessages(Optional<? extends List<String>> previousMessages) {
        Utils.checkNotNull(previousMessages, "previousMessages");
        this.previousMessages = previousMessages;
        return this;
    }

    public ChatFeedbackPayload withChatTranscript(List<FeedbackChatExchange> chatTranscript) {
        Utils.checkNotNull(chatTranscript, "chatTranscript");
        this.chatTranscript = Optional.ofNullable(chatTranscript);
        return this;
    }

    public ChatFeedbackPayload withChatTranscript(Optional<? extends List<FeedbackChatExchange>> chatTranscript) {
        Utils.checkNotNull(chatTranscript, "chatTranscript");
        this.chatTranscript = chatTranscript;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatFeedbackPayload other = (ChatFeedbackPayload) o;
        return 
            Objects.deepEquals(this.rating, other.rating) &&
            Objects.deepEquals(this.issues, other.issues) &&
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.previousMessages, other.previousMessages) &&
            Objects.deepEquals(this.chatTranscript, other.chatTranscript);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            rating,
            issues,
            comments,
            previousMessages,
            chatTranscript);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatFeedbackPayload.class,
                "rating", rating,
                "issues", issues,
                "comments", comments,
                "previousMessages", previousMessages,
                "chatTranscript", chatTranscript);
    }
    
    public final static class Builder {
 
        private Optional<String> rating = Optional.empty();
 
        private Optional<? extends List<String>> issues = Optional.empty();
 
        private Optional<String> comments = Optional.empty();
 
        private Optional<? extends List<String>> previousMessages = Optional.empty();
 
        private Optional<? extends List<FeedbackChatExchange>> chatTranscript = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Rating given to the conversation (currently either "upvoted" or "downvoted").
         */
        public Builder rating(String rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = Optional.ofNullable(rating);
            return this;
        }

        /**
         * Rating given to the conversation (currently either "upvoted" or "downvoted").
         */
        public Builder rating(Optional<String> rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }

        /**
         * The type(s) of issue being reported.
         */
        public Builder issues(List<String> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = Optional.ofNullable(issues);
            return this;
        }

        /**
         * The type(s) of issue being reported.
         */
        public Builder issues(Optional<? extends List<String>> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = issues;
            return this;
        }

        /**
         * Additional freeform comments provided by the reporter.
         */
        public Builder comments(String comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * Additional freeform comments provided by the reporter.
         */
        public Builder comments(Optional<String> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        /**
         * Previous messages in this conversation.
         */
        public Builder previousMessages(List<String> previousMessages) {
            Utils.checkNotNull(previousMessages, "previousMessages");
            this.previousMessages = Optional.ofNullable(previousMessages);
            return this;
        }

        /**
         * Previous messages in this conversation.
         */
        public Builder previousMessages(Optional<? extends List<String>> previousMessages) {
            Utils.checkNotNull(previousMessages, "previousMessages");
            this.previousMessages = previousMessages;
            return this;
        }

        public Builder chatTranscript(List<FeedbackChatExchange> chatTranscript) {
            Utils.checkNotNull(chatTranscript, "chatTranscript");
            this.chatTranscript = Optional.ofNullable(chatTranscript);
            return this;
        }

        public Builder chatTranscript(Optional<? extends List<FeedbackChatExchange>> chatTranscript) {
            Utils.checkNotNull(chatTranscript, "chatTranscript");
            this.chatTranscript = chatTranscript;
            return this;
        }
        
        public ChatFeedbackPayload build() {
            return new ChatFeedbackPayload(
                rating,
                issues,
                comments,
                previousMessages,
                chatTranscript);
        }
    }
}
