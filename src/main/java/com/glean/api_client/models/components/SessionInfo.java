/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SessionInfo {

    /**
     * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionTrackingToken")
    private Optional<String> sessionTrackingToken;

    /**
     * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tabId")
    private Optional<String> tabId;

    /**
     * The last time the server saw this token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastSeen")
    private Optional<OffsetDateTime> lastSeen;

    /**
     * The last query seen by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastQuery")
    private Optional<String> lastQuery;

    @JsonCreator
    public SessionInfo(
            @JsonProperty("sessionTrackingToken") Optional<String> sessionTrackingToken,
            @JsonProperty("tabId") Optional<String> tabId,
            @JsonProperty("lastSeen") Optional<OffsetDateTime> lastSeen,
            @JsonProperty("lastQuery") Optional<String> lastQuery) {
        Utils.checkNotNull(sessionTrackingToken, "sessionTrackingToken");
        Utils.checkNotNull(tabId, "tabId");
        Utils.checkNotNull(lastSeen, "lastSeen");
        Utils.checkNotNull(lastQuery, "lastQuery");
        this.sessionTrackingToken = sessionTrackingToken;
        this.tabId = tabId;
        this.lastSeen = lastSeen;
        this.lastQuery = lastQuery;
    }
    
    public SessionInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
     */
    @JsonIgnore
    public Optional<String> sessionTrackingToken() {
        return sessionTrackingToken;
    }

    /**
     * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
     */
    @JsonIgnore
    public Optional<String> tabId() {
        return tabId;
    }

    /**
     * The last time the server saw this token.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastSeen() {
        return lastSeen;
    }

    /**
     * The last query seen by the server.
     */
    @JsonIgnore
    public Optional<String> lastQuery() {
        return lastQuery;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
     */
    public SessionInfo withSessionTrackingToken(String sessionTrackingToken) {
        Utils.checkNotNull(sessionTrackingToken, "sessionTrackingToken");
        this.sessionTrackingToken = Optional.ofNullable(sessionTrackingToken);
        return this;
    }

    /**
     * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
     */
    public SessionInfo withSessionTrackingToken(Optional<String> sessionTrackingToken) {
        Utils.checkNotNull(sessionTrackingToken, "sessionTrackingToken");
        this.sessionTrackingToken = sessionTrackingToken;
        return this;
    }

    /**
     * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
     */
    public SessionInfo withTabId(String tabId) {
        Utils.checkNotNull(tabId, "tabId");
        this.tabId = Optional.ofNullable(tabId);
        return this;
    }

    /**
     * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
     */
    public SessionInfo withTabId(Optional<String> tabId) {
        Utils.checkNotNull(tabId, "tabId");
        this.tabId = tabId;
        return this;
    }

    /**
     * The last time the server saw this token.
     */
    public SessionInfo withLastSeen(OffsetDateTime lastSeen) {
        Utils.checkNotNull(lastSeen, "lastSeen");
        this.lastSeen = Optional.ofNullable(lastSeen);
        return this;
    }

    /**
     * The last time the server saw this token.
     */
    public SessionInfo withLastSeen(Optional<OffsetDateTime> lastSeen) {
        Utils.checkNotNull(lastSeen, "lastSeen");
        this.lastSeen = lastSeen;
        return this;
    }

    /**
     * The last query seen by the server.
     */
    public SessionInfo withLastQuery(String lastQuery) {
        Utils.checkNotNull(lastQuery, "lastQuery");
        this.lastQuery = Optional.ofNullable(lastQuery);
        return this;
    }

    /**
     * The last query seen by the server.
     */
    public SessionInfo withLastQuery(Optional<String> lastQuery) {
        Utils.checkNotNull(lastQuery, "lastQuery");
        this.lastQuery = lastQuery;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SessionInfo other = (SessionInfo) o;
        return 
            Objects.deepEquals(this.sessionTrackingToken, other.sessionTrackingToken) &&
            Objects.deepEquals(this.tabId, other.tabId) &&
            Objects.deepEquals(this.lastSeen, other.lastSeen) &&
            Objects.deepEquals(this.lastQuery, other.lastQuery);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sessionTrackingToken,
            tabId,
            lastSeen,
            lastQuery);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SessionInfo.class,
                "sessionTrackingToken", sessionTrackingToken,
                "tabId", tabId,
                "lastSeen", lastSeen,
                "lastQuery", lastQuery);
    }
    
    public final static class Builder {
 
        private Optional<String> sessionTrackingToken = Optional.empty();
 
        private Optional<String> tabId = Optional.empty();
 
        private Optional<OffsetDateTime> lastSeen = Optional.empty();
 
        private Optional<String> lastQuery = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
         */
        public Builder sessionTrackingToken(String sessionTrackingToken) {
            Utils.checkNotNull(sessionTrackingToken, "sessionTrackingToken");
            this.sessionTrackingToken = Optional.ofNullable(sessionTrackingToken);
            return this;
        }

        /**
         * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
         */
        public Builder sessionTrackingToken(Optional<String> sessionTrackingToken) {
            Utils.checkNotNull(sessionTrackingToken, "sessionTrackingToken");
            this.sessionTrackingToken = sessionTrackingToken;
            return this;
        }

        /**
         * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
         */
        public Builder tabId(String tabId) {
            Utils.checkNotNull(tabId, "tabId");
            this.tabId = Optional.ofNullable(tabId);
            return this;
        }

        /**
         * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
         */
        public Builder tabId(Optional<String> tabId) {
            Utils.checkNotNull(tabId, "tabId");
            this.tabId = tabId;
            return this;
        }

        /**
         * The last time the server saw this token.
         */
        public Builder lastSeen(OffsetDateTime lastSeen) {
            Utils.checkNotNull(lastSeen, "lastSeen");
            this.lastSeen = Optional.ofNullable(lastSeen);
            return this;
        }

        /**
         * The last time the server saw this token.
         */
        public Builder lastSeen(Optional<OffsetDateTime> lastSeen) {
            Utils.checkNotNull(lastSeen, "lastSeen");
            this.lastSeen = lastSeen;
            return this;
        }

        /**
         * The last query seen by the server.
         */
        public Builder lastQuery(String lastQuery) {
            Utils.checkNotNull(lastQuery, "lastQuery");
            this.lastQuery = Optional.ofNullable(lastQuery);
            return this;
        }

        /**
         * The last query seen by the server.
         */
        public Builder lastQuery(Optional<String> lastQuery) {
            Utils.checkNotNull(lastQuery, "lastQuery");
            this.lastQuery = lastQuery;
            return this;
        }
        
        public SessionInfo build() {
            return new SessionInfo(
                sessionTrackingToken,
                tabId,
                lastSeen,
                lastQuery);
        }
    }
}
