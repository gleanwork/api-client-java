/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class DocumentInteractions {

    /**
     * The count of comments (thread replies in the case of slack).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numComments")
    private Optional<Long> numComments;

    /**
     * The count of reactions on the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numReactions")
    private Optional<Long> numReactions;

    /**
     * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reactions")
    @Deprecated
    private Optional<? extends List<String>> reactions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reacts")
    private Optional<? extends List<Reaction>> reacts;

    /**
     * Describes instances of someone posting a link to this document in one of our indexed datasources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shares")
    private Optional<? extends List<Share>> shares;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitorCount")
    private Optional<? extends CountInfo> visitorCount;

    @JsonCreator
    public DocumentInteractions(
            @JsonProperty("numComments") Optional<Long> numComments,
            @JsonProperty("numReactions") Optional<Long> numReactions,
            @JsonProperty("reactions") Optional<? extends List<String>> reactions,
            @JsonProperty("reacts") Optional<? extends List<Reaction>> reacts,
            @JsonProperty("shares") Optional<? extends List<Share>> shares,
            @JsonProperty("visitorCount") Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(numComments, "numComments");
        Utils.checkNotNull(numReactions, "numReactions");
        Utils.checkNotNull(reactions, "reactions");
        Utils.checkNotNull(reacts, "reacts");
        Utils.checkNotNull(shares, "shares");
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.numComments = numComments;
        this.numReactions = numReactions;
        this.reactions = reactions;
        this.reacts = reacts;
        this.shares = shares;
        this.visitorCount = visitorCount;
    }
    
    public DocumentInteractions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The count of comments (thread replies in the case of slack).
     */
    @JsonIgnore
    public Optional<Long> numComments() {
        return numComments;
    }

    /**
     * The count of reactions on the document.
     */
    @JsonIgnore
    public Optional<Long> numReactions() {
        return numReactions;
    }

    /**
     * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> reactions() {
        return (Optional<List<String>>) reactions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Reaction>> reacts() {
        return (Optional<List<Reaction>>) reacts;
    }

    /**
     * Describes instances of someone posting a link to this document in one of our indexed datasources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Share>> shares() {
        return (Optional<List<Share>>) shares;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> visitorCount() {
        return (Optional<CountInfo>) visitorCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The count of comments (thread replies in the case of slack).
     */
    public DocumentInteractions withNumComments(long numComments) {
        Utils.checkNotNull(numComments, "numComments");
        this.numComments = Optional.ofNullable(numComments);
        return this;
    }

    /**
     * The count of comments (thread replies in the case of slack).
     */
    public DocumentInteractions withNumComments(Optional<Long> numComments) {
        Utils.checkNotNull(numComments, "numComments");
        this.numComments = numComments;
        return this;
    }

    /**
     * The count of reactions on the document.
     */
    public DocumentInteractions withNumReactions(long numReactions) {
        Utils.checkNotNull(numReactions, "numReactions");
        this.numReactions = Optional.ofNullable(numReactions);
        return this;
    }

    /**
     * The count of reactions on the document.
     */
    public DocumentInteractions withNumReactions(Optional<Long> numReactions) {
        Utils.checkNotNull(numReactions, "numReactions");
        this.numReactions = numReactions;
        return this;
    }

    /**
     * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DocumentInteractions withReactions(List<String> reactions) {
        Utils.checkNotNull(reactions, "reactions");
        this.reactions = Optional.ofNullable(reactions);
        return this;
    }

    /**
     * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DocumentInteractions withReactions(Optional<? extends List<String>> reactions) {
        Utils.checkNotNull(reactions, "reactions");
        this.reactions = reactions;
        return this;
    }

    public DocumentInteractions withReacts(List<Reaction> reacts) {
        Utils.checkNotNull(reacts, "reacts");
        this.reacts = Optional.ofNullable(reacts);
        return this;
    }

    public DocumentInteractions withReacts(Optional<? extends List<Reaction>> reacts) {
        Utils.checkNotNull(reacts, "reacts");
        this.reacts = reacts;
        return this;
    }

    /**
     * Describes instances of someone posting a link to this document in one of our indexed datasources.
     */
    public DocumentInteractions withShares(List<Share> shares) {
        Utils.checkNotNull(shares, "shares");
        this.shares = Optional.ofNullable(shares);
        return this;
    }

    /**
     * Describes instances of someone posting a link to this document in one of our indexed datasources.
     */
    public DocumentInteractions withShares(Optional<? extends List<Share>> shares) {
        Utils.checkNotNull(shares, "shares");
        this.shares = shares;
        return this;
    }

    public DocumentInteractions withVisitorCount(CountInfo visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = Optional.ofNullable(visitorCount);
        return this;
    }

    public DocumentInteractions withVisitorCount(Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = visitorCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentInteractions other = (DocumentInteractions) o;
        return 
            Objects.deepEquals(this.numComments, other.numComments) &&
            Objects.deepEquals(this.numReactions, other.numReactions) &&
            Objects.deepEquals(this.reactions, other.reactions) &&
            Objects.deepEquals(this.reacts, other.reacts) &&
            Objects.deepEquals(this.shares, other.shares) &&
            Objects.deepEquals(this.visitorCount, other.visitorCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            numComments,
            numReactions,
            reactions,
            reacts,
            shares,
            visitorCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentInteractions.class,
                "numComments", numComments,
                "numReactions", numReactions,
                "reactions", reactions,
                "reacts", reacts,
                "shares", shares,
                "visitorCount", visitorCount);
    }
    
    public final static class Builder {
 
        private Optional<Long> numComments = Optional.empty();
 
        private Optional<Long> numReactions = Optional.empty();
 
        @Deprecated
        private Optional<? extends List<String>> reactions = Optional.empty();
 
        private Optional<? extends List<Reaction>> reacts = Optional.empty();
 
        private Optional<? extends List<Share>> shares = Optional.empty();
 
        private Optional<? extends CountInfo> visitorCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The count of comments (thread replies in the case of slack).
         */
        public Builder numComments(long numComments) {
            Utils.checkNotNull(numComments, "numComments");
            this.numComments = Optional.ofNullable(numComments);
            return this;
        }

        /**
         * The count of comments (thread replies in the case of slack).
         */
        public Builder numComments(Optional<Long> numComments) {
            Utils.checkNotNull(numComments, "numComments");
            this.numComments = numComments;
            return this;
        }

        /**
         * The count of reactions on the document.
         */
        public Builder numReactions(long numReactions) {
            Utils.checkNotNull(numReactions, "numReactions");
            this.numReactions = Optional.ofNullable(numReactions);
            return this;
        }

        /**
         * The count of reactions on the document.
         */
        public Builder numReactions(Optional<Long> numReactions) {
            Utils.checkNotNull(numReactions, "numReactions");
            this.numReactions = numReactions;
            return this;
        }

        /**
         * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder reactions(List<String> reactions) {
            Utils.checkNotNull(reactions, "reactions");
            this.reactions = Optional.ofNullable(reactions);
            return this;
        }

        /**
         * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder reactions(Optional<? extends List<String>> reactions) {
            Utils.checkNotNull(reactions, "reactions");
            this.reactions = reactions;
            return this;
        }

        public Builder reacts(List<Reaction> reacts) {
            Utils.checkNotNull(reacts, "reacts");
            this.reacts = Optional.ofNullable(reacts);
            return this;
        }

        public Builder reacts(Optional<? extends List<Reaction>> reacts) {
            Utils.checkNotNull(reacts, "reacts");
            this.reacts = reacts;
            return this;
        }

        /**
         * Describes instances of someone posting a link to this document in one of our indexed datasources.
         */
        public Builder shares(List<Share> shares) {
            Utils.checkNotNull(shares, "shares");
            this.shares = Optional.ofNullable(shares);
            return this;
        }

        /**
         * Describes instances of someone posting a link to this document in one of our indexed datasources.
         */
        public Builder shares(Optional<? extends List<Share>> shares) {
            Utils.checkNotNull(shares, "shares");
            this.shares = shares;
            return this;
        }

        public Builder visitorCount(CountInfo visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = Optional.ofNullable(visitorCount);
            return this;
        }

        public Builder visitorCount(Optional<? extends CountInfo> visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = visitorCount;
            return this;
        }
        
        public DocumentInteractions build() {
            return new DocumentInteractions(
                numComments,
                numReactions,
                reactions,
                reacts,
                shares,
                visitorCount);
        }
    }
}
