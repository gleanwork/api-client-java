/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GeneratedAttachmentContent
 * 
 * <p>Content that has been generated or extrapolated from the documents present in the document field.
 */
public class GeneratedAttachmentContent {

    /**
     * The header describing the generated content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayHeader")
    private Optional<String> displayHeader;

    /**
     * The content that has been generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    @JsonCreator
    public GeneratedAttachmentContent(
            @JsonProperty("displayHeader") Optional<String> displayHeader,
            @JsonProperty("text") Optional<String> text) {
        Utils.checkNotNull(displayHeader, "displayHeader");
        Utils.checkNotNull(text, "text");
        this.displayHeader = displayHeader;
        this.text = text;
    }
    
    public GeneratedAttachmentContent() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The header describing the generated content.
     */
    @JsonIgnore
    public Optional<String> displayHeader() {
        return displayHeader;
    }

    /**
     * The content that has been generated.
     */
    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The header describing the generated content.
     */
    public GeneratedAttachmentContent withDisplayHeader(String displayHeader) {
        Utils.checkNotNull(displayHeader, "displayHeader");
        this.displayHeader = Optional.ofNullable(displayHeader);
        return this;
    }

    /**
     * The header describing the generated content.
     */
    public GeneratedAttachmentContent withDisplayHeader(Optional<String> displayHeader) {
        Utils.checkNotNull(displayHeader, "displayHeader");
        this.displayHeader = displayHeader;
        return this;
    }

    /**
     * The content that has been generated.
     */
    public GeneratedAttachmentContent withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    /**
     * The content that has been generated.
     */
    public GeneratedAttachmentContent withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneratedAttachmentContent other = (GeneratedAttachmentContent) o;
        return 
            Objects.deepEquals(this.displayHeader, other.displayHeader) &&
            Objects.deepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            displayHeader,
            text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneratedAttachmentContent.class,
                "displayHeader", displayHeader,
                "text", text);
    }
    
    public final static class Builder {
 
        private Optional<String> displayHeader = Optional.empty();
 
        private Optional<String> text = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The header describing the generated content.
         */
        public Builder displayHeader(String displayHeader) {
            Utils.checkNotNull(displayHeader, "displayHeader");
            this.displayHeader = Optional.ofNullable(displayHeader);
            return this;
        }

        /**
         * The header describing the generated content.
         */
        public Builder displayHeader(Optional<String> displayHeader) {
            Utils.checkNotNull(displayHeader, "displayHeader");
            this.displayHeader = displayHeader;
            return this;
        }

        /**
         * The content that has been generated.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * The content that has been generated.
         */
        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }
        
        public GeneratedAttachmentContent build() {
            return new GeneratedAttachmentContent(
                displayHeader,
                text);
        }
    }
}
