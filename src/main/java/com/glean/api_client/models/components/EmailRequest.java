/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * EmailRequest
 * 
 * <p>A request to send email[s] to the specified users
 */
public class EmailRequest {

    /**
     * The type of email to send
     */
    @JsonProperty("emailTemplate")
    private CommunicationTemplate emailTemplate;

    /**
     * Admin alert related information that is used to construct the admin alert email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertData")
    private Optional<? extends AlertData> alertData;

    /**
     * The people to send emails to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipients")
    private Optional<? extends List<Person>> recipients;

    /**
     * The people to CC for each email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ccRecipients")
    private Optional<? extends List<Person>> ccRecipients;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipientFilters")
    private Optional<? extends PeopleFilters> recipientFilters;

    /**
     * Name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    private Optional<String> companyName;

    /**
     * The instance ID of the datasource (if any)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstance")
    private Optional<String> datasourceInstance;

    /**
     * The people who triggered this email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("senders")
    private Optional<? extends List<Person>> senders;

    /**
     * The URL of the client triggering the request, as received in the ClientConfig
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webAppUrl")
    private Optional<String> webAppUrl;

    /**
     * The URL of the QE instance the email request is processed by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverUrl")
    private Optional<String> serverUrl;

    /**
     * The URL to unsubscribe from emails.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsubscribeUrl")
    private Optional<String> unsubscribeUrl;

    /**
     * The documents this email request refers to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    private Optional<? extends List<Document>> documents;

    /**
     * Reasons this email request was sent. Will be shown directly to end user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasons")
    private Optional<? extends List<String>> reasons;

    /**
     * For building complex email UIs, we use a block structure that dictates what we create in the UI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    private Optional<? extends Map<String, List<Block>>> blocks;

    /**
     * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to &lbrace;&lbrace;subject&rbrace;&rbrace;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjects")
    private Optional<? extends Map<String, String>> subjects;

    /**
     * Optional payload for feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedbackPayload")
    private Optional<? extends FeedbackPayload> feedbackPayload;

    /**
     * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatFeedbackPayload")
    private Optional<? extends ChatFeedbackPayload> chatFeedbackPayload;

    /**
     * Dlp report metadata which is used to construct report email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dlpReportData")
    private Optional<? extends DlpReportData> dlpReportData;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboardingAdminInviteData")
    private Optional<? extends OnboardingAdminInviteData> onboardingAdminInviteData;

    @JsonCreator
    public EmailRequest(
            @JsonProperty("emailTemplate") CommunicationTemplate emailTemplate,
            @JsonProperty("alertData") Optional<? extends AlertData> alertData,
            @JsonProperty("recipients") Optional<? extends List<Person>> recipients,
            @JsonProperty("ccRecipients") Optional<? extends List<Person>> ccRecipients,
            @JsonProperty("recipientFilters") Optional<? extends PeopleFilters> recipientFilters,
            @JsonProperty("companyName") Optional<String> companyName,
            @JsonProperty("datasourceInstance") Optional<String> datasourceInstance,
            @JsonProperty("senders") Optional<? extends List<Person>> senders,
            @JsonProperty("webAppUrl") Optional<String> webAppUrl,
            @JsonProperty("serverUrl") Optional<String> serverUrl,
            @JsonProperty("unsubscribeUrl") Optional<String> unsubscribeUrl,
            @JsonProperty("documents") Optional<? extends List<Document>> documents,
            @JsonProperty("reasons") Optional<? extends List<String>> reasons,
            @JsonProperty("blocks") Optional<? extends Map<String, List<Block>>> blocks,
            @JsonProperty("subjects") Optional<? extends Map<String, String>> subjects,
            @JsonProperty("feedbackPayload") Optional<? extends FeedbackPayload> feedbackPayload,
            @JsonProperty("chatFeedbackPayload") Optional<? extends ChatFeedbackPayload> chatFeedbackPayload,
            @JsonProperty("dlpReportData") Optional<? extends DlpReportData> dlpReportData,
            @JsonProperty("onboardingAdminInviteData") Optional<? extends OnboardingAdminInviteData> onboardingAdminInviteData) {
        Utils.checkNotNull(emailTemplate, "emailTemplate");
        Utils.checkNotNull(alertData, "alertData");
        Utils.checkNotNull(recipients, "recipients");
        Utils.checkNotNull(ccRecipients, "ccRecipients");
        Utils.checkNotNull(recipientFilters, "recipientFilters");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        Utils.checkNotNull(senders, "senders");
        Utils.checkNotNull(webAppUrl, "webAppUrl");
        Utils.checkNotNull(serverUrl, "serverUrl");
        Utils.checkNotNull(unsubscribeUrl, "unsubscribeUrl");
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(reasons, "reasons");
        Utils.checkNotNull(blocks, "blocks");
        Utils.checkNotNull(subjects, "subjects");
        Utils.checkNotNull(feedbackPayload, "feedbackPayload");
        Utils.checkNotNull(chatFeedbackPayload, "chatFeedbackPayload");
        Utils.checkNotNull(dlpReportData, "dlpReportData");
        Utils.checkNotNull(onboardingAdminInviteData, "onboardingAdminInviteData");
        this.emailTemplate = emailTemplate;
        this.alertData = alertData;
        this.recipients = recipients;
        this.ccRecipients = ccRecipients;
        this.recipientFilters = recipientFilters;
        this.companyName = companyName;
        this.datasourceInstance = datasourceInstance;
        this.senders = senders;
        this.webAppUrl = webAppUrl;
        this.serverUrl = serverUrl;
        this.unsubscribeUrl = unsubscribeUrl;
        this.documents = documents;
        this.reasons = reasons;
        this.blocks = blocks;
        this.subjects = subjects;
        this.feedbackPayload = feedbackPayload;
        this.chatFeedbackPayload = chatFeedbackPayload;
        this.dlpReportData = dlpReportData;
        this.onboardingAdminInviteData = onboardingAdminInviteData;
    }
    
    public EmailRequest(
            CommunicationTemplate emailTemplate) {
        this(emailTemplate, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of email to send
     */
    @JsonIgnore
    public CommunicationTemplate emailTemplate() {
        return emailTemplate;
    }

    /**
     * Admin alert related information that is used to construct the admin alert email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AlertData> alertData() {
        return (Optional<AlertData>) alertData;
    }

    /**
     * The people to send emails to
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> recipients() {
        return (Optional<List<Person>>) recipients;
    }

    /**
     * The people to CC for each email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> ccRecipients() {
        return (Optional<List<Person>>) ccRecipients;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PeopleFilters> recipientFilters() {
        return (Optional<PeopleFilters>) recipientFilters;
    }

    /**
     * Name of the company.
     */
    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    /**
     * The instance ID of the datasource (if any)
     */
    @JsonIgnore
    public Optional<String> datasourceInstance() {
        return datasourceInstance;
    }

    /**
     * The people who triggered this email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> senders() {
        return (Optional<List<Person>>) senders;
    }

    /**
     * The URL of the client triggering the request, as received in the ClientConfig
     */
    @JsonIgnore
    public Optional<String> webAppUrl() {
        return webAppUrl;
    }

    /**
     * The URL of the QE instance the email request is processed by.
     */
    @JsonIgnore
    public Optional<String> serverUrl() {
        return serverUrl;
    }

    /**
     * The URL to unsubscribe from emails.
     */
    @JsonIgnore
    public Optional<String> unsubscribeUrl() {
        return unsubscribeUrl;
    }

    /**
     * The documents this email request refers to
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Document>> documents() {
        return (Optional<List<Document>>) documents;
    }

    /**
     * Reasons this email request was sent. Will be shown directly to end user.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> reasons() {
        return (Optional<List<String>>) reasons;
    }

    /**
     * For building complex email UIs, we use a block structure that dictates what we create in the UI
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<Block>>> blocks() {
        return (Optional<Map<String, List<Block>>>) blocks;
    }

    /**
     * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to &lbrace;&lbrace;subject&rbrace;&rbrace;
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> subjects() {
        return (Optional<Map<String, String>>) subjects;
    }

    /**
     * Optional payload for feedback reporting.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeedbackPayload> feedbackPayload() {
        return (Optional<FeedbackPayload>) feedbackPayload;
    }

    /**
     * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatFeedbackPayload> chatFeedbackPayload() {
        return (Optional<ChatFeedbackPayload>) chatFeedbackPayload;
    }

    /**
     * Dlp report metadata which is used to construct report email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpReportData> dlpReportData() {
        return (Optional<DlpReportData>) dlpReportData;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OnboardingAdminInviteData> onboardingAdminInviteData() {
        return (Optional<OnboardingAdminInviteData>) onboardingAdminInviteData;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of email to send
     */
    public EmailRequest withEmailTemplate(CommunicationTemplate emailTemplate) {
        Utils.checkNotNull(emailTemplate, "emailTemplate");
        this.emailTemplate = emailTemplate;
        return this;
    }

    /**
     * Admin alert related information that is used to construct the admin alert email
     */
    public EmailRequest withAlertData(AlertData alertData) {
        Utils.checkNotNull(alertData, "alertData");
        this.alertData = Optional.ofNullable(alertData);
        return this;
    }

    /**
     * Admin alert related information that is used to construct the admin alert email
     */
    public EmailRequest withAlertData(Optional<? extends AlertData> alertData) {
        Utils.checkNotNull(alertData, "alertData");
        this.alertData = alertData;
        return this;
    }

    /**
     * The people to send emails to
     */
    public EmailRequest withRecipients(List<Person> recipients) {
        Utils.checkNotNull(recipients, "recipients");
        this.recipients = Optional.ofNullable(recipients);
        return this;
    }

    /**
     * The people to send emails to
     */
    public EmailRequest withRecipients(Optional<? extends List<Person>> recipients) {
        Utils.checkNotNull(recipients, "recipients");
        this.recipients = recipients;
        return this;
    }

    /**
     * The people to CC for each email
     */
    public EmailRequest withCcRecipients(List<Person> ccRecipients) {
        Utils.checkNotNull(ccRecipients, "ccRecipients");
        this.ccRecipients = Optional.ofNullable(ccRecipients);
        return this;
    }

    /**
     * The people to CC for each email
     */
    public EmailRequest withCcRecipients(Optional<? extends List<Person>> ccRecipients) {
        Utils.checkNotNull(ccRecipients, "ccRecipients");
        this.ccRecipients = ccRecipients;
        return this;
    }

    public EmailRequest withRecipientFilters(PeopleFilters recipientFilters) {
        Utils.checkNotNull(recipientFilters, "recipientFilters");
        this.recipientFilters = Optional.ofNullable(recipientFilters);
        return this;
    }

    public EmailRequest withRecipientFilters(Optional<? extends PeopleFilters> recipientFilters) {
        Utils.checkNotNull(recipientFilters, "recipientFilters");
        this.recipientFilters = recipientFilters;
        return this;
    }

    /**
     * Name of the company.
     */
    public EmailRequest withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }

    /**
     * Name of the company.
     */
    public EmailRequest withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The instance ID of the datasource (if any)
     */
    public EmailRequest withDatasourceInstance(String datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = Optional.ofNullable(datasourceInstance);
        return this;
    }

    /**
     * The instance ID of the datasource (if any)
     */
    public EmailRequest withDatasourceInstance(Optional<String> datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = datasourceInstance;
        return this;
    }

    /**
     * The people who triggered this email
     */
    public EmailRequest withSenders(List<Person> senders) {
        Utils.checkNotNull(senders, "senders");
        this.senders = Optional.ofNullable(senders);
        return this;
    }

    /**
     * The people who triggered this email
     */
    public EmailRequest withSenders(Optional<? extends List<Person>> senders) {
        Utils.checkNotNull(senders, "senders");
        this.senders = senders;
        return this;
    }

    /**
     * The URL of the client triggering the request, as received in the ClientConfig
     */
    public EmailRequest withWebAppUrl(String webAppUrl) {
        Utils.checkNotNull(webAppUrl, "webAppUrl");
        this.webAppUrl = Optional.ofNullable(webAppUrl);
        return this;
    }

    /**
     * The URL of the client triggering the request, as received in the ClientConfig
     */
    public EmailRequest withWebAppUrl(Optional<String> webAppUrl) {
        Utils.checkNotNull(webAppUrl, "webAppUrl");
        this.webAppUrl = webAppUrl;
        return this;
    }

    /**
     * The URL of the QE instance the email request is processed by.
     */
    public EmailRequest withServerUrl(String serverUrl) {
        Utils.checkNotNull(serverUrl, "serverUrl");
        this.serverUrl = Optional.ofNullable(serverUrl);
        return this;
    }

    /**
     * The URL of the QE instance the email request is processed by.
     */
    public EmailRequest withServerUrl(Optional<String> serverUrl) {
        Utils.checkNotNull(serverUrl, "serverUrl");
        this.serverUrl = serverUrl;
        return this;
    }

    /**
     * The URL to unsubscribe from emails.
     */
    public EmailRequest withUnsubscribeUrl(String unsubscribeUrl) {
        Utils.checkNotNull(unsubscribeUrl, "unsubscribeUrl");
        this.unsubscribeUrl = Optional.ofNullable(unsubscribeUrl);
        return this;
    }

    /**
     * The URL to unsubscribe from emails.
     */
    public EmailRequest withUnsubscribeUrl(Optional<String> unsubscribeUrl) {
        Utils.checkNotNull(unsubscribeUrl, "unsubscribeUrl");
        this.unsubscribeUrl = unsubscribeUrl;
        return this;
    }

    /**
     * The documents this email request refers to
     */
    public EmailRequest withDocuments(List<Document> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    /**
     * The documents this email request refers to
     */
    public EmailRequest withDocuments(Optional<? extends List<Document>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * Reasons this email request was sent. Will be shown directly to end user.
     */
    public EmailRequest withReasons(List<String> reasons) {
        Utils.checkNotNull(reasons, "reasons");
        this.reasons = Optional.ofNullable(reasons);
        return this;
    }

    /**
     * Reasons this email request was sent. Will be shown directly to end user.
     */
    public EmailRequest withReasons(Optional<? extends List<String>> reasons) {
        Utils.checkNotNull(reasons, "reasons");
        this.reasons = reasons;
        return this;
    }

    /**
     * For building complex email UIs, we use a block structure that dictates what we create in the UI
     */
    public EmailRequest withBlocks(Map<String, List<Block>> blocks) {
        Utils.checkNotNull(blocks, "blocks");
        this.blocks = Optional.ofNullable(blocks);
        return this;
    }

    /**
     * For building complex email UIs, we use a block structure that dictates what we create in the UI
     */
    public EmailRequest withBlocks(Optional<? extends Map<String, List<Block>>> blocks) {
        Utils.checkNotNull(blocks, "blocks");
        this.blocks = blocks;
        return this;
    }

    /**
     * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to &lbrace;&lbrace;subject&rbrace;&rbrace;
     */
    public EmailRequest withSubjects(Map<String, String> subjects) {
        Utils.checkNotNull(subjects, "subjects");
        this.subjects = Optional.ofNullable(subjects);
        return this;
    }

    /**
     * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to &lbrace;&lbrace;subject&rbrace;&rbrace;
     */
    public EmailRequest withSubjects(Optional<? extends Map<String, String>> subjects) {
        Utils.checkNotNull(subjects, "subjects");
        this.subjects = subjects;
        return this;
    }

    /**
     * Optional payload for feedback reporting.
     */
    public EmailRequest withFeedbackPayload(FeedbackPayload feedbackPayload) {
        Utils.checkNotNull(feedbackPayload, "feedbackPayload");
        this.feedbackPayload = Optional.ofNullable(feedbackPayload);
        return this;
    }

    /**
     * Optional payload for feedback reporting.
     */
    public EmailRequest withFeedbackPayload(Optional<? extends FeedbackPayload> feedbackPayload) {
        Utils.checkNotNull(feedbackPayload, "feedbackPayload");
        this.feedbackPayload = feedbackPayload;
        return this;
    }

    /**
     * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
     */
    public EmailRequest withChatFeedbackPayload(ChatFeedbackPayload chatFeedbackPayload) {
        Utils.checkNotNull(chatFeedbackPayload, "chatFeedbackPayload");
        this.chatFeedbackPayload = Optional.ofNullable(chatFeedbackPayload);
        return this;
    }

    /**
     * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
     */
    public EmailRequest withChatFeedbackPayload(Optional<? extends ChatFeedbackPayload> chatFeedbackPayload) {
        Utils.checkNotNull(chatFeedbackPayload, "chatFeedbackPayload");
        this.chatFeedbackPayload = chatFeedbackPayload;
        return this;
    }

    /**
     * Dlp report metadata which is used to construct report email
     */
    public EmailRequest withDlpReportData(DlpReportData dlpReportData) {
        Utils.checkNotNull(dlpReportData, "dlpReportData");
        this.dlpReportData = Optional.ofNullable(dlpReportData);
        return this;
    }

    /**
     * Dlp report metadata which is used to construct report email
     */
    public EmailRequest withDlpReportData(Optional<? extends DlpReportData> dlpReportData) {
        Utils.checkNotNull(dlpReportData, "dlpReportData");
        this.dlpReportData = dlpReportData;
        return this;
    }

    public EmailRequest withOnboardingAdminInviteData(OnboardingAdminInviteData onboardingAdminInviteData) {
        Utils.checkNotNull(onboardingAdminInviteData, "onboardingAdminInviteData");
        this.onboardingAdminInviteData = Optional.ofNullable(onboardingAdminInviteData);
        return this;
    }

    public EmailRequest withOnboardingAdminInviteData(Optional<? extends OnboardingAdminInviteData> onboardingAdminInviteData) {
        Utils.checkNotNull(onboardingAdminInviteData, "onboardingAdminInviteData");
        this.onboardingAdminInviteData = onboardingAdminInviteData;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmailRequest other = (EmailRequest) o;
        return 
            Objects.deepEquals(this.emailTemplate, other.emailTemplate) &&
            Objects.deepEquals(this.alertData, other.alertData) &&
            Objects.deepEquals(this.recipients, other.recipients) &&
            Objects.deepEquals(this.ccRecipients, other.ccRecipients) &&
            Objects.deepEquals(this.recipientFilters, other.recipientFilters) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.datasourceInstance, other.datasourceInstance) &&
            Objects.deepEquals(this.senders, other.senders) &&
            Objects.deepEquals(this.webAppUrl, other.webAppUrl) &&
            Objects.deepEquals(this.serverUrl, other.serverUrl) &&
            Objects.deepEquals(this.unsubscribeUrl, other.unsubscribeUrl) &&
            Objects.deepEquals(this.documents, other.documents) &&
            Objects.deepEquals(this.reasons, other.reasons) &&
            Objects.deepEquals(this.blocks, other.blocks) &&
            Objects.deepEquals(this.subjects, other.subjects) &&
            Objects.deepEquals(this.feedbackPayload, other.feedbackPayload) &&
            Objects.deepEquals(this.chatFeedbackPayload, other.chatFeedbackPayload) &&
            Objects.deepEquals(this.dlpReportData, other.dlpReportData) &&
            Objects.deepEquals(this.onboardingAdminInviteData, other.onboardingAdminInviteData);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            emailTemplate,
            alertData,
            recipients,
            ccRecipients,
            recipientFilters,
            companyName,
            datasourceInstance,
            senders,
            webAppUrl,
            serverUrl,
            unsubscribeUrl,
            documents,
            reasons,
            blocks,
            subjects,
            feedbackPayload,
            chatFeedbackPayload,
            dlpReportData,
            onboardingAdminInviteData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmailRequest.class,
                "emailTemplate", emailTemplate,
                "alertData", alertData,
                "recipients", recipients,
                "ccRecipients", ccRecipients,
                "recipientFilters", recipientFilters,
                "companyName", companyName,
                "datasourceInstance", datasourceInstance,
                "senders", senders,
                "webAppUrl", webAppUrl,
                "serverUrl", serverUrl,
                "unsubscribeUrl", unsubscribeUrl,
                "documents", documents,
                "reasons", reasons,
                "blocks", blocks,
                "subjects", subjects,
                "feedbackPayload", feedbackPayload,
                "chatFeedbackPayload", chatFeedbackPayload,
                "dlpReportData", dlpReportData,
                "onboardingAdminInviteData", onboardingAdminInviteData);
    }
    
    public final static class Builder {
 
        private CommunicationTemplate emailTemplate;
 
        private Optional<? extends AlertData> alertData = Optional.empty();
 
        private Optional<? extends List<Person>> recipients = Optional.empty();
 
        private Optional<? extends List<Person>> ccRecipients = Optional.empty();
 
        private Optional<? extends PeopleFilters> recipientFilters = Optional.empty();
 
        private Optional<String> companyName = Optional.empty();
 
        private Optional<String> datasourceInstance = Optional.empty();
 
        private Optional<? extends List<Person>> senders = Optional.empty();
 
        private Optional<String> webAppUrl = Optional.empty();
 
        private Optional<String> serverUrl = Optional.empty();
 
        private Optional<String> unsubscribeUrl = Optional.empty();
 
        private Optional<? extends List<Document>> documents = Optional.empty();
 
        private Optional<? extends List<String>> reasons = Optional.empty();
 
        private Optional<? extends Map<String, List<Block>>> blocks = Optional.empty();
 
        private Optional<? extends Map<String, String>> subjects = Optional.empty();
 
        private Optional<? extends FeedbackPayload> feedbackPayload = Optional.empty();
 
        private Optional<? extends ChatFeedbackPayload> chatFeedbackPayload = Optional.empty();
 
        private Optional<? extends DlpReportData> dlpReportData = Optional.empty();
 
        private Optional<? extends OnboardingAdminInviteData> onboardingAdminInviteData = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of email to send
         */
        public Builder emailTemplate(CommunicationTemplate emailTemplate) {
            Utils.checkNotNull(emailTemplate, "emailTemplate");
            this.emailTemplate = emailTemplate;
            return this;
        }

        /**
         * Admin alert related information that is used to construct the admin alert email
         */
        public Builder alertData(AlertData alertData) {
            Utils.checkNotNull(alertData, "alertData");
            this.alertData = Optional.ofNullable(alertData);
            return this;
        }

        /**
         * Admin alert related information that is used to construct the admin alert email
         */
        public Builder alertData(Optional<? extends AlertData> alertData) {
            Utils.checkNotNull(alertData, "alertData");
            this.alertData = alertData;
            return this;
        }

        /**
         * The people to send emails to
         */
        public Builder recipients(List<Person> recipients) {
            Utils.checkNotNull(recipients, "recipients");
            this.recipients = Optional.ofNullable(recipients);
            return this;
        }

        /**
         * The people to send emails to
         */
        public Builder recipients(Optional<? extends List<Person>> recipients) {
            Utils.checkNotNull(recipients, "recipients");
            this.recipients = recipients;
            return this;
        }

        /**
         * The people to CC for each email
         */
        public Builder ccRecipients(List<Person> ccRecipients) {
            Utils.checkNotNull(ccRecipients, "ccRecipients");
            this.ccRecipients = Optional.ofNullable(ccRecipients);
            return this;
        }

        /**
         * The people to CC for each email
         */
        public Builder ccRecipients(Optional<? extends List<Person>> ccRecipients) {
            Utils.checkNotNull(ccRecipients, "ccRecipients");
            this.ccRecipients = ccRecipients;
            return this;
        }

        public Builder recipientFilters(PeopleFilters recipientFilters) {
            Utils.checkNotNull(recipientFilters, "recipientFilters");
            this.recipientFilters = Optional.ofNullable(recipientFilters);
            return this;
        }

        public Builder recipientFilters(Optional<? extends PeopleFilters> recipientFilters) {
            Utils.checkNotNull(recipientFilters, "recipientFilters");
            this.recipientFilters = recipientFilters;
            return this;
        }

        /**
         * Name of the company.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * Name of the company.
         */
        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * The instance ID of the datasource (if any)
         */
        public Builder datasourceInstance(String datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = Optional.ofNullable(datasourceInstance);
            return this;
        }

        /**
         * The instance ID of the datasource (if any)
         */
        public Builder datasourceInstance(Optional<String> datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = datasourceInstance;
            return this;
        }

        /**
         * The people who triggered this email
         */
        public Builder senders(List<Person> senders) {
            Utils.checkNotNull(senders, "senders");
            this.senders = Optional.ofNullable(senders);
            return this;
        }

        /**
         * The people who triggered this email
         */
        public Builder senders(Optional<? extends List<Person>> senders) {
            Utils.checkNotNull(senders, "senders");
            this.senders = senders;
            return this;
        }

        /**
         * The URL of the client triggering the request, as received in the ClientConfig
         */
        public Builder webAppUrl(String webAppUrl) {
            Utils.checkNotNull(webAppUrl, "webAppUrl");
            this.webAppUrl = Optional.ofNullable(webAppUrl);
            return this;
        }

        /**
         * The URL of the client triggering the request, as received in the ClientConfig
         */
        public Builder webAppUrl(Optional<String> webAppUrl) {
            Utils.checkNotNull(webAppUrl, "webAppUrl");
            this.webAppUrl = webAppUrl;
            return this;
        }

        /**
         * The URL of the QE instance the email request is processed by.
         */
        public Builder serverUrl(String serverUrl) {
            Utils.checkNotNull(serverUrl, "serverUrl");
            this.serverUrl = Optional.ofNullable(serverUrl);
            return this;
        }

        /**
         * The URL of the QE instance the email request is processed by.
         */
        public Builder serverUrl(Optional<String> serverUrl) {
            Utils.checkNotNull(serverUrl, "serverUrl");
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * The URL to unsubscribe from emails.
         */
        public Builder unsubscribeUrl(String unsubscribeUrl) {
            Utils.checkNotNull(unsubscribeUrl, "unsubscribeUrl");
            this.unsubscribeUrl = Optional.ofNullable(unsubscribeUrl);
            return this;
        }

        /**
         * The URL to unsubscribe from emails.
         */
        public Builder unsubscribeUrl(Optional<String> unsubscribeUrl) {
            Utils.checkNotNull(unsubscribeUrl, "unsubscribeUrl");
            this.unsubscribeUrl = unsubscribeUrl;
            return this;
        }

        /**
         * The documents this email request refers to
         */
        public Builder documents(List<Document> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * The documents this email request refers to
         */
        public Builder documents(Optional<? extends List<Document>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        /**
         * Reasons this email request was sent. Will be shown directly to end user.
         */
        public Builder reasons(List<String> reasons) {
            Utils.checkNotNull(reasons, "reasons");
            this.reasons = Optional.ofNullable(reasons);
            return this;
        }

        /**
         * Reasons this email request was sent. Will be shown directly to end user.
         */
        public Builder reasons(Optional<? extends List<String>> reasons) {
            Utils.checkNotNull(reasons, "reasons");
            this.reasons = reasons;
            return this;
        }

        /**
         * For building complex email UIs, we use a block structure that dictates what we create in the UI
         */
        public Builder blocks(Map<String, List<Block>> blocks) {
            Utils.checkNotNull(blocks, "blocks");
            this.blocks = Optional.ofNullable(blocks);
            return this;
        }

        /**
         * For building complex email UIs, we use a block structure that dictates what we create in the UI
         */
        public Builder blocks(Optional<? extends Map<String, List<Block>>> blocks) {
            Utils.checkNotNull(blocks, "blocks");
            this.blocks = blocks;
            return this;
        }

        /**
         * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to &lbrace;&lbrace;subject&rbrace;&rbrace;
         */
        public Builder subjects(Map<String, String> subjects) {
            Utils.checkNotNull(subjects, "subjects");
            this.subjects = Optional.ofNullable(subjects);
            return this;
        }

        /**
         * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to &lbrace;&lbrace;subject&rbrace;&rbrace;
         */
        public Builder subjects(Optional<? extends Map<String, String>> subjects) {
            Utils.checkNotNull(subjects, "subjects");
            this.subjects = subjects;
            return this;
        }

        /**
         * Optional payload for feedback reporting.
         */
        public Builder feedbackPayload(FeedbackPayload feedbackPayload) {
            Utils.checkNotNull(feedbackPayload, "feedbackPayload");
            this.feedbackPayload = Optional.ofNullable(feedbackPayload);
            return this;
        }

        /**
         * Optional payload for feedback reporting.
         */
        public Builder feedbackPayload(Optional<? extends FeedbackPayload> feedbackPayload) {
            Utils.checkNotNull(feedbackPayload, "feedbackPayload");
            this.feedbackPayload = feedbackPayload;
            return this;
        }

        /**
         * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
         */
        public Builder chatFeedbackPayload(ChatFeedbackPayload chatFeedbackPayload) {
            Utils.checkNotNull(chatFeedbackPayload, "chatFeedbackPayload");
            this.chatFeedbackPayload = Optional.ofNullable(chatFeedbackPayload);
            return this;
        }

        /**
         * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
         */
        public Builder chatFeedbackPayload(Optional<? extends ChatFeedbackPayload> chatFeedbackPayload) {
            Utils.checkNotNull(chatFeedbackPayload, "chatFeedbackPayload");
            this.chatFeedbackPayload = chatFeedbackPayload;
            return this;
        }

        /**
         * Dlp report metadata which is used to construct report email
         */
        public Builder dlpReportData(DlpReportData dlpReportData) {
            Utils.checkNotNull(dlpReportData, "dlpReportData");
            this.dlpReportData = Optional.ofNullable(dlpReportData);
            return this;
        }

        /**
         * Dlp report metadata which is used to construct report email
         */
        public Builder dlpReportData(Optional<? extends DlpReportData> dlpReportData) {
            Utils.checkNotNull(dlpReportData, "dlpReportData");
            this.dlpReportData = dlpReportData;
            return this;
        }

        public Builder onboardingAdminInviteData(OnboardingAdminInviteData onboardingAdminInviteData) {
            Utils.checkNotNull(onboardingAdminInviteData, "onboardingAdminInviteData");
            this.onboardingAdminInviteData = Optional.ofNullable(onboardingAdminInviteData);
            return this;
        }

        public Builder onboardingAdminInviteData(Optional<? extends OnboardingAdminInviteData> onboardingAdminInviteData) {
            Utils.checkNotNull(onboardingAdminInviteData, "onboardingAdminInviteData");
            this.onboardingAdminInviteData = onboardingAdminInviteData;
            return this;
        }
        
        public EmailRequest build() {
            return new EmailRequest(
                emailTemplate,
                alertData,
                recipients,
                ccRecipients,
                recipientFilters,
                companyName,
                datasourceInstance,
                senders,
                webAppUrl,
                serverUrl,
                unsubscribeUrl,
                documents,
                reasons,
                blocks,
                subjects,
                feedbackPayload,
                chatFeedbackPayload,
                dlpReportData,
                onboardingAdminInviteData);
        }
    }
}
