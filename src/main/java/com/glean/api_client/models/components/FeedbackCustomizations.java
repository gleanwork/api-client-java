/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class FeedbackCustomizations {

    /**
     * The channels to which feedback will be sent for any feature that does not have specific configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultChannels")
    private Optional<? extends List<FeedbackChannel>> defaultChannels;

    /**
     * The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featureChannels")
    private Optional<? extends Map<String, List<FeedbackChannel>>> featureChannels;

    /**
     * A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disclaimer")
    private Optional<String> disclaimer;

    /**
     * An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyPrivacyPolicyLink")
    private Optional<String> companyPrivacyPolicyLink;

    /**
     * User visible text shown when seeking support to guide them to their company's internal support page when appropriate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportMessage")
    private Optional<String> supportMessage;

    /**
     * User visible text that will link to the user's company's internal support page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportLinkText")
    private Optional<String> supportLinkText;

    /**
     * URL to the user's company's internal suport page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportLink")
    private Optional<String> supportLink;

    @JsonCreator
    public FeedbackCustomizations(
            @JsonProperty("defaultChannels") Optional<? extends List<FeedbackChannel>> defaultChannels,
            @JsonProperty("featureChannels") Optional<? extends Map<String, List<FeedbackChannel>>> featureChannels,
            @JsonProperty("disclaimer") Optional<String> disclaimer,
            @JsonProperty("companyPrivacyPolicyLink") Optional<String> companyPrivacyPolicyLink,
            @JsonProperty("supportMessage") Optional<String> supportMessage,
            @JsonProperty("supportLinkText") Optional<String> supportLinkText,
            @JsonProperty("supportLink") Optional<String> supportLink) {
        Utils.checkNotNull(defaultChannels, "defaultChannels");
        Utils.checkNotNull(featureChannels, "featureChannels");
        Utils.checkNotNull(disclaimer, "disclaimer");
        Utils.checkNotNull(companyPrivacyPolicyLink, "companyPrivacyPolicyLink");
        Utils.checkNotNull(supportMessage, "supportMessage");
        Utils.checkNotNull(supportLinkText, "supportLinkText");
        Utils.checkNotNull(supportLink, "supportLink");
        this.defaultChannels = defaultChannels;
        this.featureChannels = featureChannels;
        this.disclaimer = disclaimer;
        this.companyPrivacyPolicyLink = companyPrivacyPolicyLink;
        this.supportMessage = supportMessage;
        this.supportLinkText = supportLinkText;
        this.supportLink = supportLink;
    }
    
    public FeedbackCustomizations() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The channels to which feedback will be sent for any feature that does not have specific configuration.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeedbackChannel>> defaultChannels() {
        return (Optional<List<FeedbackChannel>>) defaultChannels;
    }

    /**
     * The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<FeedbackChannel>>> featureChannels() {
        return (Optional<Map<String, List<FeedbackChannel>>>) featureChannels;
    }

    /**
     * A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.
     */
    @JsonIgnore
    public Optional<String> disclaimer() {
        return disclaimer;
    }

    /**
     * An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.
     */
    @JsonIgnore
    public Optional<String> companyPrivacyPolicyLink() {
        return companyPrivacyPolicyLink;
    }

    /**
     * User visible text shown when seeking support to guide them to their company's internal support page when appropriate
     */
    @JsonIgnore
    public Optional<String> supportMessage() {
        return supportMessage;
    }

    /**
     * User visible text that will link to the user's company's internal support page
     */
    @JsonIgnore
    public Optional<String> supportLinkText() {
        return supportLinkText;
    }

    /**
     * URL to the user's company's internal suport page
     */
    @JsonIgnore
    public Optional<String> supportLink() {
        return supportLink;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The channels to which feedback will be sent for any feature that does not have specific configuration.
     */
    public FeedbackCustomizations withDefaultChannels(List<FeedbackChannel> defaultChannels) {
        Utils.checkNotNull(defaultChannels, "defaultChannels");
        this.defaultChannels = Optional.ofNullable(defaultChannels);
        return this;
    }

    /**
     * The channels to which feedback will be sent for any feature that does not have specific configuration.
     */
    public FeedbackCustomizations withDefaultChannels(Optional<? extends List<FeedbackChannel>> defaultChannels) {
        Utils.checkNotNull(defaultChannels, "defaultChannels");
        this.defaultChannels = defaultChannels;
        return this;
    }

    /**
     * The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.
     */
    public FeedbackCustomizations withFeatureChannels(Map<String, List<FeedbackChannel>> featureChannels) {
        Utils.checkNotNull(featureChannels, "featureChannels");
        this.featureChannels = Optional.ofNullable(featureChannels);
        return this;
    }

    /**
     * The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.
     */
    public FeedbackCustomizations withFeatureChannels(Optional<? extends Map<String, List<FeedbackChannel>>> featureChannels) {
        Utils.checkNotNull(featureChannels, "featureChannels");
        this.featureChannels = featureChannels;
        return this;
    }

    /**
     * A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.
     */
    public FeedbackCustomizations withDisclaimer(String disclaimer) {
        Utils.checkNotNull(disclaimer, "disclaimer");
        this.disclaimer = Optional.ofNullable(disclaimer);
        return this;
    }

    /**
     * A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.
     */
    public FeedbackCustomizations withDisclaimer(Optional<String> disclaimer) {
        Utils.checkNotNull(disclaimer, "disclaimer");
        this.disclaimer = disclaimer;
        return this;
    }

    /**
     * An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.
     */
    public FeedbackCustomizations withCompanyPrivacyPolicyLink(String companyPrivacyPolicyLink) {
        Utils.checkNotNull(companyPrivacyPolicyLink, "companyPrivacyPolicyLink");
        this.companyPrivacyPolicyLink = Optional.ofNullable(companyPrivacyPolicyLink);
        return this;
    }

    /**
     * An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.
     */
    public FeedbackCustomizations withCompanyPrivacyPolicyLink(Optional<String> companyPrivacyPolicyLink) {
        Utils.checkNotNull(companyPrivacyPolicyLink, "companyPrivacyPolicyLink");
        this.companyPrivacyPolicyLink = companyPrivacyPolicyLink;
        return this;
    }

    /**
     * User visible text shown when seeking support to guide them to their company's internal support page when appropriate
     */
    public FeedbackCustomizations withSupportMessage(String supportMessage) {
        Utils.checkNotNull(supportMessage, "supportMessage");
        this.supportMessage = Optional.ofNullable(supportMessage);
        return this;
    }

    /**
     * User visible text shown when seeking support to guide them to their company's internal support page when appropriate
     */
    public FeedbackCustomizations withSupportMessage(Optional<String> supportMessage) {
        Utils.checkNotNull(supportMessage, "supportMessage");
        this.supportMessage = supportMessage;
        return this;
    }

    /**
     * User visible text that will link to the user's company's internal support page
     */
    public FeedbackCustomizations withSupportLinkText(String supportLinkText) {
        Utils.checkNotNull(supportLinkText, "supportLinkText");
        this.supportLinkText = Optional.ofNullable(supportLinkText);
        return this;
    }

    /**
     * User visible text that will link to the user's company's internal support page
     */
    public FeedbackCustomizations withSupportLinkText(Optional<String> supportLinkText) {
        Utils.checkNotNull(supportLinkText, "supportLinkText");
        this.supportLinkText = supportLinkText;
        return this;
    }

    /**
     * URL to the user's company's internal suport page
     */
    public FeedbackCustomizations withSupportLink(String supportLink) {
        Utils.checkNotNull(supportLink, "supportLink");
        this.supportLink = Optional.ofNullable(supportLink);
        return this;
    }

    /**
     * URL to the user's company's internal suport page
     */
    public FeedbackCustomizations withSupportLink(Optional<String> supportLink) {
        Utils.checkNotNull(supportLink, "supportLink");
        this.supportLink = supportLink;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedbackCustomizations other = (FeedbackCustomizations) o;
        return 
            Objects.deepEquals(this.defaultChannels, other.defaultChannels) &&
            Objects.deepEquals(this.featureChannels, other.featureChannels) &&
            Objects.deepEquals(this.disclaimer, other.disclaimer) &&
            Objects.deepEquals(this.companyPrivacyPolicyLink, other.companyPrivacyPolicyLink) &&
            Objects.deepEquals(this.supportMessage, other.supportMessage) &&
            Objects.deepEquals(this.supportLinkText, other.supportLinkText) &&
            Objects.deepEquals(this.supportLink, other.supportLink);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            defaultChannels,
            featureChannels,
            disclaimer,
            companyPrivacyPolicyLink,
            supportMessage,
            supportLinkText,
            supportLink);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedbackCustomizations.class,
                "defaultChannels", defaultChannels,
                "featureChannels", featureChannels,
                "disclaimer", disclaimer,
                "companyPrivacyPolicyLink", companyPrivacyPolicyLink,
                "supportMessage", supportMessage,
                "supportLinkText", supportLinkText,
                "supportLink", supportLink);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<FeedbackChannel>> defaultChannels = Optional.empty();
 
        private Optional<? extends Map<String, List<FeedbackChannel>>> featureChannels = Optional.empty();
 
        private Optional<String> disclaimer = Optional.empty();
 
        private Optional<String> companyPrivacyPolicyLink = Optional.empty();
 
        private Optional<String> supportMessage = Optional.empty();
 
        private Optional<String> supportLinkText = Optional.empty();
 
        private Optional<String> supportLink = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The channels to which feedback will be sent for any feature that does not have specific configuration.
         */
        public Builder defaultChannels(List<FeedbackChannel> defaultChannels) {
            Utils.checkNotNull(defaultChannels, "defaultChannels");
            this.defaultChannels = Optional.ofNullable(defaultChannels);
            return this;
        }

        /**
         * The channels to which feedback will be sent for any feature that does not have specific configuration.
         */
        public Builder defaultChannels(Optional<? extends List<FeedbackChannel>> defaultChannels) {
            Utils.checkNotNull(defaultChannels, "defaultChannels");
            this.defaultChannels = defaultChannels;
            return this;
        }

        /**
         * The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.
         */
        public Builder featureChannels(Map<String, List<FeedbackChannel>> featureChannels) {
            Utils.checkNotNull(featureChannels, "featureChannels");
            this.featureChannels = Optional.ofNullable(featureChannels);
            return this;
        }

        /**
         * The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.
         */
        public Builder featureChannels(Optional<? extends Map<String, List<FeedbackChannel>>> featureChannels) {
            Utils.checkNotNull(featureChannels, "featureChannels");
            this.featureChannels = featureChannels;
            return this;
        }

        /**
         * A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.
         */
        public Builder disclaimer(String disclaimer) {
            Utils.checkNotNull(disclaimer, "disclaimer");
            this.disclaimer = Optional.ofNullable(disclaimer);
            return this;
        }

        /**
         * A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.
         */
        public Builder disclaimer(Optional<String> disclaimer) {
            Utils.checkNotNull(disclaimer, "disclaimer");
            this.disclaimer = disclaimer;
            return this;
        }

        /**
         * An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.
         */
        public Builder companyPrivacyPolicyLink(String companyPrivacyPolicyLink) {
            Utils.checkNotNull(companyPrivacyPolicyLink, "companyPrivacyPolicyLink");
            this.companyPrivacyPolicyLink = Optional.ofNullable(companyPrivacyPolicyLink);
            return this;
        }

        /**
         * An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.
         */
        public Builder companyPrivacyPolicyLink(Optional<String> companyPrivacyPolicyLink) {
            Utils.checkNotNull(companyPrivacyPolicyLink, "companyPrivacyPolicyLink");
            this.companyPrivacyPolicyLink = companyPrivacyPolicyLink;
            return this;
        }

        /**
         * User visible text shown when seeking support to guide them to their company's internal support page when appropriate
         */
        public Builder supportMessage(String supportMessage) {
            Utils.checkNotNull(supportMessage, "supportMessage");
            this.supportMessage = Optional.ofNullable(supportMessage);
            return this;
        }

        /**
         * User visible text shown when seeking support to guide them to their company's internal support page when appropriate
         */
        public Builder supportMessage(Optional<String> supportMessage) {
            Utils.checkNotNull(supportMessage, "supportMessage");
            this.supportMessage = supportMessage;
            return this;
        }

        /**
         * User visible text that will link to the user's company's internal support page
         */
        public Builder supportLinkText(String supportLinkText) {
            Utils.checkNotNull(supportLinkText, "supportLinkText");
            this.supportLinkText = Optional.ofNullable(supportLinkText);
            return this;
        }

        /**
         * User visible text that will link to the user's company's internal support page
         */
        public Builder supportLinkText(Optional<String> supportLinkText) {
            Utils.checkNotNull(supportLinkText, "supportLinkText");
            this.supportLinkText = supportLinkText;
            return this;
        }

        /**
         * URL to the user's company's internal suport page
         */
        public Builder supportLink(String supportLink) {
            Utils.checkNotNull(supportLink, "supportLink");
            this.supportLink = Optional.ofNullable(supportLink);
            return this;
        }

        /**
         * URL to the user's company's internal suport page
         */
        public Builder supportLink(Optional<String> supportLink) {
            Utils.checkNotNull(supportLink, "supportLink");
            this.supportLink = supportLink;
            return this;
        }
        
        public FeedbackCustomizations build() {
            return new FeedbackCustomizations(
                defaultChannels,
                featureChannels,
                disclaimer,
                companyPrivacyPolicyLink,
                supportMessage,
                supportLinkText,
                supportLink);
        }
    }
}
