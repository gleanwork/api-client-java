/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FacetFilter {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldName")
    private Optional<String> fieldName;

    /**
     * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("values")
    private Optional<? extends List<FacetFilterValue>> values;

    /**
     * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupName")
    private Optional<String> groupName;

    @JsonCreator
    public FacetFilter(
            @JsonProperty("fieldName") Optional<String> fieldName,
            @JsonProperty("values") Optional<? extends List<FacetFilterValue>> values,
            @JsonProperty("groupName") Optional<String> groupName) {
        Utils.checkNotNull(fieldName, "fieldName");
        Utils.checkNotNull(values, "values");
        Utils.checkNotNull(groupName, "groupName");
        this.fieldName = fieldName;
        this.values = values;
        this.groupName = groupName;
    }
    
    public FacetFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> fieldName() {
        return fieldName;
    }

    /**
     * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilterValue>> values() {
        return (Optional<List<FacetFilterValue>>) values;
    }

    /**
     * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
     */
    @JsonIgnore
    public Optional<String> groupName() {
        return groupName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public FacetFilter withFieldName(String fieldName) {
        Utils.checkNotNull(fieldName, "fieldName");
        this.fieldName = Optional.ofNullable(fieldName);
        return this;
    }

    public FacetFilter withFieldName(Optional<String> fieldName) {
        Utils.checkNotNull(fieldName, "fieldName");
        this.fieldName = fieldName;
        return this;
    }

    /**
     * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
     */
    public FacetFilter withValues(List<FacetFilterValue> values) {
        Utils.checkNotNull(values, "values");
        this.values = Optional.ofNullable(values);
        return this;
    }

    /**
     * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
     */
    public FacetFilter withValues(Optional<? extends List<FacetFilterValue>> values) {
        Utils.checkNotNull(values, "values");
        this.values = values;
        return this;
    }

    /**
     * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
     */
    public FacetFilter withGroupName(String groupName) {
        Utils.checkNotNull(groupName, "groupName");
        this.groupName = Optional.ofNullable(groupName);
        return this;
    }

    /**
     * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
     */
    public FacetFilter withGroupName(Optional<String> groupName) {
        Utils.checkNotNull(groupName, "groupName");
        this.groupName = groupName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetFilter other = (FacetFilter) o;
        return 
            Objects.deepEquals(this.fieldName, other.fieldName) &&
            Objects.deepEquals(this.values, other.values) &&
            Objects.deepEquals(this.groupName, other.groupName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fieldName,
            values,
            groupName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetFilter.class,
                "fieldName", fieldName,
                "values", values,
                "groupName", groupName);
    }
    
    public final static class Builder {
 
        private Optional<String> fieldName = Optional.empty();
 
        private Optional<? extends List<FacetFilterValue>> values = Optional.empty();
 
        private Optional<String> groupName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fieldName(String fieldName) {
            Utils.checkNotNull(fieldName, "fieldName");
            this.fieldName = Optional.ofNullable(fieldName);
            return this;
        }

        public Builder fieldName(Optional<String> fieldName) {
            Utils.checkNotNull(fieldName, "fieldName");
            this.fieldName = fieldName;
            return this;
        }

        /**
         * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
         */
        public Builder values(List<FacetFilterValue> values) {
            Utils.checkNotNull(values, "values");
            this.values = Optional.ofNullable(values);
            return this;
        }

        /**
         * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
         */
        public Builder values(Optional<? extends List<FacetFilterValue>> values) {
            Utils.checkNotNull(values, "values");
            this.values = values;
            return this;
        }

        /**
         * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
         */
        public Builder groupName(String groupName) {
            Utils.checkNotNull(groupName, "groupName");
            this.groupName = Optional.ofNullable(groupName);
            return this;
        }

        /**
         * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
         */
        public Builder groupName(Optional<String> groupName) {
            Utils.checkNotNull(groupName, "groupName");
            this.groupName = groupName;
            return this;
        }
        
        public FacetFilter build() {
            return new FacetFilter(
                fieldName,
                values,
                groupName);
        }
    }
}
