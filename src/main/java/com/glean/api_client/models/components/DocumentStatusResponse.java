/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * DocumentStatusResponse
 * 
 * <p>Describes the document status response body
 */
public class DocumentStatusResponse {

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadStatus")
    private Optional<String> uploadStatus;

    /**
     * Time of last successful upload for the document, in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUploadedAt")
    private Optional<String> lastUploadedAt;

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexingStatus")
    private Optional<String> indexingStatus;

    /**
     * Time of last successful indexing for the document, in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastIndexedAt")
    private Optional<String> lastIndexedAt;

    /**
     * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionIdentityStatus")
    private Optional<String> permissionIdentityStatus;

    @JsonCreator
    public DocumentStatusResponse(
            @JsonProperty("uploadStatus") Optional<String> uploadStatus,
            @JsonProperty("lastUploadedAt") Optional<String> lastUploadedAt,
            @JsonProperty("indexingStatus") Optional<String> indexingStatus,
            @JsonProperty("lastIndexedAt") Optional<String> lastIndexedAt,
            @JsonProperty("permissionIdentityStatus") Optional<String> permissionIdentityStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        Utils.checkNotNull(indexingStatus, "indexingStatus");
        Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
        Utils.checkNotNull(permissionIdentityStatus, "permissionIdentityStatus");
        this.uploadStatus = uploadStatus;
        this.lastUploadedAt = lastUploadedAt;
        this.indexingStatus = indexingStatus;
        this.lastIndexedAt = lastIndexedAt;
        this.permissionIdentityStatus = permissionIdentityStatus;
    }
    
    public DocumentStatusResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    @JsonIgnore
    public Optional<String> uploadStatus() {
        return uploadStatus;
    }

    /**
     * Time of last successful upload for the document, in ISO 8601 format
     */
    @JsonIgnore
    public Optional<String> lastUploadedAt() {
        return lastUploadedAt;
    }

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    @JsonIgnore
    public Optional<String> indexingStatus() {
        return indexingStatus;
    }

    /**
     * Time of last successful indexing for the document, in ISO 8601 format
     */
    @JsonIgnore
    public Optional<String> lastIndexedAt() {
        return lastIndexedAt;
    }

    /**
     * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
     */
    @JsonIgnore
    public Optional<String> permissionIdentityStatus() {
        return permissionIdentityStatus;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    public DocumentStatusResponse withUploadStatus(String uploadStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        this.uploadStatus = Optional.ofNullable(uploadStatus);
        return this;
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    public DocumentStatusResponse withUploadStatus(Optional<String> uploadStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        this.uploadStatus = uploadStatus;
        return this;
    }

    /**
     * Time of last successful upload for the document, in ISO 8601 format
     */
    public DocumentStatusResponse withLastUploadedAt(String lastUploadedAt) {
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.lastUploadedAt = Optional.ofNullable(lastUploadedAt);
        return this;
    }

    /**
     * Time of last successful upload for the document, in ISO 8601 format
     */
    public DocumentStatusResponse withLastUploadedAt(Optional<String> lastUploadedAt) {
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.lastUploadedAt = lastUploadedAt;
        return this;
    }

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    public DocumentStatusResponse withIndexingStatus(String indexingStatus) {
        Utils.checkNotNull(indexingStatus, "indexingStatus");
        this.indexingStatus = Optional.ofNullable(indexingStatus);
        return this;
    }

    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    public DocumentStatusResponse withIndexingStatus(Optional<String> indexingStatus) {
        Utils.checkNotNull(indexingStatus, "indexingStatus");
        this.indexingStatus = indexingStatus;
        return this;
    }

    /**
     * Time of last successful indexing for the document, in ISO 8601 format
     */
    public DocumentStatusResponse withLastIndexedAt(String lastIndexedAt) {
        Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
        this.lastIndexedAt = Optional.ofNullable(lastIndexedAt);
        return this;
    }

    /**
     * Time of last successful indexing for the document, in ISO 8601 format
     */
    public DocumentStatusResponse withLastIndexedAt(Optional<String> lastIndexedAt) {
        Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
        this.lastIndexedAt = lastIndexedAt;
        return this;
    }

    /**
     * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
     */
    public DocumentStatusResponse withPermissionIdentityStatus(String permissionIdentityStatus) {
        Utils.checkNotNull(permissionIdentityStatus, "permissionIdentityStatus");
        this.permissionIdentityStatus = Optional.ofNullable(permissionIdentityStatus);
        return this;
    }

    /**
     * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
     */
    public DocumentStatusResponse withPermissionIdentityStatus(Optional<String> permissionIdentityStatus) {
        Utils.checkNotNull(permissionIdentityStatus, "permissionIdentityStatus");
        this.permissionIdentityStatus = permissionIdentityStatus;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentStatusResponse other = (DocumentStatusResponse) o;
        return 
            Objects.deepEquals(this.uploadStatus, other.uploadStatus) &&
            Objects.deepEquals(this.lastUploadedAt, other.lastUploadedAt) &&
            Objects.deepEquals(this.indexingStatus, other.indexingStatus) &&
            Objects.deepEquals(this.lastIndexedAt, other.lastIndexedAt) &&
            Objects.deepEquals(this.permissionIdentityStatus, other.permissionIdentityStatus);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uploadStatus,
            lastUploadedAt,
            indexingStatus,
            lastIndexedAt,
            permissionIdentityStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentStatusResponse.class,
                "uploadStatus", uploadStatus,
                "lastUploadedAt", lastUploadedAt,
                "indexingStatus", indexingStatus,
                "lastIndexedAt", lastIndexedAt,
                "permissionIdentityStatus", permissionIdentityStatus);
    }
    
    public final static class Builder {
 
        private Optional<String> uploadStatus = Optional.empty();
 
        private Optional<String> lastUploadedAt = Optional.empty();
 
        private Optional<String> indexingStatus = Optional.empty();
 
        private Optional<String> lastIndexedAt = Optional.empty();
 
        private Optional<String> permissionIdentityStatus = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
         */
        public Builder uploadStatus(String uploadStatus) {
            Utils.checkNotNull(uploadStatus, "uploadStatus");
            this.uploadStatus = Optional.ofNullable(uploadStatus);
            return this;
        }

        /**
         * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
         */
        public Builder uploadStatus(Optional<String> uploadStatus) {
            Utils.checkNotNull(uploadStatus, "uploadStatus");
            this.uploadStatus = uploadStatus;
            return this;
        }

        /**
         * Time of last successful upload for the document, in ISO 8601 format
         */
        public Builder lastUploadedAt(String lastUploadedAt) {
            Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
            this.lastUploadedAt = Optional.ofNullable(lastUploadedAt);
            return this;
        }

        /**
         * Time of last successful upload for the document, in ISO 8601 format
         */
        public Builder lastUploadedAt(Optional<String> lastUploadedAt) {
            Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
            this.lastUploadedAt = lastUploadedAt;
            return this;
        }

        /**
         * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
         */
        public Builder indexingStatus(String indexingStatus) {
            Utils.checkNotNull(indexingStatus, "indexingStatus");
            this.indexingStatus = Optional.ofNullable(indexingStatus);
            return this;
        }

        /**
         * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
         */
        public Builder indexingStatus(Optional<String> indexingStatus) {
            Utils.checkNotNull(indexingStatus, "indexingStatus");
            this.indexingStatus = indexingStatus;
            return this;
        }

        /**
         * Time of last successful indexing for the document, in ISO 8601 format
         */
        public Builder lastIndexedAt(String lastIndexedAt) {
            Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
            this.lastIndexedAt = Optional.ofNullable(lastIndexedAt);
            return this;
        }

        /**
         * Time of last successful indexing for the document, in ISO 8601 format
         */
        public Builder lastIndexedAt(Optional<String> lastIndexedAt) {
            Utils.checkNotNull(lastIndexedAt, "lastIndexedAt");
            this.lastIndexedAt = lastIndexedAt;
            return this;
        }

        /**
         * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
         */
        public Builder permissionIdentityStatus(String permissionIdentityStatus) {
            Utils.checkNotNull(permissionIdentityStatus, "permissionIdentityStatus");
            this.permissionIdentityStatus = Optional.ofNullable(permissionIdentityStatus);
            return this;
        }

        /**
         * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
         */
        public Builder permissionIdentityStatus(Optional<String> permissionIdentityStatus) {
            Utils.checkNotNull(permissionIdentityStatus, "permissionIdentityStatus");
            this.permissionIdentityStatus = permissionIdentityStatus;
            return this;
        }
        
        public DocumentStatusResponse build() {
            return new DocumentStatusResponse(
                uploadStatus,
                lastUploadedAt,
                indexingStatus,
                lastIndexedAt,
                permissionIdentityStatus);
        }
    }
}
