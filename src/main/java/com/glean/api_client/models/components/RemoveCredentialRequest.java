/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class RemoveCredentialRequest {

    /**
     * the datasource the credential applies to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * the datasource instance the credential applies to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstance")
    private Optional<String> datasourceInstance;

    /**
     * the user info (email or username for example) for the credential
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    private Optional<String> user;

    @JsonCreator
    public RemoveCredentialRequest(
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("datasourceInstance") Optional<String> datasourceInstance,
            @JsonProperty("user") Optional<String> user) {
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        Utils.checkNotNull(user, "user");
        this.datasource = datasource;
        this.datasourceInstance = datasourceInstance;
        this.user = user;
    }
    
    public RemoveCredentialRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * the datasource the credential applies to
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * the datasource instance the credential applies to
     */
    @JsonIgnore
    public Optional<String> datasourceInstance() {
        return datasourceInstance;
    }

    /**
     * the user info (email or username for example) for the credential
     */
    @JsonIgnore
    public Optional<String> user() {
        return user;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * the datasource the credential applies to
     */
    public RemoveCredentialRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * the datasource the credential applies to
     */
    public RemoveCredentialRequest withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * the datasource instance the credential applies to
     */
    public RemoveCredentialRequest withDatasourceInstance(String datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = Optional.ofNullable(datasourceInstance);
        return this;
    }

    /**
     * the datasource instance the credential applies to
     */
    public RemoveCredentialRequest withDatasourceInstance(Optional<String> datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = datasourceInstance;
        return this;
    }

    /**
     * the user info (email or username for example) for the credential
     */
    public RemoveCredentialRequest withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    /**
     * the user info (email or username for example) for the credential
     */
    public RemoveCredentialRequest withUser(Optional<String> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RemoveCredentialRequest other = (RemoveCredentialRequest) o;
        return 
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.datasourceInstance, other.datasourceInstance) &&
            Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasource,
            datasourceInstance,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RemoveCredentialRequest.class,
                "datasource", datasource,
                "datasourceInstance", datasourceInstance,
                "user", user);
    }
    
    public final static class Builder {
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> datasourceInstance = Optional.empty();
 
        private Optional<String> user = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the datasource the credential applies to
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * the datasource the credential applies to
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * the datasource instance the credential applies to
         */
        public Builder datasourceInstance(String datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = Optional.ofNullable(datasourceInstance);
            return this;
        }

        /**
         * the datasource instance the credential applies to
         */
        public Builder datasourceInstance(Optional<String> datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = datasourceInstance;
            return this;
        }

        /**
         * the user info (email or username for example) for the credential
         */
        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        /**
         * the user info (email or username for example) for the credential
         */
        public Builder user(Optional<String> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public RemoveCredentialRequest build() {
            return new RemoveCredentialRequest(
                datasource,
                datasourceInstance,
                user);
        }
    }
}
