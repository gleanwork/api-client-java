/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UserActivity {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actor")
    private Optional<? extends Person> actor;

    /**
     * Unix timestamp of the activity (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<Long> timestamp;

    /**
     * The action for the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private Optional<? extends UserActivityAction> action;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregateVisitCount")
    private Optional<? extends CountInfo> aggregateVisitCount;

    @JsonCreator
    public UserActivity(
            @JsonProperty("actor") Optional<? extends Person> actor,
            @JsonProperty("timestamp") Optional<Long> timestamp,
            @JsonProperty("action") Optional<? extends UserActivityAction> action,
            @JsonProperty("aggregateVisitCount") Optional<? extends CountInfo> aggregateVisitCount) {
        Utils.checkNotNull(actor, "actor");
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(aggregateVisitCount, "aggregateVisitCount");
        this.actor = actor;
        this.timestamp = timestamp;
        this.action = action;
        this.aggregateVisitCount = aggregateVisitCount;
    }
    
    public UserActivity() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> actor() {
        return (Optional<Person>) actor;
    }

    /**
     * Unix timestamp of the activity (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> timestamp() {
        return timestamp;
    }

    /**
     * The action for the activity
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserActivityAction> action() {
        return (Optional<UserActivityAction>) action;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> aggregateVisitCount() {
        return (Optional<CountInfo>) aggregateVisitCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UserActivity withActor(Person actor) {
        Utils.checkNotNull(actor, "actor");
        this.actor = Optional.ofNullable(actor);
        return this;
    }

    public UserActivity withActor(Optional<? extends Person> actor) {
        Utils.checkNotNull(actor, "actor");
        this.actor = actor;
        return this;
    }

    /**
     * Unix timestamp of the activity (in seconds since epoch UTC).
     */
    public UserActivity withTimestamp(long timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * Unix timestamp of the activity (in seconds since epoch UTC).
     */
    public UserActivity withTimestamp(Optional<Long> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * The action for the activity
     */
    public UserActivity withAction(UserActivityAction action) {
        Utils.checkNotNull(action, "action");
        this.action = Optional.ofNullable(action);
        return this;
    }

    /**
     * The action for the activity
     */
    public UserActivity withAction(Optional<? extends UserActivityAction> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    public UserActivity withAggregateVisitCount(CountInfo aggregateVisitCount) {
        Utils.checkNotNull(aggregateVisitCount, "aggregateVisitCount");
        this.aggregateVisitCount = Optional.ofNullable(aggregateVisitCount);
        return this;
    }

    public UserActivity withAggregateVisitCount(Optional<? extends CountInfo> aggregateVisitCount) {
        Utils.checkNotNull(aggregateVisitCount, "aggregateVisitCount");
        this.aggregateVisitCount = aggregateVisitCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserActivity other = (UserActivity) o;
        return 
            Objects.deepEquals(this.actor, other.actor) &&
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.action, other.action) &&
            Objects.deepEquals(this.aggregateVisitCount, other.aggregateVisitCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            actor,
            timestamp,
            action,
            aggregateVisitCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserActivity.class,
                "actor", actor,
                "timestamp", timestamp,
                "action", action,
                "aggregateVisitCount", aggregateVisitCount);
    }
    
    public final static class Builder {
 
        private Optional<? extends Person> actor = Optional.empty();
 
        private Optional<Long> timestamp = Optional.empty();
 
        private Optional<? extends UserActivityAction> action = Optional.empty();
 
        private Optional<? extends CountInfo> aggregateVisitCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder actor(Person actor) {
            Utils.checkNotNull(actor, "actor");
            this.actor = Optional.ofNullable(actor);
            return this;
        }

        public Builder actor(Optional<? extends Person> actor) {
            Utils.checkNotNull(actor, "actor");
            this.actor = actor;
            return this;
        }

        /**
         * Unix timestamp of the activity (in seconds since epoch UTC).
         */
        public Builder timestamp(long timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * Unix timestamp of the activity (in seconds since epoch UTC).
         */
        public Builder timestamp(Optional<Long> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * The action for the activity
         */
        public Builder action(UserActivityAction action) {
            Utils.checkNotNull(action, "action");
            this.action = Optional.ofNullable(action);
            return this;
        }

        /**
         * The action for the activity
         */
        public Builder action(Optional<? extends UserActivityAction> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }

        public Builder aggregateVisitCount(CountInfo aggregateVisitCount) {
            Utils.checkNotNull(aggregateVisitCount, "aggregateVisitCount");
            this.aggregateVisitCount = Optional.ofNullable(aggregateVisitCount);
            return this;
        }

        public Builder aggregateVisitCount(Optional<? extends CountInfo> aggregateVisitCount) {
            Utils.checkNotNull(aggregateVisitCount, "aggregateVisitCount");
            this.aggregateVisitCount = aggregateVisitCount;
            return this;
        }
        
        public UserActivity build() {
            return new UserActivity(
                actor,
                timestamp,
                action,
                aggregateVisitCount);
        }
    }
}
