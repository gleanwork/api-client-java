/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Reaction {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The count of the reaction type on the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reactors")
    private Optional<? extends List<Person>> reactors;

    /**
     * Whether the user in context reacted with this type to the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reactedByViewer")
    private Optional<Boolean> reactedByViewer;

    @JsonCreator
    public Reaction(
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("reactors") Optional<? extends List<Person>> reactors,
            @JsonProperty("reactedByViewer") Optional<Boolean> reactedByViewer) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(reactors, "reactors");
        Utils.checkNotNull(reactedByViewer, "reactedByViewer");
        this.type = type;
        this.count = count;
        this.reactors = reactors;
        this.reactedByViewer = reactedByViewer;
    }
    
    public Reaction() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The count of the reaction type on the document.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> reactors() {
        return (Optional<List<Person>>) reactors;
    }

    /**
     * Whether the user in context reacted with this type to the document.
     */
    @JsonIgnore
    public Optional<Boolean> reactedByViewer() {
        return reactedByViewer;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Reaction withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Reaction withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The count of the reaction type on the document.
     */
    public Reaction withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * The count of the reaction type on the document.
     */
    public Reaction withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public Reaction withReactors(List<Person> reactors) {
        Utils.checkNotNull(reactors, "reactors");
        this.reactors = Optional.ofNullable(reactors);
        return this;
    }

    public Reaction withReactors(Optional<? extends List<Person>> reactors) {
        Utils.checkNotNull(reactors, "reactors");
        this.reactors = reactors;
        return this;
    }

    /**
     * Whether the user in context reacted with this type to the document.
     */
    public Reaction withReactedByViewer(boolean reactedByViewer) {
        Utils.checkNotNull(reactedByViewer, "reactedByViewer");
        this.reactedByViewer = Optional.ofNullable(reactedByViewer);
        return this;
    }

    /**
     * Whether the user in context reacted with this type to the document.
     */
    public Reaction withReactedByViewer(Optional<Boolean> reactedByViewer) {
        Utils.checkNotNull(reactedByViewer, "reactedByViewer");
        this.reactedByViewer = reactedByViewer;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Reaction other = (Reaction) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.reactors, other.reactors) &&
            Objects.deepEquals(this.reactedByViewer, other.reactedByViewer);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            count,
            reactors,
            reactedByViewer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Reaction.class,
                "type", type,
                "count", count,
                "reactors", reactors,
                "reactedByViewer", reactedByViewer);
    }
    
    public final static class Builder {
 
        private Optional<String> type = Optional.empty();
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<? extends List<Person>> reactors = Optional.empty();
 
        private Optional<Boolean> reactedByViewer = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The count of the reaction type on the document.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The count of the reaction type on the document.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder reactors(List<Person> reactors) {
            Utils.checkNotNull(reactors, "reactors");
            this.reactors = Optional.ofNullable(reactors);
            return this;
        }

        public Builder reactors(Optional<? extends List<Person>> reactors) {
            Utils.checkNotNull(reactors, "reactors");
            this.reactors = reactors;
            return this;
        }

        /**
         * Whether the user in context reacted with this type to the document.
         */
        public Builder reactedByViewer(boolean reactedByViewer) {
            Utils.checkNotNull(reactedByViewer, "reactedByViewer");
            this.reactedByViewer = Optional.ofNullable(reactedByViewer);
            return this;
        }

        /**
         * Whether the user in context reacted with this type to the document.
         */
        public Builder reactedByViewer(Optional<Boolean> reactedByViewer) {
            Utils.checkNotNull(reactedByViewer, "reactedByViewer");
            this.reactedByViewer = reactedByViewer;
            return this;
        }
        
        public Reaction build() {
            return new Reaction(
                type,
                count,
                reactors,
                reactedByViewer);
        }
    }
}
