/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PreviewUgcRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("draft")
    private Optional<? extends UgcDraft> draft;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("draftSpec")
    private Optional<? extends DocumentSpecUnion> draftSpec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends UgcType> type;

    @JsonCreator
    public PreviewUgcRequest(
            @JsonProperty("draft") Optional<? extends UgcDraft> draft,
            @JsonProperty("draftSpec") Optional<? extends DocumentSpecUnion> draftSpec,
            @JsonProperty("type") Optional<? extends UgcType> type) {
        Utils.checkNotNull(draft, "draft");
        Utils.checkNotNull(draftSpec, "draftSpec");
        Utils.checkNotNull(type, "type");
        this.draft = draft;
        this.draftSpec = draftSpec;
        this.type = type;
    }
    
    public PreviewUgcRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UgcDraft> draft() {
        return (Optional<UgcDraft>) draft;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSpecUnion> draftSpec() {
        return (Optional<DocumentSpecUnion>) draftSpec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UgcType> type() {
        return (Optional<UgcType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PreviewUgcRequest withDraft(UgcDraft draft) {
        Utils.checkNotNull(draft, "draft");
        this.draft = Optional.ofNullable(draft);
        return this;
    }

    public PreviewUgcRequest withDraft(Optional<? extends UgcDraft> draft) {
        Utils.checkNotNull(draft, "draft");
        this.draft = draft;
        return this;
    }

    public PreviewUgcRequest withDraftSpec(DocumentSpecUnion draftSpec) {
        Utils.checkNotNull(draftSpec, "draftSpec");
        this.draftSpec = Optional.ofNullable(draftSpec);
        return this;
    }

    public PreviewUgcRequest withDraftSpec(Optional<? extends DocumentSpecUnion> draftSpec) {
        Utils.checkNotNull(draftSpec, "draftSpec");
        this.draftSpec = draftSpec;
        return this;
    }

    public PreviewUgcRequest withType(UgcType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public PreviewUgcRequest withType(Optional<? extends UgcType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreviewUgcRequest other = (PreviewUgcRequest) o;
        return 
            Objects.deepEquals(this.draft, other.draft) &&
            Objects.deepEquals(this.draftSpec, other.draftSpec) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            draft,
            draftSpec,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PreviewUgcRequest.class,
                "draft", draft,
                "draftSpec", draftSpec,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends UgcDraft> draft = Optional.empty();
 
        private Optional<? extends DocumentSpecUnion> draftSpec = Optional.empty();
 
        private Optional<? extends UgcType> type = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder draft(UgcDraft draft) {
            Utils.checkNotNull(draft, "draft");
            this.draft = Optional.ofNullable(draft);
            return this;
        }

        public Builder draft(Optional<? extends UgcDraft> draft) {
            Utils.checkNotNull(draft, "draft");
            this.draft = draft;
            return this;
        }

        public Builder draftSpec(DocumentSpecUnion draftSpec) {
            Utils.checkNotNull(draftSpec, "draftSpec");
            this.draftSpec = Optional.ofNullable(draftSpec);
            return this;
        }

        public Builder draftSpec(Optional<? extends DocumentSpecUnion> draftSpec) {
            Utils.checkNotNull(draftSpec, "draftSpec");
            this.draftSpec = draftSpec;
            return this;
        }

        public Builder type(UgcType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends UgcType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public PreviewUgcRequest build() {
            return new PreviewUgcRequest(
                draft,
                draftSpec,
                type);
        }
    }
}
