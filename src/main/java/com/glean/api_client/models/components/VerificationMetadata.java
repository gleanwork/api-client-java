/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class VerificationMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastVerifier")
    private Optional<? extends Person> lastVerifier;

    /**
     * The unix timestamp of the verification (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastVerificationTs")
    private Optional<Long> lastVerificationTs;

    /**
     * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationTs")
    private Optional<Long> expirationTs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private Optional<? extends Document> document;

    /**
     * Info about all outstanding verification reminders for the document if exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reminders")
    private Optional<? extends List<Reminder>> reminders;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastReminder")
    private Optional<? extends Reminder> lastReminder;

    /**
     * Number of visitors to the document during included time periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitorCount")
    private Optional<? extends List<CountInfo>> visitorCount;

    /**
     * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidateVerifiers")
    private Optional<? extends List<Person>> candidateVerifiers;

    @JsonCreator
    public VerificationMetadata(
            @JsonProperty("lastVerifier") Optional<? extends Person> lastVerifier,
            @JsonProperty("lastVerificationTs") Optional<Long> lastVerificationTs,
            @JsonProperty("expirationTs") Optional<Long> expirationTs,
            @JsonProperty("document") Optional<? extends Document> document,
            @JsonProperty("reminders") Optional<? extends List<Reminder>> reminders,
            @JsonProperty("lastReminder") Optional<? extends Reminder> lastReminder,
            @JsonProperty("visitorCount") Optional<? extends List<CountInfo>> visitorCount,
            @JsonProperty("candidateVerifiers") Optional<? extends List<Person>> candidateVerifiers) {
        Utils.checkNotNull(lastVerifier, "lastVerifier");
        Utils.checkNotNull(lastVerificationTs, "lastVerificationTs");
        Utils.checkNotNull(expirationTs, "expirationTs");
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(reminders, "reminders");
        Utils.checkNotNull(lastReminder, "lastReminder");
        Utils.checkNotNull(visitorCount, "visitorCount");
        Utils.checkNotNull(candidateVerifiers, "candidateVerifiers");
        this.lastVerifier = lastVerifier;
        this.lastVerificationTs = lastVerificationTs;
        this.expirationTs = expirationTs;
        this.document = document;
        this.reminders = reminders;
        this.lastReminder = lastReminder;
        this.visitorCount = visitorCount;
        this.candidateVerifiers = candidateVerifiers;
    }
    
    public VerificationMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> lastVerifier() {
        return (Optional<Person>) lastVerifier;
    }

    /**
     * The unix timestamp of the verification (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastVerificationTs() {
        return lastVerificationTs;
    }

    /**
     * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> expirationTs() {
        return expirationTs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> document() {
        return (Optional<Document>) document;
    }

    /**
     * Info about all outstanding verification reminders for the document if exists.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Reminder>> reminders() {
        return (Optional<List<Reminder>>) reminders;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Reminder> lastReminder() {
        return (Optional<Reminder>) lastReminder;
    }

    /**
     * Number of visitors to the document during included time periods.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CountInfo>> visitorCount() {
        return (Optional<List<CountInfo>>) visitorCount;
    }

    /**
     * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> candidateVerifiers() {
        return (Optional<List<Person>>) candidateVerifiers;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public VerificationMetadata withLastVerifier(Person lastVerifier) {
        Utils.checkNotNull(lastVerifier, "lastVerifier");
        this.lastVerifier = Optional.ofNullable(lastVerifier);
        return this;
    }

    public VerificationMetadata withLastVerifier(Optional<? extends Person> lastVerifier) {
        Utils.checkNotNull(lastVerifier, "lastVerifier");
        this.lastVerifier = lastVerifier;
        return this;
    }

    /**
     * The unix timestamp of the verification (in seconds since epoch UTC).
     */
    public VerificationMetadata withLastVerificationTs(long lastVerificationTs) {
        Utils.checkNotNull(lastVerificationTs, "lastVerificationTs");
        this.lastVerificationTs = Optional.ofNullable(lastVerificationTs);
        return this;
    }

    /**
     * The unix timestamp of the verification (in seconds since epoch UTC).
     */
    public VerificationMetadata withLastVerificationTs(Optional<Long> lastVerificationTs) {
        Utils.checkNotNull(lastVerificationTs, "lastVerificationTs");
        this.lastVerificationTs = lastVerificationTs;
        return this;
    }

    /**
     * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
     */
    public VerificationMetadata withExpirationTs(long expirationTs) {
        Utils.checkNotNull(expirationTs, "expirationTs");
        this.expirationTs = Optional.ofNullable(expirationTs);
        return this;
    }

    /**
     * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
     */
    public VerificationMetadata withExpirationTs(Optional<Long> expirationTs) {
        Utils.checkNotNull(expirationTs, "expirationTs");
        this.expirationTs = expirationTs;
        return this;
    }

    public VerificationMetadata withDocument(Document document) {
        Utils.checkNotNull(document, "document");
        this.document = Optional.ofNullable(document);
        return this;
    }

    public VerificationMetadata withDocument(Optional<? extends Document> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    /**
     * Info about all outstanding verification reminders for the document if exists.
     */
    public VerificationMetadata withReminders(List<Reminder> reminders) {
        Utils.checkNotNull(reminders, "reminders");
        this.reminders = Optional.ofNullable(reminders);
        return this;
    }

    /**
     * Info about all outstanding verification reminders for the document if exists.
     */
    public VerificationMetadata withReminders(Optional<? extends List<Reminder>> reminders) {
        Utils.checkNotNull(reminders, "reminders");
        this.reminders = reminders;
        return this;
    }

    public VerificationMetadata withLastReminder(Reminder lastReminder) {
        Utils.checkNotNull(lastReminder, "lastReminder");
        this.lastReminder = Optional.ofNullable(lastReminder);
        return this;
    }

    public VerificationMetadata withLastReminder(Optional<? extends Reminder> lastReminder) {
        Utils.checkNotNull(lastReminder, "lastReminder");
        this.lastReminder = lastReminder;
        return this;
    }

    /**
     * Number of visitors to the document during included time periods.
     */
    public VerificationMetadata withVisitorCount(List<CountInfo> visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = Optional.ofNullable(visitorCount);
        return this;
    }

    /**
     * Number of visitors to the document during included time periods.
     */
    public VerificationMetadata withVisitorCount(Optional<? extends List<CountInfo>> visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = visitorCount;
        return this;
    }

    /**
     * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
     */
    public VerificationMetadata withCandidateVerifiers(List<Person> candidateVerifiers) {
        Utils.checkNotNull(candidateVerifiers, "candidateVerifiers");
        this.candidateVerifiers = Optional.ofNullable(candidateVerifiers);
        return this;
    }

    /**
     * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
     */
    public VerificationMetadata withCandidateVerifiers(Optional<? extends List<Person>> candidateVerifiers) {
        Utils.checkNotNull(candidateVerifiers, "candidateVerifiers");
        this.candidateVerifiers = candidateVerifiers;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerificationMetadata other = (VerificationMetadata) o;
        return 
            Objects.deepEquals(this.lastVerifier, other.lastVerifier) &&
            Objects.deepEquals(this.lastVerificationTs, other.lastVerificationTs) &&
            Objects.deepEquals(this.expirationTs, other.expirationTs) &&
            Objects.deepEquals(this.document, other.document) &&
            Objects.deepEquals(this.reminders, other.reminders) &&
            Objects.deepEquals(this.lastReminder, other.lastReminder) &&
            Objects.deepEquals(this.visitorCount, other.visitorCount) &&
            Objects.deepEquals(this.candidateVerifiers, other.candidateVerifiers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lastVerifier,
            lastVerificationTs,
            expirationTs,
            document,
            reminders,
            lastReminder,
            visitorCount,
            candidateVerifiers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerificationMetadata.class,
                "lastVerifier", lastVerifier,
                "lastVerificationTs", lastVerificationTs,
                "expirationTs", expirationTs,
                "document", document,
                "reminders", reminders,
                "lastReminder", lastReminder,
                "visitorCount", visitorCount,
                "candidateVerifiers", candidateVerifiers);
    }
    
    public final static class Builder {
 
        private Optional<? extends Person> lastVerifier = Optional.empty();
 
        private Optional<Long> lastVerificationTs = Optional.empty();
 
        private Optional<Long> expirationTs = Optional.empty();
 
        private Optional<? extends Document> document = Optional.empty();
 
        private Optional<? extends List<Reminder>> reminders = Optional.empty();
 
        private Optional<? extends Reminder> lastReminder = Optional.empty();
 
        private Optional<? extends List<CountInfo>> visitorCount = Optional.empty();
 
        private Optional<? extends List<Person>> candidateVerifiers = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder lastVerifier(Person lastVerifier) {
            Utils.checkNotNull(lastVerifier, "lastVerifier");
            this.lastVerifier = Optional.ofNullable(lastVerifier);
            return this;
        }

        public Builder lastVerifier(Optional<? extends Person> lastVerifier) {
            Utils.checkNotNull(lastVerifier, "lastVerifier");
            this.lastVerifier = lastVerifier;
            return this;
        }

        /**
         * The unix timestamp of the verification (in seconds since epoch UTC).
         */
        public Builder lastVerificationTs(long lastVerificationTs) {
            Utils.checkNotNull(lastVerificationTs, "lastVerificationTs");
            this.lastVerificationTs = Optional.ofNullable(lastVerificationTs);
            return this;
        }

        /**
         * The unix timestamp of the verification (in seconds since epoch UTC).
         */
        public Builder lastVerificationTs(Optional<Long> lastVerificationTs) {
            Utils.checkNotNull(lastVerificationTs, "lastVerificationTs");
            this.lastVerificationTs = lastVerificationTs;
            return this;
        }

        /**
         * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
         */
        public Builder expirationTs(long expirationTs) {
            Utils.checkNotNull(expirationTs, "expirationTs");
            this.expirationTs = Optional.ofNullable(expirationTs);
            return this;
        }

        /**
         * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
         */
        public Builder expirationTs(Optional<Long> expirationTs) {
            Utils.checkNotNull(expirationTs, "expirationTs");
            this.expirationTs = expirationTs;
            return this;
        }

        public Builder document(Document document) {
            Utils.checkNotNull(document, "document");
            this.document = Optional.ofNullable(document);
            return this;
        }

        public Builder document(Optional<? extends Document> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        /**
         * Info about all outstanding verification reminders for the document if exists.
         */
        public Builder reminders(List<Reminder> reminders) {
            Utils.checkNotNull(reminders, "reminders");
            this.reminders = Optional.ofNullable(reminders);
            return this;
        }

        /**
         * Info about all outstanding verification reminders for the document if exists.
         */
        public Builder reminders(Optional<? extends List<Reminder>> reminders) {
            Utils.checkNotNull(reminders, "reminders");
            this.reminders = reminders;
            return this;
        }

        public Builder lastReminder(Reminder lastReminder) {
            Utils.checkNotNull(lastReminder, "lastReminder");
            this.lastReminder = Optional.ofNullable(lastReminder);
            return this;
        }

        public Builder lastReminder(Optional<? extends Reminder> lastReminder) {
            Utils.checkNotNull(lastReminder, "lastReminder");
            this.lastReminder = lastReminder;
            return this;
        }

        /**
         * Number of visitors to the document during included time periods.
         */
        public Builder visitorCount(List<CountInfo> visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = Optional.ofNullable(visitorCount);
            return this;
        }

        /**
         * Number of visitors to the document during included time periods.
         */
        public Builder visitorCount(Optional<? extends List<CountInfo>> visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = visitorCount;
            return this;
        }

        /**
         * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
         */
        public Builder candidateVerifiers(List<Person> candidateVerifiers) {
            Utils.checkNotNull(candidateVerifiers, "candidateVerifiers");
            this.candidateVerifiers = Optional.ofNullable(candidateVerifiers);
            return this;
        }

        /**
         * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
         */
        public Builder candidateVerifiers(Optional<? extends List<Person>> candidateVerifiers) {
            Utils.checkNotNull(candidateVerifiers, "candidateVerifiers");
            this.candidateVerifiers = candidateVerifiers;
            return this;
        }
        
        public VerificationMetadata build() {
            return new VerificationMetadata(
                lastVerifier,
                lastVerificationTs,
                expirationTs,
                document,
                reminders,
                lastReminder,
                visitorCount,
                candidateVerifiers);
        }
    }
}
