/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class AnswerBoardResult {

    @JsonProperty("board")
    private AnswerBoard board;

    /**
     * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonCreator
    public AnswerBoardResult(
            @JsonProperty("board") AnswerBoard board,
            @JsonProperty("trackingToken") Optional<String> trackingToken) {
        Utils.checkNotNull(board, "board");
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.board = board;
        this.trackingToken = trackingToken;
    }
    
    public AnswerBoardResult(
            AnswerBoard board) {
        this(board, Optional.empty());
    }

    @JsonIgnore
    public AnswerBoard board() {
        return board;
    }

    /**
     * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AnswerBoardResult withBoard(AnswerBoard board) {
        Utils.checkNotNull(board, "board");
        this.board = board;
        return this;
    }

    /**
     * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
     */
    public AnswerBoardResult withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
     */
    public AnswerBoardResult withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnswerBoardResult other = (AnswerBoardResult) o;
        return 
            Objects.deepEquals(this.board, other.board) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            board,
            trackingToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnswerBoardResult.class,
                "board", board,
                "trackingToken", trackingToken);
    }
    
    public final static class Builder {
 
        private AnswerBoard board;
 
        private Optional<String> trackingToken = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder board(AnswerBoard board) {
            Utils.checkNotNull(board, "board");
            this.board = board;
            return this;
        }

        /**
         * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }
        
        public AnswerBoardResult build() {
            return new AnswerBoardResult(
                board,
                trackingToken);
        }
    }
}
