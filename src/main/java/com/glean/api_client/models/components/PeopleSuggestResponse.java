/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PeopleSuggestResponse {

    /**
     * Information about people suggestions for asked categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestions")
    private Optional<? extends List<PersonSuggestionList>> suggestions;

    @JsonCreator
    public PeopleSuggestResponse(
            @JsonProperty("suggestions") Optional<? extends List<PersonSuggestionList>> suggestions) {
        Utils.checkNotNull(suggestions, "suggestions");
        this.suggestions = suggestions;
    }
    
    public PeopleSuggestResponse() {
        this(Optional.empty());
    }

    /**
     * Information about people suggestions for asked categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PersonSuggestionList>> suggestions() {
        return (Optional<List<PersonSuggestionList>>) suggestions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Information about people suggestions for asked categories.
     */
    public PeopleSuggestResponse withSuggestions(List<PersonSuggestionList> suggestions) {
        Utils.checkNotNull(suggestions, "suggestions");
        this.suggestions = Optional.ofNullable(suggestions);
        return this;
    }

    /**
     * Information about people suggestions for asked categories.
     */
    public PeopleSuggestResponse withSuggestions(Optional<? extends List<PersonSuggestionList>> suggestions) {
        Utils.checkNotNull(suggestions, "suggestions");
        this.suggestions = suggestions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PeopleSuggestResponse other = (PeopleSuggestResponse) o;
        return 
            Objects.deepEquals(this.suggestions, other.suggestions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            suggestions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PeopleSuggestResponse.class,
                "suggestions", suggestions);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<PersonSuggestionList>> suggestions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Information about people suggestions for asked categories.
         */
        public Builder suggestions(List<PersonSuggestionList> suggestions) {
            Utils.checkNotNull(suggestions, "suggestions");
            this.suggestions = Optional.ofNullable(suggestions);
            return this;
        }

        /**
         * Information about people suggestions for asked categories.
         */
        public Builder suggestions(Optional<? extends List<PersonSuggestionList>> suggestions) {
            Utils.checkNotNull(suggestions, "suggestions");
            this.suggestions = suggestions;
            return this;
        }
        
        public PeopleSuggestResponse build() {
            return new PeopleSuggestResponse(
                suggestions);
        }
    }
}
