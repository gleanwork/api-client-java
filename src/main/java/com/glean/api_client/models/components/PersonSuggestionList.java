/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PersonSuggestionList {

    @JsonProperty("category")
    private PeopleSuggestionCategory category;

    /**
     * Information about suggested users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people")
    private Optional<? extends List<Person>> people;

    @JsonCreator
    public PersonSuggestionList(
            @JsonProperty("category") PeopleSuggestionCategory category,
            @JsonProperty("people") Optional<? extends List<Person>> people) {
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(people, "people");
        this.category = category;
        this.people = people;
    }
    
    public PersonSuggestionList(
            PeopleSuggestionCategory category) {
        this(category, Optional.empty());
    }

    @JsonIgnore
    public PeopleSuggestionCategory category() {
        return category;
    }

    /**
     * Information about suggested users.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> people() {
        return (Optional<List<Person>>) people;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PersonSuggestionList withCategory(PeopleSuggestionCategory category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * Information about suggested users.
     */
    public PersonSuggestionList withPeople(List<Person> people) {
        Utils.checkNotNull(people, "people");
        this.people = Optional.ofNullable(people);
        return this;
    }

    /**
     * Information about suggested users.
     */
    public PersonSuggestionList withPeople(Optional<? extends List<Person>> people) {
        Utils.checkNotNull(people, "people");
        this.people = people;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonSuggestionList other = (PersonSuggestionList) o;
        return 
            Objects.deepEquals(this.category, other.category) &&
            Objects.deepEquals(this.people, other.people);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            category,
            people);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PersonSuggestionList.class,
                "category", category,
                "people", people);
    }
    
    public final static class Builder {
 
        private PeopleSuggestionCategory category;
 
        private Optional<? extends List<Person>> people = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder category(PeopleSuggestionCategory category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        /**
         * Information about suggested users.
         */
        public Builder people(List<Person> people) {
            Utils.checkNotNull(people, "people");
            this.people = Optional.ofNullable(people);
            return this;
        }

        /**
         * Information about suggested users.
         */
        public Builder people(Optional<? extends List<Person>> people) {
            Utils.checkNotNull(people, "people");
            this.people = people;
            return this;
        }
        
        public PersonSuggestionList build() {
            return new PersonSuggestionList(
                category,
                people);
        }
    }
}
