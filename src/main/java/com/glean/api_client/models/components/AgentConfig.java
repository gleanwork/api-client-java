/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * AgentConfig
 * 
 * <p>Describes the agent that executes the request.
 */
public class AgentConfig {

    /**
     * Name of the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agent")
    private Optional<? extends AgentEnum> agent;

    /**
     * Top level modes to run GleanChat in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends Mode> mode;

    @JsonCreator
    public AgentConfig(
            @JsonProperty("agent") Optional<? extends AgentEnum> agent,
            @JsonProperty("mode") Optional<? extends Mode> mode) {
        Utils.checkNotNull(agent, "agent");
        Utils.checkNotNull(mode, "mode");
        this.agent = agent;
        this.mode = mode;
    }
    
    public AgentConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Name of the agent.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AgentEnum> agent() {
        return (Optional<AgentEnum>) agent;
    }

    /**
     * Top level modes to run GleanChat in.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mode> mode() {
        return (Optional<Mode>) mode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the agent.
     */
    public AgentConfig withAgent(AgentEnum agent) {
        Utils.checkNotNull(agent, "agent");
        this.agent = Optional.ofNullable(agent);
        return this;
    }

    /**
     * Name of the agent.
     */
    public AgentConfig withAgent(Optional<? extends AgentEnum> agent) {
        Utils.checkNotNull(agent, "agent");
        this.agent = agent;
        return this;
    }

    /**
     * Top level modes to run GleanChat in.
     */
    public AgentConfig withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Top level modes to run GleanChat in.
     */
    public AgentConfig withMode(Optional<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgentConfig other = (AgentConfig) o;
        return 
            Objects.deepEquals(this.agent, other.agent) &&
            Objects.deepEquals(this.mode, other.mode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agent,
            mode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgentConfig.class,
                "agent", agent,
                "mode", mode);
    }
    
    public final static class Builder {
 
        private Optional<? extends AgentEnum> agent = Optional.empty();
 
        private Optional<? extends Mode> mode = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the agent.
         */
        public Builder agent(AgentEnum agent) {
            Utils.checkNotNull(agent, "agent");
            this.agent = Optional.ofNullable(agent);
            return this;
        }

        /**
         * Name of the agent.
         */
        public Builder agent(Optional<? extends AgentEnum> agent) {
            Utils.checkNotNull(agent, "agent");
            this.agent = agent;
            return this;
        }

        /**
         * Top level modes to run GleanChat in.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Top level modes to run GleanChat in.
         */
        public Builder mode(Optional<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }
        
        public AgentConfig build() {
            return new AgentConfig(
                agent,
                mode);
        }
    }
}
