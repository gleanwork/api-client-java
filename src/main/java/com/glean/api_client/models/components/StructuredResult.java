/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * StructuredResult
 * 
 * <p>A single object that can support any object in the work graph. Only a single object will be populated.
 */
public class StructuredResult {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private Optional<? extends Document> document;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("person")
    private Optional<? extends Person> person;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private Optional<? extends Customer> customer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team")
    private Optional<? extends Team> team;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customEntity")
    private Optional<? extends CustomEntity> customEntity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answer")
    private Optional<? extends Answer> answer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extractedQnA")
    private Optional<? extends ExtractedQnA> extractedQnA;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting")
    private Optional<? extends Meeting> meeting;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app")
    private Optional<? extends AppResult> app;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends Collection> collection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answerBoard")
    private Optional<? extends AnswerBoard> answerBoard;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends Code> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcut")
    private Optional<? extends Shortcut> shortcut;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("querySuggestions")
    private Optional<? extends QuerySuggestionList> querySuggestions;

    /**
     * A list of documents related to this structured result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedDocuments")
    private Optional<? extends List<RelatedDocuments>> relatedDocuments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedQuestion")
    private Optional<? extends RelatedQuestion> relatedQuestion;

    /**
     * A disambiguation between multiple entities with the same name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disambiguation")
    private Optional<? extends Disambiguation> disambiguation;

    /**
     * Any snippets associated to the populated object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snippets")
    private Optional<? extends List<SearchResultSnippet>> snippets;

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    /**
     * The level of visual distinction that should be given to a result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prominence")
    private Optional<? extends Prominence> prominence;

    /**
     * Source context for this result. Possible values depend on the result type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends StructuredResultSource> source;

    @JsonCreator
    public StructuredResult(
            @JsonProperty("document") Optional<? extends Document> document,
            @JsonProperty("person") Optional<? extends Person> person,
            @JsonProperty("customer") Optional<? extends Customer> customer,
            @JsonProperty("team") Optional<? extends Team> team,
            @JsonProperty("customEntity") Optional<? extends CustomEntity> customEntity,
            @JsonProperty("answer") Optional<? extends Answer> answer,
            @JsonProperty("extractedQnA") Optional<? extends ExtractedQnA> extractedQnA,
            @JsonProperty("meeting") Optional<? extends Meeting> meeting,
            @JsonProperty("app") Optional<? extends AppResult> app,
            @JsonProperty("collection") Optional<? extends Collection> collection,
            @JsonProperty("answerBoard") Optional<? extends AnswerBoard> answerBoard,
            @JsonProperty("code") Optional<? extends Code> code,
            @JsonProperty("shortcut") Optional<? extends Shortcut> shortcut,
            @JsonProperty("querySuggestions") Optional<? extends QuerySuggestionList> querySuggestions,
            @JsonProperty("relatedDocuments") Optional<? extends List<RelatedDocuments>> relatedDocuments,
            @JsonProperty("relatedQuestion") Optional<? extends RelatedQuestion> relatedQuestion,
            @JsonProperty("disambiguation") Optional<? extends Disambiguation> disambiguation,
            @JsonProperty("snippets") Optional<? extends List<SearchResultSnippet>> snippets,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("prominence") Optional<? extends Prominence> prominence,
            @JsonProperty("source") Optional<? extends StructuredResultSource> source) {
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(person, "person");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(team, "team");
        Utils.checkNotNull(customEntity, "customEntity");
        Utils.checkNotNull(answer, "answer");
        Utils.checkNotNull(extractedQnA, "extractedQnA");
        Utils.checkNotNull(meeting, "meeting");
        Utils.checkNotNull(app, "app");
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(answerBoard, "answerBoard");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(shortcut, "shortcut");
        Utils.checkNotNull(querySuggestions, "querySuggestions");
        Utils.checkNotNull(relatedDocuments, "relatedDocuments");
        Utils.checkNotNull(relatedQuestion, "relatedQuestion");
        Utils.checkNotNull(disambiguation, "disambiguation");
        Utils.checkNotNull(snippets, "snippets");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(prominence, "prominence");
        Utils.checkNotNull(source, "source");
        this.document = document;
        this.person = person;
        this.customer = customer;
        this.team = team;
        this.customEntity = customEntity;
        this.answer = answer;
        this.extractedQnA = extractedQnA;
        this.meeting = meeting;
        this.app = app;
        this.collection = collection;
        this.answerBoard = answerBoard;
        this.code = code;
        this.shortcut = shortcut;
        this.querySuggestions = querySuggestions;
        this.relatedDocuments = relatedDocuments;
        this.relatedQuestion = relatedQuestion;
        this.disambiguation = disambiguation;
        this.snippets = snippets;
        this.trackingToken = trackingToken;
        this.prominence = prominence;
        this.source = source;
    }
    
    public StructuredResult() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> document() {
        return (Optional<Document>) document;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> person() {
        return (Optional<Person>) person;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Customer> customer() {
        return (Optional<Customer>) customer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Team> team() {
        return (Optional<Team>) team;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomEntity> customEntity() {
        return (Optional<CustomEntity>) customEntity;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Answer> answer() {
        return (Optional<Answer>) answer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExtractedQnA> extractedQnA() {
        return (Optional<ExtractedQnA>) extractedQnA;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Meeting> meeting() {
        return (Optional<Meeting>) meeting;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AppResult> app() {
        return (Optional<AppResult>) app;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> collection() {
        return (Optional<Collection>) collection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnswerBoard> answerBoard() {
        return (Optional<AnswerBoard>) answerBoard;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Code> code() {
        return (Optional<Code>) code;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Shortcut> shortcut() {
        return (Optional<Shortcut>) shortcut;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuerySuggestionList> querySuggestions() {
        return (Optional<QuerySuggestionList>) querySuggestions;
    }

    /**
     * A list of documents related to this structured result.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<RelatedDocuments>> relatedDocuments() {
        return (Optional<List<RelatedDocuments>>) relatedDocuments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RelatedQuestion> relatedQuestion() {
        return (Optional<RelatedQuestion>) relatedQuestion;
    }

    /**
     * A disambiguation between multiple entities with the same name
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Disambiguation> disambiguation() {
        return (Optional<Disambiguation>) disambiguation;
    }

    /**
     * Any snippets associated to the populated object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SearchResultSnippet>> snippets() {
        return (Optional<List<SearchResultSnippet>>) snippets;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    /**
     * The level of visual distinction that should be given to a result.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Prominence> prominence() {
        return (Optional<Prominence>) prominence;
    }

    /**
     * Source context for this result. Possible values depend on the result type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredResultSource> source() {
        return (Optional<StructuredResultSource>) source;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public StructuredResult withDocument(Document document) {
        Utils.checkNotNull(document, "document");
        this.document = Optional.ofNullable(document);
        return this;
    }

    public StructuredResult withDocument(Optional<? extends Document> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    public StructuredResult withPerson(Person person) {
        Utils.checkNotNull(person, "person");
        this.person = Optional.ofNullable(person);
        return this;
    }

    public StructuredResult withPerson(Optional<? extends Person> person) {
        Utils.checkNotNull(person, "person");
        this.person = person;
        return this;
    }

    public StructuredResult withCustomer(Customer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = Optional.ofNullable(customer);
        return this;
    }

    public StructuredResult withCustomer(Optional<? extends Customer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    public StructuredResult withTeam(Team team) {
        Utils.checkNotNull(team, "team");
        this.team = Optional.ofNullable(team);
        return this;
    }

    public StructuredResult withTeam(Optional<? extends Team> team) {
        Utils.checkNotNull(team, "team");
        this.team = team;
        return this;
    }

    public StructuredResult withCustomEntity(CustomEntity customEntity) {
        Utils.checkNotNull(customEntity, "customEntity");
        this.customEntity = Optional.ofNullable(customEntity);
        return this;
    }

    public StructuredResult withCustomEntity(Optional<? extends CustomEntity> customEntity) {
        Utils.checkNotNull(customEntity, "customEntity");
        this.customEntity = customEntity;
        return this;
    }

    public StructuredResult withAnswer(Answer answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = Optional.ofNullable(answer);
        return this;
    }

    public StructuredResult withAnswer(Optional<? extends Answer> answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = answer;
        return this;
    }

    public StructuredResult withExtractedQnA(ExtractedQnA extractedQnA) {
        Utils.checkNotNull(extractedQnA, "extractedQnA");
        this.extractedQnA = Optional.ofNullable(extractedQnA);
        return this;
    }

    public StructuredResult withExtractedQnA(Optional<? extends ExtractedQnA> extractedQnA) {
        Utils.checkNotNull(extractedQnA, "extractedQnA");
        this.extractedQnA = extractedQnA;
        return this;
    }

    public StructuredResult withMeeting(Meeting meeting) {
        Utils.checkNotNull(meeting, "meeting");
        this.meeting = Optional.ofNullable(meeting);
        return this;
    }

    public StructuredResult withMeeting(Optional<? extends Meeting> meeting) {
        Utils.checkNotNull(meeting, "meeting");
        this.meeting = meeting;
        return this;
    }

    public StructuredResult withApp(AppResult app) {
        Utils.checkNotNull(app, "app");
        this.app = Optional.ofNullable(app);
        return this;
    }

    public StructuredResult withApp(Optional<? extends AppResult> app) {
        Utils.checkNotNull(app, "app");
        this.app = app;
        return this;
    }

    public StructuredResult withCollection(Collection collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public StructuredResult withCollection(Optional<? extends Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public StructuredResult withAnswerBoard(AnswerBoard answerBoard) {
        Utils.checkNotNull(answerBoard, "answerBoard");
        this.answerBoard = Optional.ofNullable(answerBoard);
        return this;
    }

    public StructuredResult withAnswerBoard(Optional<? extends AnswerBoard> answerBoard) {
        Utils.checkNotNull(answerBoard, "answerBoard");
        this.answerBoard = answerBoard;
        return this;
    }

    public StructuredResult withCode(Code code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    public StructuredResult withCode(Optional<? extends Code> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public StructuredResult withShortcut(Shortcut shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = Optional.ofNullable(shortcut);
        return this;
    }

    public StructuredResult withShortcut(Optional<? extends Shortcut> shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = shortcut;
        return this;
    }

    public StructuredResult withQuerySuggestions(QuerySuggestionList querySuggestions) {
        Utils.checkNotNull(querySuggestions, "querySuggestions");
        this.querySuggestions = Optional.ofNullable(querySuggestions);
        return this;
    }

    public StructuredResult withQuerySuggestions(Optional<? extends QuerySuggestionList> querySuggestions) {
        Utils.checkNotNull(querySuggestions, "querySuggestions");
        this.querySuggestions = querySuggestions;
        return this;
    }

    /**
     * A list of documents related to this structured result.
     */
    public StructuredResult withRelatedDocuments(List<RelatedDocuments> relatedDocuments) {
        Utils.checkNotNull(relatedDocuments, "relatedDocuments");
        this.relatedDocuments = Optional.ofNullable(relatedDocuments);
        return this;
    }

    /**
     * A list of documents related to this structured result.
     */
    public StructuredResult withRelatedDocuments(Optional<? extends List<RelatedDocuments>> relatedDocuments) {
        Utils.checkNotNull(relatedDocuments, "relatedDocuments");
        this.relatedDocuments = relatedDocuments;
        return this;
    }

    public StructuredResult withRelatedQuestion(RelatedQuestion relatedQuestion) {
        Utils.checkNotNull(relatedQuestion, "relatedQuestion");
        this.relatedQuestion = Optional.ofNullable(relatedQuestion);
        return this;
    }

    public StructuredResult withRelatedQuestion(Optional<? extends RelatedQuestion> relatedQuestion) {
        Utils.checkNotNull(relatedQuestion, "relatedQuestion");
        this.relatedQuestion = relatedQuestion;
        return this;
    }

    /**
     * A disambiguation between multiple entities with the same name
     */
    public StructuredResult withDisambiguation(Disambiguation disambiguation) {
        Utils.checkNotNull(disambiguation, "disambiguation");
        this.disambiguation = Optional.ofNullable(disambiguation);
        return this;
    }

    /**
     * A disambiguation between multiple entities with the same name
     */
    public StructuredResult withDisambiguation(Optional<? extends Disambiguation> disambiguation) {
        Utils.checkNotNull(disambiguation, "disambiguation");
        this.disambiguation = disambiguation;
        return this;
    }

    /**
     * Any snippets associated to the populated object.
     */
    public StructuredResult withSnippets(List<SearchResultSnippet> snippets) {
        Utils.checkNotNull(snippets, "snippets");
        this.snippets = Optional.ofNullable(snippets);
        return this;
    }

    /**
     * Any snippets associated to the populated object.
     */
    public StructuredResult withSnippets(Optional<? extends List<SearchResultSnippet>> snippets) {
        Utils.checkNotNull(snippets, "snippets");
        this.snippets = snippets;
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    public StructuredResult withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    public StructuredResult withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    /**
     * The level of visual distinction that should be given to a result.
     */
    public StructuredResult withProminence(Prominence prominence) {
        Utils.checkNotNull(prominence, "prominence");
        this.prominence = Optional.ofNullable(prominence);
        return this;
    }

    /**
     * The level of visual distinction that should be given to a result.
     */
    public StructuredResult withProminence(Optional<? extends Prominence> prominence) {
        Utils.checkNotNull(prominence, "prominence");
        this.prominence = prominence;
        return this;
    }

    /**
     * Source context for this result. Possible values depend on the result type.
     */
    public StructuredResult withSource(StructuredResultSource source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * Source context for this result. Possible values depend on the result type.
     */
    public StructuredResult withSource(Optional<? extends StructuredResultSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StructuredResult other = (StructuredResult) o;
        return 
            Objects.deepEquals(this.document, other.document) &&
            Objects.deepEquals(this.person, other.person) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.team, other.team) &&
            Objects.deepEquals(this.customEntity, other.customEntity) &&
            Objects.deepEquals(this.answer, other.answer) &&
            Objects.deepEquals(this.extractedQnA, other.extractedQnA) &&
            Objects.deepEquals(this.meeting, other.meeting) &&
            Objects.deepEquals(this.app, other.app) &&
            Objects.deepEquals(this.collection, other.collection) &&
            Objects.deepEquals(this.answerBoard, other.answerBoard) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.shortcut, other.shortcut) &&
            Objects.deepEquals(this.querySuggestions, other.querySuggestions) &&
            Objects.deepEquals(this.relatedDocuments, other.relatedDocuments) &&
            Objects.deepEquals(this.relatedQuestion, other.relatedQuestion) &&
            Objects.deepEquals(this.disambiguation, other.disambiguation) &&
            Objects.deepEquals(this.snippets, other.snippets) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.prominence, other.prominence) &&
            Objects.deepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            document,
            person,
            customer,
            team,
            customEntity,
            answer,
            extractedQnA,
            meeting,
            app,
            collection,
            answerBoard,
            code,
            shortcut,
            querySuggestions,
            relatedDocuments,
            relatedQuestion,
            disambiguation,
            snippets,
            trackingToken,
            prominence,
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StructuredResult.class,
                "document", document,
                "person", person,
                "customer", customer,
                "team", team,
                "customEntity", customEntity,
                "answer", answer,
                "extractedQnA", extractedQnA,
                "meeting", meeting,
                "app", app,
                "collection", collection,
                "answerBoard", answerBoard,
                "code", code,
                "shortcut", shortcut,
                "querySuggestions", querySuggestions,
                "relatedDocuments", relatedDocuments,
                "relatedQuestion", relatedQuestion,
                "disambiguation", disambiguation,
                "snippets", snippets,
                "trackingToken", trackingToken,
                "prominence", prominence,
                "source", source);
    }
    
    public final static class Builder {
 
        private Optional<? extends Document> document = Optional.empty();
 
        private Optional<? extends Person> person = Optional.empty();
 
        private Optional<? extends Customer> customer = Optional.empty();
 
        private Optional<? extends Team> team = Optional.empty();
 
        private Optional<? extends CustomEntity> customEntity = Optional.empty();
 
        private Optional<? extends Answer> answer = Optional.empty();
 
        private Optional<? extends ExtractedQnA> extractedQnA = Optional.empty();
 
        private Optional<? extends Meeting> meeting = Optional.empty();
 
        private Optional<? extends AppResult> app = Optional.empty();
 
        private Optional<? extends Collection> collection = Optional.empty();
 
        private Optional<? extends AnswerBoard> answerBoard = Optional.empty();
 
        private Optional<? extends Code> code = Optional.empty();
 
        private Optional<? extends Shortcut> shortcut = Optional.empty();
 
        private Optional<? extends QuerySuggestionList> querySuggestions = Optional.empty();
 
        private Optional<? extends List<RelatedDocuments>> relatedDocuments = Optional.empty();
 
        private Optional<? extends RelatedQuestion> relatedQuestion = Optional.empty();
 
        private Optional<? extends Disambiguation> disambiguation = Optional.empty();
 
        private Optional<? extends List<SearchResultSnippet>> snippets = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends Prominence> prominence = Optional.empty();
 
        private Optional<? extends StructuredResultSource> source = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder document(Document document) {
            Utils.checkNotNull(document, "document");
            this.document = Optional.ofNullable(document);
            return this;
        }

        public Builder document(Optional<? extends Document> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        public Builder person(Person person) {
            Utils.checkNotNull(person, "person");
            this.person = Optional.ofNullable(person);
            return this;
        }

        public Builder person(Optional<? extends Person> person) {
            Utils.checkNotNull(person, "person");
            this.person = person;
            return this;
        }

        public Builder customer(Customer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        public Builder customer(Optional<? extends Customer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        public Builder team(Team team) {
            Utils.checkNotNull(team, "team");
            this.team = Optional.ofNullable(team);
            return this;
        }

        public Builder team(Optional<? extends Team> team) {
            Utils.checkNotNull(team, "team");
            this.team = team;
            return this;
        }

        public Builder customEntity(CustomEntity customEntity) {
            Utils.checkNotNull(customEntity, "customEntity");
            this.customEntity = Optional.ofNullable(customEntity);
            return this;
        }

        public Builder customEntity(Optional<? extends CustomEntity> customEntity) {
            Utils.checkNotNull(customEntity, "customEntity");
            this.customEntity = customEntity;
            return this;
        }

        public Builder answer(Answer answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = Optional.ofNullable(answer);
            return this;
        }

        public Builder answer(Optional<? extends Answer> answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = answer;
            return this;
        }

        public Builder extractedQnA(ExtractedQnA extractedQnA) {
            Utils.checkNotNull(extractedQnA, "extractedQnA");
            this.extractedQnA = Optional.ofNullable(extractedQnA);
            return this;
        }

        public Builder extractedQnA(Optional<? extends ExtractedQnA> extractedQnA) {
            Utils.checkNotNull(extractedQnA, "extractedQnA");
            this.extractedQnA = extractedQnA;
            return this;
        }

        public Builder meeting(Meeting meeting) {
            Utils.checkNotNull(meeting, "meeting");
            this.meeting = Optional.ofNullable(meeting);
            return this;
        }

        public Builder meeting(Optional<? extends Meeting> meeting) {
            Utils.checkNotNull(meeting, "meeting");
            this.meeting = meeting;
            return this;
        }

        public Builder app(AppResult app) {
            Utils.checkNotNull(app, "app");
            this.app = Optional.ofNullable(app);
            return this;
        }

        public Builder app(Optional<? extends AppResult> app) {
            Utils.checkNotNull(app, "app");
            this.app = app;
            return this;
        }

        public Builder collection(Collection collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder answerBoard(AnswerBoard answerBoard) {
            Utils.checkNotNull(answerBoard, "answerBoard");
            this.answerBoard = Optional.ofNullable(answerBoard);
            return this;
        }

        public Builder answerBoard(Optional<? extends AnswerBoard> answerBoard) {
            Utils.checkNotNull(answerBoard, "answerBoard");
            this.answerBoard = answerBoard;
            return this;
        }

        public Builder code(Code code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<? extends Code> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder shortcut(Shortcut shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = Optional.ofNullable(shortcut);
            return this;
        }

        public Builder shortcut(Optional<? extends Shortcut> shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = shortcut;
            return this;
        }

        public Builder querySuggestions(QuerySuggestionList querySuggestions) {
            Utils.checkNotNull(querySuggestions, "querySuggestions");
            this.querySuggestions = Optional.ofNullable(querySuggestions);
            return this;
        }

        public Builder querySuggestions(Optional<? extends QuerySuggestionList> querySuggestions) {
            Utils.checkNotNull(querySuggestions, "querySuggestions");
            this.querySuggestions = querySuggestions;
            return this;
        }

        /**
         * A list of documents related to this structured result.
         */
        public Builder relatedDocuments(List<RelatedDocuments> relatedDocuments) {
            Utils.checkNotNull(relatedDocuments, "relatedDocuments");
            this.relatedDocuments = Optional.ofNullable(relatedDocuments);
            return this;
        }

        /**
         * A list of documents related to this structured result.
         */
        public Builder relatedDocuments(Optional<? extends List<RelatedDocuments>> relatedDocuments) {
            Utils.checkNotNull(relatedDocuments, "relatedDocuments");
            this.relatedDocuments = relatedDocuments;
            return this;
        }

        public Builder relatedQuestion(RelatedQuestion relatedQuestion) {
            Utils.checkNotNull(relatedQuestion, "relatedQuestion");
            this.relatedQuestion = Optional.ofNullable(relatedQuestion);
            return this;
        }

        public Builder relatedQuestion(Optional<? extends RelatedQuestion> relatedQuestion) {
            Utils.checkNotNull(relatedQuestion, "relatedQuestion");
            this.relatedQuestion = relatedQuestion;
            return this;
        }

        /**
         * A disambiguation between multiple entities with the same name
         */
        public Builder disambiguation(Disambiguation disambiguation) {
            Utils.checkNotNull(disambiguation, "disambiguation");
            this.disambiguation = Optional.ofNullable(disambiguation);
            return this;
        }

        /**
         * A disambiguation between multiple entities with the same name
         */
        public Builder disambiguation(Optional<? extends Disambiguation> disambiguation) {
            Utils.checkNotNull(disambiguation, "disambiguation");
            this.disambiguation = disambiguation;
            return this;
        }

        /**
         * Any snippets associated to the populated object.
         */
        public Builder snippets(List<SearchResultSnippet> snippets) {
            Utils.checkNotNull(snippets, "snippets");
            this.snippets = Optional.ofNullable(snippets);
            return this;
        }

        /**
         * Any snippets associated to the populated object.
         */
        public Builder snippets(Optional<? extends List<SearchResultSnippet>> snippets) {
            Utils.checkNotNull(snippets, "snippets");
            this.snippets = snippets;
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        /**
         * The level of visual distinction that should be given to a result.
         */
        public Builder prominence(Prominence prominence) {
            Utils.checkNotNull(prominence, "prominence");
            this.prominence = Optional.ofNullable(prominence);
            return this;
        }

        /**
         * The level of visual distinction that should be given to a result.
         */
        public Builder prominence(Optional<? extends Prominence> prominence) {
            Utils.checkNotNull(prominence, "prominence");
            this.prominence = prominence;
            return this;
        }

        /**
         * Source context for this result. Possible values depend on the result type.
         */
        public Builder source(StructuredResultSource source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * Source context for this result. Possible values depend on the result type.
         */
        public Builder source(Optional<? extends StructuredResultSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public StructuredResult build() {
            return new StructuredResult(
                document,
                person,
                customer,
                team,
                customEntity,
                answer,
                extractedQnA,
                meeting,
                app,
                collection,
                answerBoard,
                code,
                shortcut,
                querySuggestions,
                relatedDocuments,
                relatedQuestion,
                disambiguation,
                snippets,
                trackingToken,
                prominence,
                source);
        }
    }
}
