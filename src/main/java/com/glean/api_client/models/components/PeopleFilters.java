/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PeopleFilters {

    /**
     * Facets used for filtering people search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    private Optional<? extends List<FacetFilter>> filter;

    /**
     * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    @JsonCreator
    public PeopleFilters(
            @JsonProperty("filter") Optional<? extends List<FacetFilter>> filter,
            @JsonProperty("query") Optional<String> query) {
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(query, "query");
        this.filter = filter;
        this.query = query;
    }
    
    public PeopleFilters() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Facets used for filtering people search
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> filter() {
        return (Optional<List<FacetFilter>>) filter;
    }

    /**
     * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Facets used for filtering people search
     */
    public PeopleFilters withFilter(List<FacetFilter> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.ofNullable(filter);
        return this;
    }

    /**
     * Facets used for filtering people search
     */
    public PeopleFilters withFilter(Optional<? extends List<FacetFilter>> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    /**
     * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
     */
    public PeopleFilters withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
     */
    public PeopleFilters withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PeopleFilters other = (PeopleFilters) o;
        return 
            Objects.deepEquals(this.filter, other.filter) &&
            Objects.deepEquals(this.query, other.query);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            filter,
            query);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PeopleFilters.class,
                "filter", filter,
                "query", query);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<FacetFilter>> filter = Optional.empty();
 
        private Optional<String> query = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Facets used for filtering people search
         */
        public Builder filter(List<FacetFilter> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        /**
         * Facets used for filtering people search
         */
        public Builder filter(Optional<? extends List<FacetFilter>> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }

        /**
         * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public PeopleFilters build() {
            return new PeopleFilters(
                filter,
                query);
        }
    }
}
