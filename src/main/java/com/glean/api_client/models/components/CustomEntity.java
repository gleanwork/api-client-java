/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CustomEntity {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    /**
     * Unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Title or name of the custom entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The datasource the custom entity is from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * The type of the entity. Interpretation is specific to each datasource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    private Optional<String> objectType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends CustomEntityMetadata> metadata;

    /**
     * A list of user roles for the custom entity explicitly granted by the owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonCreator
    public CustomEntity(
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("objectType") Optional<String> objectType,
            @JsonProperty("metadata") Optional<? extends CustomEntityMetadata> metadata,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(objectType, "objectType");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(roles, "roles");
        this.permissions = permissions;
        this.id = id;
        this.title = title;
        this.datasource = datasource;
        this.objectType = objectType;
        this.metadata = metadata;
        this.roles = roles;
    }
    
    public CustomEntity() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    /**
     * Unique identifier.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Title or name of the custom entity.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The datasource the custom entity is from.
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * The type of the entity. Interpretation is specific to each datasource
     */
    @JsonIgnore
    public Optional<String> objectType() {
        return objectType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomEntityMetadata> metadata() {
        return (Optional<CustomEntityMetadata>) metadata;
    }

    /**
     * A list of user roles for the custom entity explicitly granted by the owner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CustomEntity withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public CustomEntity withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * Unique identifier.
     */
    public CustomEntity withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier.
     */
    public CustomEntity withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Title or name of the custom entity.
     */
    public CustomEntity withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Title or name of the custom entity.
     */
    public CustomEntity withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The datasource the custom entity is from.
     */
    public CustomEntity withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The datasource the custom entity is from.
     */
    public CustomEntity withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The type of the entity. Interpretation is specific to each datasource
     */
    public CustomEntity withObjectType(String objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = Optional.ofNullable(objectType);
        return this;
    }

    /**
     * The type of the entity. Interpretation is specific to each datasource
     */
    public CustomEntity withObjectType(Optional<String> objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = objectType;
        return this;
    }

    public CustomEntity withMetadata(CustomEntityMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CustomEntity withMetadata(Optional<? extends CustomEntityMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * A list of user roles for the custom entity explicitly granted by the owner.
     */
    public CustomEntity withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of user roles for the custom entity explicitly granted by the owner.
     */
    public CustomEntity withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomEntity other = (CustomEntity) o;
        return 
            Objects.deepEquals(this.permissions, other.permissions) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.objectType, other.objectType) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.roles, other.roles);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            permissions,
            id,
            title,
            datasource,
            objectType,
            metadata,
            roles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomEntity.class,
                "permissions", permissions,
                "id", id,
                "title", title,
                "datasource", datasource,
                "objectType", objectType,
                "metadata", metadata,
                "roles", roles);
    }
    
    public final static class Builder {
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> objectType = Optional.empty();
 
        private Optional<? extends CustomEntityMetadata> metadata = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * Unique identifier.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Title or name of the custom entity.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Title or name of the custom entity.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The datasource the custom entity is from.
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The datasource the custom entity is from.
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The type of the entity. Interpretation is specific to each datasource
         */
        public Builder objectType(String objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = Optional.ofNullable(objectType);
            return this;
        }

        /**
         * The type of the entity. Interpretation is specific to each datasource
         */
        public Builder objectType(Optional<String> objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = objectType;
            return this;
        }

        public Builder metadata(CustomEntityMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends CustomEntityMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * A list of user roles for the custom entity explicitly granted by the owner.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of user roles for the custom entity explicitly granted by the owner.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }
        
        public CustomEntity build() {
            return new CustomEntity(
                permissions,
                id,
                title,
                datasource,
                objectType,
                metadata,
                roles);
        }
    }
}
