/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ShortcutInsight {

    @JsonProperty("shortcut")
    private Shortcut shortcut;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitCount")
    private Optional<? extends CountInfo> visitCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitorCount")
    private Optional<? extends CountInfo> visitorCount;

    @JsonCreator
    public ShortcutInsight(
            @JsonProperty("shortcut") Shortcut shortcut,
            @JsonProperty("visitCount") Optional<? extends CountInfo> visitCount,
            @JsonProperty("visitorCount") Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(shortcut, "shortcut");
        Utils.checkNotNull(visitCount, "visitCount");
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.shortcut = shortcut;
        this.visitCount = visitCount;
        this.visitorCount = visitorCount;
    }
    
    public ShortcutInsight(
            Shortcut shortcut) {
        this(shortcut, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Shortcut shortcut() {
        return shortcut;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> visitCount() {
        return (Optional<CountInfo>) visitCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> visitorCount() {
        return (Optional<CountInfo>) visitorCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ShortcutInsight withShortcut(Shortcut shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = shortcut;
        return this;
    }

    public ShortcutInsight withVisitCount(CountInfo visitCount) {
        Utils.checkNotNull(visitCount, "visitCount");
        this.visitCount = Optional.ofNullable(visitCount);
        return this;
    }

    public ShortcutInsight withVisitCount(Optional<? extends CountInfo> visitCount) {
        Utils.checkNotNull(visitCount, "visitCount");
        this.visitCount = visitCount;
        return this;
    }

    public ShortcutInsight withVisitorCount(CountInfo visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = Optional.ofNullable(visitorCount);
        return this;
    }

    public ShortcutInsight withVisitorCount(Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = visitorCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShortcutInsight other = (ShortcutInsight) o;
        return 
            Objects.deepEquals(this.shortcut, other.shortcut) &&
            Objects.deepEquals(this.visitCount, other.visitCount) &&
            Objects.deepEquals(this.visitorCount, other.visitorCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            shortcut,
            visitCount,
            visitorCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShortcutInsight.class,
                "shortcut", shortcut,
                "visitCount", visitCount,
                "visitorCount", visitorCount);
    }
    
    public final static class Builder {
 
        private Shortcut shortcut;
 
        private Optional<? extends CountInfo> visitCount = Optional.empty();
 
        private Optional<? extends CountInfo> visitorCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder shortcut(Shortcut shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = shortcut;
            return this;
        }

        public Builder visitCount(CountInfo visitCount) {
            Utils.checkNotNull(visitCount, "visitCount");
            this.visitCount = Optional.ofNullable(visitCount);
            return this;
        }

        public Builder visitCount(Optional<? extends CountInfo> visitCount) {
            Utils.checkNotNull(visitCount, "visitCount");
            this.visitCount = visitCount;
            return this;
        }

        public Builder visitorCount(CountInfo visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = Optional.ofNullable(visitorCount);
            return this;
        }

        public Builder visitorCount(Optional<? extends CountInfo> visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = visitorCount;
            return this;
        }
        
        public ShortcutInsight build() {
            return new ShortcutInsight(
                shortcut,
                visitCount,
                visitorCount);
        }
    }
}
