/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class WorkflowResult {

    @JsonProperty("workflow")
    private Workflow workflow;

    @JsonCreator
    public WorkflowResult(
            @JsonProperty("workflow") Workflow workflow) {
        Utils.checkNotNull(workflow, "workflow");
        this.workflow = workflow;
    }

    @JsonIgnore
    public Workflow workflow() {
        return workflow;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public WorkflowResult withWorkflow(Workflow workflow) {
        Utils.checkNotNull(workflow, "workflow");
        this.workflow = workflow;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowResult other = (WorkflowResult) o;
        return 
            Objects.deepEquals(this.workflow, other.workflow);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            workflow);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowResult.class,
                "workflow", workflow);
    }
    
    public final static class Builder {
 
        private Workflow workflow;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder workflow(Workflow workflow) {
            Utils.checkNotNull(workflow, "workflow");
            this.workflow = workflow;
            return this;
        }
        
        public WorkflowResult build() {
            return new WorkflowResult(
                workflow);
        }
    }
}
