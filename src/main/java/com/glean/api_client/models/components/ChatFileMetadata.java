/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * ChatFileMetadata
 * 
 * <p>Metadata of a file uploaded by a user for Chat.
 */
public class ChatFileMetadata {

    /**
     * Current status of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ChatFileStatus> status;

    /**
     * Upload time, in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadTime")
    private Optional<Long> uploadTime;

    /**
     * Size of the processed file in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processedSize")
    private Optional<Long> processedSize;

    /**
     * Reason for failed status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureReason")
    private Optional<? extends ChatFileFailureReason> failureReason;

    /**
     * MIME type of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    private Optional<String> mimeType;

    @JsonCreator
    public ChatFileMetadata(
            @JsonProperty("status") Optional<? extends ChatFileStatus> status,
            @JsonProperty("uploadTime") Optional<Long> uploadTime,
            @JsonProperty("processedSize") Optional<Long> processedSize,
            @JsonProperty("failureReason") Optional<? extends ChatFileFailureReason> failureReason,
            @JsonProperty("mimeType") Optional<String> mimeType) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(uploadTime, "uploadTime");
        Utils.checkNotNull(processedSize, "processedSize");
        Utils.checkNotNull(failureReason, "failureReason");
        Utils.checkNotNull(mimeType, "mimeType");
        this.status = status;
        this.uploadTime = uploadTime;
        this.processedSize = processedSize;
        this.failureReason = failureReason;
        this.mimeType = mimeType;
    }
    
    public ChatFileMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Current status of the file.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatFileStatus> status() {
        return (Optional<ChatFileStatus>) status;
    }

    /**
     * Upload time, in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> uploadTime() {
        return uploadTime;
    }

    /**
     * Size of the processed file in bytes.
     */
    @JsonIgnore
    public Optional<Long> processedSize() {
        return processedSize;
    }

    /**
     * Reason for failed status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatFileFailureReason> failureReason() {
        return (Optional<ChatFileFailureReason>) failureReason;
    }

    /**
     * MIME type of the file.
     */
    @JsonIgnore
    public Optional<String> mimeType() {
        return mimeType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Current status of the file.
     */
    public ChatFileMetadata withStatus(ChatFileStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Current status of the file.
     */
    public ChatFileMetadata withStatus(Optional<? extends ChatFileStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Upload time, in epoch seconds.
     */
    public ChatFileMetadata withUploadTime(long uploadTime) {
        Utils.checkNotNull(uploadTime, "uploadTime");
        this.uploadTime = Optional.ofNullable(uploadTime);
        return this;
    }

    /**
     * Upload time, in epoch seconds.
     */
    public ChatFileMetadata withUploadTime(Optional<Long> uploadTime) {
        Utils.checkNotNull(uploadTime, "uploadTime");
        this.uploadTime = uploadTime;
        return this;
    }

    /**
     * Size of the processed file in bytes.
     */
    public ChatFileMetadata withProcessedSize(long processedSize) {
        Utils.checkNotNull(processedSize, "processedSize");
        this.processedSize = Optional.ofNullable(processedSize);
        return this;
    }

    /**
     * Size of the processed file in bytes.
     */
    public ChatFileMetadata withProcessedSize(Optional<Long> processedSize) {
        Utils.checkNotNull(processedSize, "processedSize");
        this.processedSize = processedSize;
        return this;
    }

    /**
     * Reason for failed status.
     */
    public ChatFileMetadata withFailureReason(ChatFileFailureReason failureReason) {
        Utils.checkNotNull(failureReason, "failureReason");
        this.failureReason = Optional.ofNullable(failureReason);
        return this;
    }

    /**
     * Reason for failed status.
     */
    public ChatFileMetadata withFailureReason(Optional<? extends ChatFileFailureReason> failureReason) {
        Utils.checkNotNull(failureReason, "failureReason");
        this.failureReason = failureReason;
        return this;
    }

    /**
     * MIME type of the file.
     */
    public ChatFileMetadata withMimeType(String mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = Optional.ofNullable(mimeType);
        return this;
    }

    /**
     * MIME type of the file.
     */
    public ChatFileMetadata withMimeType(Optional<String> mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = mimeType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatFileMetadata other = (ChatFileMetadata) o;
        return 
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.uploadTime, other.uploadTime) &&
            Objects.deepEquals(this.processedSize, other.processedSize) &&
            Objects.deepEquals(this.failureReason, other.failureReason) &&
            Objects.deepEquals(this.mimeType, other.mimeType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status,
            uploadTime,
            processedSize,
            failureReason,
            mimeType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatFileMetadata.class,
                "status", status,
                "uploadTime", uploadTime,
                "processedSize", processedSize,
                "failureReason", failureReason,
                "mimeType", mimeType);
    }
    
    public final static class Builder {
 
        private Optional<? extends ChatFileStatus> status = Optional.empty();
 
        private Optional<Long> uploadTime = Optional.empty();
 
        private Optional<Long> processedSize = Optional.empty();
 
        private Optional<? extends ChatFileFailureReason> failureReason = Optional.empty();
 
        private Optional<String> mimeType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Current status of the file.
         */
        public Builder status(ChatFileStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Current status of the file.
         */
        public Builder status(Optional<? extends ChatFileStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Upload time, in epoch seconds.
         */
        public Builder uploadTime(long uploadTime) {
            Utils.checkNotNull(uploadTime, "uploadTime");
            this.uploadTime = Optional.ofNullable(uploadTime);
            return this;
        }

        /**
         * Upload time, in epoch seconds.
         */
        public Builder uploadTime(Optional<Long> uploadTime) {
            Utils.checkNotNull(uploadTime, "uploadTime");
            this.uploadTime = uploadTime;
            return this;
        }

        /**
         * Size of the processed file in bytes.
         */
        public Builder processedSize(long processedSize) {
            Utils.checkNotNull(processedSize, "processedSize");
            this.processedSize = Optional.ofNullable(processedSize);
            return this;
        }

        /**
         * Size of the processed file in bytes.
         */
        public Builder processedSize(Optional<Long> processedSize) {
            Utils.checkNotNull(processedSize, "processedSize");
            this.processedSize = processedSize;
            return this;
        }

        /**
         * Reason for failed status.
         */
        public Builder failureReason(ChatFileFailureReason failureReason) {
            Utils.checkNotNull(failureReason, "failureReason");
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        /**
         * Reason for failed status.
         */
        public Builder failureReason(Optional<? extends ChatFileFailureReason> failureReason) {
            Utils.checkNotNull(failureReason, "failureReason");
            this.failureReason = failureReason;
            return this;
        }

        /**
         * MIME type of the file.
         */
        public Builder mimeType(String mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = Optional.ofNullable(mimeType);
            return this;
        }

        /**
         * MIME type of the file.
         */
        public Builder mimeType(Optional<String> mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = mimeType;
            return this;
        }
        
        public ChatFileMetadata build() {
            return new ChatFileMetadata(
                status,
                uploadTime,
                processedSize,
                failureReason,
                mimeType);
        }
    }
}
