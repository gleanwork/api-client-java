/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * InviteInfo
 * 
 * <p>Information regarding the invite status of a person.
 */
public class InviteInfo {

    /**
     * The time this person signed up in ISO format (ISO 8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signUpTime")
    private Optional<OffsetDateTime> signUpTime;

    /**
     * Latest invites received by the user for each channel
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invites")
    private Optional<? extends List<ChannelInviteInfo>> invites;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inviter")
    private Optional<? extends Person> inviter;

    /**
     * The time this person was invited in ISO format (ISO 8601).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inviteTime")
    @Deprecated
    private Optional<OffsetDateTime> inviteTime;

    /**
     * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reminderTime")
    @Deprecated
    private Optional<OffsetDateTime> reminderTime;

    @JsonCreator
    public InviteInfo(
            @JsonProperty("signUpTime") Optional<OffsetDateTime> signUpTime,
            @JsonProperty("invites") Optional<? extends List<ChannelInviteInfo>> invites,
            @JsonProperty("inviter") Optional<? extends Person> inviter,
            @JsonProperty("inviteTime") Optional<OffsetDateTime> inviteTime,
            @JsonProperty("reminderTime") Optional<OffsetDateTime> reminderTime) {
        Utils.checkNotNull(signUpTime, "signUpTime");
        Utils.checkNotNull(invites, "invites");
        Utils.checkNotNull(inviter, "inviter");
        Utils.checkNotNull(inviteTime, "inviteTime");
        Utils.checkNotNull(reminderTime, "reminderTime");
        this.signUpTime = signUpTime;
        this.invites = invites;
        this.inviter = inviter;
        this.inviteTime = inviteTime;
        this.reminderTime = reminderTime;
    }
    
    public InviteInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The time this person signed up in ISO format (ISO 8601).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> signUpTime() {
        return signUpTime;
    }

    /**
     * Latest invites received by the user for each channel
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ChannelInviteInfo>> invites() {
        return (Optional<List<ChannelInviteInfo>>) invites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> inviter() {
        return (Optional<Person>) inviter;
    }

    /**
     * The time this person was invited in ISO format (ISO 8601).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<OffsetDateTime> inviteTime() {
        return inviteTime;
    }

    /**
     * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<OffsetDateTime> reminderTime() {
        return reminderTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The time this person signed up in ISO format (ISO 8601).
     */
    public InviteInfo withSignUpTime(OffsetDateTime signUpTime) {
        Utils.checkNotNull(signUpTime, "signUpTime");
        this.signUpTime = Optional.ofNullable(signUpTime);
        return this;
    }

    /**
     * The time this person signed up in ISO format (ISO 8601).
     */
    public InviteInfo withSignUpTime(Optional<OffsetDateTime> signUpTime) {
        Utils.checkNotNull(signUpTime, "signUpTime");
        this.signUpTime = signUpTime;
        return this;
    }

    /**
     * Latest invites received by the user for each channel
     */
    public InviteInfo withInvites(List<ChannelInviteInfo> invites) {
        Utils.checkNotNull(invites, "invites");
        this.invites = Optional.ofNullable(invites);
        return this;
    }

    /**
     * Latest invites received by the user for each channel
     */
    public InviteInfo withInvites(Optional<? extends List<ChannelInviteInfo>> invites) {
        Utils.checkNotNull(invites, "invites");
        this.invites = invites;
        return this;
    }

    public InviteInfo withInviter(Person inviter) {
        Utils.checkNotNull(inviter, "inviter");
        this.inviter = Optional.ofNullable(inviter);
        return this;
    }

    public InviteInfo withInviter(Optional<? extends Person> inviter) {
        Utils.checkNotNull(inviter, "inviter");
        this.inviter = inviter;
        return this;
    }

    /**
     * The time this person was invited in ISO format (ISO 8601).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InviteInfo withInviteTime(OffsetDateTime inviteTime) {
        Utils.checkNotNull(inviteTime, "inviteTime");
        this.inviteTime = Optional.ofNullable(inviteTime);
        return this;
    }

    /**
     * The time this person was invited in ISO format (ISO 8601).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InviteInfo withInviteTime(Optional<OffsetDateTime> inviteTime) {
        Utils.checkNotNull(inviteTime, "inviteTime");
        this.inviteTime = inviteTime;
        return this;
    }

    /**
     * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InviteInfo withReminderTime(OffsetDateTime reminderTime) {
        Utils.checkNotNull(reminderTime, "reminderTime");
        this.reminderTime = Optional.ofNullable(reminderTime);
        return this;
    }

    /**
     * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InviteInfo withReminderTime(Optional<OffsetDateTime> reminderTime) {
        Utils.checkNotNull(reminderTime, "reminderTime");
        this.reminderTime = reminderTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InviteInfo other = (InviteInfo) o;
        return 
            Objects.deepEquals(this.signUpTime, other.signUpTime) &&
            Objects.deepEquals(this.invites, other.invites) &&
            Objects.deepEquals(this.inviter, other.inviter) &&
            Objects.deepEquals(this.inviteTime, other.inviteTime) &&
            Objects.deepEquals(this.reminderTime, other.reminderTime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            signUpTime,
            invites,
            inviter,
            inviteTime,
            reminderTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InviteInfo.class,
                "signUpTime", signUpTime,
                "invites", invites,
                "inviter", inviter,
                "inviteTime", inviteTime,
                "reminderTime", reminderTime);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> signUpTime = Optional.empty();
 
        private Optional<? extends List<ChannelInviteInfo>> invites = Optional.empty();
 
        private Optional<? extends Person> inviter = Optional.empty();
 
        @Deprecated
        private Optional<OffsetDateTime> inviteTime = Optional.empty();
 
        @Deprecated
        private Optional<OffsetDateTime> reminderTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The time this person signed up in ISO format (ISO 8601).
         */
        public Builder signUpTime(OffsetDateTime signUpTime) {
            Utils.checkNotNull(signUpTime, "signUpTime");
            this.signUpTime = Optional.ofNullable(signUpTime);
            return this;
        }

        /**
         * The time this person signed up in ISO format (ISO 8601).
         */
        public Builder signUpTime(Optional<OffsetDateTime> signUpTime) {
            Utils.checkNotNull(signUpTime, "signUpTime");
            this.signUpTime = signUpTime;
            return this;
        }

        /**
         * Latest invites received by the user for each channel
         */
        public Builder invites(List<ChannelInviteInfo> invites) {
            Utils.checkNotNull(invites, "invites");
            this.invites = Optional.ofNullable(invites);
            return this;
        }

        /**
         * Latest invites received by the user for each channel
         */
        public Builder invites(Optional<? extends List<ChannelInviteInfo>> invites) {
            Utils.checkNotNull(invites, "invites");
            this.invites = invites;
            return this;
        }

        public Builder inviter(Person inviter) {
            Utils.checkNotNull(inviter, "inviter");
            this.inviter = Optional.ofNullable(inviter);
            return this;
        }

        public Builder inviter(Optional<? extends Person> inviter) {
            Utils.checkNotNull(inviter, "inviter");
            this.inviter = inviter;
            return this;
        }

        /**
         * The time this person was invited in ISO format (ISO 8601).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder inviteTime(OffsetDateTime inviteTime) {
            Utils.checkNotNull(inviteTime, "inviteTime");
            this.inviteTime = Optional.ofNullable(inviteTime);
            return this;
        }

        /**
         * The time this person was invited in ISO format (ISO 8601).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder inviteTime(Optional<OffsetDateTime> inviteTime) {
            Utils.checkNotNull(inviteTime, "inviteTime");
            this.inviteTime = inviteTime;
            return this;
        }

        /**
         * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder reminderTime(OffsetDateTime reminderTime) {
            Utils.checkNotNull(reminderTime, "reminderTime");
            this.reminderTime = Optional.ofNullable(reminderTime);
            return this;
        }

        /**
         * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder reminderTime(Optional<OffsetDateTime> reminderTime) {
            Utils.checkNotNull(reminderTime, "reminderTime");
            this.reminderTime = reminderTime;
            return this;
        }
        
        public InviteInfo build() {
            return new InviteInfo(
                signUpTime,
                invites,
                inviter,
                inviteTime,
                reminderTime);
        }
    }
}
