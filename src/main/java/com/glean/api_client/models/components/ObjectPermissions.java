/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ObjectPermissions {

    /**
     * Describes the write permissions levels that a user has for a specific feature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("write")
    private Optional<? extends WritePermission> write;

    @JsonCreator
    public ObjectPermissions(
            @JsonProperty("write") Optional<? extends WritePermission> write) {
        Utils.checkNotNull(write, "write");
        this.write = write;
    }
    
    public ObjectPermissions() {
        this(Optional.empty());
    }

    /**
     * Describes the write permissions levels that a user has for a specific feature
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WritePermission> write() {
        return (Optional<WritePermission>) write;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the write permissions levels that a user has for a specific feature
     */
    public ObjectPermissions withWrite(WritePermission write) {
        Utils.checkNotNull(write, "write");
        this.write = Optional.ofNullable(write);
        return this;
    }

    /**
     * Describes the write permissions levels that a user has for a specific feature
     */
    public ObjectPermissions withWrite(Optional<? extends WritePermission> write) {
        Utils.checkNotNull(write, "write");
        this.write = write;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjectPermissions other = (ObjectPermissions) o;
        return 
            Objects.deepEquals(this.write, other.write);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            write);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjectPermissions.class,
                "write", write);
    }
    
    public final static class Builder {
 
        private Optional<? extends WritePermission> write = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the write permissions levels that a user has for a specific feature
         */
        public Builder write(WritePermission write) {
            Utils.checkNotNull(write, "write");
            this.write = Optional.ofNullable(write);
            return this;
        }

        /**
         * Describes the write permissions levels that a user has for a specific feature
         */
        public Builder write(Optional<? extends WritePermission> write) {
            Utils.checkNotNull(write, "write");
            this.write = write;
            return this;
        }
        
        public ObjectPermissions build() {
            return new ObjectPermissions(
                write);
        }
    }
}
