/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * FeedbackPayload
 * 
 * <p>Optional payload for feedback reporting.
 */
public class FeedbackPayload {

    /**
     * Additional freeform comments provided by the reporter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<String> comments;

    /**
     * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customJson")
    private Optional<String> customJson;

    /**
     * Images uploaded by the user when submitting feedback
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrls")
    private Optional<? extends List<String>> imageUrls;

    /**
     * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueType")
    @Deprecated
    private Optional<String> issueType;

    /**
     * The type(s) of issue being reported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issues")
    private Optional<? extends List<String>> issues;

    /**
     * The query the reporter tried when feedback was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * The tracking token of the feedback that admins can provide Glean Support to debug
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    /**
     * The URL the reporter was on when feedback was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * The label of the rating that was selected when feedback was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<String> ratingKey;

    @JsonCreator
    public FeedbackPayload(
            @JsonProperty("comments") Optional<String> comments,
            @JsonProperty("customJson") Optional<String> customJson,
            @JsonProperty("imageUrls") Optional<? extends List<String>> imageUrls,
            @JsonProperty("issueType") Optional<String> issueType,
            @JsonProperty("issues") Optional<? extends List<String>> issues,
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("ratingKey") Optional<String> ratingKey) {
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(customJson, "customJson");
        Utils.checkNotNull(imageUrls, "imageUrls");
        Utils.checkNotNull(issueType, "issueType");
        Utils.checkNotNull(issues, "issues");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.comments = comments;
        this.customJson = customJson;
        this.imageUrls = imageUrls;
        this.issueType = issueType;
        this.issues = issues;
        this.query = query;
        this.trackingToken = trackingToken;
        this.url = url;
        this.ratingKey = ratingKey;
    }
    
    public FeedbackPayload() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Additional freeform comments provided by the reporter.
     */
    @JsonIgnore
    public Optional<String> comments() {
        return comments;
    }

    /**
     * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
     */
    @JsonIgnore
    public Optional<String> customJson() {
        return customJson;
    }

    /**
     * Images uploaded by the user when submitting feedback
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> imageUrls() {
        return (Optional<List<String>>) imageUrls;
    }

    /**
     * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> issueType() {
        return issueType;
    }

    /**
     * The type(s) of issue being reported.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> issues() {
        return (Optional<List<String>>) issues;
    }

    /**
     * The query the reporter tried when feedback was sent.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * The tracking token of the feedback that admins can provide Glean Support to debug
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    /**
     * The URL the reporter was on when feedback was sent.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * The label of the rating that was selected when feedback was sent.
     */
    @JsonIgnore
    public Optional<String> ratingKey() {
        return ratingKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Additional freeform comments provided by the reporter.
     */
    public FeedbackPayload withComments(String comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    /**
     * Additional freeform comments provided by the reporter.
     */
    public FeedbackPayload withComments(Optional<String> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    /**
     * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
     */
    public FeedbackPayload withCustomJson(String customJson) {
        Utils.checkNotNull(customJson, "customJson");
        this.customJson = Optional.ofNullable(customJson);
        return this;
    }

    /**
     * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
     */
    public FeedbackPayload withCustomJson(Optional<String> customJson) {
        Utils.checkNotNull(customJson, "customJson");
        this.customJson = customJson;
        return this;
    }

    /**
     * Images uploaded by the user when submitting feedback
     */
    public FeedbackPayload withImageUrls(List<String> imageUrls) {
        Utils.checkNotNull(imageUrls, "imageUrls");
        this.imageUrls = Optional.ofNullable(imageUrls);
        return this;
    }

    /**
     * Images uploaded by the user when submitting feedback
     */
    public FeedbackPayload withImageUrls(Optional<? extends List<String>> imageUrls) {
        Utils.checkNotNull(imageUrls, "imageUrls");
        this.imageUrls = imageUrls;
        return this;
    }

    /**
     * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public FeedbackPayload withIssueType(String issueType) {
        Utils.checkNotNull(issueType, "issueType");
        this.issueType = Optional.ofNullable(issueType);
        return this;
    }

    /**
     * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public FeedbackPayload withIssueType(Optional<String> issueType) {
        Utils.checkNotNull(issueType, "issueType");
        this.issueType = issueType;
        return this;
    }

    /**
     * The type(s) of issue being reported.
     */
    public FeedbackPayload withIssues(List<String> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = Optional.ofNullable(issues);
        return this;
    }

    /**
     * The type(s) of issue being reported.
     */
    public FeedbackPayload withIssues(Optional<? extends List<String>> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = issues;
        return this;
    }

    /**
     * The query the reporter tried when feedback was sent.
     */
    public FeedbackPayload withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * The query the reporter tried when feedback was sent.
     */
    public FeedbackPayload withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * The tracking token of the feedback that admins can provide Glean Support to debug
     */
    public FeedbackPayload withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * The tracking token of the feedback that admins can provide Glean Support to debug
     */
    public FeedbackPayload withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    /**
     * The URL the reporter was on when feedback was sent.
     */
    public FeedbackPayload withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL the reporter was on when feedback was sent.
     */
    public FeedbackPayload withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The label of the rating that was selected when feedback was sent.
     */
    public FeedbackPayload withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    /**
     * The label of the rating that was selected when feedback was sent.
     */
    public FeedbackPayload withRatingKey(Optional<String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedbackPayload other = (FeedbackPayload) o;
        return 
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.customJson, other.customJson) &&
            Objects.deepEquals(this.imageUrls, other.imageUrls) &&
            Objects.deepEquals(this.issueType, other.issueType) &&
            Objects.deepEquals(this.issues, other.issues) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.ratingKey, other.ratingKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            comments,
            customJson,
            imageUrls,
            issueType,
            issues,
            query,
            trackingToken,
            url,
            ratingKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedbackPayload.class,
                "comments", comments,
                "customJson", customJson,
                "imageUrls", imageUrls,
                "issueType", issueType,
                "issues", issues,
                "query", query,
                "trackingToken", trackingToken,
                "url", url,
                "ratingKey", ratingKey);
    }
    
    public final static class Builder {
 
        private Optional<String> comments = Optional.empty();
 
        private Optional<String> customJson = Optional.empty();
 
        private Optional<? extends List<String>> imageUrls = Optional.empty();
 
        @Deprecated
        private Optional<String> issueType = Optional.empty();
 
        private Optional<? extends List<String>> issues = Optional.empty();
 
        private Optional<String> query = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> ratingKey = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Additional freeform comments provided by the reporter.
         */
        public Builder comments(String comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * Additional freeform comments provided by the reporter.
         */
        public Builder comments(Optional<String> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        /**
         * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
         */
        public Builder customJson(String customJson) {
            Utils.checkNotNull(customJson, "customJson");
            this.customJson = Optional.ofNullable(customJson);
            return this;
        }

        /**
         * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
         */
        public Builder customJson(Optional<String> customJson) {
            Utils.checkNotNull(customJson, "customJson");
            this.customJson = customJson;
            return this;
        }

        /**
         * Images uploaded by the user when submitting feedback
         */
        public Builder imageUrls(List<String> imageUrls) {
            Utils.checkNotNull(imageUrls, "imageUrls");
            this.imageUrls = Optional.ofNullable(imageUrls);
            return this;
        }

        /**
         * Images uploaded by the user when submitting feedback
         */
        public Builder imageUrls(Optional<? extends List<String>> imageUrls) {
            Utils.checkNotNull(imageUrls, "imageUrls");
            this.imageUrls = imageUrls;
            return this;
        }

        /**
         * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder issueType(String issueType) {
            Utils.checkNotNull(issueType, "issueType");
            this.issueType = Optional.ofNullable(issueType);
            return this;
        }

        /**
         * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder issueType(Optional<String> issueType) {
            Utils.checkNotNull(issueType, "issueType");
            this.issueType = issueType;
            return this;
        }

        /**
         * The type(s) of issue being reported.
         */
        public Builder issues(List<String> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = Optional.ofNullable(issues);
            return this;
        }

        /**
         * The type(s) of issue being reported.
         */
        public Builder issues(Optional<? extends List<String>> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = issues;
            return this;
        }

        /**
         * The query the reporter tried when feedback was sent.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * The query the reporter tried when feedback was sent.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * The tracking token of the feedback that admins can provide Glean Support to debug
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * The tracking token of the feedback that admins can provide Glean Support to debug
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        /**
         * The URL the reporter was on when feedback was sent.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL the reporter was on when feedback was sent.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The label of the rating that was selected when feedback was sent.
         */
        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        /**
         * The label of the rating that was selected when feedback was sent.
         */
        public Builder ratingKey(Optional<String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }
        
        public FeedbackPayload build() {
            return new FeedbackPayload(
                comments,
                customJson,
                imageUrls,
                issueType,
                issues,
                query,
                trackingToken,
                url,
                ratingKey);
        }
    }
}
