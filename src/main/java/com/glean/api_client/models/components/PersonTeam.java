/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.utils.LazySingletonValue;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

/**
 * PersonTeam
 * 
 * <p>Use `id` if you index teams via Glean, and use `name` and `externalLink` if you want to use your own team pages
 */
public class PersonTeam {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Team name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Link to a team page on the internet or your company's intranet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalLink")
    private Optional<String> externalLink;

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationship")
    private Optional<? extends PersonTeamRelationship> relationship;

    /**
     * The team member's start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("joinDate")
    private Optional<OffsetDateTime> joinDate;

    @JsonCreator
    public PersonTeam(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("externalLink") Optional<String> externalLink,
            @JsonProperty("relationship") Optional<? extends PersonTeamRelationship> relationship,
            @JsonProperty("joinDate") Optional<OffsetDateTime> joinDate) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(externalLink, "externalLink");
        Utils.checkNotNull(relationship, "relationship");
        Utils.checkNotNull(joinDate, "joinDate");
        this.id = id;
        this.name = name;
        this.externalLink = externalLink;
        this.relationship = relationship;
        this.joinDate = joinDate;
    }
    
    public PersonTeam() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Team name
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Link to a team page on the internet or your company's intranet
     */
    @JsonIgnore
    public Optional<String> externalLink() {
        return externalLink;
    }

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PersonTeamRelationship> relationship() {
        return (Optional<PersonTeamRelationship>) relationship;
    }

    /**
     * The team member's start date
     */
    @JsonIgnore
    public Optional<OffsetDateTime> joinDate() {
        return joinDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier
     */
    public PersonTeam withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public PersonTeam withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Team name
     */
    public PersonTeam withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Team name
     */
    public PersonTeam withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Link to a team page on the internet or your company's intranet
     */
    public PersonTeam withExternalLink(String externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = Optional.ofNullable(externalLink);
        return this;
    }

    /**
     * Link to a team page on the internet or your company's intranet
     */
    public PersonTeam withExternalLink(Optional<String> externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = externalLink;
        return this;
    }

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    public PersonTeam withRelationship(PersonTeamRelationship relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = Optional.ofNullable(relationship);
        return this;
    }

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    public PersonTeam withRelationship(Optional<? extends PersonTeamRelationship> relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = relationship;
        return this;
    }

    /**
     * The team member's start date
     */
    public PersonTeam withJoinDate(OffsetDateTime joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = Optional.ofNullable(joinDate);
        return this;
    }

    /**
     * The team member's start date
     */
    public PersonTeam withJoinDate(Optional<OffsetDateTime> joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = joinDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonTeam other = (PersonTeam) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.externalLink, other.externalLink) &&
            Objects.deepEquals(this.relationship, other.relationship) &&
            Objects.deepEquals(this.joinDate, other.joinDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            externalLink,
            relationship,
            joinDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PersonTeam.class,
                "id", id,
                "name", name,
                "externalLink", externalLink,
                "relationship", relationship,
                "joinDate", joinDate);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> externalLink = Optional.empty();
 
        private Optional<? extends PersonTeamRelationship> relationship;
 
        private Optional<OffsetDateTime> joinDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Team name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Team name
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Link to a team page on the internet or your company's intranet
         */
        public Builder externalLink(String externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = Optional.ofNullable(externalLink);
            return this;
        }

        /**
         * Link to a team page on the internet or your company's intranet
         */
        public Builder externalLink(Optional<String> externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = externalLink;
            return this;
        }

        /**
         * The team member's relationship to the team. This defaults to MEMBER if not set.
         */
        public Builder relationship(PersonTeamRelationship relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = Optional.ofNullable(relationship);
            return this;
        }

        /**
         * The team member's relationship to the team. This defaults to MEMBER if not set.
         */
        public Builder relationship(Optional<? extends PersonTeamRelationship> relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = relationship;
            return this;
        }

        /**
         * The team member's start date
         */
        public Builder joinDate(OffsetDateTime joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = Optional.ofNullable(joinDate);
            return this;
        }

        /**
         * The team member's start date
         */
        public Builder joinDate(Optional<OffsetDateTime> joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = joinDate;
            return this;
        }
        
        public PersonTeam build() {
            if (relationship == null) {
                relationship = _SINGLETON_VALUE_Relationship.value();
            }
            return new PersonTeam(
                id,
                name,
                externalLink,
                relationship,
                joinDate);
        }

        private static final LazySingletonValue<Optional<? extends PersonTeamRelationship>> _SINGLETON_VALUE_Relationship =
                new LazySingletonValue<>(
                        "relationship",
                        "\"MEMBER\"",
                        new TypeReference<Optional<? extends PersonTeamRelationship>>() {});
    }
}
