/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetEventsRequest {

    /**
     * The ids of the calendar events to be retrieved.
     */
    @JsonProperty("ids")
    private List<String> ids;

    /**
     * Auth tokens if client-side authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTokens")
    private Optional<? extends List<AuthToken>> authTokens;

    /**
     * The app or other repository type from which the event was extracted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotate")
    private Optional<Boolean> annotate;

    @JsonCreator
    public GetEventsRequest(
            @JsonProperty("ids") List<String> ids,
            @JsonProperty("authTokens") Optional<? extends List<AuthToken>> authTokens,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("annotate") Optional<Boolean> annotate) {
        Utils.checkNotNull(ids, "ids");
        Utils.checkNotNull(authTokens, "authTokens");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(annotate, "annotate");
        this.ids = ids;
        this.authTokens = authTokens;
        this.datasource = datasource;
        this.annotate = annotate;
    }
    
    public GetEventsRequest(
            List<String> ids) {
        this(ids, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ids of the calendar events to be retrieved.
     */
    @JsonIgnore
    public List<String> ids() {
        return ids;
    }

    /**
     * Auth tokens if client-side authentication.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AuthToken>> authTokens() {
        return (Optional<List<AuthToken>>) authTokens;
    }

    /**
     * The app or other repository type from which the event was extracted
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
     */
    @JsonIgnore
    public Optional<Boolean> annotate() {
        return annotate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ids of the calendar events to be retrieved.
     */
    public GetEventsRequest withIds(List<String> ids) {
        Utils.checkNotNull(ids, "ids");
        this.ids = ids;
        return this;
    }

    /**
     * Auth tokens if client-side authentication.
     */
    public GetEventsRequest withAuthTokens(List<AuthToken> authTokens) {
        Utils.checkNotNull(authTokens, "authTokens");
        this.authTokens = Optional.ofNullable(authTokens);
        return this;
    }

    /**
     * Auth tokens if client-side authentication.
     */
    public GetEventsRequest withAuthTokens(Optional<? extends List<AuthToken>> authTokens) {
        Utils.checkNotNull(authTokens, "authTokens");
        this.authTokens = authTokens;
        return this;
    }

    /**
     * The app or other repository type from which the event was extracted
     */
    public GetEventsRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The app or other repository type from which the event was extracted
     */
    public GetEventsRequest withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
     */
    public GetEventsRequest withAnnotate(boolean annotate) {
        Utils.checkNotNull(annotate, "annotate");
        this.annotate = Optional.ofNullable(annotate);
        return this;
    }

    /**
     * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
     */
    public GetEventsRequest withAnnotate(Optional<Boolean> annotate) {
        Utils.checkNotNull(annotate, "annotate");
        this.annotate = annotate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetEventsRequest other = (GetEventsRequest) o;
        return 
            Objects.deepEquals(this.ids, other.ids) &&
            Objects.deepEquals(this.authTokens, other.authTokens) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.annotate, other.annotate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ids,
            authTokens,
            datasource,
            annotate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetEventsRequest.class,
                "ids", ids,
                "authTokens", authTokens,
                "datasource", datasource,
                "annotate", annotate);
    }
    
    public final static class Builder {
 
        private List<String> ids;
 
        private Optional<? extends List<AuthToken>> authTokens = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<Boolean> annotate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ids of the calendar events to be retrieved.
         */
        public Builder ids(List<String> ids) {
            Utils.checkNotNull(ids, "ids");
            this.ids = ids;
            return this;
        }

        /**
         * Auth tokens if client-side authentication.
         */
        public Builder authTokens(List<AuthToken> authTokens) {
            Utils.checkNotNull(authTokens, "authTokens");
            this.authTokens = Optional.ofNullable(authTokens);
            return this;
        }

        /**
         * Auth tokens if client-side authentication.
         */
        public Builder authTokens(Optional<? extends List<AuthToken>> authTokens) {
            Utils.checkNotNull(authTokens, "authTokens");
            this.authTokens = authTokens;
            return this;
        }

        /**
         * The app or other repository type from which the event was extracted
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The app or other repository type from which the event was extracted
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
         */
        public Builder annotate(boolean annotate) {
            Utils.checkNotNull(annotate, "annotate");
            this.annotate = Optional.ofNullable(annotate);
            return this;
        }

        /**
         * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
         */
        public Builder annotate(Optional<Boolean> annotate) {
            Utils.checkNotNull(annotate, "annotate");
            this.annotate = annotate;
            return this;
        }
        
        public GetEventsRequest build() {
            return new GetEventsRequest(
                ids,
                authTokens,
                datasource,
                annotate);
        }
    }
}
