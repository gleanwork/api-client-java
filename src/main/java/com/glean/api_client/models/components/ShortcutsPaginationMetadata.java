/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ShortcutsPaginationMetadata {

    /**
     * Cursor indicates the start of the next page of results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasNextPage")
    private Optional<Boolean> hasNextPage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalItemCount")
    private Optional<Long> totalItemCount;

    @JsonCreator
    public ShortcutsPaginationMetadata(
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("hasNextPage") Optional<Boolean> hasNextPage,
            @JsonProperty("totalItemCount") Optional<Long> totalItemCount) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(hasNextPage, "hasNextPage");
        Utils.checkNotNull(totalItemCount, "totalItemCount");
        this.cursor = cursor;
        this.hasNextPage = hasNextPage;
        this.totalItemCount = totalItemCount;
    }
    
    public ShortcutsPaginationMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Cursor indicates the start of the next page of results
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    @JsonIgnore
    public Optional<Boolean> hasNextPage() {
        return hasNextPage;
    }

    @JsonIgnore
    public Optional<Long> totalItemCount() {
        return totalItemCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Cursor indicates the start of the next page of results
     */
    public ShortcutsPaginationMetadata withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Cursor indicates the start of the next page of results
     */
    public ShortcutsPaginationMetadata withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    public ShortcutsPaginationMetadata withHasNextPage(boolean hasNextPage) {
        Utils.checkNotNull(hasNextPage, "hasNextPage");
        this.hasNextPage = Optional.ofNullable(hasNextPage);
        return this;
    }

    public ShortcutsPaginationMetadata withHasNextPage(Optional<Boolean> hasNextPage) {
        Utils.checkNotNull(hasNextPage, "hasNextPage");
        this.hasNextPage = hasNextPage;
        return this;
    }

    public ShortcutsPaginationMetadata withTotalItemCount(long totalItemCount) {
        Utils.checkNotNull(totalItemCount, "totalItemCount");
        this.totalItemCount = Optional.ofNullable(totalItemCount);
        return this;
    }

    public ShortcutsPaginationMetadata withTotalItemCount(Optional<Long> totalItemCount) {
        Utils.checkNotNull(totalItemCount, "totalItemCount");
        this.totalItemCount = totalItemCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShortcutsPaginationMetadata other = (ShortcutsPaginationMetadata) o;
        return 
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.hasNextPage, other.hasNextPage) &&
            Objects.deepEquals(this.totalItemCount, other.totalItemCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cursor,
            hasNextPage,
            totalItemCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShortcutsPaginationMetadata.class,
                "cursor", cursor,
                "hasNextPage", hasNextPage,
                "totalItemCount", totalItemCount);
    }
    
    public final static class Builder {
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<Boolean> hasNextPage = Optional.empty();
 
        private Optional<Long> totalItemCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Cursor indicates the start of the next page of results
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Cursor indicates the start of the next page of results
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        public Builder hasNextPage(boolean hasNextPage) {
            Utils.checkNotNull(hasNextPage, "hasNextPage");
            this.hasNextPage = Optional.ofNullable(hasNextPage);
            return this;
        }

        public Builder hasNextPage(Optional<Boolean> hasNextPage) {
            Utils.checkNotNull(hasNextPage, "hasNextPage");
            this.hasNextPage = hasNextPage;
            return this;
        }

        public Builder totalItemCount(long totalItemCount) {
            Utils.checkNotNull(totalItemCount, "totalItemCount");
            this.totalItemCount = Optional.ofNullable(totalItemCount);
            return this;
        }

        public Builder totalItemCount(Optional<Long> totalItemCount) {
            Utils.checkNotNull(totalItemCount, "totalItemCount");
            this.totalItemCount = totalItemCount;
            return this;
        }
        
        public ShortcutsPaginationMetadata build() {
            return new ShortcutsPaginationMetadata(
                cursor,
                hasNextPage,
                totalItemCount);
        }
    }
}
