/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.models.components.ImageType;
import com.glean.api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UploadimageRequest {

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Scio-Actas")
    private Optional<String> xScioActas;

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Glean-Auth-Type")
    private Optional<String> xGleanAuthType;

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private Optional<? extends ImageType> type;

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=id")
    private Optional<String> id;

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ds")
    private Optional<String> ds;

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cid")
    private Optional<String> cid;

    /**
     * Content and metadata for the image. Content is in the POST body, metadata is in the URL.
     */
    @SpeakeasyMetadata("request:mediaType=image/*")
    private byte[] requestBody;

    @JsonCreator
    public UploadimageRequest(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            Optional<? extends ImageType> type,
            Optional<String> id,
            Optional<String> ds,
            Optional<String> cid,
            byte[] requestBody) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ds, "ds");
        Utils.checkNotNull(cid, "cid");
        Utils.checkNotNull(requestBody, "requestBody");
        this.xScioActas = xScioActas;
        this.xGleanAuthType = xGleanAuthType;
        this.type = type;
        this.id = id;
        this.ds = ds;
        this.cid = cid;
        this.requestBody = requestBody;
    }
    
    public UploadimageRequest(
            byte[] requestBody) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), requestBody);
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xScioActas() {
        return xScioActas;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xGleanAuthType() {
        return xGleanAuthType;
    }

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ImageType> type() {
        return (Optional<ImageType>) type;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    @JsonIgnore
    public Optional<String> ds() {
        return ds;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    @JsonIgnore
    public Optional<String> cid() {
        return cid;
    }

    /**
     * Content and metadata for the image. Content is in the POST body, metadata is in the URL.
     */
    @JsonIgnore
    public byte[] requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public UploadimageRequest withXScioActas(String xScioActas) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        this.xScioActas = Optional.ofNullable(xScioActas);
        return this;
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public UploadimageRequest withXScioActas(Optional<String> xScioActas) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        this.xScioActas = xScioActas;
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public UploadimageRequest withXGleanAuthType(String xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public UploadimageRequest withXGleanAuthType(Optional<String> xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = xGleanAuthType;
        return this;
    }

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    public UploadimageRequest withType(ImageType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    public UploadimageRequest withType(Optional<? extends ImageType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    public UploadimageRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
     */
    public UploadimageRequest withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    public UploadimageRequest withDs(String ds) {
        Utils.checkNotNull(ds, "ds");
        this.ds = Optional.ofNullable(ds);
        return this;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
     */
    public UploadimageRequest withDs(Optional<String> ds) {
        Utils.checkNotNull(ds, "ds");
        this.ds = ds;
        return this;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    public UploadimageRequest withCid(String cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = Optional.ofNullable(cid);
        return this;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    public UploadimageRequest withCid(Optional<String> cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = cid;
        return this;
    }

    /**
     * Content and metadata for the image. Content is in the POST body, metadata is in the URL.
     */
    public UploadimageRequest withRequestBody(byte[] requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UploadimageRequest other = (UploadimageRequest) o;
        return 
            Objects.deepEquals(this.xScioActas, other.xScioActas) &&
            Objects.deepEquals(this.xGleanAuthType, other.xGleanAuthType) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ds, other.ds) &&
            Objects.deepEquals(this.cid, other.cid) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xScioActas,
            xGleanAuthType,
            type,
            id,
            ds,
            cid,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UploadimageRequest.class,
                "xScioActas", xScioActas,
                "xGleanAuthType", xGleanAuthType,
                "type", type,
                "id", id,
                "ds", ds,
                "cid", cid,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private Optional<String> xScioActas = Optional.empty();
 
        private Optional<String> xGleanAuthType = Optional.empty();
 
        private Optional<? extends ImageType> type = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> ds = Optional.empty();
 
        private Optional<String> cid = Optional.empty();
 
        private byte[] requestBody;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xScioActas(String xScioActas) {
            Utils.checkNotNull(xScioActas, "xScioActas");
            this.xScioActas = Optional.ofNullable(xScioActas);
            return this;
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xScioActas(Optional<String> xScioActas) {
            Utils.checkNotNull(xScioActas, "xScioActas");
            this.xScioActas = xScioActas;
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(String xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(Optional<String> xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = xGleanAuthType;
            return this;
        }

        /**
         * The type of image requested. Supported values are listed in ImageMetadata.type enum.
         */
        public Builder type(ImageType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of image requested. Supported values are listed in ImageMetadata.type enum.
         */
        public Builder type(Optional<? extends ImageType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
         */
        public Builder ds(String ds) {
            Utils.checkNotNull(ds, "ds");
            this.ds = Optional.ofNullable(ds);
            return this;
        }

        /**
         * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
         */
        public Builder ds(Optional<String> ds) {
            Utils.checkNotNull(ds, "ds");
            this.ds = ds;
            return this;
        }

        /**
         * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
         */
        public Builder cid(String cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = Optional.ofNullable(cid);
            return this;
        }

        /**
         * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
         */
        public Builder cid(Optional<String> cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = cid;
            return this;
        }

        /**
         * Content and metadata for the image. Content is in the POST body, metadata is in the URL.
         */
        public Builder requestBody(byte[] requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UploadimageRequest build() {
            return new UploadimageRequest(
                xScioActas,
                xGleanAuthType,
                type,
                id,
                ds,
                cid,
                requestBody);
        }
    }
}
