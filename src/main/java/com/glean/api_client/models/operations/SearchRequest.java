/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SearchRequest {

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Glean-ActAs")
    private Optional<String> xGleanActAs;

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Glean-Auth-Type")
    private Optional<String> xGleanAuthType;

    /**
     * Search request
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends com.glean.api_client.models.components.SearchRequest> searchRequest;

    @JsonCreator
    public SearchRequest(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends com.glean.api_client.models.components.SearchRequest> searchRequest) {
        Utils.checkNotNull(xGleanActAs, "xGleanActAs");
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        Utils.checkNotNull(searchRequest, "searchRequest");
        this.xGleanActAs = xGleanActAs;
        this.xGleanAuthType = xGleanAuthType;
        this.searchRequest = searchRequest;
    }
    
    public SearchRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xGleanActAs() {
        return xGleanActAs;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xGleanAuthType() {
        return xGleanAuthType;
    }

    /**
     * Search request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<com.glean.api_client.models.components.SearchRequest> searchRequest() {
        return (Optional<com.glean.api_client.models.components.SearchRequest>) searchRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public SearchRequest withXGleanActAs(String xGleanActAs) {
        Utils.checkNotNull(xGleanActAs, "xGleanActAs");
        this.xGleanActAs = Optional.ofNullable(xGleanActAs);
        return this;
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public SearchRequest withXGleanActAs(Optional<String> xGleanActAs) {
        Utils.checkNotNull(xGleanActAs, "xGleanActAs");
        this.xGleanActAs = xGleanActAs;
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public SearchRequest withXGleanAuthType(String xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public SearchRequest withXGleanAuthType(Optional<String> xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = xGleanAuthType;
        return this;
    }

    /**
     * Search request
     */
    public SearchRequest withSearchRequest(com.glean.api_client.models.components.SearchRequest searchRequest) {
        Utils.checkNotNull(searchRequest, "searchRequest");
        this.searchRequest = Optional.ofNullable(searchRequest);
        return this;
    }

    /**
     * Search request
     */
    public SearchRequest withSearchRequest(Optional<? extends com.glean.api_client.models.components.SearchRequest> searchRequest) {
        Utils.checkNotNull(searchRequest, "searchRequest");
        this.searchRequest = searchRequest;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchRequest other = (SearchRequest) o;
        return 
            Objects.deepEquals(this.xGleanActAs, other.xGleanActAs) &&
            Objects.deepEquals(this.xGleanAuthType, other.xGleanAuthType) &&
            Objects.deepEquals(this.searchRequest, other.searchRequest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xGleanActAs,
            xGleanAuthType,
            searchRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchRequest.class,
                "xGleanActAs", xGleanActAs,
                "xGleanAuthType", xGleanAuthType,
                "searchRequest", searchRequest);
    }
    
    public final static class Builder {
 
        private Optional<String> xGleanActAs = Optional.empty();
 
        private Optional<String> xGleanAuthType = Optional.empty();
 
        private Optional<? extends com.glean.api_client.models.components.SearchRequest> searchRequest = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xGleanActAs(String xGleanActAs) {
            Utils.checkNotNull(xGleanActAs, "xGleanActAs");
            this.xGleanActAs = Optional.ofNullable(xGleanActAs);
            return this;
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xGleanActAs(Optional<String> xGleanActAs) {
            Utils.checkNotNull(xGleanActAs, "xGleanActAs");
            this.xGleanActAs = xGleanActAs;
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(String xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(Optional<String> xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = xGleanAuthType;
            return this;
        }

        /**
         * Search request
         */
        public Builder searchRequest(com.glean.api_client.models.components.SearchRequest searchRequest) {
            Utils.checkNotNull(searchRequest, "searchRequest");
            this.searchRequest = Optional.ofNullable(searchRequest);
            return this;
        }

        /**
         * Search request
         */
        public Builder searchRequest(Optional<? extends com.glean.api_client.models.components.SearchRequest> searchRequest) {
            Utils.checkNotNull(searchRequest, "searchRequest");
            this.searchRequest = searchRequest;
            return this;
        }
        
        public SearchRequest build() {
            return new SearchRequest(
                xGleanActAs,
                xGleanAuthType,
                searchRequest);
        }
    }
}
