/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.models.components.GetSimilarShortcutsRequest;
import com.glean.api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetsimilarshortcutsRequest {

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Scio-Actas")
    private Optional<String> xScioActas;

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Glean-Auth-Type")
    private Optional<String> xGleanAuthType;

    /**
     * GetSimilarShortcuts request
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private GetSimilarShortcutsRequest getSimilarShortcutsRequest;

    @JsonCreator
    public GetsimilarshortcutsRequest(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            GetSimilarShortcutsRequest getSimilarShortcutsRequest) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        Utils.checkNotNull(getSimilarShortcutsRequest, "getSimilarShortcutsRequest");
        this.xScioActas = xScioActas;
        this.xGleanAuthType = xGleanAuthType;
        this.getSimilarShortcutsRequest = getSimilarShortcutsRequest;
    }
    
    public GetsimilarshortcutsRequest(
            GetSimilarShortcutsRequest getSimilarShortcutsRequest) {
        this(Optional.empty(), Optional.empty(), getSimilarShortcutsRequest);
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xScioActas() {
        return xScioActas;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xGleanAuthType() {
        return xGleanAuthType;
    }

    /**
     * GetSimilarShortcuts request
     */
    @JsonIgnore
    public GetSimilarShortcutsRequest getSimilarShortcutsRequest() {
        return getSimilarShortcutsRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public GetsimilarshortcutsRequest withXScioActas(String xScioActas) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        this.xScioActas = Optional.ofNullable(xScioActas);
        return this;
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public GetsimilarshortcutsRequest withXScioActas(Optional<String> xScioActas) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        this.xScioActas = xScioActas;
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public GetsimilarshortcutsRequest withXGleanAuthType(String xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public GetsimilarshortcutsRequest withXGleanAuthType(Optional<String> xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = xGleanAuthType;
        return this;
    }

    /**
     * GetSimilarShortcuts request
     */
    public GetsimilarshortcutsRequest withGetSimilarShortcutsRequest(GetSimilarShortcutsRequest getSimilarShortcutsRequest) {
        Utils.checkNotNull(getSimilarShortcutsRequest, "getSimilarShortcutsRequest");
        this.getSimilarShortcutsRequest = getSimilarShortcutsRequest;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetsimilarshortcutsRequest other = (GetsimilarshortcutsRequest) o;
        return 
            Objects.deepEquals(this.xScioActas, other.xScioActas) &&
            Objects.deepEquals(this.xGleanAuthType, other.xGleanAuthType) &&
            Objects.deepEquals(this.getSimilarShortcutsRequest, other.getSimilarShortcutsRequest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xScioActas,
            xGleanAuthType,
            getSimilarShortcutsRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetsimilarshortcutsRequest.class,
                "xScioActas", xScioActas,
                "xGleanAuthType", xGleanAuthType,
                "getSimilarShortcutsRequest", getSimilarShortcutsRequest);
    }
    
    public final static class Builder {
 
        private Optional<String> xScioActas = Optional.empty();
 
        private Optional<String> xGleanAuthType = Optional.empty();
 
        private GetSimilarShortcutsRequest getSimilarShortcutsRequest;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xScioActas(String xScioActas) {
            Utils.checkNotNull(xScioActas, "xScioActas");
            this.xScioActas = Optional.ofNullable(xScioActas);
            return this;
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xScioActas(Optional<String> xScioActas) {
            Utils.checkNotNull(xScioActas, "xScioActas");
            this.xScioActas = xScioActas;
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(String xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(Optional<String> xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = xGleanAuthType;
            return this;
        }

        /**
         * GetSimilarShortcuts request
         */
        public Builder getSimilarShortcutsRequest(GetSimilarShortcutsRequest getSimilarShortcutsRequest) {
            Utils.checkNotNull(getSimilarShortcutsRequest, "getSimilarShortcutsRequest");
            this.getSimilarShortcutsRequest = getSimilarShortcutsRequest;
            return this;
        }
        
        public GetsimilarshortcutsRequest build() {
            return new GetsimilarshortcutsRequest(
                xScioActas,
                xGleanAuthType,
                getSimilarShortcutsRequest);
        }
    }
}
