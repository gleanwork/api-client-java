/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.operations;

import com.glean.api_client.models.components.Activity;
import com.glean.api_client.models.components.AddCollectionItemsRequest;
import com.glean.api_client.models.components.AutocompleteRequest;
import com.glean.api_client.models.components.BulkIndexDocumentsRequest;
import com.glean.api_client.models.components.BulkIndexEmployeesRequest;
import com.glean.api_client.models.components.BulkIndexGroupsRequest;
import com.glean.api_client.models.components.BulkIndexMembershipsRequest;
import com.glean.api_client.models.components.BulkIndexShortcutsRequest;
import com.glean.api_client.models.components.BulkIndexTeamsRequest;
import com.glean.api_client.models.components.BulkIndexUsersRequest;
import com.glean.api_client.models.components.ChatRequest;
import com.glean.api_client.models.components.CheckDocumentAccessRequest;
import com.glean.api_client.models.components.CreateAnnouncementRequest;
import com.glean.api_client.models.components.CreateAnswerRequest;
import com.glean.api_client.models.components.CreateCollectionRequest;
import com.glean.api_client.models.components.CreateShortcutRequest;
import com.glean.api_client.models.components.CustomDatasourceConfig;
import com.glean.api_client.models.components.DebugDocumentRequest;
import com.glean.api_client.models.components.DebugDocumentsRequest;
import com.glean.api_client.models.components.DebugUserRequest;
import com.glean.api_client.models.components.DeleteAnnouncementRequest;
import com.glean.api_client.models.components.DeleteAnswerRequest;
import com.glean.api_client.models.components.DeleteChatFilesRequest;
import com.glean.api_client.models.components.DeleteChatsRequest;
import com.glean.api_client.models.components.DeleteCollectionItemRequest;
import com.glean.api_client.models.components.DeleteCollectionRequest;
import com.glean.api_client.models.components.DeleteDocumentRequest;
import com.glean.api_client.models.components.DeleteEmployeeRequest;
import com.glean.api_client.models.components.DeleteGroupRequest;
import com.glean.api_client.models.components.DeleteMembershipRequest;
import com.glean.api_client.models.components.DeleteShortcutRequest;
import com.glean.api_client.models.components.DeleteTeamRequest;
import com.glean.api_client.models.components.DeleteUserRequest;
import com.glean.api_client.models.components.EditAnswerRequest;
import com.glean.api_client.models.components.EditCollectionItemRequest;
import com.glean.api_client.models.components.EditCollectionRequest;
import com.glean.api_client.models.components.EditPinRequest;
import com.glean.api_client.models.components.FeedRequest;
import com.glean.api_client.models.components.Feedback;
import com.glean.api_client.models.components.GetAgentInputsRequest;
import com.glean.api_client.models.components.GetAnswerRequest;
import com.glean.api_client.models.components.GetChatApplicationRequest;
import com.glean.api_client.models.components.GetChatFilesRequest;
import com.glean.api_client.models.components.GetChatRequest;
import com.glean.api_client.models.components.GetCollectionRequest;
import com.glean.api_client.models.components.GetDatasourceConfigRequest;
import com.glean.api_client.models.components.GetDocPermissionsRequest;
import com.glean.api_client.models.components.GetDocumentCountRequest;
import com.glean.api_client.models.components.GetDocumentStatusRequest;
import com.glean.api_client.models.components.GetDocumentsByFacetsRequest;
import com.glean.api_client.models.components.GetDocumentsRequest;
import com.glean.api_client.models.components.GetPinRequest;
import com.glean.api_client.models.components.GetShortcutRequestUnion;
import com.glean.api_client.models.components.GetUserCountRequest;
import com.glean.api_client.models.components.GreenlistUsersRequest;
import com.glean.api_client.models.components.IndexDocumentRequest;
import com.glean.api_client.models.components.IndexDocumentsRequest;
import com.glean.api_client.models.components.IndexEmployeeListRequest;
import com.glean.api_client.models.components.IndexEmployeeRequest;
import com.glean.api_client.models.components.IndexGroupRequest;
import com.glean.api_client.models.components.IndexMembershipRequest;
import com.glean.api_client.models.components.IndexTeamRequest;
import com.glean.api_client.models.components.IndexUserRequest;
import com.glean.api_client.models.components.InsightsRequest;
import com.glean.api_client.models.components.ListAnswersRequest;
import com.glean.api_client.models.components.ListCollectionsRequest;
import com.glean.api_client.models.components.ListEntitiesRequest;
import com.glean.api_client.models.components.ListShortcutsPaginatedRequest;
import com.glean.api_client.models.components.MessagesRequest;
import com.glean.api_client.models.components.PeopleRequest;
import com.glean.api_client.models.components.PinRequest;
import com.glean.api_client.models.components.ProcessAllDocumentsRequest;
import com.glean.api_client.models.components.ProcessAllMembershipsRequest;
import com.glean.api_client.models.components.RecommendationsRequest;
import com.glean.api_client.models.components.ReminderRequest;
import com.glean.api_client.models.components.RunAgentRequest;
import com.glean.api_client.models.components.SearchRequest;
import com.glean.api_client.models.components.SummarizeRequest;
import com.glean.api_client.models.components.Unpin;
import com.glean.api_client.models.components.UpdateAnnouncementRequest;
import com.glean.api_client.models.components.UpdatePermissionsRequest;
import com.glean.api_client.models.components.UpdateShortcutRequest;
import com.glean.api_client.models.components.UploadChatFilesRequest;
import com.glean.api_client.models.components.UploadShortcutsRequest;
import com.glean.api_client.models.components.VerifyRequest;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.Optional;

public class SDKMethodInterfaces {

    public interface MethodCallActivity {
        ActivityResponse report(
            Activity request) throws Exception;
    }

    public interface MethodCallFeedback {
        FeedbackResponse reportActivity(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<String> feedbackQueryParameter,
            Optional<? extends Feedback> feedback1) throws Exception;
    }

    public interface MethodCallCreateannouncement {
        CreateannouncementResponse create(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            CreateAnnouncementRequest createAnnouncementRequest) throws Exception;
    }

    public interface MethodCallDeleteannouncement {
        DeleteannouncementResponse delete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            DeleteAnnouncementRequest deleteAnnouncementRequest) throws Exception;
    }

    public interface MethodCallUpdateannouncement {
        UpdateannouncementResponse update(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            UpdateAnnouncementRequest updateAnnouncementRequest) throws Exception;
    }

    public interface MethodCallCreateanswer {
        CreateanswerResponse create(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            CreateAnswerRequest createAnswerRequest) throws Exception;
    }

    public interface MethodCallDeleteanswer {
        DeleteanswerResponse delete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            DeleteAnswerRequest deleteAnswerRequest) throws Exception;
    }

    public interface MethodCallEditanswer {
        EditanswerResponse edit(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            EditAnswerRequest editAnswerRequest) throws Exception;
    }

    public interface MethodCallGetanswer {
        GetanswerResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            GetAnswerRequest getAnswerRequest) throws Exception;
    }

    public interface MethodCallListanswers {
        ListanswersResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            ListAnswersRequest listAnswersRequest) throws Exception;
    }

    public interface MethodCallCreateauthtoken {
        CreateauthtokenResponse createToken(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType) throws Exception;
    }

    public interface MethodCallChat {
        ChatResponse start(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            ChatRequest chatRequest) throws Exception;
    }

    public interface MethodCallDeleteallchats {
        DeleteallchatsResponse deleteAll(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset) throws Exception;
    }

    public interface MethodCallDeletechats {
        DeletechatsResponse delete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            DeleteChatsRequest deleteChatsRequest) throws Exception;
    }

    public interface MethodCallGetchat {
        GetchatResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetChatRequest getChatRequest) throws Exception;
    }

    public interface MethodCallListchats {
        ListchatsResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset) throws Exception;
    }

    public interface MethodCallGetchatapplication {
        GetchatapplicationResponse getApplication(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetChatApplicationRequest getChatApplicationRequest) throws Exception;
    }

    public interface MethodCallUploadchatfiles {
        UploadchatfilesResponse uploadFiles(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            UploadChatFilesRequest uploadChatFilesRequest) throws Exception;
    }

    public interface MethodCallGetchatfiles {
        GetchatfilesResponse getFiles(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetChatFilesRequest getChatFilesRequest) throws Exception;
    }

    public interface MethodCallDeletechatfiles {
        DeletechatfilesResponse deleteFiles(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            DeleteChatFilesRequest deleteChatFilesRequest) throws Exception;
    }

    public interface MethodCallAddcollectionitems {
        AddcollectionitemsResponse addItems(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            AddCollectionItemsRequest addCollectionItemsRequest) throws Exception;
    }

    public interface MethodCallCreatecollection {
        CreatecollectionResponse create(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            CreateCollectionRequest createCollectionRequest) throws Exception;
    }

    public interface MethodCallDeletecollection {
        DeletecollectionResponse delete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            DeleteCollectionRequest deleteCollectionRequest) throws Exception;
    }

    public interface MethodCallDeletecollectionitem {
        DeletecollectionitemResponse deleteItem(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            DeleteCollectionItemRequest deleteCollectionItemRequest) throws Exception;
    }

    public interface MethodCallEditcollection {
        EditcollectionResponse update(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            EditCollectionRequest editCollectionRequest) throws Exception;
    }

    public interface MethodCallEditcollectionitem {
        EditcollectionitemResponse editItem(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            EditCollectionItemRequest editCollectionItemRequest) throws Exception;
    }

    public interface MethodCallGetcollection {
        GetcollectionResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            GetCollectionRequest getCollectionRequest) throws Exception;
    }

    public interface MethodCallListcollections {
        ListcollectionsResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            ListCollectionsRequest listCollectionsRequest) throws Exception;
    }

    public interface MethodCallGetdocpermissions {
        GetdocpermissionsResponse getPermissions(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            GetDocPermissionsRequest getDocPermissionsRequest) throws Exception;
    }

    public interface MethodCallGetdocuments {
        GetdocumentsResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends GetDocumentsRequest> getDocumentsRequest) throws Exception;
    }

    public interface MethodCallGetdocumentsbyfacets {
        GetdocumentsbyfacetsResponse getByFacets(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends GetDocumentsByFacetsRequest> getDocumentsByFacetsRequest) throws Exception;
    }

    public interface MethodCallInsights {
        InsightsResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            InsightsRequest insightsRequest) throws Exception;
    }

    public interface MethodCallMessages {
        MessagesResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            MessagesRequest messagesRequest) throws Exception;
    }

    public interface MethodCallEditpin {
        EditpinResponse edit(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            EditPinRequest editPinRequest) throws Exception;
    }

    public interface MethodCallGetpin {
        GetpinResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            GetPinRequest getPinRequest) throws Exception;
    }

    public interface MethodCallListpins {
        ListpinsResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            ListpinsRequestBody requestBody) throws Exception;
    }

    public interface MethodCallPin {
        PinResponse create(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            PinRequest pinRequest) throws Exception;
    }

    public interface MethodCallUnpin {
        UnpinResponse remove(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Unpin unpin) throws Exception;
    }

    public interface MethodCallAdminsearch {
        AdminsearchResponse admin(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends SearchRequest> searchRequest) throws Exception;
    }

    public interface MethodCallAutocomplete {
        AutocompleteResponse autocomplete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            AutocompleteRequest autocompleteRequest) throws Exception;
    }

    public interface MethodCallFeed {
        FeedResponse getFeed(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            FeedRequest feedRequest) throws Exception;
    }

    public interface MethodCallRecommendations {
        RecommendationsResponse recommendations(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends RecommendationsRequest> recommendationsRequest) throws Exception;
    }

    public interface MethodCallSearch {
        SearchResponse execute(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends SearchRequest> searchRequest) throws Exception;
    }

    public interface MethodCallListentities {
        ListentitiesResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            ListEntitiesRequest listEntitiesRequest) throws Exception;
    }

    public interface MethodCallPeople {
        PeopleResponse readPeople(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            PeopleRequest peopleRequest) throws Exception;
    }

    public interface MethodCallCreateshortcut {
        CreateshortcutResponse create(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            CreateShortcutRequest createShortcutRequest) throws Exception;
    }

    public interface MethodCallDeleteshortcut {
        DeleteshortcutResponse delete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            DeleteShortcutRequest deleteShortcutRequest) throws Exception;
    }

    public interface MethodCallGetshortcut {
        GetshortcutResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            GetShortcutRequestUnion getShortcutRequest) throws Exception;
    }

    public interface MethodCallListshortcuts {
        ListshortcutsResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            ListShortcutsPaginatedRequest listShortcutsPaginatedRequest) throws Exception;
    }

    public interface MethodCallUpdateshortcut {
        UpdateshortcutResponse update(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            UpdateShortcutRequest updateShortcutRequest) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Uploadshortcuts {
        PostApiIndexV1UploadshortcutsResponse upload(
            UploadShortcutsRequest request) throws Exception;
    }

    public interface MethodCallSummarize {
        SummarizeResponse generate(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            SummarizeRequest summarizeRequest) throws Exception;
    }

    public interface MethodCallAddverificationreminder {
        AddverificationreminderResponse addReminder(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            ReminderRequest reminderRequest) throws Exception;
    }

    public interface MethodCallListverifications {
        ListverificationsResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> count) throws Exception;
    }

    public interface MethodCallVerify {
        VerifyResponse verify(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            VerifyRequest verifyRequest) throws Exception;
    }

    public interface MethodCallRunagent {
        RunagentResponse runagent(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            RunAgentRequest runAgentRequest) throws Exception;
    }

    public interface MethodCallListagents {
        ListagentsResponse listagents(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            Optional<? extends Object> requestBody) throws Exception;
    }

    public interface MethodCallGetagentinputs {
        GetagentinputsResponse getagentinputs(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetAgentInputsRequest getAgentInputsRequest) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexdocument {
        PostApiIndexV1IndexdocumentResponse addOrUpdate(
            IndexDocumentRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexdocuments {
        PostApiIndexV1IndexdocumentsResponse index(
            IndexDocumentsRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexdocuments {
        PostApiIndexV1BulkindexdocumentsResponse bulkIndex(
            BulkIndexDocumentsRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Processalldocuments {
        PostApiIndexV1ProcessalldocumentsResponse processAll(
            Optional<? extends ProcessAllDocumentsRequest> request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Deletedocument {
        PostApiIndexV1DeletedocumentResponse delete(
            DeleteDocumentRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Updatepermissions {
        PostApiIndexV1UpdatepermissionsResponse updatePermissions(
            UpdatePermissionsRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexuser {
        PostApiIndexV1IndexuserResponse indexUser(
            IndexUserRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexusers {
        PostApiIndexV1BulkindexusersResponse bulkIndexUsers(
            BulkIndexUsersRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexgroup {
        PostApiIndexV1IndexgroupResponse indexGroup(
            IndexGroupRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexgroups {
        PostApiIndexV1BulkindexgroupsResponse bulkIndexGroups(
            BulkIndexGroupsRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexmembership {
        PostApiIndexV1IndexmembershipResponse indexMembership(
            IndexMembershipRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexmemberships {
        PostApiIndexV1BulkindexmembershipsResponse bulkIndexMemberships(
            BulkIndexMembershipsRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Processallmemberships {
        PostApiIndexV1ProcessallmembershipsResponse processMemberships(
            Optional<? extends ProcessAllMembershipsRequest> request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Deleteuser {
        PostApiIndexV1DeleteuserResponse deleteUser(
            DeleteUserRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Deletegroup {
        PostApiIndexV1DeletegroupResponse deleteGroup(
            DeleteGroupRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Deletemembership {
        PostApiIndexV1DeletemembershipResponse deleteMembership(
            DeleteMembershipRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Betausers {
        PostApiIndexV1BetausersResponse authorizeBetaUsers(
            GreenlistUsersRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1DebugDatasourceStatus {
        PostApiIndexV1DebugDatasourceStatusResponse getDatasourceStatus(
            String datasource) throws Exception;
    }

    public interface MethodCallPostApiIndexV1DebugDatasourceDocument {
        PostApiIndexV1DebugDatasourceDocumentResponse postDocumentDebug(
            String datasource,
            DebugDocumentRequest debugDocumentRequest) throws Exception;
    }

    public interface MethodCallPostApiIndexV1DebugDatasourceDocuments {
        PostApiIndexV1DebugDatasourceDocumentsResponse postDocumentsDebug(
            String datasource,
            DebugDocumentsRequest debugDocumentsRequest) throws Exception;
    }

    public interface MethodCallPostApiIndexV1DebugDatasourceUser {
        PostApiIndexV1DebugDatasourceUserResponse debugUser(
            String datasource,
            DebugUserRequest debugUserRequest) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Checkdocumentaccess {
        PostApiIndexV1CheckdocumentaccessResponse checkAccess(
            CheckDocumentAccessRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Getdocumentstatus {
        PostApiIndexV1GetdocumentstatusResponse getStatus(
            GetDocumentStatusRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Getdocumentcount {
        PostApiIndexV1GetdocumentcountResponse getDocumentCount(
            GetDocumentCountRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Getusercount {
        PostApiIndexV1GetusercountResponse getUserCount(
            GetUserCountRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Adddatasource {
        PostApiIndexV1AdddatasourceResponse add(
            CustomDatasourceConfig request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Getdatasourceconfig {
        PostApiIndexV1GetdatasourceconfigResponse getConfig(
            GetDatasourceConfigRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Rotatetoken {
        PostApiIndexV1RotatetokenResponse rotateTokenDirect() throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexemployee {
        PostApiIndexV1IndexemployeeResponse index(
            IndexEmployeeRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexemployees {
        PostApiIndexV1BulkindexemployeesResponse bulkIndexEmployees(
            BulkIndexEmployeesRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexemployeelist {
        PostApiIndexV1IndexemployeelistResponse bulkIndex(
            IndexEmployeeListRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Processallemployeesandteams {
        PostApiIndexV1ProcessallemployeesandteamsResponse processAllEmployeesAndTeamsDirect() throws Exception;
    }

    public interface MethodCallPostApiIndexV1Deleteemployee {
        PostApiIndexV1DeleteemployeeResponse delete(
            DeleteEmployeeRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Indexteam {
        PostApiIndexV1IndexteamResponse indexTeam(
            IndexTeamRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Deleteteam {
        PostApiIndexV1DeleteteamResponse deleteTeam(
            DeleteTeamRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexteams {
        PostApiIndexV1BulkindexteamsResponse bulkIndexTeams(
            BulkIndexTeamsRequest request) throws Exception;
    }

    public interface MethodCallPostApiIndexV1Bulkindexshortcuts {
        PostApiIndexV1BulkindexshortcutsResponse bulkIndex(
            BulkIndexShortcutsRequest request) throws Exception;
    }
}
