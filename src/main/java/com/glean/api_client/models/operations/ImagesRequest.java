/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.models.components.ImageType;
import com.glean.api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ImagesRequest {

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Scio-Actas")
    private Optional<String> xScioActas;

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Glean-Auth-Type")
    private Optional<String> xGleanAuthType;

    /**
     * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    private Optional<String> key;

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private Optional<? extends ImageType> type;

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=id")
    private Optional<String> id;

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ds")
    private Optional<String> ds;

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cid")
    private Optional<String> cid;

    @JsonCreator
    public ImagesRequest(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            Optional<String> key,
            Optional<? extends ImageType> type,
            Optional<String> id,
            Optional<String> ds,
            Optional<String> cid) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ds, "ds");
        Utils.checkNotNull(cid, "cid");
        this.xScioActas = xScioActas;
        this.xGleanAuthType = xGleanAuthType;
        this.key = key;
        this.type = type;
        this.id = id;
        this.ds = ds;
        this.cid = cid;
    }
    
    public ImagesRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xScioActas() {
        return xScioActas;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    @JsonIgnore
    public Optional<String> xGleanAuthType() {
        return xGleanAuthType;
    }

    /**
     * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
     */
    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ImageType> type() {
        return (Optional<ImageType>) type;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
     */
    @JsonIgnore
    public Optional<String> ds() {
        return ds;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    @JsonIgnore
    public Optional<String> cid() {
        return cid;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public ImagesRequest withXScioActas(String xScioActas) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        this.xScioActas = Optional.ofNullable(xScioActas);
        return this;
    }

    /**
     * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     */
    public ImagesRequest withXScioActas(Optional<String> xScioActas) {
        Utils.checkNotNull(xScioActas, "xScioActas");
        this.xScioActas = xScioActas;
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public ImagesRequest withXGleanAuthType(String xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
        return this;
    }

    /**
     * Auth type being used to access the endpoint (should be non-empty only for global tokens).
     */
    public ImagesRequest withXGleanAuthType(Optional<String> xGleanAuthType) {
        Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
        this.xGleanAuthType = xGleanAuthType;
        return this;
    }

    /**
     * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
     */
    public ImagesRequest withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
     */
    public ImagesRequest withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    public ImagesRequest withType(ImageType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of image requested. Supported values are listed in ImageMetadata.type enum.
     */
    public ImagesRequest withType(Optional<? extends ImageType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
     */
    public ImagesRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
     */
    public ImagesRequest withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
     */
    public ImagesRequest withDs(String ds) {
        Utils.checkNotNull(ds, "ds");
        this.ds = Optional.ofNullable(ds);
        return this;
    }

    /**
     * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
     */
    public ImagesRequest withDs(Optional<String> ds) {
        Utils.checkNotNull(ds, "ds");
        this.ds = ds;
        return this;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    public ImagesRequest withCid(String cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = Optional.ofNullable(cid);
        return this;
    }

    /**
     * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
     */
    public ImagesRequest withCid(Optional<String> cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = cid;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImagesRequest other = (ImagesRequest) o;
        return 
            Objects.deepEquals(this.xScioActas, other.xScioActas) &&
            Objects.deepEquals(this.xGleanAuthType, other.xGleanAuthType) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ds, other.ds) &&
            Objects.deepEquals(this.cid, other.cid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xScioActas,
            xGleanAuthType,
            key,
            type,
            id,
            ds,
            cid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImagesRequest.class,
                "xScioActas", xScioActas,
                "xGleanAuthType", xGleanAuthType,
                "key", key,
                "type", type,
                "id", id,
                "ds", ds,
                "cid", cid);
    }
    
    public final static class Builder {
 
        private Optional<String> xScioActas = Optional.empty();
 
        private Optional<String> xGleanAuthType = Optional.empty();
 
        private Optional<String> key = Optional.empty();
 
        private Optional<? extends ImageType> type = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> ds = Optional.empty();
 
        private Optional<String> cid = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xScioActas(String xScioActas) {
            Utils.checkNotNull(xScioActas, "xScioActas");
            this.xScioActas = Optional.ofNullable(xScioActas);
            return this;
        }

        /**
         * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
         */
        public Builder xScioActas(Optional<String> xScioActas) {
            Utils.checkNotNull(xScioActas, "xScioActas");
            this.xScioActas = xScioActas;
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(String xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = Optional.ofNullable(xGleanAuthType);
            return this;
        }

        /**
         * Auth type being used to access the endpoint (should be non-empty only for global tokens).
         */
        public Builder xGleanAuthType(Optional<String> xGleanAuthType) {
            Utils.checkNotNull(xGleanAuthType, "xGleanAuthType");
            this.xGleanAuthType = xGleanAuthType;
            return this;
        }

        /**
         * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
         */
        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * The type of image requested. Supported values are listed in ImageMetadata.type enum.
         */
        public Builder type(ImageType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of image requested. Supported values are listed in ImageMetadata.type enum.
         */
        public Builder type(Optional<? extends ImageType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
         */
        public Builder ds(String ds) {
            Utils.checkNotNull(ds, "ds");
            this.ds = Optional.ofNullable(ds);
            return this;
        }

        /**
         * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
         */
        public Builder ds(Optional<String> ds) {
            Utils.checkNotNull(ds, "ds");
            this.ds = ds;
            return this;
        }

        /**
         * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
         */
        public Builder cid(String cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = Optional.ofNullable(cid);
            return this;
        }

        /**
         * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
         */
        public Builder cid(Optional<String> cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = cid;
            return this;
        }
        
        public ImagesRequest build() {
            return new ImagesRequest(
                xScioActas,
                xGleanAuthType,
                key,
                type,
                id,
                ds,
                cid);
        }
    }
}
