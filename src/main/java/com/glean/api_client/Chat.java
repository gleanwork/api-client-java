/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client;

import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.models.components.ChatRequest;
import com.glean.api_client.models.components.DeleteChatFilesRequest;
import com.glean.api_client.models.components.DeleteChatsRequest;
import com.glean.api_client.models.components.GetChatApplicationRequest;
import com.glean.api_client.models.components.GetChatApplicationResponse;
import com.glean.api_client.models.components.GetChatFilesRequest;
import com.glean.api_client.models.components.GetChatFilesResponse;
import com.glean.api_client.models.components.GetChatRequest;
import com.glean.api_client.models.components.GetChatResponse;
import com.glean.api_client.models.components.ListChatsResponse;
import com.glean.api_client.models.components.UploadChatFilesRequest;
import com.glean.api_client.models.components.UploadChatFilesResponse;
import com.glean.api_client.models.errors.APIException;
import com.glean.api_client.models.operations.ChatRequestBuilder;
import com.glean.api_client.models.operations.ChatResponse;
import com.glean.api_client.models.operations.DeleteallchatsRequest;
import com.glean.api_client.models.operations.DeleteallchatsRequestBuilder;
import com.glean.api_client.models.operations.DeleteallchatsResponse;
import com.glean.api_client.models.operations.DeletechatfilesRequest;
import com.glean.api_client.models.operations.DeletechatfilesRequestBuilder;
import com.glean.api_client.models.operations.DeletechatfilesResponse;
import com.glean.api_client.models.operations.DeletechatsRequest;
import com.glean.api_client.models.operations.DeletechatsRequestBuilder;
import com.glean.api_client.models.operations.DeletechatsResponse;
import com.glean.api_client.models.operations.GetchatRequest;
import com.glean.api_client.models.operations.GetchatRequestBuilder;
import com.glean.api_client.models.operations.GetchatResponse;
import com.glean.api_client.models.operations.GetchatapplicationRequest;
import com.glean.api_client.models.operations.GetchatapplicationRequestBuilder;
import com.glean.api_client.models.operations.GetchatapplicationResponse;
import com.glean.api_client.models.operations.GetchatfilesRequest;
import com.glean.api_client.models.operations.GetchatfilesRequestBuilder;
import com.glean.api_client.models.operations.GetchatfilesResponse;
import com.glean.api_client.models.operations.ListchatsRequest;
import com.glean.api_client.models.operations.ListchatsRequestBuilder;
import com.glean.api_client.models.operations.ListchatsResponse;
import com.glean.api_client.models.operations.SDKMethodInterfaces.*;
import com.glean.api_client.models.operations.UploadchatfilesRequest;
import com.glean.api_client.models.operations.UploadchatfilesRequestBuilder;
import com.glean.api_client.models.operations.UploadchatfilesResponse;
import com.glean.api_client.utils.HTTPClient;
import com.glean.api_client.utils.HTTPRequest;
import com.glean.api_client.utils.Hook.AfterErrorContextImpl;
import com.glean.api_client.utils.Hook.AfterSuccessContextImpl;
import com.glean.api_client.utils.Hook.BeforeRequestContextImpl;
import com.glean.api_client.utils.SerializedBody;
import com.glean.api_client.utils.Utils.JsonShape;
import com.glean.api_client.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;

public class Chat implements
            MethodCallChat,
            MethodCallDeleteallchats,
            MethodCallDeletechats,
            MethodCallGetchat,
            MethodCallListchats,
            MethodCallGetchatapplication,
            MethodCallUploadchatfiles,
            MethodCallGetchatfiles,
            MethodCallDeletechatfiles {

    private final SDKConfiguration sdkConfiguration;

    Chat(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @return The call builder
     */
    public ChatRequestBuilder start() {
        return new ChatRequestBuilder(this);
    }

    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @param chatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChatResponse start(
            ChatRequest chatRequest) throws Exception {
        return start(Optional.empty(), Optional.empty(), Optional.empty(), chatRequest);
    }
    
    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param chatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChatResponse start(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            ChatRequest chatRequest) throws Exception {
        com.glean.api_client.models.operations.ChatRequest request =
            com.glean.api_client.models.operations.ChatRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .chatRequest(chatRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/chat");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "chatRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "text/plain")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                com.glean.api_client.models.operations.ChatRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "chat", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "408", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "chat",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "chat",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "chat",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ChatResponse.Builder _resBuilder = 
            ChatResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ChatResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "text/plain")) {
                String _out = Utils.toUtf8AndClose(_httpRes.body());
                _res.withChatResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "408", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Deletes all saved Chats owned by a user
     * 
     * <p>Deletes all saved Chats a user has had and all their contained conversational content.
     * 
     * @return The call builder
     */
    public DeleteallchatsRequestBuilder deleteAll() {
        return new DeleteallchatsRequestBuilder(this);
    }

    /**
     * Deletes all saved Chats owned by a user
     * 
     * <p>Deletes all saved Chats a user has had and all their contained conversational content.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteallchatsResponse deleteAllDirect() throws Exception {
        return deleteAll(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Deletes all saved Chats owned by a user
     * 
     * <p>Deletes all saved Chats a user has had and all their contained conversational content.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteallchatsResponse deleteAll(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset) throws Exception {
        DeleteallchatsRequest request =
            DeleteallchatsRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/deleteallchats");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                DeleteallchatsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "deleteallchats", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deleteallchats",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "deleteallchats",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deleteallchats",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteallchatsResponse.Builder _resBuilder = 
            DeleteallchatsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteallchatsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Deletes saved Chats
     * 
     * <p>Deletes saved Chats and all their contained conversational content.
     * 
     * @return The call builder
     */
    public DeletechatsRequestBuilder delete() {
        return new DeletechatsRequestBuilder(this);
    }

    /**
     * Deletes saved Chats
     * 
     * <p>Deletes saved Chats and all their contained conversational content.
     * 
     * @param deleteChatsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatsResponse delete(
            DeleteChatsRequest deleteChatsRequest) throws Exception {
        return delete(Optional.empty(), Optional.empty(), Optional.empty(), deleteChatsRequest);
    }
    
    /**
     * Deletes saved Chats
     * 
     * <p>Deletes saved Chats and all their contained conversational content.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param deleteChatsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatsResponse delete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            DeleteChatsRequest deleteChatsRequest) throws Exception {
        DeletechatsRequest request =
            DeletechatsRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .deleteChatsRequest(deleteChatsRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/deletechats");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "deleteChatsRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                DeletechatsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "deletechats", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletechats",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "deletechats",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletechats",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeletechatsResponse.Builder _resBuilder = 
            DeletechatsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeletechatsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Retrieves a Chat
     * 
     * <p>Retrieves the chat history between Glean Assistant and the user for a given Chat.
     * 
     * @return The call builder
     */
    public GetchatRequestBuilder get() {
        return new GetchatRequestBuilder(this);
    }

    /**
     * Retrieves a Chat
     * 
     * <p>Retrieves the chat history between Glean Assistant and the user for a given Chat.
     * 
     * @param getChatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatResponse get(
            GetChatRequest getChatRequest) throws Exception {
        return get(Optional.empty(), Optional.empty(), Optional.empty(), getChatRequest);
    }
    
    /**
     * Retrieves a Chat
     * 
     * <p>Retrieves the chat history between Glean Assistant and the user for a given Chat.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param getChatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatResponse get(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetChatRequest getChatRequest) throws Exception {
        GetchatRequest request =
            GetchatRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .getChatRequest(getChatRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/getchat");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "getChatRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetchatRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "getchat", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getchat",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "getchat",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getchat",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetchatResponse.Builder _resBuilder = 
            GetchatResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetchatResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetChatResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetChatResponse>() {});
                _res.withGetChatResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Retrieves all saved Chats
     * 
     * <p>Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     * 
     * @return The call builder
     */
    public ListchatsRequestBuilder list() {
        return new ListchatsRequestBuilder(this);
    }

    /**
     * Retrieves all saved Chats
     * 
     * <p>Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListchatsResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Retrieves all saved Chats
     * 
     * <p>Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListchatsResponse list(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset) throws Exception {
        ListchatsRequest request =
            ListchatsRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/listchats");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListchatsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "listchats", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "listchats",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "listchats",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "listchats",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListchatsResponse.Builder _resBuilder = 
            ListchatsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListchatsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ListChatsResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ListChatsResponse>() {});
                _res.withListChatsResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Gets the metadata for a custom Chat application
     * 
     * <p>Gets the Chat application details for the specified application ID.
     * 
     * @return The call builder
     */
    public GetchatapplicationRequestBuilder getApplication() {
        return new GetchatapplicationRequestBuilder(this);
    }

    /**
     * Gets the metadata for a custom Chat application
     * 
     * <p>Gets the Chat application details for the specified application ID.
     * 
     * @param getChatApplicationRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatapplicationResponse getApplication(
            GetChatApplicationRequest getChatApplicationRequest) throws Exception {
        return getApplication(Optional.empty(), Optional.empty(), Optional.empty(), getChatApplicationRequest);
    }
    
    /**
     * Gets the metadata for a custom Chat application
     * 
     * <p>Gets the Chat application details for the specified application ID.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param getChatApplicationRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatapplicationResponse getApplication(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetChatApplicationRequest getChatApplicationRequest) throws Exception {
        GetchatapplicationRequest request =
            GetchatapplicationRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .getChatApplicationRequest(getChatApplicationRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/getchatapplication");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "getChatApplicationRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetchatapplicationRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "getchatapplication", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getchatapplication",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "getchatapplication",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getchatapplication",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetchatapplicationResponse.Builder _resBuilder = 
            GetchatapplicationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetchatapplicationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetChatApplicationResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetChatApplicationResponse>() {});
                _res.withGetChatApplicationResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Upload files for Chat.
     * 
     * <p>Upload files for Chat.
     * 
     * @return The call builder
     */
    public UploadchatfilesRequestBuilder uploadFiles() {
        return new UploadchatfilesRequestBuilder(this);
    }

    /**
     * Upload files for Chat.
     * 
     * <p>Upload files for Chat.
     * 
     * @param uploadChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadchatfilesResponse uploadFiles(
            UploadChatFilesRequest uploadChatFilesRequest) throws Exception {
        return uploadFiles(Optional.empty(), Optional.empty(), Optional.empty(), uploadChatFilesRequest);
    }
    
    /**
     * Upload files for Chat.
     * 
     * <p>Upload files for Chat.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param uploadChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadchatfilesResponse uploadFiles(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            UploadChatFilesRequest uploadChatFilesRequest) throws Exception {
        UploadchatfilesRequest request =
            UploadchatfilesRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .uploadChatFilesRequest(uploadChatFilesRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/uploadchatfiles");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "uploadChatFilesRequest",
                "multipart",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                UploadchatfilesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "uploadchatfiles", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "uploadchatfiles",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "uploadchatfiles",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "uploadchatfiles",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UploadchatfilesResponse.Builder _resBuilder = 
            UploadchatfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UploadchatfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UploadChatFilesResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UploadChatFilesResponse>() {});
                _res.withUploadChatFilesResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get files uploaded by a user for Chat.
     * 
     * <p>Get files uploaded by a user for Chat.
     * 
     * @return The call builder
     */
    public GetchatfilesRequestBuilder getFiles() {
        return new GetchatfilesRequestBuilder(this);
    }

    /**
     * Get files uploaded by a user for Chat.
     * 
     * <p>Get files uploaded by a user for Chat.
     * 
     * @param getChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatfilesResponse getFiles(
            GetChatFilesRequest getChatFilesRequest) throws Exception {
        return getFiles(Optional.empty(), Optional.empty(), Optional.empty(), getChatFilesRequest);
    }
    
    /**
     * Get files uploaded by a user for Chat.
     * 
     * <p>Get files uploaded by a user for Chat.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param getChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatfilesResponse getFiles(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            GetChatFilesRequest getChatFilesRequest) throws Exception {
        GetchatfilesRequest request =
            GetchatfilesRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .getChatFilesRequest(getChatFilesRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/getchatfiles");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "getChatFilesRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetchatfilesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "getchatfiles", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getchatfiles",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "getchatfiles",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getchatfiles",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetchatfilesResponse.Builder _resBuilder = 
            GetchatfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetchatfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetChatFilesResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetChatFilesResponse>() {});
                _res.withGetChatFilesResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete files uploaded by a user for chat.
     * 
     * <p>Delete files uploaded by a user for Chat.
     * 
     * @return The call builder
     */
    public DeletechatfilesRequestBuilder deleteFiles() {
        return new DeletechatfilesRequestBuilder(this);
    }

    /**
     * Delete files uploaded by a user for chat.
     * 
     * <p>Delete files uploaded by a user for Chat.
     * 
     * @param deleteChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatfilesResponse deleteFiles(
            DeleteChatFilesRequest deleteChatFilesRequest) throws Exception {
        return deleteFiles(Optional.empty(), Optional.empty(), Optional.empty(), deleteChatFilesRequest);
    }
    
    /**
     * Delete files uploaded by a user for chat.
     * 
     * <p>Delete files uploaded by a user for Chat.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param deleteChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatfilesResponse deleteFiles(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<Long> timezoneOffset,
            DeleteChatFilesRequest deleteChatFilesRequest) throws Exception {
        DeletechatfilesRequest request =
            DeletechatfilesRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .timezoneOffset(timezoneOffset)
                .deleteChatFilesRequest(deleteChatFilesRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/deletechatfiles");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "deleteChatFilesRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                DeletechatfilesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "deletechatfiles", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletechatfiles",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "deletechatfiles",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletechatfiles",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeletechatfilesResponse.Builder _resBuilder = 
            DeletechatfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeletechatfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
