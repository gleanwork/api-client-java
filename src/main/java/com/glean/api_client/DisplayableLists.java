/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client;

import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.models.components.CreateDisplayableListsRequest;
import com.glean.api_client.models.components.CreateDisplayableListsResponse;
import com.glean.api_client.models.components.DeleteDisplayableListsRequest;
import com.glean.api_client.models.components.GetDisplayableListsRequest;
import com.glean.api_client.models.components.GetDisplayableListsResponse;
import com.glean.api_client.models.components.UpdateDisplayableListsRequest;
import com.glean.api_client.models.components.UpdateDisplayableListsResponse;
import com.glean.api_client.models.errors.APIException;
import com.glean.api_client.models.operations.CreatedisplayablelistsRequest;
import com.glean.api_client.models.operations.CreatedisplayablelistsRequestBuilder;
import com.glean.api_client.models.operations.CreatedisplayablelistsResponse;
import com.glean.api_client.models.operations.DeletedisplayablelistsRequest;
import com.glean.api_client.models.operations.DeletedisplayablelistsRequestBuilder;
import com.glean.api_client.models.operations.DeletedisplayablelistsResponse;
import com.glean.api_client.models.operations.GetdisplayablelistsRequest;
import com.glean.api_client.models.operations.GetdisplayablelistsRequestBuilder;
import com.glean.api_client.models.operations.GetdisplayablelistsResponse;
import com.glean.api_client.models.operations.SDKMethodInterfaces.*;
import com.glean.api_client.models.operations.UpdatedisplayablelistsRequest;
import com.glean.api_client.models.operations.UpdatedisplayablelistsRequestBuilder;
import com.glean.api_client.models.operations.UpdatedisplayablelistsResponse;
import com.glean.api_client.utils.HTTPClient;
import com.glean.api_client.utils.HTTPRequest;
import com.glean.api_client.utils.Hook.AfterErrorContextImpl;
import com.glean.api_client.utils.Hook.AfterSuccessContextImpl;
import com.glean.api_client.utils.Hook.BeforeRequestContextImpl;
import com.glean.api_client.utils.SerializedBody;
import com.glean.api_client.utils.Utils.JsonShape;
import com.glean.api_client.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;

public class DisplayableLists implements
            MethodCallCreatedisplayablelists,
            MethodCallDeletedisplayablelists,
            MethodCallGetdisplayablelists,
            MethodCallUpdatedisplayablelists {

    private final SDKConfiguration sdkConfiguration;

    DisplayableLists(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create displayable lists
     * 
     * <p>Create one or more lists that can be display on the home page.
     * 
     * @return The call builder
     */
    public CreatedisplayablelistsRequestBuilder create() {
        return new CreatedisplayablelistsRequestBuilder(this);
    }

    /**
     * Create displayable lists
     * 
     * <p>Create one or more lists that can be display on the home page.
     * 
     * @param createDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatedisplayablelistsResponse create(
            CreateDisplayableListsRequest createDisplayableListsRequest) throws Exception {
        return create(Optional.empty(), Optional.empty(), createDisplayableListsRequest);
    }
    
    /**
     * Create displayable lists
     * 
     * <p>Create one or more lists that can be display on the home page.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param createDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatedisplayablelistsResponse create(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            CreateDisplayableListsRequest createDisplayableListsRequest) throws Exception {
        CreatedisplayablelistsRequest request =
            CreatedisplayablelistsRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .createDisplayableListsRequest(createDisplayableListsRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/createdisplayablelists");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "createDisplayableListsRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "createdisplayablelists", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "createdisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "createdisplayablelists",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "createdisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreatedisplayablelistsResponse.Builder _resBuilder = 
            CreatedisplayablelistsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreatedisplayablelistsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CreateDisplayableListsResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CreateDisplayableListsResponse>() {});
                _res.withCreateDisplayableListsResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete displayable lists
     * 
     * <p>Delete one or more displayable lists.
     * 
     * @return The call builder
     */
    public DeletedisplayablelistsRequestBuilder delete() {
        return new DeletedisplayablelistsRequestBuilder(this);
    }

    /**
     * Delete displayable lists
     * 
     * <p>Delete one or more displayable lists.
     * 
     * @param deleteDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletedisplayablelistsResponse delete(
            DeleteDisplayableListsRequest deleteDisplayableListsRequest) throws Exception {
        return delete(Optional.empty(), Optional.empty(), deleteDisplayableListsRequest);
    }
    
    /**
     * Delete displayable lists
     * 
     * <p>Delete one or more displayable lists.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param deleteDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletedisplayablelistsResponse delete(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            DeleteDisplayableListsRequest deleteDisplayableListsRequest) throws Exception {
        DeletedisplayablelistsRequest request =
            DeletedisplayablelistsRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .deleteDisplayableListsRequest(deleteDisplayableListsRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/deletedisplayablelists");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "deleteDisplayableListsRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "deletedisplayablelists", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletedisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "deletedisplayablelists",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "deletedisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeletedisplayablelistsResponse.Builder _resBuilder = 
            DeletedisplayablelistsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeletedisplayablelistsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Read displayable lists
     * 
     * <p>Read the details of the displayable lists with the given IDs.
     * 
     * @return The call builder
     */
    public GetdisplayablelistsRequestBuilder get() {
        return new GetdisplayablelistsRequestBuilder(this);
    }

    /**
     * Read displayable lists
     * 
     * <p>Read the details of the displayable lists with the given IDs.
     * 
     * @param getDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetdisplayablelistsResponse get(
            GetDisplayableListsRequest getDisplayableListsRequest) throws Exception {
        return get(Optional.empty(), Optional.empty(), getDisplayableListsRequest);
    }
    
    /**
     * Read displayable lists
     * 
     * <p>Read the details of the displayable lists with the given IDs.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param getDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetdisplayablelistsResponse get(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            GetDisplayableListsRequest getDisplayableListsRequest) throws Exception {
        GetdisplayablelistsRequest request =
            GetdisplayablelistsRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .getDisplayableListsRequest(getDisplayableListsRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/getdisplayablelists");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "getDisplayableListsRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "getdisplayablelists", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getdisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "getdisplayablelists",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "getdisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetdisplayablelistsResponse.Builder _resBuilder = 
            GetdisplayablelistsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetdisplayablelistsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetDisplayableListsResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetDisplayableListsResponse>() {});
                _res.withGetDisplayableListsResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update displayable lists
     * 
     * <p>Update one or more displayable lists with all fields from request fields.
     * 
     * @return The call builder
     */
    public UpdatedisplayablelistsRequestBuilder update() {
        return new UpdatedisplayablelistsRequestBuilder(this);
    }

    /**
     * Update displayable lists
     * 
     * <p>Update one or more displayable lists with all fields from request fields.
     * 
     * @param updateDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatedisplayablelistsResponse update(
            UpdateDisplayableListsRequest updateDisplayableListsRequest) throws Exception {
        return update(Optional.empty(), Optional.empty(), updateDisplayableListsRequest);
    }
    
    /**
     * Update displayable lists
     * 
     * <p>Update one or more displayable lists with all fields from request fields.
     * 
     * @param xScioActas Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param updateDisplayableListsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatedisplayablelistsResponse update(
            Optional<String> xScioActas,
            Optional<String> xGleanAuthType,
            UpdateDisplayableListsRequest updateDisplayableListsRequest) throws Exception {
        UpdatedisplayablelistsRequest request =
            UpdatedisplayablelistsRequest
                .builder()
                .xScioActas(xScioActas)
                .xGleanAuthType(xGleanAuthType)
                .updateDisplayableListsRequest(updateDisplayableListsRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/updatedisplayablelists");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "updateDisplayableListsRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "updatedisplayablelists", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "updatedisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "updatedisplayablelists",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "updatedisplayablelists",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UpdatedisplayablelistsResponse.Builder _resBuilder = 
            UpdatedisplayablelistsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UpdatedisplayablelistsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UpdateDisplayableListsResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UpdateDisplayableListsResponse>() {});
                _res.withUpdateDisplayableListsResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
