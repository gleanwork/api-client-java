/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.ListEntitiesRequest;
import com.glean.api_client.glean_api_client.models.components.PeopleRequest;
import com.glean.api_client.glean_api_client.models.operations.ListentitiesRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ListentitiesResponse;
import com.glean.api_client.glean_api_client.models.operations.PeopleRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PeopleResponse;
import com.glean.api_client.glean_api_client.operations.ListentitiesOperation;
import com.glean.api_client.glean_api_client.operations.PeopleOperation;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Entities {
    private final SDKConfiguration sdkConfiguration;

    Entities(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List entities
     * 
     * <p>List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint.
     * 
     * @return The call builder
     */
    public ListentitiesRequestBuilder list() {
        return new ListentitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * List entities
     * 
     * <p>List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListentitiesResponse list(
            ListEntitiesRequest request) throws Exception {
        RequestOperation<ListEntitiesRequest, ListentitiesResponse> operation
              = new ListentitiesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Read people
     * 
     * <p>Read people details for the given IDs.
     * 
     * @return The call builder
     */
    public PeopleRequestBuilder readPeople() {
        return new PeopleRequestBuilder(sdkConfiguration);
    }

    /**
     * Read people
     * 
     * <p>Read people details for the given IDs.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PeopleResponse readPeople(
            PeopleRequest request) throws Exception {
        RequestOperation<PeopleRequest, PeopleResponse> operation
              = new PeopleOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
