/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.AddCollectionItemsRequest;
import com.glean.api_client.glean_api_client.models.components.CreateCollectionRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteCollectionItemRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteCollectionRequest;
import com.glean.api_client.glean_api_client.models.components.EditCollectionItemRequest;
import com.glean.api_client.glean_api_client.models.components.EditCollectionRequest;
import com.glean.api_client.glean_api_client.models.components.GetCollectionRequest;
import com.glean.api_client.glean_api_client.models.components.ListCollectionsRequest;
import com.glean.api_client.glean_api_client.models.operations.AddcollectionitemsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.AddcollectionitemsResponse;
import com.glean.api_client.glean_api_client.models.operations.CreatecollectionRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.CreatecollectionResponse;
import com.glean.api_client.glean_api_client.models.operations.DeletecollectionRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DeletecollectionResponse;
import com.glean.api_client.glean_api_client.models.operations.DeletecollectionitemRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DeletecollectionitemResponse;
import com.glean.api_client.glean_api_client.models.operations.EditcollectionRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.EditcollectionResponse;
import com.glean.api_client.glean_api_client.models.operations.EditcollectionitemRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.EditcollectionitemResponse;
import com.glean.api_client.glean_api_client.models.operations.GetcollectionRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetcollectionResponse;
import com.glean.api_client.glean_api_client.models.operations.ListcollectionsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ListcollectionsResponse;
import com.glean.api_client.glean_api_client.operations.AddcollectionitemsOperation;
import com.glean.api_client.glean_api_client.operations.CreatecollectionOperation;
import com.glean.api_client.glean_api_client.operations.DeletecollectionOperation;
import com.glean.api_client.glean_api_client.operations.DeletecollectionitemOperation;
import com.glean.api_client.glean_api_client.operations.EditcollectionOperation;
import com.glean.api_client.glean_api_client.operations.EditcollectionitemOperation;
import com.glean.api_client.glean_api_client.operations.GetcollectionOperation;
import com.glean.api_client.glean_api_client.operations.ListcollectionsOperation;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Collections {
    private final SDKConfiguration sdkConfiguration;

    Collections(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Add Collection item
     * 
     * <p>Add items to a Collection.
     * 
     * @return The call builder
     */
    public AddcollectionitemsRequestBuilder addItems() {
        return new AddcollectionitemsRequestBuilder(sdkConfiguration);
    }

    /**
     * Add Collection item
     * 
     * <p>Add items to a Collection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddcollectionitemsResponse addItems(
            AddCollectionItemsRequest request) throws Exception {
        RequestOperation<AddCollectionItemsRequest, AddcollectionitemsResponse> operation
              = new AddcollectionitemsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create Collection
     * 
     * <p>Create a publicly visible (empty) Collection of documents.
     * 
     * @return The call builder
     */
    public CreatecollectionRequestBuilder create() {
        return new CreatecollectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Collection
     * 
     * <p>Create a publicly visible (empty) Collection of documents.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatecollectionResponse create(
            CreateCollectionRequest request) throws Exception {
        RequestOperation<CreateCollectionRequest, CreatecollectionResponse> operation
              = new CreatecollectionOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete Collection
     * 
     * <p>Delete a Collection given the Collection's ID.
     * 
     * @return The call builder
     */
    public DeletecollectionRequestBuilder delete() {
        return new DeletecollectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Collection
     * 
     * <p>Delete a Collection given the Collection's ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletecollectionResponse delete(
            DeleteCollectionRequest request) throws Exception {
        RequestOperation<DeleteCollectionRequest, DeletecollectionResponse> operation
              = new DeletecollectionOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete Collection item
     * 
     * <p>Delete a single item from a Collection.
     * 
     * @return The call builder
     */
    public DeletecollectionitemRequestBuilder deleteItem() {
        return new DeletecollectionitemRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Collection item
     * 
     * <p>Delete a single item from a Collection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletecollectionitemResponse deleteItem(
            DeleteCollectionItemRequest request) throws Exception {
        RequestOperation<DeleteCollectionItemRequest, DeletecollectionitemResponse> operation
              = new DeletecollectionitemOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update Collection
     * 
     * <p>Update the properties of an existing Collection.
     * 
     * @return The call builder
     */
    public EditcollectionRequestBuilder update() {
        return new EditcollectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Collection
     * 
     * <p>Update the properties of an existing Collection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EditcollectionResponse update(
            EditCollectionRequest request) throws Exception {
        RequestOperation<EditCollectionRequest, EditcollectionResponse> operation
              = new EditcollectionOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update Collection item
     * 
     * <p>Update the URL, Glean Document ID, description of an item within a Collection given its ID.
     * 
     * @return The call builder
     */
    public EditcollectionitemRequestBuilder updateItem() {
        return new EditcollectionitemRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Collection item
     * 
     * <p>Update the URL, Glean Document ID, description of an item within a Collection given its ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EditcollectionitemResponse updateItem(
            EditCollectionItemRequest request) throws Exception {
        RequestOperation<EditCollectionItemRequest, EditcollectionitemResponse> operation
              = new EditcollectionitemOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Read Collection
     * 
     * <p>Read the details of a Collection given its ID. Does not fetch items in this Collection.
     * 
     * @return The call builder
     */
    public GetcollectionRequestBuilder retrieve() {
        return new GetcollectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Read Collection
     * 
     * <p>Read the details of a Collection given its ID. Does not fetch items in this Collection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetcollectionResponse retrieve(
            GetCollectionRequest request) throws Exception {
        RequestOperation<GetCollectionRequest, GetcollectionResponse> operation
              = new GetcollectionOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List Collections
     * 
     * <p>List all existing Collections.
     * 
     * @return The call builder
     */
    public ListcollectionsRequestBuilder list() {
        return new ListcollectionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Collections
     * 
     * <p>List all existing Collections.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListcollectionsResponse list(
            ListCollectionsRequest request) throws Exception {
        RequestOperation<ListCollectionsRequest, ListcollectionsResponse> operation
              = new ListcollectionsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
