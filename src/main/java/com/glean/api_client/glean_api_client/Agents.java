/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.AgentRunCreate;
import com.glean.api_client.glean_api_client.models.components.SearchAgentsRequest;
import com.glean.api_client.glean_api_client.models.operations.CreateAndStreamRunRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.CreateAndStreamRunResponse;
import com.glean.api_client.glean_api_client.models.operations.CreateAndWaitRunRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.CreateAndWaitRunResponse;
import com.glean.api_client.glean_api_client.models.operations.GetAgentRequest;
import com.glean.api_client.glean_api_client.models.operations.GetAgentRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetAgentResponse;
import com.glean.api_client.glean_api_client.models.operations.GetAgentSchemasRequest;
import com.glean.api_client.glean_api_client.models.operations.GetAgentSchemasRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetAgentSchemasResponse;
import com.glean.api_client.glean_api_client.models.operations.SearchAgentsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.SearchAgentsResponse;
import com.glean.api_client.glean_api_client.operations.CreateAndStreamRunOperation;
import com.glean.api_client.glean_api_client.operations.CreateAndWaitRunOperation;
import com.glean.api_client.glean_api_client.operations.GetAgentOperation;
import com.glean.api_client.glean_api_client.operations.GetAgentSchemasOperation;
import com.glean.api_client.glean_api_client.operations.SearchAgentsOperation;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Agents {
    private final SDKConfiguration sdkConfiguration;

    Agents(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Retrieve an agent
     * 
     * <p>Returns details of an [agent](https://developers.glean.com/agents/agents-api) created in the Agent Builder.
     * 
     * @return The call builder
     */
    public GetAgentRequestBuilder retrieve() {
        return new GetAgentRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an agent
     * 
     * <p>Returns details of an [agent](https://developers.glean.com/agents/agents-api) created in the Agent Builder.
     * 
     * @param agentId The ID of the agent.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgentResponse retrieve(String agentId) throws Exception {
        return retrieve(Optional.empty(), agentId);
    }

    /**
     * Retrieve an agent
     * 
     * <p>Returns details of an [agent](https://developers.glean.com/agents/agents-api) created in the Agent Builder.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param agentId The ID of the agent.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgentResponse retrieve(
            Optional<Long> timezoneOffset,
            String agentId) throws Exception {
        GetAgentRequest request =
            GetAgentRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .agentId(agentId)
                .build();
        RequestOperation<GetAgentRequest, GetAgentResponse> operation
              = new GetAgentOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List an agent's schemas
     * 
     * <p>Return [agent](https://developers.glean.com/agents/agents-api)'s input and output schemas. You can use these schemas to detect changes to an agent's input or output structure.
     * 
     * @return The call builder
     */
    public GetAgentSchemasRequestBuilder retrieveSchemas() {
        return new GetAgentSchemasRequestBuilder(sdkConfiguration);
    }

    /**
     * List an agent's schemas
     * 
     * <p>Return [agent](https://developers.glean.com/agents/agents-api)'s input and output schemas. You can use these schemas to detect changes to an agent's input or output structure.
     * 
     * @param agentId The ID of the agent.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgentSchemasResponse retrieveSchemas(String agentId) throws Exception {
        return retrieveSchemas(Optional.empty(), agentId);
    }

    /**
     * List an agent's schemas
     * 
     * <p>Return [agent](https://developers.glean.com/agents/agents-api)'s input and output schemas. You can use these schemas to detect changes to an agent's input or output structure.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param agentId The ID of the agent.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgentSchemasResponse retrieveSchemas(
            Optional<Long> timezoneOffset,
            String agentId) throws Exception {
        GetAgentSchemasRequest request =
            GetAgentSchemasRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .agentId(agentId)
                .build();
        RequestOperation<GetAgentSchemasRequest, GetAgentSchemasResponse> operation
              = new GetAgentSchemasOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Search agents
     * 
     * <p>Search for [agents](https://developers.glean.com/agents/agents-api) by agent name.
     * 
     * @return The call builder
     */
    public SearchAgentsRequestBuilder list() {
        return new SearchAgentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Search agents
     * 
     * <p>Search for [agents](https://developers.glean.com/agents/agents-api) by agent name.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SearchAgentsResponse list(
            SearchAgentsRequest request) throws Exception {
        RequestOperation<SearchAgentsRequest, SearchAgentsResponse> operation
              = new SearchAgentsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create an agent run and stream the response
     * 
     * <p>Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the result as a stream of server-sent events (SSE).
     * 
     * @return The call builder
     */
    public CreateAndStreamRunRequestBuilder runStream() {
        return new CreateAndStreamRunRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an agent run and stream the response
     * 
     * <p>Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the result as a stream of server-sent events (SSE).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAndStreamRunResponse runStream(
            AgentRunCreate request) throws Exception {
        RequestOperation<AgentRunCreate, CreateAndStreamRunResponse> operation
              = new CreateAndStreamRunOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create an agent run and wait for the response
     * 
     * <p>Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the final response.
     * 
     * @return The call builder
     */
    public CreateAndWaitRunRequestBuilder run() {
        return new CreateAndWaitRunRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an agent run and wait for the response
     * 
     * <p>Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the final response.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAndWaitRunResponse run(
            AgentRunCreate request) throws Exception {
        RequestOperation<AgentRunCreate, CreateAndWaitRunResponse> operation
              = new CreateAndWaitRunOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
