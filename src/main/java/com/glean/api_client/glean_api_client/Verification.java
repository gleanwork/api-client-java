/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.ReminderRequest;
import com.glean.api_client.glean_api_client.models.components.VerifyRequest;
import com.glean.api_client.glean_api_client.models.operations.AddverificationreminderRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.AddverificationreminderResponse;
import com.glean.api_client.glean_api_client.models.operations.ListverificationsRequest;
import com.glean.api_client.glean_api_client.models.operations.ListverificationsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ListverificationsResponse;
import com.glean.api_client.glean_api_client.models.operations.VerifyRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.VerifyResponse;
import com.glean.api_client.glean_api_client.operations.AddverificationreminderOperation;
import com.glean.api_client.glean_api_client.operations.ListverificationsOperation;
import com.glean.api_client.glean_api_client.operations.VerifyOperation;
import java.lang.Exception;
import java.lang.Long;
import java.util.List;
import java.util.Optional;


public class Verification {
    private final SDKConfiguration sdkConfiguration;

    Verification(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create verification
     * 
     * <p>Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.
     * 
     * @return The call builder
     */
    public AddverificationreminderRequestBuilder addReminder() {
        return new AddverificationreminderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create verification
     * 
     * <p>Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddverificationreminderResponse addReminder(
            ReminderRequest request) throws Exception {
        RequestOperation<ReminderRequest, AddverificationreminderResponse> operation
              = new AddverificationreminderOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List verifications
     * 
     * <p>Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.
     * 
     * @return The call builder
     */
    public ListverificationsRequestBuilder list() {
        return new ListverificationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List verifications
     * 
     * <p>Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListverificationsResponse listDirect() throws Exception {
        return list(Optional.empty());
    }

    /**
     * List verifications
     * 
     * <p>Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.
     * 
     * @param count Maximum number of documents to return
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListverificationsResponse list(
            Optional<Long> count) throws Exception {
        ListverificationsRequest request =
            ListverificationsRequest
                .builder()
                .count(count)
                .build();
        RequestOperation<ListverificationsRequest, ListverificationsResponse> operation
              = new ListverificationsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update verification
     * 
     * <p>Verify documents to keep the knowledge up to date within customer corpus.
     * 
     * @return The call builder
     */
    public VerifyRequestBuilder verify() {
        return new VerifyRequestBuilder(sdkConfiguration);
    }

    /**
     * Update verification
     * 
     * <p>Verify documents to keep the knowledge up to date within customer corpus.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyResponse verify(
            VerifyRequest request) throws Exception {
        RequestOperation<VerifyRequest, VerifyResponse> operation
              = new VerifyOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
