/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * AdditionalFieldDefinition
 * 
 * <p>Additional information about the employee or team.
 */
public class AdditionalFieldDefinition {

    /**
     * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<String> key;

    /**
     * List of type string or HypertextField.
     * 
     * <p>HypertextField is defined as
     * ```
     * {
     *   anchor: string,    // Anchor text for the hypertext field.
     *   hyperlink: string, // URL for the hypertext field.
     * }
     * ```
     * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
     * 
     * <p>When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
     * 
     * <p>**Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
     * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends List<Value>> value;

    @JsonCreator
    public AdditionalFieldDefinition(
            @JsonProperty("key") Optional<String> key,
            @JsonProperty("value") Optional<? extends List<Value>> value) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(value, "value");
        this.key = key;
        this.value = value;
    }
    
    public AdditionalFieldDefinition() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
     */
    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    /**
     * List of type string or HypertextField.
     * 
     * <p>HypertextField is defined as
     * ```
     * {
     *   anchor: string,    // Anchor text for the hypertext field.
     *   hyperlink: string, // URL for the hypertext field.
     * }
     * ```
     * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
     * 
     * <p>When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
     * 
     * <p>**Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
     * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Value>> value() {
        return (Optional<List<Value>>) value;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
     */
    public AdditionalFieldDefinition withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
     */
    public AdditionalFieldDefinition withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * List of type string or HypertextField.
     * 
     * <p>HypertextField is defined as
     * ```
     * {
     *   anchor: string,    // Anchor text for the hypertext field.
     *   hyperlink: string, // URL for the hypertext field.
     * }
     * ```
     * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
     * 
     * <p>When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
     * 
     * <p>**Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
     * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
     */
    public AdditionalFieldDefinition withValue(List<Value> value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * List of type string or HypertextField.
     * 
     * <p>HypertextField is defined as
     * ```
     * {
     *   anchor: string,    // Anchor text for the hypertext field.
     *   hyperlink: string, // URL for the hypertext field.
     * }
     * ```
     * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
     * 
     * <p>When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
     * 
     * <p>**Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
     * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
     */
    public AdditionalFieldDefinition withValue(Optional<? extends List<Value>> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdditionalFieldDefinition other = (AdditionalFieldDefinition) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdditionalFieldDefinition.class,
                "key", key,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<String> key = Optional.empty();
 
        private Optional<? extends List<Value>> value = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
         */
        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * List of type string or HypertextField.
         * 
         * <p>HypertextField is defined as
         * ```
         * {
         *   anchor: string,    // Anchor text for the hypertext field.
         *   hyperlink: string, // URL for the hypertext field.
         * }
         * ```
         * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
         * 
         * <p>When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
         * 
         * <p>**Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
         * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
         */
        public Builder value(List<Value> value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * List of type string or HypertextField.
         * 
         * <p>HypertextField is defined as
         * ```
         * {
         *   anchor: string,    // Anchor text for the hypertext field.
         *   hyperlink: string, // URL for the hypertext field.
         * }
         * ```
         * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
         * 
         * <p>When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
         * 
         * <p>**Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
         * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
         */
        public Builder value(Optional<? extends List<Value>> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public AdditionalFieldDefinition build() {
            return new AdditionalFieldDefinition(
                key,
                value);
        }
    }
}
