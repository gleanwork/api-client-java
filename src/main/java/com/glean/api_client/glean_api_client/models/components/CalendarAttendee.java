/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class CalendarAttendee {

    /**
     * Whether or not this attendee is an organizer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOrganizer")
    private Optional<Boolean> isOrganizer;

    /**
     * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isInGroup")
    private Optional<Boolean> isInGroup;

    @JsonProperty("person")
    private Person person;

    /**
     * If this attendee is a group, represents the list of individual attendees in the group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupAttendees")
    private Optional<? extends List<CalendarAttendee>> groupAttendees;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseStatus")
    private Optional<? extends ResponseStatus> responseStatus;

    @JsonCreator
    public CalendarAttendee(
            @JsonProperty("isOrganizer") Optional<Boolean> isOrganizer,
            @JsonProperty("isInGroup") Optional<Boolean> isInGroup,
            @JsonProperty("person") Person person,
            @JsonProperty("groupAttendees") Optional<? extends List<CalendarAttendee>> groupAttendees,
            @JsonProperty("responseStatus") Optional<? extends ResponseStatus> responseStatus) {
        Utils.checkNotNull(isOrganizer, "isOrganizer");
        Utils.checkNotNull(isInGroup, "isInGroup");
        Utils.checkNotNull(person, "person");
        Utils.checkNotNull(groupAttendees, "groupAttendees");
        Utils.checkNotNull(responseStatus, "responseStatus");
        this.isOrganizer = isOrganizer;
        this.isInGroup = isInGroup;
        this.person = person;
        this.groupAttendees = groupAttendees;
        this.responseStatus = responseStatus;
    }
    
    public CalendarAttendee(
            Person person) {
        this(Optional.empty(), Optional.empty(), person, Optional.empty(), Optional.empty());
    }

    /**
     * Whether or not this attendee is an organizer.
     */
    @JsonIgnore
    public Optional<Boolean> isOrganizer() {
        return isOrganizer;
    }

    /**
     * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
     */
    @JsonIgnore
    public Optional<Boolean> isInGroup() {
        return isInGroup;
    }

    @JsonIgnore
    public Person person() {
        return person;
    }

    /**
     * If this attendee is a group, represents the list of individual attendees in the group.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CalendarAttendee>> groupAttendees() {
        return (Optional<List<CalendarAttendee>>) groupAttendees;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResponseStatus> responseStatus() {
        return (Optional<ResponseStatus>) responseStatus;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether or not this attendee is an organizer.
     */
    public CalendarAttendee withIsOrganizer(boolean isOrganizer) {
        Utils.checkNotNull(isOrganizer, "isOrganizer");
        this.isOrganizer = Optional.ofNullable(isOrganizer);
        return this;
    }

    /**
     * Whether or not this attendee is an organizer.
     */
    public CalendarAttendee withIsOrganizer(Optional<Boolean> isOrganizer) {
        Utils.checkNotNull(isOrganizer, "isOrganizer");
        this.isOrganizer = isOrganizer;
        return this;
    }

    /**
     * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
     */
    public CalendarAttendee withIsInGroup(boolean isInGroup) {
        Utils.checkNotNull(isInGroup, "isInGroup");
        this.isInGroup = Optional.ofNullable(isInGroup);
        return this;
    }

    /**
     * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
     */
    public CalendarAttendee withIsInGroup(Optional<Boolean> isInGroup) {
        Utils.checkNotNull(isInGroup, "isInGroup");
        this.isInGroup = isInGroup;
        return this;
    }

    public CalendarAttendee withPerson(Person person) {
        Utils.checkNotNull(person, "person");
        this.person = person;
        return this;
    }

    /**
     * If this attendee is a group, represents the list of individual attendees in the group.
     */
    public CalendarAttendee withGroupAttendees(List<CalendarAttendee> groupAttendees) {
        Utils.checkNotNull(groupAttendees, "groupAttendees");
        this.groupAttendees = Optional.ofNullable(groupAttendees);
        return this;
    }

    /**
     * If this attendee is a group, represents the list of individual attendees in the group.
     */
    public CalendarAttendee withGroupAttendees(Optional<? extends List<CalendarAttendee>> groupAttendees) {
        Utils.checkNotNull(groupAttendees, "groupAttendees");
        this.groupAttendees = groupAttendees;
        return this;
    }

    public CalendarAttendee withResponseStatus(ResponseStatus responseStatus) {
        Utils.checkNotNull(responseStatus, "responseStatus");
        this.responseStatus = Optional.ofNullable(responseStatus);
        return this;
    }

    public CalendarAttendee withResponseStatus(Optional<? extends ResponseStatus> responseStatus) {
        Utils.checkNotNull(responseStatus, "responseStatus");
        this.responseStatus = responseStatus;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarAttendee other = (CalendarAttendee) o;
        return 
            Utils.enhancedDeepEquals(this.isOrganizer, other.isOrganizer) &&
            Utils.enhancedDeepEquals(this.isInGroup, other.isInGroup) &&
            Utils.enhancedDeepEquals(this.person, other.person) &&
            Utils.enhancedDeepEquals(this.groupAttendees, other.groupAttendees) &&
            Utils.enhancedDeepEquals(this.responseStatus, other.responseStatus);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            isOrganizer,
            isInGroup,
            person,
            groupAttendees,
            responseStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarAttendee.class,
                "isOrganizer", isOrganizer,
                "isInGroup", isInGroup,
                "person", person,
                "groupAttendees", groupAttendees,
                "responseStatus", responseStatus);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isOrganizer = Optional.empty();
 
        private Optional<Boolean> isInGroup = Optional.empty();
 
        private Person person;
 
        private Optional<? extends List<CalendarAttendee>> groupAttendees = Optional.empty();
 
        private Optional<? extends ResponseStatus> responseStatus = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not this attendee is an organizer.
         */
        public Builder isOrganizer(boolean isOrganizer) {
            Utils.checkNotNull(isOrganizer, "isOrganizer");
            this.isOrganizer = Optional.ofNullable(isOrganizer);
            return this;
        }

        /**
         * Whether or not this attendee is an organizer.
         */
        public Builder isOrganizer(Optional<Boolean> isOrganizer) {
            Utils.checkNotNull(isOrganizer, "isOrganizer");
            this.isOrganizer = isOrganizer;
            return this;
        }

        /**
         * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
         */
        public Builder isInGroup(boolean isInGroup) {
            Utils.checkNotNull(isInGroup, "isInGroup");
            this.isInGroup = Optional.ofNullable(isInGroup);
            return this;
        }

        /**
         * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
         */
        public Builder isInGroup(Optional<Boolean> isInGroup) {
            Utils.checkNotNull(isInGroup, "isInGroup");
            this.isInGroup = isInGroup;
            return this;
        }

        public Builder person(Person person) {
            Utils.checkNotNull(person, "person");
            this.person = person;
            return this;
        }

        /**
         * If this attendee is a group, represents the list of individual attendees in the group.
         */
        public Builder groupAttendees(List<CalendarAttendee> groupAttendees) {
            Utils.checkNotNull(groupAttendees, "groupAttendees");
            this.groupAttendees = Optional.ofNullable(groupAttendees);
            return this;
        }

        /**
         * If this attendee is a group, represents the list of individual attendees in the group.
         */
        public Builder groupAttendees(Optional<? extends List<CalendarAttendee>> groupAttendees) {
            Utils.checkNotNull(groupAttendees, "groupAttendees");
            this.groupAttendees = groupAttendees;
            return this;
        }

        public Builder responseStatus(ResponseStatus responseStatus) {
            Utils.checkNotNull(responseStatus, "responseStatus");
            this.responseStatus = Optional.ofNullable(responseStatus);
            return this;
        }

        public Builder responseStatus(Optional<? extends ResponseStatus> responseStatus) {
            Utils.checkNotNull(responseStatus, "responseStatus");
            this.responseStatus = responseStatus;
            return this;
        }
        
        public CalendarAttendee build() {
            return new CalendarAttendee(
                isOrganizer,
                isInGroup,
                person,
                groupAttendees,
                responseStatus);
        }
    }
}
