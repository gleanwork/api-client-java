/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class AddCollectionItemsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends Collection> collection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends AddCollectionItemsError> error;

    @JsonCreator
    public AddCollectionItemsResponse(
            @JsonProperty("collection") Optional<? extends Collection> collection,
            @JsonProperty("error") Optional<? extends AddCollectionItemsError> error) {
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(error, "error");
        this.collection = collection;
        this.error = error;
    }
    
    public AddCollectionItemsResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> collection() {
        return (Optional<Collection>) collection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AddCollectionItemsError> error() {
        return (Optional<AddCollectionItemsError>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AddCollectionItemsResponse withCollection(Collection collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public AddCollectionItemsResponse withCollection(Optional<? extends Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public AddCollectionItemsResponse withError(AddCollectionItemsError error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public AddCollectionItemsResponse withError(Optional<? extends AddCollectionItemsError> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddCollectionItemsResponse other = (AddCollectionItemsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.collection, other.collection) &&
            Utils.enhancedDeepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            collection,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddCollectionItemsResponse.class,
                "collection", collection,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<? extends Collection> collection = Optional.empty();
 
        private Optional<? extends AddCollectionItemsError> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder collection(Collection collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder error(AddCollectionItemsError error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends AddCollectionItemsError> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public AddCollectionItemsResponse build() {
            return new AddCollectionItemsResponse(
                collection,
                error);
        }
    }
}
