/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * CanonicalizingRegexType
 * 
 * <p>Regular expression to apply to an arbitrary string to transform it into a canonical string.
 */
public class CanonicalizingRegexType {

    /**
     * Regular expression to match to an arbitrary string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchRegex")
    private Optional<String> matchRegex;

    /**
     * Regular expression to transform into a canonical string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewriteRegex")
    private Optional<String> rewriteRegex;

    @JsonCreator
    public CanonicalizingRegexType(
            @JsonProperty("matchRegex") Optional<String> matchRegex,
            @JsonProperty("rewriteRegex") Optional<String> rewriteRegex) {
        Utils.checkNotNull(matchRegex, "matchRegex");
        Utils.checkNotNull(rewriteRegex, "rewriteRegex");
        this.matchRegex = matchRegex;
        this.rewriteRegex = rewriteRegex;
    }
    
    public CanonicalizingRegexType() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Regular expression to match to an arbitrary string.
     */
    @JsonIgnore
    public Optional<String> matchRegex() {
        return matchRegex;
    }

    /**
     * Regular expression to transform into a canonical string.
     */
    @JsonIgnore
    public Optional<String> rewriteRegex() {
        return rewriteRegex;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Regular expression to match to an arbitrary string.
     */
    public CanonicalizingRegexType withMatchRegex(String matchRegex) {
        Utils.checkNotNull(matchRegex, "matchRegex");
        this.matchRegex = Optional.ofNullable(matchRegex);
        return this;
    }

    /**
     * Regular expression to match to an arbitrary string.
     */
    public CanonicalizingRegexType withMatchRegex(Optional<String> matchRegex) {
        Utils.checkNotNull(matchRegex, "matchRegex");
        this.matchRegex = matchRegex;
        return this;
    }

    /**
     * Regular expression to transform into a canonical string.
     */
    public CanonicalizingRegexType withRewriteRegex(String rewriteRegex) {
        Utils.checkNotNull(rewriteRegex, "rewriteRegex");
        this.rewriteRegex = Optional.ofNullable(rewriteRegex);
        return this;
    }

    /**
     * Regular expression to transform into a canonical string.
     */
    public CanonicalizingRegexType withRewriteRegex(Optional<String> rewriteRegex) {
        Utils.checkNotNull(rewriteRegex, "rewriteRegex");
        this.rewriteRegex = rewriteRegex;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CanonicalizingRegexType other = (CanonicalizingRegexType) o;
        return 
            Objects.deepEquals(this.matchRegex, other.matchRegex) &&
            Objects.deepEquals(this.rewriteRegex, other.rewriteRegex);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            matchRegex,
            rewriteRegex);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CanonicalizingRegexType.class,
                "matchRegex", matchRegex,
                "rewriteRegex", rewriteRegex);
    }
    
    public final static class Builder {
 
        private Optional<String> matchRegex = Optional.empty();
 
        private Optional<String> rewriteRegex = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Regular expression to match to an arbitrary string.
         */
        public Builder matchRegex(String matchRegex) {
            Utils.checkNotNull(matchRegex, "matchRegex");
            this.matchRegex = Optional.ofNullable(matchRegex);
            return this;
        }

        /**
         * Regular expression to match to an arbitrary string.
         */
        public Builder matchRegex(Optional<String> matchRegex) {
            Utils.checkNotNull(matchRegex, "matchRegex");
            this.matchRegex = matchRegex;
            return this;
        }

        /**
         * Regular expression to transform into a canonical string.
         */
        public Builder rewriteRegex(String rewriteRegex) {
            Utils.checkNotNull(rewriteRegex, "rewriteRegex");
            this.rewriteRegex = Optional.ofNullable(rewriteRegex);
            return this;
        }

        /**
         * Regular expression to transform into a canonical string.
         */
        public Builder rewriteRegex(Optional<String> rewriteRegex) {
            Utils.checkNotNull(rewriteRegex, "rewriteRegex");
            this.rewriteRegex = rewriteRegex;
            return this;
        }
        
        public CanonicalizingRegexType build() {
            return new CanonicalizingRegexType(
                matchRegex,
                rewriteRegex);
        }
    }
}
