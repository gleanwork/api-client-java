/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

public class AnswerBoard {

    /**
     * The unique name of the Collection.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A brief summary of the Collection's contents.
     */
    @JsonProperty("description")
    private String description;

    /**
     * A list of added user roles for the Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedRoles")
    private Optional<? extends List<UserRoleSpecification>> addedRoles;

    /**
     * A list of removed user roles for the Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedRoles")
    private Optional<? extends List<UserRoleSpecification>> removedRoles;

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    /**
     * The unique ID of the Answer Board.
     */
    @JsonProperty("id")
    private long id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<OffsetDateTime> createTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    private Optional<OffsetDateTime> updateTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    private Optional<? extends Person> creator;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends Person> updatedBy;

    /**
     * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemCount")
    private Optional<Long> itemCount;

    /**
     * A list of user roles for the Answer Board.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonCreator
    public AnswerBoard(
            @JsonProperty("name") String name,
            @JsonProperty("description") String description,
            @JsonProperty("addedRoles") Optional<? extends List<UserRoleSpecification>> addedRoles,
            @JsonProperty("removedRoles") Optional<? extends List<UserRoleSpecification>> removedRoles,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("id") long id,
            @JsonProperty("createTime") Optional<OffsetDateTime> createTime,
            @JsonProperty("updateTime") Optional<OffsetDateTime> updateTime,
            @JsonProperty("creator") Optional<? extends Person> creator,
            @JsonProperty("updatedBy") Optional<? extends Person> updatedBy,
            @JsonProperty("itemCount") Optional<Long> itemCount,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(addedRoles, "addedRoles");
        Utils.checkNotNull(removedRoles, "removedRoles");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(updateTime, "updateTime");
        Utils.checkNotNull(creator, "creator");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(itemCount, "itemCount");
        Utils.checkNotNull(roles, "roles");
        this.name = name;
        this.description = description;
        this.addedRoles = addedRoles;
        this.removedRoles = removedRoles;
        this.audienceFilters = audienceFilters;
        this.permissions = permissions;
        this.id = id;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.creator = creator;
        this.updatedBy = updatedBy;
        this.itemCount = itemCount;
        this.roles = roles;
    }
    
    public AnswerBoard(
            String name,
            String description,
            long id) {
        this(name, description, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The unique name of the Collection.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A brief summary of the Collection's contents.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * A list of added user roles for the Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> addedRoles() {
        return (Optional<List<UserRoleSpecification>>) addedRoles;
    }

    /**
     * A list of removed user roles for the Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> removedRoles() {
        return (Optional<List<UserRoleSpecification>>) removedRoles;
    }

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    /**
     * The unique ID of the Answer Board.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createTime() {
        return createTime;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updateTime() {
        return updateTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> creator() {
        return (Optional<Person>) creator;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> updatedBy() {
        return (Optional<Person>) updatedBy;
    }

    /**
     * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
     */
    @JsonIgnore
    public Optional<Long> itemCount() {
        return itemCount;
    }

    /**
     * A list of user roles for the Answer Board.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique name of the Collection.
     */
    public AnswerBoard withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A brief summary of the Collection's contents.
     */
    public AnswerBoard withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A list of added user roles for the Collection.
     */
    public AnswerBoard withAddedRoles(List<UserRoleSpecification> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = Optional.ofNullable(addedRoles);
        return this;
    }

    /**
     * A list of added user roles for the Collection.
     */
    public AnswerBoard withAddedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = addedRoles;
        return this;
    }

    /**
     * A list of removed user roles for the Collection.
     */
    public AnswerBoard withRemovedRoles(List<UserRoleSpecification> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = Optional.ofNullable(removedRoles);
        return this;
    }

    /**
     * A list of removed user roles for the Collection.
     */
    public AnswerBoard withRemovedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = removedRoles;
        return this;
    }

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    public AnswerBoard withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    public AnswerBoard withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    public AnswerBoard withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public AnswerBoard withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * The unique ID of the Answer Board.
     */
    public AnswerBoard withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AnswerBoard withCreateTime(OffsetDateTime createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    public AnswerBoard withCreateTime(Optional<OffsetDateTime> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    public AnswerBoard withUpdateTime(OffsetDateTime updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = Optional.ofNullable(updateTime);
        return this;
    }

    public AnswerBoard withUpdateTime(Optional<OffsetDateTime> updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = updateTime;
        return this;
    }

    public AnswerBoard withCreator(Person creator) {
        Utils.checkNotNull(creator, "creator");
        this.creator = Optional.ofNullable(creator);
        return this;
    }

    public AnswerBoard withCreator(Optional<? extends Person> creator) {
        Utils.checkNotNull(creator, "creator");
        this.creator = creator;
        return this;
    }

    public AnswerBoard withUpdatedBy(Person updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    public AnswerBoard withUpdatedBy(Optional<? extends Person> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
     */
    public AnswerBoard withItemCount(long itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = Optional.ofNullable(itemCount);
        return this;
    }

    /**
     * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
     */
    public AnswerBoard withItemCount(Optional<Long> itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = itemCount;
        return this;
    }

    /**
     * A list of user roles for the Answer Board.
     */
    public AnswerBoard withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of user roles for the Answer Board.
     */
    public AnswerBoard withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnswerBoard other = (AnswerBoard) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.addedRoles, other.addedRoles) &&
            Utils.enhancedDeepEquals(this.removedRoles, other.removedRoles) &&
            Utils.enhancedDeepEquals(this.audienceFilters, other.audienceFilters) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.createTime, other.createTime) &&
            Utils.enhancedDeepEquals(this.updateTime, other.updateTime) &&
            Utils.enhancedDeepEquals(this.creator, other.creator) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.itemCount, other.itemCount) &&
            Utils.enhancedDeepEquals(this.roles, other.roles);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            description,
            addedRoles,
            removedRoles,
            audienceFilters,
            permissions,
            id,
            createTime,
            updateTime,
            creator,
            updatedBy,
            itemCount,
            roles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnswerBoard.class,
                "name", name,
                "description", description,
                "addedRoles", addedRoles,
                "removedRoles", removedRoles,
                "audienceFilters", audienceFilters,
                "permissions", permissions,
                "id", id,
                "createTime", createTime,
                "updateTime", updateTime,
                "creator", creator,
                "updatedBy", updatedBy,
                "itemCount", itemCount,
                "roles", roles);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String description;
 
        private Optional<? extends List<UserRoleSpecification>> addedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> removedRoles = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private Long id;
 
        private Optional<OffsetDateTime> createTime = Optional.empty();
 
        private Optional<OffsetDateTime> updateTime = Optional.empty();
 
        private Optional<? extends Person> creator = Optional.empty();
 
        private Optional<? extends Person> updatedBy = Optional.empty();
 
        private Optional<Long> itemCount = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique name of the Collection.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A brief summary of the Collection's contents.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A list of added user roles for the Collection.
         */
        public Builder addedRoles(List<UserRoleSpecification> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = Optional.ofNullable(addedRoles);
            return this;
        }

        /**
         * A list of added user roles for the Collection.
         */
        public Builder addedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = addedRoles;
            return this;
        }

        /**
         * A list of removed user roles for the Collection.
         */
        public Builder removedRoles(List<UserRoleSpecification> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = Optional.ofNullable(removedRoles);
            return this;
        }

        /**
         * A list of removed user roles for the Collection.
         */
        public Builder removedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = removedRoles;
            return this;
        }

        /**
         * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * The unique ID of the Answer Board.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder createTime(OffsetDateTime createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        public Builder createTime(Optional<OffsetDateTime> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        public Builder updateTime(OffsetDateTime updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        public Builder updateTime(Optional<OffsetDateTime> updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = updateTime;
            return this;
        }

        public Builder creator(Person creator) {
            Utils.checkNotNull(creator, "creator");
            this.creator = Optional.ofNullable(creator);
            return this;
        }

        public Builder creator(Optional<? extends Person> creator) {
            Utils.checkNotNull(creator, "creator");
            this.creator = creator;
            return this;
        }

        public Builder updatedBy(Person updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        public Builder updatedBy(Optional<? extends Person> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
         */
        public Builder itemCount(long itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = Optional.ofNullable(itemCount);
            return this;
        }

        /**
         * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
         */
        public Builder itemCount(Optional<Long> itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = itemCount;
            return this;
        }

        /**
         * A list of user roles for the Answer Board.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of user roles for the Answer Board.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }
        
        public AnswerBoard build() {
            return new AnswerBoard(
                name,
                description,
                addedRoles,
                removedRoles,
                audienceFilters,
                permissions,
                id,
                createTime,
                updateTime,
                creator,
                updatedBy,
                itemCount,
                roles);
        }
    }
}
