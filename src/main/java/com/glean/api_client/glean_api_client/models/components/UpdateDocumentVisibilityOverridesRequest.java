/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class UpdateDocumentVisibilityOverridesRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibilityOverrides")
    private Optional<? extends List<DocumentVisibilityOverride>> visibilityOverrides;

    @JsonCreator
    public UpdateDocumentVisibilityOverridesRequest(
            @JsonProperty("visibilityOverrides") Optional<? extends List<DocumentVisibilityOverride>> visibilityOverrides) {
        Utils.checkNotNull(visibilityOverrides, "visibilityOverrides");
        this.visibilityOverrides = visibilityOverrides;
    }
    
    public UpdateDocumentVisibilityOverridesRequest() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DocumentVisibilityOverride>> visibilityOverrides() {
        return (Optional<List<DocumentVisibilityOverride>>) visibilityOverrides;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UpdateDocumentVisibilityOverridesRequest withVisibilityOverrides(List<DocumentVisibilityOverride> visibilityOverrides) {
        Utils.checkNotNull(visibilityOverrides, "visibilityOverrides");
        this.visibilityOverrides = Optional.ofNullable(visibilityOverrides);
        return this;
    }

    public UpdateDocumentVisibilityOverridesRequest withVisibilityOverrides(Optional<? extends List<DocumentVisibilityOverride>> visibilityOverrides) {
        Utils.checkNotNull(visibilityOverrides, "visibilityOverrides");
        this.visibilityOverrides = visibilityOverrides;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDocumentVisibilityOverridesRequest other = (UpdateDocumentVisibilityOverridesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.visibilityOverrides, other.visibilityOverrides);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            visibilityOverrides);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDocumentVisibilityOverridesRequest.class,
                "visibilityOverrides", visibilityOverrides);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<DocumentVisibilityOverride>> visibilityOverrides = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder visibilityOverrides(List<DocumentVisibilityOverride> visibilityOverrides) {
            Utils.checkNotNull(visibilityOverrides, "visibilityOverrides");
            this.visibilityOverrides = Optional.ofNullable(visibilityOverrides);
            return this;
        }

        public Builder visibilityOverrides(Optional<? extends List<DocumentVisibilityOverride>> visibilityOverrides) {
            Utils.checkNotNull(visibilityOverrides, "visibilityOverrides");
            this.visibilityOverrides = visibilityOverrides;
            return this;
        }
        
        public UpdateDocumentVisibilityOverridesRequest build() {
            return new UpdateDocumentVisibilityOverridesRequest(
                visibilityOverrides);
        }
    }
}
