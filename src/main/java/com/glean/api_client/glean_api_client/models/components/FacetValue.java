/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class FacetValue {

    /**
     * The value that should be set in the FacetFilter when applying this filter to a search request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringValue")
    private Optional<String> stringValue;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerValue")
    private Optional<Long> integerValue;

    /**
     * An optional user-friendly label to display in place of the facet value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayLabel")
    private Optional<String> displayLabel;

    /**
     * Defines how to render an icon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconConfig")
    private Optional<? extends IconConfig> iconConfig;

    @JsonCreator
    public FacetValue(
            @JsonProperty("stringValue") Optional<String> stringValue,
            @JsonProperty("integerValue") Optional<Long> integerValue,
            @JsonProperty("displayLabel") Optional<String> displayLabel,
            @JsonProperty("iconConfig") Optional<? extends IconConfig> iconConfig) {
        Utils.checkNotNull(stringValue, "stringValue");
        Utils.checkNotNull(integerValue, "integerValue");
        Utils.checkNotNull(displayLabel, "displayLabel");
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.stringValue = stringValue;
        this.integerValue = integerValue;
        this.displayLabel = displayLabel;
        this.iconConfig = iconConfig;
    }
    
    public FacetValue() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The value that should be set in the FacetFilter when applying this filter to a search request.
     */
    @JsonIgnore
    public Optional<String> stringValue() {
        return stringValue;
    }

    @JsonIgnore
    public Optional<Long> integerValue() {
        return integerValue;
    }

    /**
     * An optional user-friendly label to display in place of the facet value.
     */
    @JsonIgnore
    public Optional<String> displayLabel() {
        return displayLabel;
    }

    /**
     * Defines how to render an icon
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IconConfig> iconConfig() {
        return (Optional<IconConfig>) iconConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The value that should be set in the FacetFilter when applying this filter to a search request.
     */
    public FacetValue withStringValue(String stringValue) {
        Utils.checkNotNull(stringValue, "stringValue");
        this.stringValue = Optional.ofNullable(stringValue);
        return this;
    }

    /**
     * The value that should be set in the FacetFilter when applying this filter to a search request.
     */
    public FacetValue withStringValue(Optional<String> stringValue) {
        Utils.checkNotNull(stringValue, "stringValue");
        this.stringValue = stringValue;
        return this;
    }

    public FacetValue withIntegerValue(long integerValue) {
        Utils.checkNotNull(integerValue, "integerValue");
        this.integerValue = Optional.ofNullable(integerValue);
        return this;
    }

    public FacetValue withIntegerValue(Optional<Long> integerValue) {
        Utils.checkNotNull(integerValue, "integerValue");
        this.integerValue = integerValue;
        return this;
    }

    /**
     * An optional user-friendly label to display in place of the facet value.
     */
    public FacetValue withDisplayLabel(String displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = Optional.ofNullable(displayLabel);
        return this;
    }

    /**
     * An optional user-friendly label to display in place of the facet value.
     */
    public FacetValue withDisplayLabel(Optional<String> displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = displayLabel;
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public FacetValue withIconConfig(IconConfig iconConfig) {
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.iconConfig = Optional.ofNullable(iconConfig);
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public FacetValue withIconConfig(Optional<? extends IconConfig> iconConfig) {
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.iconConfig = iconConfig;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetValue other = (FacetValue) o;
        return 
            Objects.deepEquals(this.stringValue, other.stringValue) &&
            Objects.deepEquals(this.integerValue, other.integerValue) &&
            Objects.deepEquals(this.displayLabel, other.displayLabel) &&
            Objects.deepEquals(this.iconConfig, other.iconConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            stringValue,
            integerValue,
            displayLabel,
            iconConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetValue.class,
                "stringValue", stringValue,
                "integerValue", integerValue,
                "displayLabel", displayLabel,
                "iconConfig", iconConfig);
    }
    
    public final static class Builder {
 
        private Optional<String> stringValue = Optional.empty();
 
        private Optional<Long> integerValue = Optional.empty();
 
        private Optional<String> displayLabel = Optional.empty();
 
        private Optional<? extends IconConfig> iconConfig = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The value that should be set in the FacetFilter when applying this filter to a search request.
         */
        public Builder stringValue(String stringValue) {
            Utils.checkNotNull(stringValue, "stringValue");
            this.stringValue = Optional.ofNullable(stringValue);
            return this;
        }

        /**
         * The value that should be set in the FacetFilter when applying this filter to a search request.
         */
        public Builder stringValue(Optional<String> stringValue) {
            Utils.checkNotNull(stringValue, "stringValue");
            this.stringValue = stringValue;
            return this;
        }

        public Builder integerValue(long integerValue) {
            Utils.checkNotNull(integerValue, "integerValue");
            this.integerValue = Optional.ofNullable(integerValue);
            return this;
        }

        public Builder integerValue(Optional<Long> integerValue) {
            Utils.checkNotNull(integerValue, "integerValue");
            this.integerValue = integerValue;
            return this;
        }

        /**
         * An optional user-friendly label to display in place of the facet value.
         */
        public Builder displayLabel(String displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = Optional.ofNullable(displayLabel);
            return this;
        }

        /**
         * An optional user-friendly label to display in place of the facet value.
         */
        public Builder displayLabel(Optional<String> displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = displayLabel;
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder iconConfig(IconConfig iconConfig) {
            Utils.checkNotNull(iconConfig, "iconConfig");
            this.iconConfig = Optional.ofNullable(iconConfig);
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder iconConfig(Optional<? extends IconConfig> iconConfig) {
            Utils.checkNotNull(iconConfig, "iconConfig");
            this.iconConfig = iconConfig;
            return this;
        }
        
        public FacetValue build() {
            return new FacetValue(
                stringValue,
                integerValue,
                displayLabel,
                iconConfig);
        }
    }
}
