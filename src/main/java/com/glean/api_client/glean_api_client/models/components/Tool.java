/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;

public class Tool {

    /**
     * Type of tool (READ, WRITE)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ToolType> type;

    /**
     * Unique identifier for the tool
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Human-readable name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    /**
     * LLM friendly description of the tool
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    private Optional<? extends Map<String, ToolParameter>> parameters;

    @JsonCreator
    public Tool(
            @JsonProperty("type") Optional<? extends ToolType> type,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("parameters") Optional<? extends Map<String, ToolParameter>> parameters) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(parameters, "parameters");
        this.type = type;
        this.name = name;
        this.displayName = displayName;
        this.description = description;
        this.parameters = parameters;
    }
    
    public Tool() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Type of tool (READ, WRITE)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ToolType> type() {
        return (Optional<ToolType>) type;
    }

    /**
     * Unique identifier for the tool
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Human-readable name
     */
    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    /**
     * LLM friendly description of the tool
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, ToolParameter>> parameters() {
        return (Optional<Map<String, ToolParameter>>) parameters;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Type of tool (READ, WRITE)
     */
    public Tool withType(ToolType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of tool (READ, WRITE)
     */
    public Tool withType(Optional<? extends ToolType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Unique identifier for the tool
     */
    public Tool withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Unique identifier for the tool
     */
    public Tool withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Human-readable name
     */
    public Tool withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    /**
     * Human-readable name
     */
    public Tool withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * LLM friendly description of the tool
     */
    public Tool withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * LLM friendly description of the tool
     */
    public Tool withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    public Tool withParameters(Map<String, ToolParameter> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = Optional.ofNullable(parameters);
        return this;
    }

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    public Tool withParameters(Optional<? extends Map<String, ToolParameter>> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Tool other = (Tool) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.parameters, other.parameters);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            name,
            displayName,
            description,
            parameters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Tool.class,
                "type", type,
                "name", name,
                "displayName", displayName,
                "description", description,
                "parameters", parameters);
    }
    
    public final static class Builder {
 
        private Optional<? extends ToolType> type = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends Map<String, ToolParameter>> parameters = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of tool (READ, WRITE)
         */
        public Builder type(ToolType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of tool (READ, WRITE)
         */
        public Builder type(Optional<? extends ToolType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Unique identifier for the tool
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Unique identifier for the tool
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Human-readable name
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * Human-readable name
         */
        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * LLM friendly description of the tool
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * LLM friendly description of the tool
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
         */
        public Builder parameters(Map<String, ToolParameter> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        /**
         * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
         */
        public Builder parameters(Optional<? extends Map<String, ToolParameter>> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }
        
        public Tool build() {
            return new Tool(
                type,
                name,
                displayName,
                description,
                parameters);
        }
    }
}
