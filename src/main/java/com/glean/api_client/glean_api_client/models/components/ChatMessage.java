/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * ChatMessage
 * 
 * <p>A message that is rendered as one coherent unit with one given sender.
 */
public class ChatMessage {

    /**
     * Describes the agent that executes the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentConfig")
    private Optional<? extends AgentConfig> agentConfig;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<? extends Author> author;

    /**
     * A list of Citations that were used to generate the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("citations")
    private Optional<? extends List<ChatMessageCitation>> citations;

    /**
     * IDs of files uploaded in the message that are referenced to generate the answer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadedFileIds")
    private Optional<? extends List<String>> uploadedFileIds;

    /**
     * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fragments")
    private Optional<? extends List<ChatMessageFragment>> fragments;

    /**
     * Response timestamp of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ts")
    private Optional<String> ts;

    /**
     * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageId")
    private Optional<String> messageId;

    /**
     * Opaque tracking token generated server-side.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageTrackingToken")
    private Optional<String> messageTrackingToken;

    /**
     * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageType")
    private Optional<? extends MessageType> messageType;

    /**
     * Signals there are additional response fragments incoming.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasMoreFragments")
    @Deprecated
    private Optional<Boolean> hasMoreFragments;

    @JsonCreator
    public ChatMessage(
            @JsonProperty("agentConfig") Optional<? extends AgentConfig> agentConfig,
            @JsonProperty("author") Optional<? extends Author> author,
            @JsonProperty("citations") Optional<? extends List<ChatMessageCitation>> citations,
            @JsonProperty("uploadedFileIds") Optional<? extends List<String>> uploadedFileIds,
            @JsonProperty("fragments") Optional<? extends List<ChatMessageFragment>> fragments,
            @JsonProperty("ts") Optional<String> ts,
            @JsonProperty("messageId") Optional<String> messageId,
            @JsonProperty("messageTrackingToken") Optional<String> messageTrackingToken,
            @JsonProperty("messageType") Optional<? extends MessageType> messageType,
            @JsonProperty("hasMoreFragments") Optional<Boolean> hasMoreFragments) {
        Utils.checkNotNull(agentConfig, "agentConfig");
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(citations, "citations");
        Utils.checkNotNull(uploadedFileIds, "uploadedFileIds");
        Utils.checkNotNull(fragments, "fragments");
        Utils.checkNotNull(ts, "ts");
        Utils.checkNotNull(messageId, "messageId");
        Utils.checkNotNull(messageTrackingToken, "messageTrackingToken");
        Utils.checkNotNull(messageType, "messageType");
        Utils.checkNotNull(hasMoreFragments, "hasMoreFragments");
        this.agentConfig = agentConfig;
        this.author = author;
        this.citations = citations;
        this.uploadedFileIds = uploadedFileIds;
        this.fragments = fragments;
        this.ts = ts;
        this.messageId = messageId;
        this.messageTrackingToken = messageTrackingToken;
        this.messageType = messageType;
        this.hasMoreFragments = hasMoreFragments;
    }
    
    public ChatMessage() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Describes the agent that executes the request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AgentConfig> agentConfig() {
        return (Optional<AgentConfig>) agentConfig;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Author> author() {
        return (Optional<Author>) author;
    }

    /**
     * A list of Citations that were used to generate the response.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ChatMessageCitation>> citations() {
        return (Optional<List<ChatMessageCitation>>) citations;
    }

    /**
     * IDs of files uploaded in the message that are referenced to generate the answer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> uploadedFileIds() {
        return (Optional<List<String>>) uploadedFileIds;
    }

    /**
     * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ChatMessageFragment>> fragments() {
        return (Optional<List<ChatMessageFragment>>) fragments;
    }

    /**
     * Response timestamp of the message.
     */
    @JsonIgnore
    public Optional<String> ts() {
        return ts;
    }

    /**
     * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
     */
    @JsonIgnore
    public Optional<String> messageId() {
        return messageId;
    }

    /**
     * Opaque tracking token generated server-side.
     */
    @JsonIgnore
    public Optional<String> messageTrackingToken() {
        return messageTrackingToken;
    }

    /**
     * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageType> messageType() {
        return (Optional<MessageType>) messageType;
    }

    /**
     * Signals there are additional response fragments incoming.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> hasMoreFragments() {
        return hasMoreFragments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the agent that executes the request.
     */
    public ChatMessage withAgentConfig(AgentConfig agentConfig) {
        Utils.checkNotNull(agentConfig, "agentConfig");
        this.agentConfig = Optional.ofNullable(agentConfig);
        return this;
    }

    /**
     * Describes the agent that executes the request.
     */
    public ChatMessage withAgentConfig(Optional<? extends AgentConfig> agentConfig) {
        Utils.checkNotNull(agentConfig, "agentConfig");
        this.agentConfig = agentConfig;
        return this;
    }

    public ChatMessage withAuthor(Author author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    public ChatMessage withAuthor(Optional<? extends Author> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    /**
     * A list of Citations that were used to generate the response.
     */
    public ChatMessage withCitations(List<ChatMessageCitation> citations) {
        Utils.checkNotNull(citations, "citations");
        this.citations = Optional.ofNullable(citations);
        return this;
    }

    /**
     * A list of Citations that were used to generate the response.
     */
    public ChatMessage withCitations(Optional<? extends List<ChatMessageCitation>> citations) {
        Utils.checkNotNull(citations, "citations");
        this.citations = citations;
        return this;
    }

    /**
     * IDs of files uploaded in the message that are referenced to generate the answer.
     */
    public ChatMessage withUploadedFileIds(List<String> uploadedFileIds) {
        Utils.checkNotNull(uploadedFileIds, "uploadedFileIds");
        this.uploadedFileIds = Optional.ofNullable(uploadedFileIds);
        return this;
    }

    /**
     * IDs of files uploaded in the message that are referenced to generate the answer.
     */
    public ChatMessage withUploadedFileIds(Optional<? extends List<String>> uploadedFileIds) {
        Utils.checkNotNull(uploadedFileIds, "uploadedFileIds");
        this.uploadedFileIds = uploadedFileIds;
        return this;
    }

    /**
     * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
     */
    public ChatMessage withFragments(List<ChatMessageFragment> fragments) {
        Utils.checkNotNull(fragments, "fragments");
        this.fragments = Optional.ofNullable(fragments);
        return this;
    }

    /**
     * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
     */
    public ChatMessage withFragments(Optional<? extends List<ChatMessageFragment>> fragments) {
        Utils.checkNotNull(fragments, "fragments");
        this.fragments = fragments;
        return this;
    }

    /**
     * Response timestamp of the message.
     */
    public ChatMessage withTs(String ts) {
        Utils.checkNotNull(ts, "ts");
        this.ts = Optional.ofNullable(ts);
        return this;
    }

    /**
     * Response timestamp of the message.
     */
    public ChatMessage withTs(Optional<String> ts) {
        Utils.checkNotNull(ts, "ts");
        this.ts = ts;
        return this;
    }

    /**
     * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
     */
    public ChatMessage withMessageId(String messageId) {
        Utils.checkNotNull(messageId, "messageId");
        this.messageId = Optional.ofNullable(messageId);
        return this;
    }

    /**
     * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
     */
    public ChatMessage withMessageId(Optional<String> messageId) {
        Utils.checkNotNull(messageId, "messageId");
        this.messageId = messageId;
        return this;
    }

    /**
     * Opaque tracking token generated server-side.
     */
    public ChatMessage withMessageTrackingToken(String messageTrackingToken) {
        Utils.checkNotNull(messageTrackingToken, "messageTrackingToken");
        this.messageTrackingToken = Optional.ofNullable(messageTrackingToken);
        return this;
    }

    /**
     * Opaque tracking token generated server-side.
     */
    public ChatMessage withMessageTrackingToken(Optional<String> messageTrackingToken) {
        Utils.checkNotNull(messageTrackingToken, "messageTrackingToken");
        this.messageTrackingToken = messageTrackingToken;
        return this;
    }

    /**
     * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
     */
    public ChatMessage withMessageType(MessageType messageType) {
        Utils.checkNotNull(messageType, "messageType");
        this.messageType = Optional.ofNullable(messageType);
        return this;
    }

    /**
     * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
     */
    public ChatMessage withMessageType(Optional<? extends MessageType> messageType) {
        Utils.checkNotNull(messageType, "messageType");
        this.messageType = messageType;
        return this;
    }

    /**
     * Signals there are additional response fragments incoming.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ChatMessage withHasMoreFragments(boolean hasMoreFragments) {
        Utils.checkNotNull(hasMoreFragments, "hasMoreFragments");
        this.hasMoreFragments = Optional.ofNullable(hasMoreFragments);
        return this;
    }

    /**
     * Signals there are additional response fragments incoming.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ChatMessage withHasMoreFragments(Optional<Boolean> hasMoreFragments) {
        Utils.checkNotNull(hasMoreFragments, "hasMoreFragments");
        this.hasMoreFragments = hasMoreFragments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatMessage other = (ChatMessage) o;
        return 
            Utils.enhancedDeepEquals(this.agentConfig, other.agentConfig) &&
            Utils.enhancedDeepEquals(this.author, other.author) &&
            Utils.enhancedDeepEquals(this.citations, other.citations) &&
            Utils.enhancedDeepEquals(this.uploadedFileIds, other.uploadedFileIds) &&
            Utils.enhancedDeepEquals(this.fragments, other.fragments) &&
            Utils.enhancedDeepEquals(this.ts, other.ts) &&
            Utils.enhancedDeepEquals(this.messageId, other.messageId) &&
            Utils.enhancedDeepEquals(this.messageTrackingToken, other.messageTrackingToken) &&
            Utils.enhancedDeepEquals(this.messageType, other.messageType) &&
            Utils.enhancedDeepEquals(this.hasMoreFragments, other.hasMoreFragments);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            agentConfig,
            author,
            citations,
            uploadedFileIds,
            fragments,
            ts,
            messageId,
            messageTrackingToken,
            messageType,
            hasMoreFragments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatMessage.class,
                "agentConfig", agentConfig,
                "author", author,
                "citations", citations,
                "uploadedFileIds", uploadedFileIds,
                "fragments", fragments,
                "ts", ts,
                "messageId", messageId,
                "messageTrackingToken", messageTrackingToken,
                "messageType", messageType,
                "hasMoreFragments", hasMoreFragments);
    }
    
    public final static class Builder {
 
        private Optional<? extends AgentConfig> agentConfig = Optional.empty();
 
        private Optional<? extends Author> author;
 
        private Optional<? extends List<ChatMessageCitation>> citations = Optional.empty();
 
        private Optional<? extends List<String>> uploadedFileIds = Optional.empty();
 
        private Optional<? extends List<ChatMessageFragment>> fragments = Optional.empty();
 
        private Optional<String> ts = Optional.empty();
 
        private Optional<String> messageId = Optional.empty();
 
        private Optional<String> messageTrackingToken = Optional.empty();
 
        private Optional<? extends MessageType> messageType;
 
        @Deprecated
        private Optional<Boolean> hasMoreFragments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the agent that executes the request.
         */
        public Builder agentConfig(AgentConfig agentConfig) {
            Utils.checkNotNull(agentConfig, "agentConfig");
            this.agentConfig = Optional.ofNullable(agentConfig);
            return this;
        }

        /**
         * Describes the agent that executes the request.
         */
        public Builder agentConfig(Optional<? extends AgentConfig> agentConfig) {
            Utils.checkNotNull(agentConfig, "agentConfig");
            this.agentConfig = agentConfig;
            return this;
        }

        public Builder author(Author author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        public Builder author(Optional<? extends Author> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        /**
         * A list of Citations that were used to generate the response.
         */
        public Builder citations(List<ChatMessageCitation> citations) {
            Utils.checkNotNull(citations, "citations");
            this.citations = Optional.ofNullable(citations);
            return this;
        }

        /**
         * A list of Citations that were used to generate the response.
         */
        public Builder citations(Optional<? extends List<ChatMessageCitation>> citations) {
            Utils.checkNotNull(citations, "citations");
            this.citations = citations;
            return this;
        }

        /**
         * IDs of files uploaded in the message that are referenced to generate the answer.
         */
        public Builder uploadedFileIds(List<String> uploadedFileIds) {
            Utils.checkNotNull(uploadedFileIds, "uploadedFileIds");
            this.uploadedFileIds = Optional.ofNullable(uploadedFileIds);
            return this;
        }

        /**
         * IDs of files uploaded in the message that are referenced to generate the answer.
         */
        public Builder uploadedFileIds(Optional<? extends List<String>> uploadedFileIds) {
            Utils.checkNotNull(uploadedFileIds, "uploadedFileIds");
            this.uploadedFileIds = uploadedFileIds;
            return this;
        }

        /**
         * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
         */
        public Builder fragments(List<ChatMessageFragment> fragments) {
            Utils.checkNotNull(fragments, "fragments");
            this.fragments = Optional.ofNullable(fragments);
            return this;
        }

        /**
         * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
         */
        public Builder fragments(Optional<? extends List<ChatMessageFragment>> fragments) {
            Utils.checkNotNull(fragments, "fragments");
            this.fragments = fragments;
            return this;
        }

        /**
         * Response timestamp of the message.
         */
        public Builder ts(String ts) {
            Utils.checkNotNull(ts, "ts");
            this.ts = Optional.ofNullable(ts);
            return this;
        }

        /**
         * Response timestamp of the message.
         */
        public Builder ts(Optional<String> ts) {
            Utils.checkNotNull(ts, "ts");
            this.ts = ts;
            return this;
        }

        /**
         * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
         */
        public Builder messageId(String messageId) {
            Utils.checkNotNull(messageId, "messageId");
            this.messageId = Optional.ofNullable(messageId);
            return this;
        }

        /**
         * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
         */
        public Builder messageId(Optional<String> messageId) {
            Utils.checkNotNull(messageId, "messageId");
            this.messageId = messageId;
            return this;
        }

        /**
         * Opaque tracking token generated server-side.
         */
        public Builder messageTrackingToken(String messageTrackingToken) {
            Utils.checkNotNull(messageTrackingToken, "messageTrackingToken");
            this.messageTrackingToken = Optional.ofNullable(messageTrackingToken);
            return this;
        }

        /**
         * Opaque tracking token generated server-side.
         */
        public Builder messageTrackingToken(Optional<String> messageTrackingToken) {
            Utils.checkNotNull(messageTrackingToken, "messageTrackingToken");
            this.messageTrackingToken = messageTrackingToken;
            return this;
        }

        /**
         * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
         */
        public Builder messageType(MessageType messageType) {
            Utils.checkNotNull(messageType, "messageType");
            this.messageType = Optional.ofNullable(messageType);
            return this;
        }

        /**
         * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
         */
        public Builder messageType(Optional<? extends MessageType> messageType) {
            Utils.checkNotNull(messageType, "messageType");
            this.messageType = messageType;
            return this;
        }

        /**
         * Signals there are additional response fragments incoming.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder hasMoreFragments(boolean hasMoreFragments) {
            Utils.checkNotNull(hasMoreFragments, "hasMoreFragments");
            this.hasMoreFragments = Optional.ofNullable(hasMoreFragments);
            return this;
        }

        /**
         * Signals there are additional response fragments incoming.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder hasMoreFragments(Optional<Boolean> hasMoreFragments) {
            Utils.checkNotNull(hasMoreFragments, "hasMoreFragments");
            this.hasMoreFragments = hasMoreFragments;
            return this;
        }
        
        public ChatMessage build() {
            if (author == null) {
                author = _SINGLETON_VALUE_Author.value();
            }
            if (messageType == null) {
                messageType = _SINGLETON_VALUE_MessageType.value();
            }
            return new ChatMessage(
                agentConfig,
                author,
                citations,
                uploadedFileIds,
                fragments,
                ts,
                messageId,
                messageTrackingToken,
                messageType,
                hasMoreFragments);
        }

        private static final LazySingletonValue<Optional<? extends Author>> _SINGLETON_VALUE_Author =
                new LazySingletonValue<>(
                        "author",
                        "\"USER\"",
                        new TypeReference<Optional<? extends Author>>() {});

        private static final LazySingletonValue<Optional<? extends MessageType>> _SINGLETON_VALUE_MessageType =
                new LazySingletonValue<>(
                        "messageType",
                        "\"CONTENT\"",
                        new TypeReference<Optional<? extends MessageType>>() {});
    }
}
