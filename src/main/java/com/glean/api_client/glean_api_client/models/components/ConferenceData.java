/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class ConferenceData {

    @JsonProperty("provider")
    private Provider provider;

    /**
     * A permalink for the conference.
     */
    @JsonProperty("uri")
    private String uri;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends ConferenceDataSource> source;

    @JsonCreator
    public ConferenceData(
            @JsonProperty("provider") Provider provider,
            @JsonProperty("uri") String uri,
            @JsonProperty("source") Optional<? extends ConferenceDataSource> source) {
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(source, "source");
        this.provider = provider;
        this.uri = uri;
        this.source = source;
    }
    
    public ConferenceData(
            Provider provider,
            String uri) {
        this(provider, uri, Optional.empty());
    }

    @JsonIgnore
    public Provider provider() {
        return provider;
    }

    /**
     * A permalink for the conference.
     */
    @JsonIgnore
    public String uri() {
        return uri;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConferenceDataSource> source() {
        return (Optional<ConferenceDataSource>) source;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ConferenceData withProvider(Provider provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * A permalink for the conference.
     */
    public ConferenceData withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    public ConferenceData withSource(ConferenceDataSource source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    public ConferenceData withSource(Optional<? extends ConferenceDataSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConferenceData other = (ConferenceData) o;
        return 
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.uri, other.uri) &&
            Utils.enhancedDeepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            provider,
            uri,
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConferenceData.class,
                "provider", provider,
                "uri", uri,
                "source", source);
    }
    
    public final static class Builder {
 
        private Provider provider;
 
        private String uri;
 
        private Optional<? extends ConferenceDataSource> source = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder provider(Provider provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        /**
         * A permalink for the conference.
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        public Builder source(ConferenceDataSource source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<? extends ConferenceDataSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public ConferenceData build() {
            return new ConferenceData(
                provider,
                uri,
                source);
        }
    }
}
