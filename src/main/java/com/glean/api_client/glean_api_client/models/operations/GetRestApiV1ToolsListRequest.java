/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetRestApiV1ToolsListRequest {

    /**
     * Optional array of tool names to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=toolNames")
    private Optional<? extends List<String>> toolNames;

    @JsonCreator
    public GetRestApiV1ToolsListRequest(
            Optional<? extends List<String>> toolNames) {
        Utils.checkNotNull(toolNames, "toolNames");
        this.toolNames = toolNames;
    }
    
    public GetRestApiV1ToolsListRequest() {
        this(Optional.empty());
    }

    /**
     * Optional array of tool names to filter by
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> toolNames() {
        return (Optional<List<String>>) toolNames;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Optional array of tool names to filter by
     */
    public GetRestApiV1ToolsListRequest withToolNames(List<String> toolNames) {
        Utils.checkNotNull(toolNames, "toolNames");
        this.toolNames = Optional.ofNullable(toolNames);
        return this;
    }

    /**
     * Optional array of tool names to filter by
     */
    public GetRestApiV1ToolsListRequest withToolNames(Optional<? extends List<String>> toolNames) {
        Utils.checkNotNull(toolNames, "toolNames");
        this.toolNames = toolNames;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRestApiV1ToolsListRequest other = (GetRestApiV1ToolsListRequest) o;
        return 
            Objects.deepEquals(this.toolNames, other.toolNames);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            toolNames);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRestApiV1ToolsListRequest.class,
                "toolNames", toolNames);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> toolNames = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optional array of tool names to filter by
         */
        public Builder toolNames(List<String> toolNames) {
            Utils.checkNotNull(toolNames, "toolNames");
            this.toolNames = Optional.ofNullable(toolNames);
            return this;
        }

        /**
         * Optional array of tool names to filter by
         */
        public Builder toolNames(Optional<? extends List<String>> toolNames) {
            Utils.checkNotNull(toolNames, "toolNames");
            this.toolNames = toolNames;
            return this;
        }
        
        public GetRestApiV1ToolsListRequest build() {
            return new GetRestApiV1ToolsListRequest(
                toolNames);
        }
    }
}
