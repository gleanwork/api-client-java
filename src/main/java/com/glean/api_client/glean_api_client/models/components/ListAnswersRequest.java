/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ListAnswersRequest {

    /**
     * The Answer Board Id to list answers on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boardId")
    private Optional<Long> boardId;

    @JsonCreator
    public ListAnswersRequest(
            @JsonProperty("boardId") Optional<Long> boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = boardId;
    }
    
    public ListAnswersRequest() {
        this(Optional.empty());
    }

    /**
     * The Answer Board Id to list answers on.
     */
    @JsonIgnore
    public Optional<Long> boardId() {
        return boardId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The Answer Board Id to list answers on.
     */
    public ListAnswersRequest withBoardId(long boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = Optional.ofNullable(boardId);
        return this;
    }

    /**
     * The Answer Board Id to list answers on.
     */
    public ListAnswersRequest withBoardId(Optional<Long> boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = boardId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAnswersRequest other = (ListAnswersRequest) o;
        return 
            Objects.deepEquals(this.boardId, other.boardId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            boardId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAnswersRequest.class,
                "boardId", boardId);
    }
    
    public final static class Builder {
 
        private Optional<Long> boardId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Answer Board Id to list answers on.
         */
        public Builder boardId(long boardId) {
            Utils.checkNotNull(boardId, "boardId");
            this.boardId = Optional.ofNullable(boardId);
            return this;
        }

        /**
         * The Answer Board Id to list answers on.
         */
        public Builder boardId(Optional<Long> boardId) {
            Utils.checkNotNull(boardId, "boardId");
            this.boardId = boardId;
            return this;
        }
        
        public ListAnswersRequest build() {
            return new ListAnswersRequest(
                boardId);
        }
    }
}
