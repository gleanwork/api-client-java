/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * BulkIndexMembershipsRequest
 * 
 * <p>Describes the request body for the /bulkindexmemberships API call
 */
public class BulkIndexMembershipsRequest {

    /**
     * Unique id that must be used for this instance of datasource group memberships upload
     */
    @JsonProperty("uploadId")
    private String uploadId;

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstPage")
    private Optional<Boolean> isFirstPage;

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLastPage")
    private Optional<Boolean> isLastPage;

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceRestartUpload")
    private Optional<Boolean> forceRestartUpload;

    /**
     * datasource of the memberships
     */
    @JsonProperty("datasource")
    private String datasource;

    /**
     * group who's memberships are specified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    private Optional<String> group;

    /**
     * batch of memberships for the group
     */
    @JsonProperty("memberships")
    private List<DatasourceBulkMembershipDefinition> memberships;

    @JsonCreator
    public BulkIndexMembershipsRequest(
            @JsonProperty("uploadId") String uploadId,
            @JsonProperty("isFirstPage") Optional<Boolean> isFirstPage,
            @JsonProperty("isLastPage") Optional<Boolean> isLastPage,
            @JsonProperty("forceRestartUpload") Optional<Boolean> forceRestartUpload,
            @JsonProperty("datasource") String datasource,
            @JsonProperty("group") Optional<String> group,
            @JsonProperty("memberships") List<DatasourceBulkMembershipDefinition> memberships) {
        Utils.checkNotNull(uploadId, "uploadId");
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        Utils.checkNotNull(isLastPage, "isLastPage");
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(group, "group");
        Utils.checkNotNull(memberships, "memberships");
        this.uploadId = uploadId;
        this.isFirstPage = isFirstPage;
        this.isLastPage = isLastPage;
        this.forceRestartUpload = forceRestartUpload;
        this.datasource = datasource;
        this.group = group;
        this.memberships = memberships;
    }
    
    public BulkIndexMembershipsRequest(
            String uploadId,
            String datasource,
            List<DatasourceBulkMembershipDefinition> memberships) {
        this(uploadId, Optional.empty(), Optional.empty(), Optional.empty(), datasource, Optional.empty(), memberships);
    }

    /**
     * Unique id that must be used for this instance of datasource group memberships upload
     */
    @JsonIgnore
    public String uploadId() {
        return uploadId;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isFirstPage() {
        return isFirstPage;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isLastPage() {
        return isLastPage;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonIgnore
    public Optional<Boolean> forceRestartUpload() {
        return forceRestartUpload;
    }

    /**
     * datasource of the memberships
     */
    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * group who's memberships are specified
     */
    @JsonIgnore
    public Optional<String> group() {
        return group;
    }

    /**
     * batch of memberships for the group
     */
    @JsonIgnore
    public List<DatasourceBulkMembershipDefinition> memberships() {
        return memberships;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique id that must be used for this instance of datasource group memberships upload
     */
    public BulkIndexMembershipsRequest withUploadId(String uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = uploadId;
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexMembershipsRequest withIsFirstPage(boolean isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = Optional.ofNullable(isFirstPage);
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexMembershipsRequest withIsFirstPage(Optional<Boolean> isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = isFirstPage;
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexMembershipsRequest withIsLastPage(boolean isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = Optional.ofNullable(isLastPage);
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexMembershipsRequest withIsLastPage(Optional<Boolean> isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = isLastPage;
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexMembershipsRequest withForceRestartUpload(boolean forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexMembershipsRequest withForceRestartUpload(Optional<Boolean> forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = forceRestartUpload;
        return this;
    }

    /**
     * datasource of the memberships
     */
    public BulkIndexMembershipsRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * group who's memberships are specified
     */
    public BulkIndexMembershipsRequest withGroup(String group) {
        Utils.checkNotNull(group, "group");
        this.group = Optional.ofNullable(group);
        return this;
    }

    /**
     * group who's memberships are specified
     */
    public BulkIndexMembershipsRequest withGroup(Optional<String> group) {
        Utils.checkNotNull(group, "group");
        this.group = group;
        return this;
    }

    /**
     * batch of memberships for the group
     */
    public BulkIndexMembershipsRequest withMemberships(List<DatasourceBulkMembershipDefinition> memberships) {
        Utils.checkNotNull(memberships, "memberships");
        this.memberships = memberships;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkIndexMembershipsRequest other = (BulkIndexMembershipsRequest) o;
        return 
            Objects.deepEquals(this.uploadId, other.uploadId) &&
            Objects.deepEquals(this.isFirstPage, other.isFirstPage) &&
            Objects.deepEquals(this.isLastPage, other.isLastPage) &&
            Objects.deepEquals(this.forceRestartUpload, other.forceRestartUpload) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.group, other.group) &&
            Objects.deepEquals(this.memberships, other.memberships);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uploadId,
            isFirstPage,
            isLastPage,
            forceRestartUpload,
            datasource,
            group,
            memberships);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkIndexMembershipsRequest.class,
                "uploadId", uploadId,
                "isFirstPage", isFirstPage,
                "isLastPage", isLastPage,
                "forceRestartUpload", forceRestartUpload,
                "datasource", datasource,
                "group", group,
                "memberships", memberships);
    }
    
    public final static class Builder {
 
        private String uploadId;
 
        private Optional<Boolean> isFirstPage = Optional.empty();
 
        private Optional<Boolean> isLastPage = Optional.empty();
 
        private Optional<Boolean> forceRestartUpload = Optional.empty();
 
        private String datasource;
 
        private Optional<String> group = Optional.empty();
 
        private List<DatasourceBulkMembershipDefinition> memberships;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique id that must be used for this instance of datasource group memberships upload
         */
        public Builder uploadId(String uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = uploadId;
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(boolean isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = Optional.ofNullable(isFirstPage);
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(Optional<Boolean> isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = isFirstPage;
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(boolean isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = Optional.ofNullable(isLastPage);
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(Optional<Boolean> isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = isLastPage;
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(boolean forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(Optional<Boolean> forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = forceRestartUpload;
            return this;
        }

        /**
         * datasource of the memberships
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * group who's memberships are specified
         */
        public Builder group(String group) {
            Utils.checkNotNull(group, "group");
            this.group = Optional.ofNullable(group);
            return this;
        }

        /**
         * group who's memberships are specified
         */
        public Builder group(Optional<String> group) {
            Utils.checkNotNull(group, "group");
            this.group = group;
            return this;
        }

        /**
         * batch of memberships for the group
         */
        public Builder memberships(List<DatasourceBulkMembershipDefinition> memberships) {
            Utils.checkNotNull(memberships, "memberships");
            this.memberships = memberships;
            return this;
        }
        
        public BulkIndexMembershipsRequest build() {
            return new BulkIndexMembershipsRequest(
                uploadId,
                isFirstPage,
                isLastPage,
                forceRestartUpload,
                datasource,
                group,
                memberships);
        }
    }
}
