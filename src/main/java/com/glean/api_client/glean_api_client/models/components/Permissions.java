/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Permissions
 * 
 * <p>Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
 * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
 */
public class Permissions {

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canAdminSearch")
    private Optional<Boolean> canAdminSearch;

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canAdminClientApiGlobalTokens")
    private Optional<Boolean> canAdminClientApiGlobalTokens;

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canDlp")
    private Optional<Boolean> canDlp;

    /**
     * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("read")
    private Optional<? extends Map<String, List<ReadPermission>>> read;

    /**
     * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("write")
    private Optional<? extends Map<String, List<WritePermission>>> write;

    /**
     * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grant")
    private Optional<? extends Map<String, List<GrantPermission>>> grant;

    /**
     * The roleId of the canonical role a user has. The displayName is equal to the roleId.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private Optional<String> role;

    /**
     * The roleIds of the roles a user has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<String>> roles;

    @JsonCreator
    public Permissions(
            @JsonProperty("canAdminSearch") Optional<Boolean> canAdminSearch,
            @JsonProperty("canAdminClientApiGlobalTokens") Optional<Boolean> canAdminClientApiGlobalTokens,
            @JsonProperty("canDlp") Optional<Boolean> canDlp,
            @JsonProperty("read") Optional<? extends Map<String, List<ReadPermission>>> read,
            @JsonProperty("write") Optional<? extends Map<String, List<WritePermission>>> write,
            @JsonProperty("grant") Optional<? extends Map<String, List<GrantPermission>>> grant,
            @JsonProperty("role") Optional<String> role,
            @JsonProperty("roles") Optional<? extends List<String>> roles) {
        Utils.checkNotNull(canAdminSearch, "canAdminSearch");
        Utils.checkNotNull(canAdminClientApiGlobalTokens, "canAdminClientApiGlobalTokens");
        Utils.checkNotNull(canDlp, "canDlp");
        Utils.checkNotNull(read, "read");
        Utils.checkNotNull(write, "write");
        Utils.checkNotNull(grant, "grant");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(roles, "roles");
        this.canAdminSearch = canAdminSearch;
        this.canAdminClientApiGlobalTokens = canAdminClientApiGlobalTokens;
        this.canDlp = canDlp;
        this.read = read;
        this.write = write;
        this.grant = grant;
        this.role = role;
        this.roles = roles;
    }
    
    public Permissions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
     */
    @JsonIgnore
    public Optional<Boolean> canAdminSearch() {
        return canAdminSearch;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
     */
    @JsonIgnore
    public Optional<Boolean> canAdminClientApiGlobalTokens() {
        return canAdminClientApiGlobalTokens;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
     */
    @JsonIgnore
    public Optional<Boolean> canDlp() {
        return canDlp;
    }

    /**
     * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<ReadPermission>>> read() {
        return (Optional<Map<String, List<ReadPermission>>>) read;
    }

    /**
     * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<WritePermission>>> write() {
        return (Optional<Map<String, List<WritePermission>>>) write;
    }

    /**
     * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<GrantPermission>>> grant() {
        return (Optional<Map<String, List<GrantPermission>>>) grant;
    }

    /**
     * The roleId of the canonical role a user has. The displayName is equal to the roleId.
     */
    @JsonIgnore
    public Optional<String> role() {
        return role;
    }

    /**
     * The roleIds of the roles a user has.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> roles() {
        return (Optional<List<String>>) roles;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
     */
    public Permissions withCanAdminSearch(boolean canAdminSearch) {
        Utils.checkNotNull(canAdminSearch, "canAdminSearch");
        this.canAdminSearch = Optional.ofNullable(canAdminSearch);
        return this;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
     */
    public Permissions withCanAdminSearch(Optional<Boolean> canAdminSearch) {
        Utils.checkNotNull(canAdminSearch, "canAdminSearch");
        this.canAdminSearch = canAdminSearch;
        return this;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
     */
    public Permissions withCanAdminClientApiGlobalTokens(boolean canAdminClientApiGlobalTokens) {
        Utils.checkNotNull(canAdminClientApiGlobalTokens, "canAdminClientApiGlobalTokens");
        this.canAdminClientApiGlobalTokens = Optional.ofNullable(canAdminClientApiGlobalTokens);
        return this;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
     */
    public Permissions withCanAdminClientApiGlobalTokens(Optional<Boolean> canAdminClientApiGlobalTokens) {
        Utils.checkNotNull(canAdminClientApiGlobalTokens, "canAdminClientApiGlobalTokens");
        this.canAdminClientApiGlobalTokens = canAdminClientApiGlobalTokens;
        return this;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
     */
    public Permissions withCanDlp(boolean canDlp) {
        Utils.checkNotNull(canDlp, "canDlp");
        this.canDlp = Optional.ofNullable(canDlp);
        return this;
    }

    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
     */
    public Permissions withCanDlp(Optional<Boolean> canDlp) {
        Utils.checkNotNull(canDlp, "canDlp");
        this.canDlp = canDlp;
        return this;
    }

    /**
     * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    public Permissions withRead(Map<String, List<ReadPermission>> read) {
        Utils.checkNotNull(read, "read");
        this.read = Optional.ofNullable(read);
        return this;
    }

    /**
     * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    public Permissions withRead(Optional<? extends Map<String, List<ReadPermission>>> read) {
        Utils.checkNotNull(read, "read");
        this.read = read;
        return this;
    }

    /**
     * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    public Permissions withWrite(Map<String, List<WritePermission>> write) {
        Utils.checkNotNull(write, "write");
        this.write = Optional.ofNullable(write);
        return this;
    }

    /**
     * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    public Permissions withWrite(Optional<? extends Map<String, List<WritePermission>>> write) {
        Utils.checkNotNull(write, "write");
        this.write = write;
        return this;
    }

    /**
     * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    public Permissions withGrant(Map<String, List<GrantPermission>> grant) {
        Utils.checkNotNull(grant, "grant");
        this.grant = Optional.ofNullable(grant);
        return this;
    }

    /**
     * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    public Permissions withGrant(Optional<? extends Map<String, List<GrantPermission>>> grant) {
        Utils.checkNotNull(grant, "grant");
        this.grant = grant;
        return this;
    }

    /**
     * The roleId of the canonical role a user has. The displayName is equal to the roleId.
     */
    public Permissions withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    /**
     * The roleId of the canonical role a user has. The displayName is equal to the roleId.
     */
    public Permissions withRole(Optional<String> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    /**
     * The roleIds of the roles a user has.
     */
    public Permissions withRoles(List<String> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * The roleIds of the roles a user has.
     */
    public Permissions withRoles(Optional<? extends List<String>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Permissions other = (Permissions) o;
        return 
            Utils.enhancedDeepEquals(this.canAdminSearch, other.canAdminSearch) &&
            Utils.enhancedDeepEquals(this.canAdminClientApiGlobalTokens, other.canAdminClientApiGlobalTokens) &&
            Utils.enhancedDeepEquals(this.canDlp, other.canDlp) &&
            Utils.enhancedDeepEquals(this.read, other.read) &&
            Utils.enhancedDeepEquals(this.write, other.write) &&
            Utils.enhancedDeepEquals(this.grant, other.grant) &&
            Utils.enhancedDeepEquals(this.role, other.role) &&
            Utils.enhancedDeepEquals(this.roles, other.roles);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            canAdminSearch,
            canAdminClientApiGlobalTokens,
            canDlp,
            read,
            write,
            grant,
            role,
            roles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Permissions.class,
                "canAdminSearch", canAdminSearch,
                "canAdminClientApiGlobalTokens", canAdminClientApiGlobalTokens,
                "canDlp", canDlp,
                "read", read,
                "write", write,
                "grant", grant,
                "role", role,
                "roles", roles);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> canAdminSearch = Optional.empty();
 
        private Optional<Boolean> canAdminClientApiGlobalTokens = Optional.empty();
 
        private Optional<Boolean> canDlp = Optional.empty();
 
        private Optional<? extends Map<String, List<ReadPermission>>> read = Optional.empty();
 
        private Optional<? extends Map<String, List<WritePermission>>> write = Optional.empty();
 
        private Optional<? extends Map<String, List<GrantPermission>>> grant = Optional.empty();
 
        private Optional<String> role = Optional.empty();
 
        private Optional<? extends List<String>> roles = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
         */
        public Builder canAdminSearch(boolean canAdminSearch) {
            Utils.checkNotNull(canAdminSearch, "canAdminSearch");
            this.canAdminSearch = Optional.ofNullable(canAdminSearch);
            return this;
        }

        /**
         * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
         */
        public Builder canAdminSearch(Optional<Boolean> canAdminSearch) {
            Utils.checkNotNull(canAdminSearch, "canAdminSearch");
            this.canAdminSearch = canAdminSearch;
            return this;
        }

        /**
         * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
         */
        public Builder canAdminClientApiGlobalTokens(boolean canAdminClientApiGlobalTokens) {
            Utils.checkNotNull(canAdminClientApiGlobalTokens, "canAdminClientApiGlobalTokens");
            this.canAdminClientApiGlobalTokens = Optional.ofNullable(canAdminClientApiGlobalTokens);
            return this;
        }

        /**
         * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
         */
        public Builder canAdminClientApiGlobalTokens(Optional<Boolean> canAdminClientApiGlobalTokens) {
            Utils.checkNotNull(canAdminClientApiGlobalTokens, "canAdminClientApiGlobalTokens");
            this.canAdminClientApiGlobalTokens = canAdminClientApiGlobalTokens;
            return this;
        }

        /**
         * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
         */
        public Builder canDlp(boolean canDlp) {
            Utils.checkNotNull(canDlp, "canDlp");
            this.canDlp = Optional.ofNullable(canDlp);
            return this;
        }

        /**
         * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
         */
        public Builder canDlp(Optional<Boolean> canDlp) {
            Utils.checkNotNull(canDlp, "canDlp");
            this.canDlp = canDlp;
            return this;
        }

        /**
         * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
         */
        public Builder read(Map<String, List<ReadPermission>> read) {
            Utils.checkNotNull(read, "read");
            this.read = Optional.ofNullable(read);
            return this;
        }

        /**
         * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
         */
        public Builder read(Optional<? extends Map<String, List<ReadPermission>>> read) {
            Utils.checkNotNull(read, "read");
            this.read = read;
            return this;
        }

        /**
         * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
         */
        public Builder write(Map<String, List<WritePermission>> write) {
            Utils.checkNotNull(write, "write");
            this.write = Optional.ofNullable(write);
            return this;
        }

        /**
         * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
         */
        public Builder write(Optional<? extends Map<String, List<WritePermission>>> write) {
            Utils.checkNotNull(write, "write");
            this.write = write;
            return this;
        }

        /**
         * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
         */
        public Builder grant(Map<String, List<GrantPermission>> grant) {
            Utils.checkNotNull(grant, "grant");
            this.grant = Optional.ofNullable(grant);
            return this;
        }

        /**
         * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
         */
        public Builder grant(Optional<? extends Map<String, List<GrantPermission>>> grant) {
            Utils.checkNotNull(grant, "grant");
            this.grant = grant;
            return this;
        }

        /**
         * The roleId of the canonical role a user has. The displayName is equal to the roleId.
         */
        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        /**
         * The roleId of the canonical role a user has. The displayName is equal to the roleId.
         */
        public Builder role(Optional<String> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        /**
         * The roleIds of the roles a user has.
         */
        public Builder roles(List<String> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * The roleIds of the roles a user has.
         */
        public Builder roles(Optional<? extends List<String>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }
        
        public Permissions build() {
            return new Permissions(
                canAdminSearch,
                canAdminClientApiGlobalTokens,
                canDlp,
                read,
                write,
                grant,
                role,
                roles);
        }
    }
}
