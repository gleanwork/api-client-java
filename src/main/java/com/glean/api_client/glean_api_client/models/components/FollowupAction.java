/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * FollowupAction
 * 
 * <p>A follow-up action that can be invoked by the user after a response. The action parameters are not included and need to be predicted/filled separately.
 */
public class FollowupAction {

    /**
     * Unique identifier for this actionRun recommendation event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionRunId")
    private Optional<String> actionRunId;

    /**
     * The ID of the action instance that will be invoked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionInstanceId")
    private Optional<String> actionInstanceId;

    /**
     * The ID of the associated action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionId")
    private Optional<String> actionId;

    /**
     * Text to be displayed to the user when recommending the action instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendationText")
    private Optional<String> recommendationText;

    /**
     * The label to be used when displaying a button to execute this action instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionLabel")
    private Optional<String> actionLabel;

    /**
     * Whether user confirmation is needed before executing this action instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userConfirmationRequired")
    private Optional<Boolean> userConfirmationRequired;

    @JsonCreator
    public FollowupAction(
            @JsonProperty("actionRunId") Optional<String> actionRunId,
            @JsonProperty("actionInstanceId") Optional<String> actionInstanceId,
            @JsonProperty("actionId") Optional<String> actionId,
            @JsonProperty("recommendationText") Optional<String> recommendationText,
            @JsonProperty("actionLabel") Optional<String> actionLabel,
            @JsonProperty("userConfirmationRequired") Optional<Boolean> userConfirmationRequired) {
        Utils.checkNotNull(actionRunId, "actionRunId");
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        Utils.checkNotNull(actionId, "actionId");
        Utils.checkNotNull(recommendationText, "recommendationText");
        Utils.checkNotNull(actionLabel, "actionLabel");
        Utils.checkNotNull(userConfirmationRequired, "userConfirmationRequired");
        this.actionRunId = actionRunId;
        this.actionInstanceId = actionInstanceId;
        this.actionId = actionId;
        this.recommendationText = recommendationText;
        this.actionLabel = actionLabel;
        this.userConfirmationRequired = userConfirmationRequired;
    }
    
    public FollowupAction() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for this actionRun recommendation event.
     */
    @JsonIgnore
    public Optional<String> actionRunId() {
        return actionRunId;
    }

    /**
     * The ID of the action instance that will be invoked.
     */
    @JsonIgnore
    public Optional<String> actionInstanceId() {
        return actionInstanceId;
    }

    /**
     * The ID of the associated action.
     */
    @JsonIgnore
    public Optional<String> actionId() {
        return actionId;
    }

    /**
     * Text to be displayed to the user when recommending the action instance.
     */
    @JsonIgnore
    public Optional<String> recommendationText() {
        return recommendationText;
    }

    /**
     * The label to be used when displaying a button to execute this action instance.
     */
    @JsonIgnore
    public Optional<String> actionLabel() {
        return actionLabel;
    }

    /**
     * Whether user confirmation is needed before executing this action instance.
     */
    @JsonIgnore
    public Optional<Boolean> userConfirmationRequired() {
        return userConfirmationRequired;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for this actionRun recommendation event.
     */
    public FollowupAction withActionRunId(String actionRunId) {
        Utils.checkNotNull(actionRunId, "actionRunId");
        this.actionRunId = Optional.ofNullable(actionRunId);
        return this;
    }

    /**
     * Unique identifier for this actionRun recommendation event.
     */
    public FollowupAction withActionRunId(Optional<String> actionRunId) {
        Utils.checkNotNull(actionRunId, "actionRunId");
        this.actionRunId = actionRunId;
        return this;
    }

    /**
     * The ID of the action instance that will be invoked.
     */
    public FollowupAction withActionInstanceId(String actionInstanceId) {
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.actionInstanceId = Optional.ofNullable(actionInstanceId);
        return this;
    }

    /**
     * The ID of the action instance that will be invoked.
     */
    public FollowupAction withActionInstanceId(Optional<String> actionInstanceId) {
        Utils.checkNotNull(actionInstanceId, "actionInstanceId");
        this.actionInstanceId = actionInstanceId;
        return this;
    }

    /**
     * The ID of the associated action.
     */
    public FollowupAction withActionId(String actionId) {
        Utils.checkNotNull(actionId, "actionId");
        this.actionId = Optional.ofNullable(actionId);
        return this;
    }

    /**
     * The ID of the associated action.
     */
    public FollowupAction withActionId(Optional<String> actionId) {
        Utils.checkNotNull(actionId, "actionId");
        this.actionId = actionId;
        return this;
    }

    /**
     * Text to be displayed to the user when recommending the action instance.
     */
    public FollowupAction withRecommendationText(String recommendationText) {
        Utils.checkNotNull(recommendationText, "recommendationText");
        this.recommendationText = Optional.ofNullable(recommendationText);
        return this;
    }

    /**
     * Text to be displayed to the user when recommending the action instance.
     */
    public FollowupAction withRecommendationText(Optional<String> recommendationText) {
        Utils.checkNotNull(recommendationText, "recommendationText");
        this.recommendationText = recommendationText;
        return this;
    }

    /**
     * The label to be used when displaying a button to execute this action instance.
     */
    public FollowupAction withActionLabel(String actionLabel) {
        Utils.checkNotNull(actionLabel, "actionLabel");
        this.actionLabel = Optional.ofNullable(actionLabel);
        return this;
    }

    /**
     * The label to be used when displaying a button to execute this action instance.
     */
    public FollowupAction withActionLabel(Optional<String> actionLabel) {
        Utils.checkNotNull(actionLabel, "actionLabel");
        this.actionLabel = actionLabel;
        return this;
    }

    /**
     * Whether user confirmation is needed before executing this action instance.
     */
    public FollowupAction withUserConfirmationRequired(boolean userConfirmationRequired) {
        Utils.checkNotNull(userConfirmationRequired, "userConfirmationRequired");
        this.userConfirmationRequired = Optional.ofNullable(userConfirmationRequired);
        return this;
    }

    /**
     * Whether user confirmation is needed before executing this action instance.
     */
    public FollowupAction withUserConfirmationRequired(Optional<Boolean> userConfirmationRequired) {
        Utils.checkNotNull(userConfirmationRequired, "userConfirmationRequired");
        this.userConfirmationRequired = userConfirmationRequired;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FollowupAction other = (FollowupAction) o;
        return 
            Utils.enhancedDeepEquals(this.actionRunId, other.actionRunId) &&
            Utils.enhancedDeepEquals(this.actionInstanceId, other.actionInstanceId) &&
            Utils.enhancedDeepEquals(this.actionId, other.actionId) &&
            Utils.enhancedDeepEquals(this.recommendationText, other.recommendationText) &&
            Utils.enhancedDeepEquals(this.actionLabel, other.actionLabel) &&
            Utils.enhancedDeepEquals(this.userConfirmationRequired, other.userConfirmationRequired);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            actionRunId,
            actionInstanceId,
            actionId,
            recommendationText,
            actionLabel,
            userConfirmationRequired);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FollowupAction.class,
                "actionRunId", actionRunId,
                "actionInstanceId", actionInstanceId,
                "actionId", actionId,
                "recommendationText", recommendationText,
                "actionLabel", actionLabel,
                "userConfirmationRequired", userConfirmationRequired);
    }
    
    public final static class Builder {
 
        private Optional<String> actionRunId = Optional.empty();
 
        private Optional<String> actionInstanceId = Optional.empty();
 
        private Optional<String> actionId = Optional.empty();
 
        private Optional<String> recommendationText = Optional.empty();
 
        private Optional<String> actionLabel = Optional.empty();
 
        private Optional<Boolean> userConfirmationRequired = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for this actionRun recommendation event.
         */
        public Builder actionRunId(String actionRunId) {
            Utils.checkNotNull(actionRunId, "actionRunId");
            this.actionRunId = Optional.ofNullable(actionRunId);
            return this;
        }

        /**
         * Unique identifier for this actionRun recommendation event.
         */
        public Builder actionRunId(Optional<String> actionRunId) {
            Utils.checkNotNull(actionRunId, "actionRunId");
            this.actionRunId = actionRunId;
            return this;
        }

        /**
         * The ID of the action instance that will be invoked.
         */
        public Builder actionInstanceId(String actionInstanceId) {
            Utils.checkNotNull(actionInstanceId, "actionInstanceId");
            this.actionInstanceId = Optional.ofNullable(actionInstanceId);
            return this;
        }

        /**
         * The ID of the action instance that will be invoked.
         */
        public Builder actionInstanceId(Optional<String> actionInstanceId) {
            Utils.checkNotNull(actionInstanceId, "actionInstanceId");
            this.actionInstanceId = actionInstanceId;
            return this;
        }

        /**
         * The ID of the associated action.
         */
        public Builder actionId(String actionId) {
            Utils.checkNotNull(actionId, "actionId");
            this.actionId = Optional.ofNullable(actionId);
            return this;
        }

        /**
         * The ID of the associated action.
         */
        public Builder actionId(Optional<String> actionId) {
            Utils.checkNotNull(actionId, "actionId");
            this.actionId = actionId;
            return this;
        }

        /**
         * Text to be displayed to the user when recommending the action instance.
         */
        public Builder recommendationText(String recommendationText) {
            Utils.checkNotNull(recommendationText, "recommendationText");
            this.recommendationText = Optional.ofNullable(recommendationText);
            return this;
        }

        /**
         * Text to be displayed to the user when recommending the action instance.
         */
        public Builder recommendationText(Optional<String> recommendationText) {
            Utils.checkNotNull(recommendationText, "recommendationText");
            this.recommendationText = recommendationText;
            return this;
        }

        /**
         * The label to be used when displaying a button to execute this action instance.
         */
        public Builder actionLabel(String actionLabel) {
            Utils.checkNotNull(actionLabel, "actionLabel");
            this.actionLabel = Optional.ofNullable(actionLabel);
            return this;
        }

        /**
         * The label to be used when displaying a button to execute this action instance.
         */
        public Builder actionLabel(Optional<String> actionLabel) {
            Utils.checkNotNull(actionLabel, "actionLabel");
            this.actionLabel = actionLabel;
            return this;
        }

        /**
         * Whether user confirmation is needed before executing this action instance.
         */
        public Builder userConfirmationRequired(boolean userConfirmationRequired) {
            Utils.checkNotNull(userConfirmationRequired, "userConfirmationRequired");
            this.userConfirmationRequired = Optional.ofNullable(userConfirmationRequired);
            return this;
        }

        /**
         * Whether user confirmation is needed before executing this action instance.
         */
        public Builder userConfirmationRequired(Optional<Boolean> userConfirmationRequired) {
            Utils.checkNotNull(userConfirmationRequired, "userConfirmationRequired");
            this.userConfirmationRequired = userConfirmationRequired;
            return this;
        }
        
        public FollowupAction build() {
            return new FollowupAction(
                actionRunId,
                actionInstanceId,
                actionId,
                recommendationText,
                actionLabel,
                userConfirmationRequired);
        }
    }
}
