/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * StructuredLink
 * 
 * <p>The display configuration for a link.
 */
public class StructuredLink {

    /**
     * The display name for the link
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The URL for the link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * Defines how to render an icon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconConfig")
    private Optional<? extends IconConfig> iconConfig;

    @JsonCreator
    public StructuredLink(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("iconConfig") Optional<? extends IconConfig> iconConfig) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.name = name;
        this.url = url;
        this.iconConfig = iconConfig;
    }
    
    public StructuredLink() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The display name for the link
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The URL for the link.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * Defines how to render an icon
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IconConfig> iconConfig() {
        return (Optional<IconConfig>) iconConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The display name for the link
     */
    public StructuredLink withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The display name for the link
     */
    public StructuredLink withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL for the link.
     */
    public StructuredLink withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL for the link.
     */
    public StructuredLink withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public StructuredLink withIconConfig(IconConfig iconConfig) {
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.iconConfig = Optional.ofNullable(iconConfig);
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public StructuredLink withIconConfig(Optional<? extends IconConfig> iconConfig) {
        Utils.checkNotNull(iconConfig, "iconConfig");
        this.iconConfig = iconConfig;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StructuredLink other = (StructuredLink) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.iconConfig, other.iconConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            url,
            iconConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StructuredLink.class,
                "name", name,
                "url", url,
                "iconConfig", iconConfig);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<? extends IconConfig> iconConfig = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The display name for the link
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The display name for the link
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The URL for the link.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL for the link.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder iconConfig(IconConfig iconConfig) {
            Utils.checkNotNull(iconConfig, "iconConfig");
            this.iconConfig = Optional.ofNullable(iconConfig);
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder iconConfig(Optional<? extends IconConfig> iconConfig) {
            Utils.checkNotNull(iconConfig, "iconConfig");
            this.iconConfig = iconConfig;
            return this;
        }
        
        public StructuredLink build() {
            return new StructuredLink(
                name,
                url,
                iconConfig);
        }
    }
}
