/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * DebugDocumentResponse
 * 
 * <p>Describes the response body of the /debug/{datasource}/document API call
 */
public class DebugDocumentResponse {

    /**
     * Describes the document status response body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends DocumentStatusResponse> status;

    /**
     * describes the access control details of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadedPermissions")
    private Optional<? extends DocumentPermissionsDefinition> uploadedPermissions;

    @JsonCreator
    public DebugDocumentResponse(
            @JsonProperty("status") Optional<? extends DocumentStatusResponse> status,
            @JsonProperty("uploadedPermissions") Optional<? extends DocumentPermissionsDefinition> uploadedPermissions) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(uploadedPermissions, "uploadedPermissions");
        this.status = status;
        this.uploadedPermissions = uploadedPermissions;
    }
    
    public DebugDocumentResponse() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Describes the document status response body
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentStatusResponse> status() {
        return (Optional<DocumentStatusResponse>) status;
    }

    /**
     * describes the access control details of the document
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentPermissionsDefinition> uploadedPermissions() {
        return (Optional<DocumentPermissionsDefinition>) uploadedPermissions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the document status response body
     */
    public DebugDocumentResponse withStatus(DocumentStatusResponse status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Describes the document status response body
     */
    public DebugDocumentResponse withStatus(Optional<? extends DocumentStatusResponse> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * describes the access control details of the document
     */
    public DebugDocumentResponse withUploadedPermissions(DocumentPermissionsDefinition uploadedPermissions) {
        Utils.checkNotNull(uploadedPermissions, "uploadedPermissions");
        this.uploadedPermissions = Optional.ofNullable(uploadedPermissions);
        return this;
    }

    /**
     * describes the access control details of the document
     */
    public DebugDocumentResponse withUploadedPermissions(Optional<? extends DocumentPermissionsDefinition> uploadedPermissions) {
        Utils.checkNotNull(uploadedPermissions, "uploadedPermissions");
        this.uploadedPermissions = uploadedPermissions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugDocumentResponse other = (DebugDocumentResponse) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.uploadedPermissions, other.uploadedPermissions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status,
            uploadedPermissions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugDocumentResponse.class,
                "status", status,
                "uploadedPermissions", uploadedPermissions);
    }
    
    public final static class Builder {
 
        private Optional<? extends DocumentStatusResponse> status = Optional.empty();
 
        private Optional<? extends DocumentPermissionsDefinition> uploadedPermissions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the document status response body
         */
        public Builder status(DocumentStatusResponse status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Describes the document status response body
         */
        public Builder status(Optional<? extends DocumentStatusResponse> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * describes the access control details of the document
         */
        public Builder uploadedPermissions(DocumentPermissionsDefinition uploadedPermissions) {
            Utils.checkNotNull(uploadedPermissions, "uploadedPermissions");
            this.uploadedPermissions = Optional.ofNullable(uploadedPermissions);
            return this;
        }

        /**
         * describes the access control details of the document
         */
        public Builder uploadedPermissions(Optional<? extends DocumentPermissionsDefinition> uploadedPermissions) {
            Utils.checkNotNull(uploadedPermissions, "uploadedPermissions");
            this.uploadedPermissions = uploadedPermissions;
            return this;
        }
        
        public DebugDocumentResponse build() {
            return new DebugDocumentResponse(
                status,
                uploadedPermissions);
        }
    }
}
