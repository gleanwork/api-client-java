/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * IconConfig
 * 
 * <p>Defines how to render an icon
 */
public class IconConfig {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generatedBackgroundColorKey")
    private Optional<String> generatedBackgroundColorKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundColor")
    private Optional<String> backgroundColor;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private Optional<String> color;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconType")
    private Optional<? extends IconType> iconType;

    /**
     * Whether the icon should be masked based on current theme.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masked")
    private Optional<Boolean> masked;

    /**
     * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public IconConfig(
            @JsonProperty("generatedBackgroundColorKey") Optional<String> generatedBackgroundColorKey,
            @JsonProperty("backgroundColor") Optional<String> backgroundColor,
            @JsonProperty("color") Optional<String> color,
            @JsonProperty("key") Optional<String> key,
            @JsonProperty("iconType") Optional<? extends IconType> iconType,
            @JsonProperty("masked") Optional<Boolean> masked,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(generatedBackgroundColorKey, "generatedBackgroundColorKey");
        Utils.checkNotNull(backgroundColor, "backgroundColor");
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(iconType, "iconType");
        Utils.checkNotNull(masked, "masked");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(url, "url");
        this.generatedBackgroundColorKey = generatedBackgroundColorKey;
        this.backgroundColor = backgroundColor;
        this.color = color;
        this.key = key;
        this.iconType = iconType;
        this.masked = masked;
        this.name = name;
        this.url = url;
    }
    
    public IconConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> generatedBackgroundColorKey() {
        return generatedBackgroundColorKey;
    }

    @JsonIgnore
    public Optional<String> backgroundColor() {
        return backgroundColor;
    }

    @JsonIgnore
    public Optional<String> color() {
        return color;
    }

    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IconType> iconType() {
        return (Optional<IconType>) iconType;
    }

    /**
     * Whether the icon should be masked based on current theme.
     */
    @JsonIgnore
    public Optional<Boolean> masked() {
        return masked;
    }

    /**
     * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public IconConfig withGeneratedBackgroundColorKey(String generatedBackgroundColorKey) {
        Utils.checkNotNull(generatedBackgroundColorKey, "generatedBackgroundColorKey");
        this.generatedBackgroundColorKey = Optional.ofNullable(generatedBackgroundColorKey);
        return this;
    }

    public IconConfig withGeneratedBackgroundColorKey(Optional<String> generatedBackgroundColorKey) {
        Utils.checkNotNull(generatedBackgroundColorKey, "generatedBackgroundColorKey");
        this.generatedBackgroundColorKey = generatedBackgroundColorKey;
        return this;
    }

    public IconConfig withBackgroundColor(String backgroundColor) {
        Utils.checkNotNull(backgroundColor, "backgroundColor");
        this.backgroundColor = Optional.ofNullable(backgroundColor);
        return this;
    }

    public IconConfig withBackgroundColor(Optional<String> backgroundColor) {
        Utils.checkNotNull(backgroundColor, "backgroundColor");
        this.backgroundColor = backgroundColor;
        return this;
    }

    public IconConfig withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = Optional.ofNullable(color);
        return this;
    }

    public IconConfig withColor(Optional<String> color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public IconConfig withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public IconConfig withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public IconConfig withIconType(IconType iconType) {
        Utils.checkNotNull(iconType, "iconType");
        this.iconType = Optional.ofNullable(iconType);
        return this;
    }

    public IconConfig withIconType(Optional<? extends IconType> iconType) {
        Utils.checkNotNull(iconType, "iconType");
        this.iconType = iconType;
        return this;
    }

    /**
     * Whether the icon should be masked based on current theme.
     */
    public IconConfig withMasked(boolean masked) {
        Utils.checkNotNull(masked, "masked");
        this.masked = Optional.ofNullable(masked);
        return this;
    }

    /**
     * Whether the icon should be masked based on current theme.
     */
    public IconConfig withMasked(Optional<Boolean> masked) {
        Utils.checkNotNull(masked, "masked");
        this.masked = masked;
        return this;
    }

    /**
     * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
     */
    public IconConfig withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
     */
    public IconConfig withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
     */
    public IconConfig withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
     */
    public IconConfig withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IconConfig other = (IconConfig) o;
        return 
            Utils.enhancedDeepEquals(this.generatedBackgroundColorKey, other.generatedBackgroundColorKey) &&
            Utils.enhancedDeepEquals(this.backgroundColor, other.backgroundColor) &&
            Utils.enhancedDeepEquals(this.color, other.color) &&
            Utils.enhancedDeepEquals(this.key, other.key) &&
            Utils.enhancedDeepEquals(this.iconType, other.iconType) &&
            Utils.enhancedDeepEquals(this.masked, other.masked) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            generatedBackgroundColorKey,
            backgroundColor,
            color,
            key,
            iconType,
            masked,
            name,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IconConfig.class,
                "generatedBackgroundColorKey", generatedBackgroundColorKey,
                "backgroundColor", backgroundColor,
                "color", color,
                "key", key,
                "iconType", iconType,
                "masked", masked,
                "name", name,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<String> generatedBackgroundColorKey = Optional.empty();
 
        private Optional<String> backgroundColor = Optional.empty();
 
        private Optional<String> color = Optional.empty();
 
        private Optional<String> key = Optional.empty();
 
        private Optional<? extends IconType> iconType = Optional.empty();
 
        private Optional<Boolean> masked = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> url = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder generatedBackgroundColorKey(String generatedBackgroundColorKey) {
            Utils.checkNotNull(generatedBackgroundColorKey, "generatedBackgroundColorKey");
            this.generatedBackgroundColorKey = Optional.ofNullable(generatedBackgroundColorKey);
            return this;
        }

        public Builder generatedBackgroundColorKey(Optional<String> generatedBackgroundColorKey) {
            Utils.checkNotNull(generatedBackgroundColorKey, "generatedBackgroundColorKey");
            this.generatedBackgroundColorKey = generatedBackgroundColorKey;
            return this;
        }

        public Builder backgroundColor(String backgroundColor) {
            Utils.checkNotNull(backgroundColor, "backgroundColor");
            this.backgroundColor = Optional.ofNullable(backgroundColor);
            return this;
        }

        public Builder backgroundColor(Optional<String> backgroundColor) {
            Utils.checkNotNull(backgroundColor, "backgroundColor");
            this.backgroundColor = backgroundColor;
            return this;
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = Optional.ofNullable(color);
            return this;
        }

        public Builder color(Optional<String> color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder iconType(IconType iconType) {
            Utils.checkNotNull(iconType, "iconType");
            this.iconType = Optional.ofNullable(iconType);
            return this;
        }

        public Builder iconType(Optional<? extends IconType> iconType) {
            Utils.checkNotNull(iconType, "iconType");
            this.iconType = iconType;
            return this;
        }

        /**
         * Whether the icon should be masked based on current theme.
         */
        public Builder masked(boolean masked) {
            Utils.checkNotNull(masked, "masked");
            this.masked = Optional.ofNullable(masked);
            return this;
        }

        /**
         * Whether the icon should be masked based on current theme.
         */
        public Builder masked(Optional<Boolean> masked) {
            Utils.checkNotNull(masked, "masked");
            this.masked = masked;
            return this;
        }

        /**
         * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public IconConfig build() {
            return new IconConfig(
                generatedBackgroundColorKey,
                backgroundColor,
                color,
                key,
                iconType,
                masked,
                name,
                url);
        }
    }
}
