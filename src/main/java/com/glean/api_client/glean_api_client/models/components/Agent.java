/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class Agent {

    /**
     * The ID of the agent.
     */
    @JsonProperty("agent_id")
    private String agentId;

    /**
     * The name of the agent
     */
    @JsonProperty("name")
    private String name;

    /**
     * The description of the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The agent metadata. Currently not implemented.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends AgentMetadata> metadata;

    /**
     * Describes features that the agent supports. example: {
     *   "ap.io.messages": true,
     *   "ap.io.streaming": true
     * }
     */
    @JsonProperty("capabilities")
    private AgentCapabilities capabilities;

    @JsonCreator
    public Agent(
            @JsonProperty("agent_id") String agentId,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("metadata") Optional<? extends AgentMetadata> metadata,
            @JsonProperty("capabilities") AgentCapabilities capabilities) {
        Utils.checkNotNull(agentId, "agentId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(capabilities, "capabilities");
        this.agentId = agentId;
        this.name = name;
        this.description = description;
        this.metadata = metadata;
        this.capabilities = capabilities;
    }
    
    public Agent(
            String agentId,
            String name,
            AgentCapabilities capabilities) {
        this(agentId, name, Optional.empty(), Optional.empty(), capabilities);
    }

    /**
     * The ID of the agent.
     */
    @JsonIgnore
    public String agentId() {
        return agentId;
    }

    /**
     * The name of the agent
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The description of the agent.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The agent metadata. Currently not implemented.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AgentMetadata> metadata() {
        return (Optional<AgentMetadata>) metadata;
    }

    /**
     * Describes features that the agent supports. example: {
     *   "ap.io.messages": true,
     *   "ap.io.streaming": true
     * }
     */
    @JsonIgnore
    public AgentCapabilities capabilities() {
        return capabilities;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the agent.
     */
    public Agent withAgentId(String agentId) {
        Utils.checkNotNull(agentId, "agentId");
        this.agentId = agentId;
        return this;
    }

    /**
     * The name of the agent
     */
    public Agent withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the agent.
     */
    public Agent withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the agent.
     */
    public Agent withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The agent metadata. Currently not implemented.
     */
    public Agent withMetadata(AgentMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * The agent metadata. Currently not implemented.
     */
    public Agent withMetadata(Optional<? extends AgentMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Describes features that the agent supports. example: {
     *   "ap.io.messages": true,
     *   "ap.io.streaming": true
     * }
     */
    public Agent withCapabilities(AgentCapabilities capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Agent other = (Agent) o;
        return 
            Objects.deepEquals(this.agentId, other.agentId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.capabilities, other.capabilities);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agentId,
            name,
            description,
            metadata,
            capabilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Agent.class,
                "agentId", agentId,
                "name", name,
                "description", description,
                "metadata", metadata,
                "capabilities", capabilities);
    }
    
    public final static class Builder {
 
        private String agentId;
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends AgentMetadata> metadata = Optional.empty();
 
        private AgentCapabilities capabilities;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the agent.
         */
        public Builder agentId(String agentId) {
            Utils.checkNotNull(agentId, "agentId");
            this.agentId = agentId;
            return this;
        }

        /**
         * The name of the agent
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of the agent.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the agent.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The agent metadata. Currently not implemented.
         */
        public Builder metadata(AgentMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * The agent metadata. Currently not implemented.
         */
        public Builder metadata(Optional<? extends AgentMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Describes features that the agent supports. example: {
         *   "ap.io.messages": true,
         *   "ap.io.streaming": true
         * }
         */
        public Builder capabilities(AgentCapabilities capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = capabilities;
            return this;
        }
        
        public Agent build() {
            return new Agent(
                agentId,
                name,
                description,
                metadata,
                capabilities);
        }
    }
}
