/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * BulkIndexEmployeesRequest
 * 
 * <p>Describes the request body of the /bulkindexemployees API call
 */
public class BulkIndexEmployeesRequest {

    /**
     * Unique id that must be used for this bulk upload instance
     */
    @JsonProperty("uploadId")
    private String uploadId;

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstPage")
    private Optional<Boolean> isFirstPage;

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLastPage")
    private Optional<Boolean> isLastPage;

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceRestartUpload")
    private Optional<Boolean> forceRestartUpload;

    /**
     * Batch of employee information
     */
    @JsonProperty("employees")
    private List<EmployeeInfoDefinition> employees;

    /**
     * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableStaleDataDeletionCheck")
    private Optional<Boolean> disableStaleDataDeletionCheck;

    @JsonCreator
    public BulkIndexEmployeesRequest(
            @JsonProperty("uploadId") String uploadId,
            @JsonProperty("isFirstPage") Optional<Boolean> isFirstPage,
            @JsonProperty("isLastPage") Optional<Boolean> isLastPage,
            @JsonProperty("forceRestartUpload") Optional<Boolean> forceRestartUpload,
            @JsonProperty("employees") List<EmployeeInfoDefinition> employees,
            @JsonProperty("disableStaleDataDeletionCheck") Optional<Boolean> disableStaleDataDeletionCheck) {
        Utils.checkNotNull(uploadId, "uploadId");
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        Utils.checkNotNull(isLastPage, "isLastPage");
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        Utils.checkNotNull(employees, "employees");
        Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
        this.uploadId = uploadId;
        this.isFirstPage = isFirstPage;
        this.isLastPage = isLastPage;
        this.forceRestartUpload = forceRestartUpload;
        this.employees = employees;
        this.disableStaleDataDeletionCheck = disableStaleDataDeletionCheck;
    }
    
    public BulkIndexEmployeesRequest(
            String uploadId,
            List<EmployeeInfoDefinition> employees) {
        this(uploadId, Optional.empty(), Optional.empty(), Optional.empty(), employees, Optional.empty());
    }

    /**
     * Unique id that must be used for this bulk upload instance
     */
    @JsonIgnore
    public String uploadId() {
        return uploadId;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isFirstPage() {
        return isFirstPage;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isLastPage() {
        return isLastPage;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonIgnore
    public Optional<Boolean> forceRestartUpload() {
        return forceRestartUpload;
    }

    /**
     * Batch of employee information
     */
    @JsonIgnore
    public List<EmployeeInfoDefinition> employees() {
        return employees;
    }

    /**
     * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
     */
    @JsonIgnore
    public Optional<Boolean> disableStaleDataDeletionCheck() {
        return disableStaleDataDeletionCheck;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique id that must be used for this bulk upload instance
     */
    public BulkIndexEmployeesRequest withUploadId(String uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = uploadId;
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexEmployeesRequest withIsFirstPage(boolean isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = Optional.ofNullable(isFirstPage);
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexEmployeesRequest withIsFirstPage(Optional<Boolean> isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = isFirstPage;
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexEmployeesRequest withIsLastPage(boolean isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = Optional.ofNullable(isLastPage);
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexEmployeesRequest withIsLastPage(Optional<Boolean> isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = isLastPage;
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexEmployeesRequest withForceRestartUpload(boolean forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexEmployeesRequest withForceRestartUpload(Optional<Boolean> forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = forceRestartUpload;
        return this;
    }

    /**
     * Batch of employee information
     */
    public BulkIndexEmployeesRequest withEmployees(List<EmployeeInfoDefinition> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }

    /**
     * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
     */
    public BulkIndexEmployeesRequest withDisableStaleDataDeletionCheck(boolean disableStaleDataDeletionCheck) {
        Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
        this.disableStaleDataDeletionCheck = Optional.ofNullable(disableStaleDataDeletionCheck);
        return this;
    }

    /**
     * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
     */
    public BulkIndexEmployeesRequest withDisableStaleDataDeletionCheck(Optional<Boolean> disableStaleDataDeletionCheck) {
        Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
        this.disableStaleDataDeletionCheck = disableStaleDataDeletionCheck;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkIndexEmployeesRequest other = (BulkIndexEmployeesRequest) o;
        return 
            Objects.deepEquals(this.uploadId, other.uploadId) &&
            Objects.deepEquals(this.isFirstPage, other.isFirstPage) &&
            Objects.deepEquals(this.isLastPage, other.isLastPage) &&
            Objects.deepEquals(this.forceRestartUpload, other.forceRestartUpload) &&
            Objects.deepEquals(this.employees, other.employees) &&
            Objects.deepEquals(this.disableStaleDataDeletionCheck, other.disableStaleDataDeletionCheck);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uploadId,
            isFirstPage,
            isLastPage,
            forceRestartUpload,
            employees,
            disableStaleDataDeletionCheck);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkIndexEmployeesRequest.class,
                "uploadId", uploadId,
                "isFirstPage", isFirstPage,
                "isLastPage", isLastPage,
                "forceRestartUpload", forceRestartUpload,
                "employees", employees,
                "disableStaleDataDeletionCheck", disableStaleDataDeletionCheck);
    }
    
    public final static class Builder {
 
        private String uploadId;
 
        private Optional<Boolean> isFirstPage = Optional.empty();
 
        private Optional<Boolean> isLastPage = Optional.empty();
 
        private Optional<Boolean> forceRestartUpload = Optional.empty();
 
        private List<EmployeeInfoDefinition> employees;
 
        private Optional<Boolean> disableStaleDataDeletionCheck = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique id that must be used for this bulk upload instance
         */
        public Builder uploadId(String uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = uploadId;
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(boolean isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = Optional.ofNullable(isFirstPage);
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(Optional<Boolean> isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = isFirstPage;
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(boolean isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = Optional.ofNullable(isLastPage);
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(Optional<Boolean> isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = isLastPage;
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(boolean forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(Optional<Boolean> forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = forceRestartUpload;
            return this;
        }

        /**
         * Batch of employee information
         */
        public Builder employees(List<EmployeeInfoDefinition> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }

        /**
         * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
         */
        public Builder disableStaleDataDeletionCheck(boolean disableStaleDataDeletionCheck) {
            Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
            this.disableStaleDataDeletionCheck = Optional.ofNullable(disableStaleDataDeletionCheck);
            return this;
        }

        /**
         * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
         */
        public Builder disableStaleDataDeletionCheck(Optional<Boolean> disableStaleDataDeletionCheck) {
            Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
            this.disableStaleDataDeletionCheck = disableStaleDataDeletionCheck;
            return this;
        }
        
        public BulkIndexEmployeesRequest build() {
            return new BulkIndexEmployeesRequest(
                uploadId,
                isFirstPage,
                isLastPage,
                forceRestartUpload,
                employees,
                disableStaleDataDeletionCheck);
        }
    }
}
