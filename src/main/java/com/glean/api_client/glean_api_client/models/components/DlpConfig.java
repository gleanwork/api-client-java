/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * DlpConfig
 * 
 * <p>Detailed configuration of what documents and sensitive content will be scanned.
 */
public class DlpConfig {

    /**
     * Synonymous with report/policy id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<Long> version;

    /**
     * DEPRECATED - use `sensitiveContentOptions` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitiveInfoTypes")
    @Deprecated
    private Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes;

    /**
     * Controls which data-sources and what time-range to include in scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputOptions")
    private Optional<? extends InputOptions> inputOptions;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalSharingOptions")
    @Deprecated
    private Optional<? extends ExternalSharingOptions> externalSharingOptions;

    /**
     * Controls how "shared" a document must be to get picked for scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("broadSharingOptions")
    private Optional<? extends SharingOptions> broadSharingOptions;

    /**
     * Options for defining sensitive content within scanned documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitiveContentOptions")
    private Optional<? extends SensitiveContentOptions> sensitiveContentOptions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportName")
    private Optional<String> reportName;

    /**
     * Interval between scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<String> frequency;

    /**
     * Details about the person who created this report/policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    private Optional<? extends DlpPerson> createdBy;

    /**
     * Timestamp at which this configuration was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * redact quote in findings of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redactQuote")
    private Optional<Boolean> redactQuote;

    /**
     * auto hide documents with findings in the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoHideDocs")
    private Optional<Boolean> autoHideDocs;

    /**
     * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowlistOptions")
    private Optional<? extends AllowlistOptions> allowlistOptions;

    @JsonCreator
    public DlpConfig(
            @JsonProperty("version") Optional<Long> version,
            @JsonProperty("sensitiveInfoTypes") Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes,
            @JsonProperty("inputOptions") Optional<? extends InputOptions> inputOptions,
            @JsonProperty("externalSharingOptions") Optional<? extends ExternalSharingOptions> externalSharingOptions,
            @JsonProperty("broadSharingOptions") Optional<? extends SharingOptions> broadSharingOptions,
            @JsonProperty("sensitiveContentOptions") Optional<? extends SensitiveContentOptions> sensitiveContentOptions,
            @JsonProperty("reportName") Optional<String> reportName,
            @JsonProperty("frequency") Optional<String> frequency,
            @JsonProperty("createdBy") Optional<? extends DlpPerson> createdBy,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("redactQuote") Optional<Boolean> redactQuote,
            @JsonProperty("autoHideDocs") Optional<Boolean> autoHideDocs,
            @JsonProperty("allowlistOptions") Optional<? extends AllowlistOptions> allowlistOptions) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
        Utils.checkNotNull(inputOptions, "inputOptions");
        Utils.checkNotNull(externalSharingOptions, "externalSharingOptions");
        Utils.checkNotNull(broadSharingOptions, "broadSharingOptions");
        Utils.checkNotNull(sensitiveContentOptions, "sensitiveContentOptions");
        Utils.checkNotNull(reportName, "reportName");
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(redactQuote, "redactQuote");
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        Utils.checkNotNull(allowlistOptions, "allowlistOptions");
        this.version = version;
        this.sensitiveInfoTypes = sensitiveInfoTypes;
        this.inputOptions = inputOptions;
        this.externalSharingOptions = externalSharingOptions;
        this.broadSharingOptions = broadSharingOptions;
        this.sensitiveContentOptions = sensitiveContentOptions;
        this.reportName = reportName;
        this.frequency = frequency;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.redactQuote = redactQuote;
        this.autoHideDocs = autoHideDocs;
        this.allowlistOptions = allowlistOptions;
    }
    
    public DlpConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Synonymous with report/policy id.
     */
    @JsonIgnore
    public Optional<Long> version() {
        return version;
    }

    /**
     * DEPRECATED - use `sensitiveContentOptions` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SensitiveInfoType>> sensitiveInfoTypes() {
        return (Optional<List<SensitiveInfoType>>) sensitiveInfoTypes;
    }

    /**
     * Controls which data-sources and what time-range to include in scans.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InputOptions> inputOptions() {
        return (Optional<InputOptions>) inputOptions;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExternalSharingOptions> externalSharingOptions() {
        return (Optional<ExternalSharingOptions>) externalSharingOptions;
    }

    /**
     * Controls how "shared" a document must be to get picked for scans.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SharingOptions> broadSharingOptions() {
        return (Optional<SharingOptions>) broadSharingOptions;
    }

    /**
     * Options for defining sensitive content within scanned documents.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SensitiveContentOptions> sensitiveContentOptions() {
        return (Optional<SensitiveContentOptions>) sensitiveContentOptions;
    }

    @JsonIgnore
    public Optional<String> reportName() {
        return reportName;
    }

    /**
     * Interval between scans.
     */
    @JsonIgnore
    public Optional<String> frequency() {
        return frequency;
    }

    /**
     * Details about the person who created this report/policy.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpPerson> createdBy() {
        return (Optional<DlpPerson>) createdBy;
    }

    /**
     * Timestamp at which this configuration was created.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * redact quote in findings of the report
     */
    @JsonIgnore
    public Optional<Boolean> redactQuote() {
        return redactQuote;
    }

    /**
     * auto hide documents with findings in the report
     */
    @JsonIgnore
    public Optional<Boolean> autoHideDocs() {
        return autoHideDocs;
    }

    /**
     * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AllowlistOptions> allowlistOptions() {
        return (Optional<AllowlistOptions>) allowlistOptions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Synonymous with report/policy id.
     */
    public DlpConfig withVersion(long version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Synonymous with report/policy id.
     */
    public DlpConfig withVersion(Optional<Long> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * DEPRECATED - use `sensitiveContentOptions` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DlpConfig withSensitiveInfoTypes(List<SensitiveInfoType> sensitiveInfoTypes) {
        Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
        this.sensitiveInfoTypes = Optional.ofNullable(sensitiveInfoTypes);
        return this;
    }

    /**
     * DEPRECATED - use `sensitiveContentOptions` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DlpConfig withSensitiveInfoTypes(Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes) {
        Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
        this.sensitiveInfoTypes = sensitiveInfoTypes;
        return this;
    }

    /**
     * Controls which data-sources and what time-range to include in scans.
     */
    public DlpConfig withInputOptions(InputOptions inputOptions) {
        Utils.checkNotNull(inputOptions, "inputOptions");
        this.inputOptions = Optional.ofNullable(inputOptions);
        return this;
    }

    /**
     * Controls which data-sources and what time-range to include in scans.
     */
    public DlpConfig withInputOptions(Optional<? extends InputOptions> inputOptions) {
        Utils.checkNotNull(inputOptions, "inputOptions");
        this.inputOptions = inputOptions;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DlpConfig withExternalSharingOptions(ExternalSharingOptions externalSharingOptions) {
        Utils.checkNotNull(externalSharingOptions, "externalSharingOptions");
        this.externalSharingOptions = Optional.ofNullable(externalSharingOptions);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DlpConfig withExternalSharingOptions(Optional<? extends ExternalSharingOptions> externalSharingOptions) {
        Utils.checkNotNull(externalSharingOptions, "externalSharingOptions");
        this.externalSharingOptions = externalSharingOptions;
        return this;
    }

    /**
     * Controls how "shared" a document must be to get picked for scans.
     */
    public DlpConfig withBroadSharingOptions(SharingOptions broadSharingOptions) {
        Utils.checkNotNull(broadSharingOptions, "broadSharingOptions");
        this.broadSharingOptions = Optional.ofNullable(broadSharingOptions);
        return this;
    }

    /**
     * Controls how "shared" a document must be to get picked for scans.
     */
    public DlpConfig withBroadSharingOptions(Optional<? extends SharingOptions> broadSharingOptions) {
        Utils.checkNotNull(broadSharingOptions, "broadSharingOptions");
        this.broadSharingOptions = broadSharingOptions;
        return this;
    }

    /**
     * Options for defining sensitive content within scanned documents.
     */
    public DlpConfig withSensitiveContentOptions(SensitiveContentOptions sensitiveContentOptions) {
        Utils.checkNotNull(sensitiveContentOptions, "sensitiveContentOptions");
        this.sensitiveContentOptions = Optional.ofNullable(sensitiveContentOptions);
        return this;
    }

    /**
     * Options for defining sensitive content within scanned documents.
     */
    public DlpConfig withSensitiveContentOptions(Optional<? extends SensitiveContentOptions> sensitiveContentOptions) {
        Utils.checkNotNull(sensitiveContentOptions, "sensitiveContentOptions");
        this.sensitiveContentOptions = sensitiveContentOptions;
        return this;
    }

    public DlpConfig withReportName(String reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = Optional.ofNullable(reportName);
        return this;
    }

    public DlpConfig withReportName(Optional<String> reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = reportName;
        return this;
    }

    /**
     * Interval between scans.
     */
    public DlpConfig withFrequency(String frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * Interval between scans.
     */
    public DlpConfig withFrequency(Optional<String> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    /**
     * Details about the person who created this report/policy.
     */
    public DlpConfig withCreatedBy(DlpPerson createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }

    /**
     * Details about the person who created this report/policy.
     */
    public DlpConfig withCreatedBy(Optional<? extends DlpPerson> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Timestamp at which this configuration was created.
     */
    public DlpConfig withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp at which this configuration was created.
     */
    public DlpConfig withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * redact quote in findings of the report
     */
    public DlpConfig withRedactQuote(boolean redactQuote) {
        Utils.checkNotNull(redactQuote, "redactQuote");
        this.redactQuote = Optional.ofNullable(redactQuote);
        return this;
    }

    /**
     * redact quote in findings of the report
     */
    public DlpConfig withRedactQuote(Optional<Boolean> redactQuote) {
        Utils.checkNotNull(redactQuote, "redactQuote");
        this.redactQuote = redactQuote;
        return this;
    }

    /**
     * auto hide documents with findings in the report
     */
    public DlpConfig withAutoHideDocs(boolean autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = Optional.ofNullable(autoHideDocs);
        return this;
    }

    /**
     * auto hide documents with findings in the report
     */
    public DlpConfig withAutoHideDocs(Optional<Boolean> autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = autoHideDocs;
        return this;
    }

    /**
     * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
     */
    public DlpConfig withAllowlistOptions(AllowlistOptions allowlistOptions) {
        Utils.checkNotNull(allowlistOptions, "allowlistOptions");
        this.allowlistOptions = Optional.ofNullable(allowlistOptions);
        return this;
    }

    /**
     * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
     */
    public DlpConfig withAllowlistOptions(Optional<? extends AllowlistOptions> allowlistOptions) {
        Utils.checkNotNull(allowlistOptions, "allowlistOptions");
        this.allowlistOptions = allowlistOptions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DlpConfig other = (DlpConfig) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.sensitiveInfoTypes, other.sensitiveInfoTypes) &&
            Objects.deepEquals(this.inputOptions, other.inputOptions) &&
            Objects.deepEquals(this.externalSharingOptions, other.externalSharingOptions) &&
            Objects.deepEquals(this.broadSharingOptions, other.broadSharingOptions) &&
            Objects.deepEquals(this.sensitiveContentOptions, other.sensitiveContentOptions) &&
            Objects.deepEquals(this.reportName, other.reportName) &&
            Objects.deepEquals(this.frequency, other.frequency) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.redactQuote, other.redactQuote) &&
            Objects.deepEquals(this.autoHideDocs, other.autoHideDocs) &&
            Objects.deepEquals(this.allowlistOptions, other.allowlistOptions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            sensitiveInfoTypes,
            inputOptions,
            externalSharingOptions,
            broadSharingOptions,
            sensitiveContentOptions,
            reportName,
            frequency,
            createdBy,
            createdAt,
            redactQuote,
            autoHideDocs,
            allowlistOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DlpConfig.class,
                "version", version,
                "sensitiveInfoTypes", sensitiveInfoTypes,
                "inputOptions", inputOptions,
                "externalSharingOptions", externalSharingOptions,
                "broadSharingOptions", broadSharingOptions,
                "sensitiveContentOptions", sensitiveContentOptions,
                "reportName", reportName,
                "frequency", frequency,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "redactQuote", redactQuote,
                "autoHideDocs", autoHideDocs,
                "allowlistOptions", allowlistOptions);
    }
    
    public final static class Builder {
 
        private Optional<Long> version = Optional.empty();
 
        @Deprecated
        private Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes = Optional.empty();
 
        private Optional<? extends InputOptions> inputOptions = Optional.empty();
 
        @Deprecated
        private Optional<? extends ExternalSharingOptions> externalSharingOptions = Optional.empty();
 
        private Optional<? extends SharingOptions> broadSharingOptions = Optional.empty();
 
        private Optional<? extends SensitiveContentOptions> sensitiveContentOptions = Optional.empty();
 
        private Optional<String> reportName = Optional.empty();
 
        private Optional<String> frequency = Optional.empty();
 
        private Optional<? extends DlpPerson> createdBy = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<Boolean> redactQuote = Optional.empty();
 
        private Optional<Boolean> autoHideDocs = Optional.empty();
 
        private Optional<? extends AllowlistOptions> allowlistOptions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Synonymous with report/policy id.
         */
        public Builder version(long version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Synonymous with report/policy id.
         */
        public Builder version(Optional<Long> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * DEPRECATED - use `sensitiveContentOptions` instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder sensitiveInfoTypes(List<SensitiveInfoType> sensitiveInfoTypes) {
            Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
            this.sensitiveInfoTypes = Optional.ofNullable(sensitiveInfoTypes);
            return this;
        }

        /**
         * DEPRECATED - use `sensitiveContentOptions` instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder sensitiveInfoTypes(Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes) {
            Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
            this.sensitiveInfoTypes = sensitiveInfoTypes;
            return this;
        }

        /**
         * Controls which data-sources and what time-range to include in scans.
         */
        public Builder inputOptions(InputOptions inputOptions) {
            Utils.checkNotNull(inputOptions, "inputOptions");
            this.inputOptions = Optional.ofNullable(inputOptions);
            return this;
        }

        /**
         * Controls which data-sources and what time-range to include in scans.
         */
        public Builder inputOptions(Optional<? extends InputOptions> inputOptions) {
            Utils.checkNotNull(inputOptions, "inputOptions");
            this.inputOptions = inputOptions;
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder externalSharingOptions(ExternalSharingOptions externalSharingOptions) {
            Utils.checkNotNull(externalSharingOptions, "externalSharingOptions");
            this.externalSharingOptions = Optional.ofNullable(externalSharingOptions);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder externalSharingOptions(Optional<? extends ExternalSharingOptions> externalSharingOptions) {
            Utils.checkNotNull(externalSharingOptions, "externalSharingOptions");
            this.externalSharingOptions = externalSharingOptions;
            return this;
        }

        /**
         * Controls how "shared" a document must be to get picked for scans.
         */
        public Builder broadSharingOptions(SharingOptions broadSharingOptions) {
            Utils.checkNotNull(broadSharingOptions, "broadSharingOptions");
            this.broadSharingOptions = Optional.ofNullable(broadSharingOptions);
            return this;
        }

        /**
         * Controls how "shared" a document must be to get picked for scans.
         */
        public Builder broadSharingOptions(Optional<? extends SharingOptions> broadSharingOptions) {
            Utils.checkNotNull(broadSharingOptions, "broadSharingOptions");
            this.broadSharingOptions = broadSharingOptions;
            return this;
        }

        /**
         * Options for defining sensitive content within scanned documents.
         */
        public Builder sensitiveContentOptions(SensitiveContentOptions sensitiveContentOptions) {
            Utils.checkNotNull(sensitiveContentOptions, "sensitiveContentOptions");
            this.sensitiveContentOptions = Optional.ofNullable(sensitiveContentOptions);
            return this;
        }

        /**
         * Options for defining sensitive content within scanned documents.
         */
        public Builder sensitiveContentOptions(Optional<? extends SensitiveContentOptions> sensitiveContentOptions) {
            Utils.checkNotNull(sensitiveContentOptions, "sensitiveContentOptions");
            this.sensitiveContentOptions = sensitiveContentOptions;
            return this;
        }

        public Builder reportName(String reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = Optional.ofNullable(reportName);
            return this;
        }

        public Builder reportName(Optional<String> reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = reportName;
            return this;
        }

        /**
         * Interval between scans.
         */
        public Builder frequency(String frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * Interval between scans.
         */
        public Builder frequency(Optional<String> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }

        /**
         * Details about the person who created this report/policy.
         */
        public Builder createdBy(DlpPerson createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        /**
         * Details about the person who created this report/policy.
         */
        public Builder createdBy(Optional<? extends DlpPerson> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * Timestamp at which this configuration was created.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp at which this configuration was created.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * redact quote in findings of the report
         */
        public Builder redactQuote(boolean redactQuote) {
            Utils.checkNotNull(redactQuote, "redactQuote");
            this.redactQuote = Optional.ofNullable(redactQuote);
            return this;
        }

        /**
         * redact quote in findings of the report
         */
        public Builder redactQuote(Optional<Boolean> redactQuote) {
            Utils.checkNotNull(redactQuote, "redactQuote");
            this.redactQuote = redactQuote;
            return this;
        }

        /**
         * auto hide documents with findings in the report
         */
        public Builder autoHideDocs(boolean autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = Optional.ofNullable(autoHideDocs);
            return this;
        }

        /**
         * auto hide documents with findings in the report
         */
        public Builder autoHideDocs(Optional<Boolean> autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = autoHideDocs;
            return this;
        }

        /**
         * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
         */
        public Builder allowlistOptions(AllowlistOptions allowlistOptions) {
            Utils.checkNotNull(allowlistOptions, "allowlistOptions");
            this.allowlistOptions = Optional.ofNullable(allowlistOptions);
            return this;
        }

        /**
         * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
         */
        public Builder allowlistOptions(Optional<? extends AllowlistOptions> allowlistOptions) {
            Utils.checkNotNull(allowlistOptions, "allowlistOptions");
            this.allowlistOptions = allowlistOptions;
            return this;
        }
        
        public DlpConfig build() {
            return new DlpConfig(
                version,
                sensitiveInfoTypes,
                inputOptions,
                externalSharingOptions,
                broadSharingOptions,
                sensitiveContentOptions,
                reportName,
                frequency,
                createdBy,
                createdAt,
                redactQuote,
                autoHideDocs,
                allowlistOptions);
        }
    }
}
