/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CalendarAttendees {

    /**
     * Full details of some of the attendees of this event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people")
    private Optional<? extends List<CalendarAttendee>> people;

    /**
     * Whether the total count of the people returned is at the retrieval limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLimit")
    private Optional<Boolean> isLimit;

    /**
     * Total number of attendees in this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private Optional<Long> total;

    /**
     * Total number of attendees who have accepted this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numAccepted")
    private Optional<Long> numAccepted;

    /**
     * Total number of attendees who have declined this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numDeclined")
    private Optional<Long> numDeclined;

    /**
     * Total number of attendees who have not responded to this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numNoResponse")
    private Optional<Long> numNoResponse;

    /**
     * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numTentative")
    private Optional<Long> numTentative;

    @JsonCreator
    public CalendarAttendees(
            @JsonProperty("people") Optional<? extends List<CalendarAttendee>> people,
            @JsonProperty("isLimit") Optional<Boolean> isLimit,
            @JsonProperty("total") Optional<Long> total,
            @JsonProperty("numAccepted") Optional<Long> numAccepted,
            @JsonProperty("numDeclined") Optional<Long> numDeclined,
            @JsonProperty("numNoResponse") Optional<Long> numNoResponse,
            @JsonProperty("numTentative") Optional<Long> numTentative) {
        Utils.checkNotNull(people, "people");
        Utils.checkNotNull(isLimit, "isLimit");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(numAccepted, "numAccepted");
        Utils.checkNotNull(numDeclined, "numDeclined");
        Utils.checkNotNull(numNoResponse, "numNoResponse");
        Utils.checkNotNull(numTentative, "numTentative");
        this.people = people;
        this.isLimit = isLimit;
        this.total = total;
        this.numAccepted = numAccepted;
        this.numDeclined = numDeclined;
        this.numNoResponse = numNoResponse;
        this.numTentative = numTentative;
    }
    
    public CalendarAttendees() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Full details of some of the attendees of this event
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CalendarAttendee>> people() {
        return (Optional<List<CalendarAttendee>>) people;
    }

    /**
     * Whether the total count of the people returned is at the retrieval limit.
     */
    @JsonIgnore
    public Optional<Boolean> isLimit() {
        return isLimit;
    }

    /**
     * Total number of attendees in this event.
     */
    @JsonIgnore
    public Optional<Long> total() {
        return total;
    }

    /**
     * Total number of attendees who have accepted this event.
     */
    @JsonIgnore
    public Optional<Long> numAccepted() {
        return numAccepted;
    }

    /**
     * Total number of attendees who have declined this event.
     */
    @JsonIgnore
    public Optional<Long> numDeclined() {
        return numDeclined;
    }

    /**
     * Total number of attendees who have not responded to this event.
     */
    @JsonIgnore
    public Optional<Long> numNoResponse() {
        return numNoResponse;
    }

    /**
     * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
     */
    @JsonIgnore
    public Optional<Long> numTentative() {
        return numTentative;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Full details of some of the attendees of this event
     */
    public CalendarAttendees withPeople(List<CalendarAttendee> people) {
        Utils.checkNotNull(people, "people");
        this.people = Optional.ofNullable(people);
        return this;
    }

    /**
     * Full details of some of the attendees of this event
     */
    public CalendarAttendees withPeople(Optional<? extends List<CalendarAttendee>> people) {
        Utils.checkNotNull(people, "people");
        this.people = people;
        return this;
    }

    /**
     * Whether the total count of the people returned is at the retrieval limit.
     */
    public CalendarAttendees withIsLimit(boolean isLimit) {
        Utils.checkNotNull(isLimit, "isLimit");
        this.isLimit = Optional.ofNullable(isLimit);
        return this;
    }

    /**
     * Whether the total count of the people returned is at the retrieval limit.
     */
    public CalendarAttendees withIsLimit(Optional<Boolean> isLimit) {
        Utils.checkNotNull(isLimit, "isLimit");
        this.isLimit = isLimit;
        return this;
    }

    /**
     * Total number of attendees in this event.
     */
    public CalendarAttendees withTotal(long total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }

    /**
     * Total number of attendees in this event.
     */
    public CalendarAttendees withTotal(Optional<Long> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * Total number of attendees who have accepted this event.
     */
    public CalendarAttendees withNumAccepted(long numAccepted) {
        Utils.checkNotNull(numAccepted, "numAccepted");
        this.numAccepted = Optional.ofNullable(numAccepted);
        return this;
    }

    /**
     * Total number of attendees who have accepted this event.
     */
    public CalendarAttendees withNumAccepted(Optional<Long> numAccepted) {
        Utils.checkNotNull(numAccepted, "numAccepted");
        this.numAccepted = numAccepted;
        return this;
    }

    /**
     * Total number of attendees who have declined this event.
     */
    public CalendarAttendees withNumDeclined(long numDeclined) {
        Utils.checkNotNull(numDeclined, "numDeclined");
        this.numDeclined = Optional.ofNullable(numDeclined);
        return this;
    }

    /**
     * Total number of attendees who have declined this event.
     */
    public CalendarAttendees withNumDeclined(Optional<Long> numDeclined) {
        Utils.checkNotNull(numDeclined, "numDeclined");
        this.numDeclined = numDeclined;
        return this;
    }

    /**
     * Total number of attendees who have not responded to this event.
     */
    public CalendarAttendees withNumNoResponse(long numNoResponse) {
        Utils.checkNotNull(numNoResponse, "numNoResponse");
        this.numNoResponse = Optional.ofNullable(numNoResponse);
        return this;
    }

    /**
     * Total number of attendees who have not responded to this event.
     */
    public CalendarAttendees withNumNoResponse(Optional<Long> numNoResponse) {
        Utils.checkNotNull(numNoResponse, "numNoResponse");
        this.numNoResponse = numNoResponse;
        return this;
    }

    /**
     * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
     */
    public CalendarAttendees withNumTentative(long numTentative) {
        Utils.checkNotNull(numTentative, "numTentative");
        this.numTentative = Optional.ofNullable(numTentative);
        return this;
    }

    /**
     * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
     */
    public CalendarAttendees withNumTentative(Optional<Long> numTentative) {
        Utils.checkNotNull(numTentative, "numTentative");
        this.numTentative = numTentative;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarAttendees other = (CalendarAttendees) o;
        return 
            Objects.deepEquals(this.people, other.people) &&
            Objects.deepEquals(this.isLimit, other.isLimit) &&
            Objects.deepEquals(this.total, other.total) &&
            Objects.deepEquals(this.numAccepted, other.numAccepted) &&
            Objects.deepEquals(this.numDeclined, other.numDeclined) &&
            Objects.deepEquals(this.numNoResponse, other.numNoResponse) &&
            Objects.deepEquals(this.numTentative, other.numTentative);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            people,
            isLimit,
            total,
            numAccepted,
            numDeclined,
            numNoResponse,
            numTentative);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarAttendees.class,
                "people", people,
                "isLimit", isLimit,
                "total", total,
                "numAccepted", numAccepted,
                "numDeclined", numDeclined,
                "numNoResponse", numNoResponse,
                "numTentative", numTentative);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<CalendarAttendee>> people = Optional.empty();
 
        private Optional<Boolean> isLimit = Optional.empty();
 
        private Optional<Long> total = Optional.empty();
 
        private Optional<Long> numAccepted = Optional.empty();
 
        private Optional<Long> numDeclined = Optional.empty();
 
        private Optional<Long> numNoResponse = Optional.empty();
 
        private Optional<Long> numTentative = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Full details of some of the attendees of this event
         */
        public Builder people(List<CalendarAttendee> people) {
            Utils.checkNotNull(people, "people");
            this.people = Optional.ofNullable(people);
            return this;
        }

        /**
         * Full details of some of the attendees of this event
         */
        public Builder people(Optional<? extends List<CalendarAttendee>> people) {
            Utils.checkNotNull(people, "people");
            this.people = people;
            return this;
        }

        /**
         * Whether the total count of the people returned is at the retrieval limit.
         */
        public Builder isLimit(boolean isLimit) {
            Utils.checkNotNull(isLimit, "isLimit");
            this.isLimit = Optional.ofNullable(isLimit);
            return this;
        }

        /**
         * Whether the total count of the people returned is at the retrieval limit.
         */
        public Builder isLimit(Optional<Boolean> isLimit) {
            Utils.checkNotNull(isLimit, "isLimit");
            this.isLimit = isLimit;
            return this;
        }

        /**
         * Total number of attendees in this event.
         */
        public Builder total(long total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }

        /**
         * Total number of attendees in this event.
         */
        public Builder total(Optional<Long> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        /**
         * Total number of attendees who have accepted this event.
         */
        public Builder numAccepted(long numAccepted) {
            Utils.checkNotNull(numAccepted, "numAccepted");
            this.numAccepted = Optional.ofNullable(numAccepted);
            return this;
        }

        /**
         * Total number of attendees who have accepted this event.
         */
        public Builder numAccepted(Optional<Long> numAccepted) {
            Utils.checkNotNull(numAccepted, "numAccepted");
            this.numAccepted = numAccepted;
            return this;
        }

        /**
         * Total number of attendees who have declined this event.
         */
        public Builder numDeclined(long numDeclined) {
            Utils.checkNotNull(numDeclined, "numDeclined");
            this.numDeclined = Optional.ofNullable(numDeclined);
            return this;
        }

        /**
         * Total number of attendees who have declined this event.
         */
        public Builder numDeclined(Optional<Long> numDeclined) {
            Utils.checkNotNull(numDeclined, "numDeclined");
            this.numDeclined = numDeclined;
            return this;
        }

        /**
         * Total number of attendees who have not responded to this event.
         */
        public Builder numNoResponse(long numNoResponse) {
            Utils.checkNotNull(numNoResponse, "numNoResponse");
            this.numNoResponse = Optional.ofNullable(numNoResponse);
            return this;
        }

        /**
         * Total number of attendees who have not responded to this event.
         */
        public Builder numNoResponse(Optional<Long> numNoResponse) {
            Utils.checkNotNull(numNoResponse, "numNoResponse");
            this.numNoResponse = numNoResponse;
            return this;
        }

        /**
         * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
         */
        public Builder numTentative(long numTentative) {
            Utils.checkNotNull(numTentative, "numTentative");
            this.numTentative = Optional.ofNullable(numTentative);
            return this;
        }

        /**
         * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
         */
        public Builder numTentative(Optional<Long> numTentative) {
            Utils.checkNotNull(numTentative, "numTentative");
            this.numTentative = numTentative;
            return this;
        }
        
        public CalendarAttendees build() {
            return new CalendarAttendees(
                people,
                isLimit,
                total,
                numAccepted,
                numDeclined,
                numNoResponse,
                numTentative);
        }
    }
}
