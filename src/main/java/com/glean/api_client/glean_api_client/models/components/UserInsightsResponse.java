/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class UserInsightsResponse {

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastLogTimestamp")
    private Optional<Long> lastLogTimestamp;

    /**
     * Insights for all active users with respect to set of actions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activityInsights")
    private Optional<? extends List<UserActivityInsight>> activityInsights;

    /**
     * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inactiveInsights")
    private Optional<? extends List<UserActivityInsight>> inactiveInsights;

    /**
     * Total number of teammates that have logged in to the product, that are still valid teammates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTeammates")
    private Optional<Long> totalTeammates;

    /**
     * Total number of active users in the requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalActiveUsers")
    private Optional<Long> totalActiveUsers;

    /**
     * list of departments applicable for users tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonCreator
    public UserInsightsResponse(
            @JsonProperty("lastLogTimestamp") Optional<Long> lastLogTimestamp,
            @JsonProperty("activityInsights") Optional<? extends List<UserActivityInsight>> activityInsights,
            @JsonProperty("inactiveInsights") Optional<? extends List<UserActivityInsight>> inactiveInsights,
            @JsonProperty("totalTeammates") Optional<Long> totalTeammates,
            @JsonProperty("totalActiveUsers") Optional<Long> totalActiveUsers,
            @JsonProperty("departments") Optional<? extends List<String>> departments) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        Utils.checkNotNull(activityInsights, "activityInsights");
        Utils.checkNotNull(inactiveInsights, "inactiveInsights");
        Utils.checkNotNull(totalTeammates, "totalTeammates");
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        Utils.checkNotNull(departments, "departments");
        this.lastLogTimestamp = lastLogTimestamp;
        this.activityInsights = activityInsights;
        this.inactiveInsights = inactiveInsights;
        this.totalTeammates = totalTeammates;
        this.totalActiveUsers = totalActiveUsers;
        this.departments = departments;
    }
    
    public UserInsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastLogTimestamp() {
        return lastLogTimestamp;
    }

    /**
     * Insights for all active users with respect to set of actions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserActivityInsight>> activityInsights() {
        return (Optional<List<UserActivityInsight>>) activityInsights;
    }

    /**
     * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserActivityInsight>> inactiveInsights() {
        return (Optional<List<UserActivityInsight>>) inactiveInsights;
    }

    /**
     * Total number of teammates that have logged in to the product, that are still valid teammates.
     */
    @JsonIgnore
    public Optional<Long> totalTeammates() {
        return totalTeammates;
    }

    /**
     * Total number of active users in the requested period.
     */
    @JsonIgnore
    public Optional<Long> totalActiveUsers() {
        return totalActiveUsers;
    }

    /**
     * list of departments applicable for users tab.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public UserInsightsResponse withLastLogTimestamp(long lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
        return this;
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public UserInsightsResponse withLastLogTimestamp(Optional<Long> lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = lastLogTimestamp;
        return this;
    }

    /**
     * Insights for all active users with respect to set of actions.
     */
    public UserInsightsResponse withActivityInsights(List<UserActivityInsight> activityInsights) {
        Utils.checkNotNull(activityInsights, "activityInsights");
        this.activityInsights = Optional.ofNullable(activityInsights);
        return this;
    }

    /**
     * Insights for all active users with respect to set of actions.
     */
    public UserInsightsResponse withActivityInsights(Optional<? extends List<UserActivityInsight>> activityInsights) {
        Utils.checkNotNull(activityInsights, "activityInsights");
        this.activityInsights = activityInsights;
        return this;
    }

    /**
     * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
     */
    public UserInsightsResponse withInactiveInsights(List<UserActivityInsight> inactiveInsights) {
        Utils.checkNotNull(inactiveInsights, "inactiveInsights");
        this.inactiveInsights = Optional.ofNullable(inactiveInsights);
        return this;
    }

    /**
     * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
     */
    public UserInsightsResponse withInactiveInsights(Optional<? extends List<UserActivityInsight>> inactiveInsights) {
        Utils.checkNotNull(inactiveInsights, "inactiveInsights");
        this.inactiveInsights = inactiveInsights;
        return this;
    }

    /**
     * Total number of teammates that have logged in to the product, that are still valid teammates.
     */
    public UserInsightsResponse withTotalTeammates(long totalTeammates) {
        Utils.checkNotNull(totalTeammates, "totalTeammates");
        this.totalTeammates = Optional.ofNullable(totalTeammates);
        return this;
    }

    /**
     * Total number of teammates that have logged in to the product, that are still valid teammates.
     */
    public UserInsightsResponse withTotalTeammates(Optional<Long> totalTeammates) {
        Utils.checkNotNull(totalTeammates, "totalTeammates");
        this.totalTeammates = totalTeammates;
        return this;
    }

    /**
     * Total number of active users in the requested period.
     */
    public UserInsightsResponse withTotalActiveUsers(long totalActiveUsers) {
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        this.totalActiveUsers = Optional.ofNullable(totalActiveUsers);
        return this;
    }

    /**
     * Total number of active users in the requested period.
     */
    public UserInsightsResponse withTotalActiveUsers(Optional<Long> totalActiveUsers) {
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        this.totalActiveUsers = totalActiveUsers;
        return this;
    }

    /**
     * list of departments applicable for users tab.
     */
    public UserInsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * list of departments applicable for users tab.
     */
    public UserInsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserInsightsResponse other = (UserInsightsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.lastLogTimestamp, other.lastLogTimestamp) &&
            Utils.enhancedDeepEquals(this.activityInsights, other.activityInsights) &&
            Utils.enhancedDeepEquals(this.inactiveInsights, other.inactiveInsights) &&
            Utils.enhancedDeepEquals(this.totalTeammates, other.totalTeammates) &&
            Utils.enhancedDeepEquals(this.totalActiveUsers, other.totalActiveUsers) &&
            Utils.enhancedDeepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            lastLogTimestamp,
            activityInsights,
            inactiveInsights,
            totalTeammates,
            totalActiveUsers,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserInsightsResponse.class,
                "lastLogTimestamp", lastLogTimestamp,
                "activityInsights", activityInsights,
                "inactiveInsights", inactiveInsights,
                "totalTeammates", totalTeammates,
                "totalActiveUsers", totalActiveUsers,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private Optional<Long> lastLogTimestamp = Optional.empty();
 
        private Optional<? extends List<UserActivityInsight>> activityInsights = Optional.empty();
 
        private Optional<? extends List<UserActivityInsight>> inactiveInsights = Optional.empty();
 
        private Optional<Long> totalTeammates = Optional.empty();
 
        private Optional<Long> totalActiveUsers = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(long lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
            return this;
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(Optional<Long> lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = lastLogTimestamp;
            return this;
        }

        /**
         * Insights for all active users with respect to set of actions.
         */
        public Builder activityInsights(List<UserActivityInsight> activityInsights) {
            Utils.checkNotNull(activityInsights, "activityInsights");
            this.activityInsights = Optional.ofNullable(activityInsights);
            return this;
        }

        /**
         * Insights for all active users with respect to set of actions.
         */
        public Builder activityInsights(Optional<? extends List<UserActivityInsight>> activityInsights) {
            Utils.checkNotNull(activityInsights, "activityInsights");
            this.activityInsights = activityInsights;
            return this;
        }

        /**
         * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
         */
        public Builder inactiveInsights(List<UserActivityInsight> inactiveInsights) {
            Utils.checkNotNull(inactiveInsights, "inactiveInsights");
            this.inactiveInsights = Optional.ofNullable(inactiveInsights);
            return this;
        }

        /**
         * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
         */
        public Builder inactiveInsights(Optional<? extends List<UserActivityInsight>> inactiveInsights) {
            Utils.checkNotNull(inactiveInsights, "inactiveInsights");
            this.inactiveInsights = inactiveInsights;
            return this;
        }

        /**
         * Total number of teammates that have logged in to the product, that are still valid teammates.
         */
        public Builder totalTeammates(long totalTeammates) {
            Utils.checkNotNull(totalTeammates, "totalTeammates");
            this.totalTeammates = Optional.ofNullable(totalTeammates);
            return this;
        }

        /**
         * Total number of teammates that have logged in to the product, that are still valid teammates.
         */
        public Builder totalTeammates(Optional<Long> totalTeammates) {
            Utils.checkNotNull(totalTeammates, "totalTeammates");
            this.totalTeammates = totalTeammates;
            return this;
        }

        /**
         * Total number of active users in the requested period.
         */
        public Builder totalActiveUsers(long totalActiveUsers) {
            Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
            this.totalActiveUsers = Optional.ofNullable(totalActiveUsers);
            return this;
        }

        /**
         * Total number of active users in the requested period.
         */
        public Builder totalActiveUsers(Optional<Long> totalActiveUsers) {
            Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
            this.totalActiveUsers = totalActiveUsers;
            return this;
        }

        /**
         * list of departments applicable for users tab.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * list of departments applicable for users tab.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public UserInsightsResponse build() {
            return new UserInsightsResponse(
                lastLogTimestamp,
                activityInsights,
                inactiveInsights,
                totalTeammates,
                totalActiveUsers,
                departments);
        }
    }
}
