/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class ChatMetadataResult {

    /**
     * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chat")
    private Optional<? extends ChatMetadata> chat;

    /**
     * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonCreator
    public ChatMetadataResult(
            @JsonProperty("chat") Optional<? extends ChatMetadata> chat,
            @JsonProperty("trackingToken") Optional<String> trackingToken) {
        Utils.checkNotNull(chat, "chat");
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.chat = chat;
        this.trackingToken = trackingToken;
    }
    
    public ChatMetadataResult() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatMetadata> chat() {
        return (Optional<ChatMetadata>) chat;
    }

    /**
     * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
     */
    public ChatMetadataResult withChat(ChatMetadata chat) {
        Utils.checkNotNull(chat, "chat");
        this.chat = Optional.ofNullable(chat);
        return this;
    }

    /**
     * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
     */
    public ChatMetadataResult withChat(Optional<? extends ChatMetadata> chat) {
        Utils.checkNotNull(chat, "chat");
        this.chat = chat;
        return this;
    }

    /**
     * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
     */
    public ChatMetadataResult withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
     */
    public ChatMetadataResult withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatMetadataResult other = (ChatMetadataResult) o;
        return 
            Utils.enhancedDeepEquals(this.chat, other.chat) &&
            Utils.enhancedDeepEquals(this.trackingToken, other.trackingToken);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            chat,
            trackingToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatMetadataResult.class,
                "chat", chat,
                "trackingToken", trackingToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends ChatMetadata> chat = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
         */
        public Builder chat(ChatMetadata chat) {
            Utils.checkNotNull(chat, "chat");
            this.chat = Optional.ofNullable(chat);
            return this;
        }

        /**
         * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
         */
        public Builder chat(Optional<? extends ChatMetadata> chat) {
            Utils.checkNotNull(chat, "chat");
            this.chat = chat;
            return this;
        }

        /**
         * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }
        
        public ChatMetadataResult build() {
            return new ChatMetadataResult(
                chat,
                trackingToken);
        }
    }
}
