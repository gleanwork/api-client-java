/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.models.components.Feedback;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class FeedbackRequest {

    /**
     * A URL encoded versions of Feedback. This is useful for requests.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=feedback")
    private Optional<String> feedbackQueryParameter;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends Feedback> feedback1;

    @JsonCreator
    public FeedbackRequest(
            Optional<String> feedbackQueryParameter,
            Optional<? extends Feedback> feedback1) {
        Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
        Utils.checkNotNull(feedback1, "feedback1");
        this.feedbackQueryParameter = feedbackQueryParameter;
        this.feedback1 = feedback1;
    }
    
    public FeedbackRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A URL encoded versions of Feedback. This is useful for requests.
     */
    @JsonIgnore
    public Optional<String> feedbackQueryParameter() {
        return feedbackQueryParameter;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Feedback> feedback1() {
        return (Optional<Feedback>) feedback1;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A URL encoded versions of Feedback. This is useful for requests.
     */
    public FeedbackRequest withFeedbackQueryParameter(String feedbackQueryParameter) {
        Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
        this.feedbackQueryParameter = Optional.ofNullable(feedbackQueryParameter);
        return this;
    }

    /**
     * A URL encoded versions of Feedback. This is useful for requests.
     */
    public FeedbackRequest withFeedbackQueryParameter(Optional<String> feedbackQueryParameter) {
        Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
        this.feedbackQueryParameter = feedbackQueryParameter;
        return this;
    }

    public FeedbackRequest withFeedback1(Feedback feedback1) {
        Utils.checkNotNull(feedback1, "feedback1");
        this.feedback1 = Optional.ofNullable(feedback1);
        return this;
    }

    public FeedbackRequest withFeedback1(Optional<? extends Feedback> feedback1) {
        Utils.checkNotNull(feedback1, "feedback1");
        this.feedback1 = feedback1;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedbackRequest other = (FeedbackRequest) o;
        return 
            Objects.deepEquals(this.feedbackQueryParameter, other.feedbackQueryParameter) &&
            Objects.deepEquals(this.feedback1, other.feedback1);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            feedbackQueryParameter,
            feedback1);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedbackRequest.class,
                "feedbackQueryParameter", feedbackQueryParameter,
                "feedback1", feedback1);
    }
    
    public final static class Builder {
 
        private Optional<String> feedbackQueryParameter = Optional.empty();
 
        private Optional<? extends Feedback> feedback1 = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A URL encoded versions of Feedback. This is useful for requests.
         */
        public Builder feedbackQueryParameter(String feedbackQueryParameter) {
            Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
            this.feedbackQueryParameter = Optional.ofNullable(feedbackQueryParameter);
            return this;
        }

        /**
         * A URL encoded versions of Feedback. This is useful for requests.
         */
        public Builder feedbackQueryParameter(Optional<String> feedbackQueryParameter) {
            Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
            this.feedbackQueryParameter = feedbackQueryParameter;
            return this;
        }

        public Builder feedback1(Feedback feedback1) {
            Utils.checkNotNull(feedback1, "feedback1");
            this.feedback1 = Optional.ofNullable(feedback1);
            return this;
        }

        public Builder feedback1(Optional<? extends Feedback> feedback1) {
            Utils.checkNotNull(feedback1, "feedback1");
            this.feedback1 = feedback1;
            return this;
        }
        
        public FeedbackRequest build() {
            return new FeedbackRequest(
                feedbackQueryParameter,
                feedback1);
        }
    }
}
