/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class SearchResultSnippet {

    /**
     * A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
     */
    @JsonProperty("snippet")
    private String snippet;

    /**
     * The mime type of the snippets, currently either text/plain or text/html.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    private Optional<String> mimeType;

    /**
     * A matching snippet from the document with no highlights.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    /**
     * Used for sorting based off the snippet's location within all_snippetable_text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snippetTextOrdering")
    private Optional<Long> snippetTextOrdering;

    /**
     * The bolded ranges within text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ranges")
    private Optional<? extends List<TextRange>> ranges;

    /**
     * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public SearchResultSnippet(
            @JsonProperty("snippet") String snippet,
            @JsonProperty("mimeType") Optional<String> mimeType,
            @JsonProperty("text") Optional<String> text,
            @JsonProperty("snippetTextOrdering") Optional<Long> snippetTextOrdering,
            @JsonProperty("ranges") Optional<? extends List<TextRange>> ranges,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(snippet, "snippet");
        Utils.checkNotNull(mimeType, "mimeType");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(snippetTextOrdering, "snippetTextOrdering");
        Utils.checkNotNull(ranges, "ranges");
        Utils.checkNotNull(url, "url");
        this.snippet = snippet;
        this.mimeType = mimeType;
        this.text = text;
        this.snippetTextOrdering = snippetTextOrdering;
        this.ranges = ranges;
        this.url = url;
    }
    
    public SearchResultSnippet(
            String snippet) {
        this(snippet, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
     */
    @JsonIgnore
    public String snippet() {
        return snippet;
    }

    /**
     * The mime type of the snippets, currently either text/plain or text/html.
     */
    @JsonIgnore
    public Optional<String> mimeType() {
        return mimeType;
    }

    /**
     * A matching snippet from the document with no highlights.
     */
    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    /**
     * Used for sorting based off the snippet's location within all_snippetable_text
     */
    @JsonIgnore
    public Optional<Long> snippetTextOrdering() {
        return snippetTextOrdering;
    }

    /**
     * The bolded ranges within text.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> ranges() {
        return (Optional<List<TextRange>>) ranges;
    }

    /**
     * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
     */
    public SearchResultSnippet withSnippet(String snippet) {
        Utils.checkNotNull(snippet, "snippet");
        this.snippet = snippet;
        return this;
    }

    /**
     * The mime type of the snippets, currently either text/plain or text/html.
     */
    public SearchResultSnippet withMimeType(String mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = Optional.ofNullable(mimeType);
        return this;
    }

    /**
     * The mime type of the snippets, currently either text/plain or text/html.
     */
    public SearchResultSnippet withMimeType(Optional<String> mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = mimeType;
        return this;
    }

    /**
     * A matching snippet from the document with no highlights.
     */
    public SearchResultSnippet withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    /**
     * A matching snippet from the document with no highlights.
     */
    public SearchResultSnippet withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * Used for sorting based off the snippet's location within all_snippetable_text
     */
    public SearchResultSnippet withSnippetTextOrdering(long snippetTextOrdering) {
        Utils.checkNotNull(snippetTextOrdering, "snippetTextOrdering");
        this.snippetTextOrdering = Optional.ofNullable(snippetTextOrdering);
        return this;
    }

    /**
     * Used for sorting based off the snippet's location within all_snippetable_text
     */
    public SearchResultSnippet withSnippetTextOrdering(Optional<Long> snippetTextOrdering) {
        Utils.checkNotNull(snippetTextOrdering, "snippetTextOrdering");
        this.snippetTextOrdering = snippetTextOrdering;
        return this;
    }

    /**
     * The bolded ranges within text.
     */
    public SearchResultSnippet withRanges(List<TextRange> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = Optional.ofNullable(ranges);
        return this;
    }

    /**
     * The bolded ranges within text.
     */
    public SearchResultSnippet withRanges(Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = ranges;
        return this;
    }

    /**
     * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
     */
    public SearchResultSnippet withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
     */
    public SearchResultSnippet withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchResultSnippet other = (SearchResultSnippet) o;
        return 
            Utils.enhancedDeepEquals(this.snippet, other.snippet) &&
            Utils.enhancedDeepEquals(this.mimeType, other.mimeType) &&
            Utils.enhancedDeepEquals(this.text, other.text) &&
            Utils.enhancedDeepEquals(this.snippetTextOrdering, other.snippetTextOrdering) &&
            Utils.enhancedDeepEquals(this.ranges, other.ranges) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            snippet,
            mimeType,
            text,
            snippetTextOrdering,
            ranges,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchResultSnippet.class,
                "snippet", snippet,
                "mimeType", mimeType,
                "text", text,
                "snippetTextOrdering", snippetTextOrdering,
                "ranges", ranges,
                "url", url);
    }
    
    public final static class Builder {
 
        private String snippet;
 
        private Optional<String> mimeType = Optional.empty();
 
        private Optional<String> text = Optional.empty();
 
        private Optional<Long> snippetTextOrdering = Optional.empty();
 
        private Optional<? extends List<TextRange>> ranges = Optional.empty();
 
        private Optional<String> url = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
         */
        public Builder snippet(String snippet) {
            Utils.checkNotNull(snippet, "snippet");
            this.snippet = snippet;
            return this;
        }

        /**
         * The mime type of the snippets, currently either text/plain or text/html.
         */
        public Builder mimeType(String mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = Optional.ofNullable(mimeType);
            return this;
        }

        /**
         * The mime type of the snippets, currently either text/plain or text/html.
         */
        public Builder mimeType(Optional<String> mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = mimeType;
            return this;
        }

        /**
         * A matching snippet from the document with no highlights.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * A matching snippet from the document with no highlights.
         */
        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        /**
         * Used for sorting based off the snippet's location within all_snippetable_text
         */
        public Builder snippetTextOrdering(long snippetTextOrdering) {
            Utils.checkNotNull(snippetTextOrdering, "snippetTextOrdering");
            this.snippetTextOrdering = Optional.ofNullable(snippetTextOrdering);
            return this;
        }

        /**
         * Used for sorting based off the snippet's location within all_snippetable_text
         */
        public Builder snippetTextOrdering(Optional<Long> snippetTextOrdering) {
            Utils.checkNotNull(snippetTextOrdering, "snippetTextOrdering");
            this.snippetTextOrdering = snippetTextOrdering;
            return this;
        }

        /**
         * The bolded ranges within text.
         */
        public Builder ranges(List<TextRange> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * The bolded ranges within text.
         */
        public Builder ranges(Optional<? extends List<TextRange>> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = ranges;
            return this;
        }

        /**
         * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public SearchResultSnippet build() {
            return new SearchResultSnippet(
                snippet,
                mimeType,
                text,
                snippetTextOrdering,
                ranges,
                url);
        }
    }
}
