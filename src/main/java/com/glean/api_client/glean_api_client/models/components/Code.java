/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Code {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repoName")
    private Optional<String> repoName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileName")
    private Optional<String> fileName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileUrl")
    private Optional<String> fileUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private Optional<? extends List<CodeLine>> lines;

    /**
     * Last file match for a repo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLastMatch")
    private Optional<Boolean> isLastMatch;

    @JsonCreator
    public Code(
            @JsonProperty("repoName") Optional<String> repoName,
            @JsonProperty("fileName") Optional<String> fileName,
            @JsonProperty("fileUrl") Optional<String> fileUrl,
            @JsonProperty("lines") Optional<? extends List<CodeLine>> lines,
            @JsonProperty("isLastMatch") Optional<Boolean> isLastMatch) {
        Utils.checkNotNull(repoName, "repoName");
        Utils.checkNotNull(fileName, "fileName");
        Utils.checkNotNull(fileUrl, "fileUrl");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(isLastMatch, "isLastMatch");
        this.repoName = repoName;
        this.fileName = fileName;
        this.fileUrl = fileUrl;
        this.lines = lines;
        this.isLastMatch = isLastMatch;
    }
    
    public Code() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> repoName() {
        return repoName;
    }

    @JsonIgnore
    public Optional<String> fileName() {
        return fileName;
    }

    @JsonIgnore
    public Optional<String> fileUrl() {
        return fileUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CodeLine>> lines() {
        return (Optional<List<CodeLine>>) lines;
    }

    /**
     * Last file match for a repo
     */
    @JsonIgnore
    public Optional<Boolean> isLastMatch() {
        return isLastMatch;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Code withRepoName(String repoName) {
        Utils.checkNotNull(repoName, "repoName");
        this.repoName = Optional.ofNullable(repoName);
        return this;
    }

    public Code withRepoName(Optional<String> repoName) {
        Utils.checkNotNull(repoName, "repoName");
        this.repoName = repoName;
        return this;
    }

    public Code withFileName(String fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = Optional.ofNullable(fileName);
        return this;
    }

    public Code withFileName(Optional<String> fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = fileName;
        return this;
    }

    public Code withFileUrl(String fileUrl) {
        Utils.checkNotNull(fileUrl, "fileUrl");
        this.fileUrl = Optional.ofNullable(fileUrl);
        return this;
    }

    public Code withFileUrl(Optional<String> fileUrl) {
        Utils.checkNotNull(fileUrl, "fileUrl");
        this.fileUrl = fileUrl;
        return this;
    }

    public Code withLines(List<CodeLine> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = Optional.ofNullable(lines);
        return this;
    }

    public Code withLines(Optional<? extends List<CodeLine>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * Last file match for a repo
     */
    public Code withIsLastMatch(boolean isLastMatch) {
        Utils.checkNotNull(isLastMatch, "isLastMatch");
        this.isLastMatch = Optional.ofNullable(isLastMatch);
        return this;
    }

    /**
     * Last file match for a repo
     */
    public Code withIsLastMatch(Optional<Boolean> isLastMatch) {
        Utils.checkNotNull(isLastMatch, "isLastMatch");
        this.isLastMatch = isLastMatch;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Code other = (Code) o;
        return 
            Objects.deepEquals(this.repoName, other.repoName) &&
            Objects.deepEquals(this.fileName, other.fileName) &&
            Objects.deepEquals(this.fileUrl, other.fileUrl) &&
            Objects.deepEquals(this.lines, other.lines) &&
            Objects.deepEquals(this.isLastMatch, other.isLastMatch);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            repoName,
            fileName,
            fileUrl,
            lines,
            isLastMatch);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Code.class,
                "repoName", repoName,
                "fileName", fileName,
                "fileUrl", fileUrl,
                "lines", lines,
                "isLastMatch", isLastMatch);
    }
    
    public final static class Builder {
 
        private Optional<String> repoName = Optional.empty();
 
        private Optional<String> fileName = Optional.empty();
 
        private Optional<String> fileUrl = Optional.empty();
 
        private Optional<? extends List<CodeLine>> lines = Optional.empty();
 
        private Optional<Boolean> isLastMatch = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder repoName(String repoName) {
            Utils.checkNotNull(repoName, "repoName");
            this.repoName = Optional.ofNullable(repoName);
            return this;
        }

        public Builder repoName(Optional<String> repoName) {
            Utils.checkNotNull(repoName, "repoName");
            this.repoName = repoName;
            return this;
        }

        public Builder fileName(String fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = Optional.ofNullable(fileName);
            return this;
        }

        public Builder fileName(Optional<String> fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = fileName;
            return this;
        }

        public Builder fileUrl(String fileUrl) {
            Utils.checkNotNull(fileUrl, "fileUrl");
            this.fileUrl = Optional.ofNullable(fileUrl);
            return this;
        }

        public Builder fileUrl(Optional<String> fileUrl) {
            Utils.checkNotNull(fileUrl, "fileUrl");
            this.fileUrl = fileUrl;
            return this;
        }

        public Builder lines(List<CodeLine> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = Optional.ofNullable(lines);
            return this;
        }

        public Builder lines(Optional<? extends List<CodeLine>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }

        /**
         * Last file match for a repo
         */
        public Builder isLastMatch(boolean isLastMatch) {
            Utils.checkNotNull(isLastMatch, "isLastMatch");
            this.isLastMatch = Optional.ofNullable(isLastMatch);
            return this;
        }

        /**
         * Last file match for a repo
         */
        public Builder isLastMatch(Optional<Boolean> isLastMatch) {
            Utils.checkNotNull(isLastMatch, "isLastMatch");
            this.isLastMatch = isLastMatch;
            return this;
        }
        
        public Code build() {
            return new Code(
                repoName,
                fileName,
                fileUrl,
                lines,
                isLastMatch);
        }
    }
}
