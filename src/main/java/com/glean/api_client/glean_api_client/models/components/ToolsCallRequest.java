/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Map;

public class ToolsCallRequest {

    /**
     * Required name of the tool to execute
     */
    @JsonProperty("name")
    private String name;

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    @JsonProperty("parameters")
    private Map<String, ToolsCallParameter> parameters;

    @JsonCreator
    public ToolsCallRequest(
            @JsonProperty("name") String name,
            @JsonProperty("parameters") Map<String, ToolsCallParameter> parameters) {
        Utils.checkNotNull(name, "name");
        parameters = Utils.emptyMapIfNull(parameters);
        this.name = name;
        this.parameters = parameters;
    }

    /**
     * Required name of the tool to execute
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    @JsonIgnore
    public Map<String, ToolsCallParameter> parameters() {
        return parameters;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Required name of the tool to execute
     */
    public ToolsCallRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    public ToolsCallRequest withParameters(Map<String, ToolsCallParameter> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolsCallRequest other = (ToolsCallRequest) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.parameters, other.parameters);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            parameters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ToolsCallRequest.class,
                "name", name,
                "parameters", parameters);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Map<String, ToolsCallParameter> parameters;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Required name of the tool to execute
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
         */
        public Builder parameters(Map<String, ToolsCallParameter> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }
        
        public ToolsCallRequest build() {
            return new ToolsCallRequest(
                name,
                parameters);
        }
    }
}
