/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class FacetBucket {

    /**
     * Estimated number of results in this facet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * Estimated percentage of results in this facet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    private Optional<Long> percentage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends FacetValue> value;

    @JsonCreator
    public FacetBucket(
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("percentage") Optional<Long> percentage,
            @JsonProperty("value") Optional<? extends FacetValue> value) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(percentage, "percentage");
        Utils.checkNotNull(value, "value");
        this.count = count;
        this.datasource = datasource;
        this.percentage = percentage;
        this.value = value;
    }
    
    public FacetBucket() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Estimated number of results in this facet.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * Estimated percentage of results in this facet.
     */
    @JsonIgnore
    public Optional<Long> percentage() {
        return percentage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FacetValue> value() {
        return (Optional<FacetValue>) value;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Estimated number of results in this facet.
     */
    public FacetBucket withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * Estimated number of results in this facet.
     */
    public FacetBucket withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
     */
    public FacetBucket withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
     */
    public FacetBucket withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * Estimated percentage of results in this facet.
     */
    public FacetBucket withPercentage(long percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = Optional.ofNullable(percentage);
        return this;
    }

    /**
     * Estimated percentage of results in this facet.
     */
    public FacetBucket withPercentage(Optional<Long> percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = percentage;
        return this;
    }

    public FacetBucket withValue(FacetValue value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public FacetBucket withValue(Optional<? extends FacetValue> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetBucket other = (FacetBucket) o;
        return 
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.percentage, other.percentage) &&
            Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            count,
            datasource,
            percentage,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetBucket.class,
                "count", count,
                "datasource", datasource,
                "percentage", percentage,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<Long> percentage = Optional.empty();
 
        private Optional<? extends FacetValue> value = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Estimated number of results in this facet.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Estimated number of results in this facet.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        /**
         * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * Estimated percentage of results in this facet.
         */
        public Builder percentage(long percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        /**
         * Estimated percentage of results in this facet.
         */
        public Builder percentage(Optional<Long> percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = percentage;
            return this;
        }

        public Builder value(FacetValue value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends FacetValue> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public FacetBucket build() {
            return new FacetBucket(
                count,
                datasource,
                percentage,
                value);
        }
    }
}
