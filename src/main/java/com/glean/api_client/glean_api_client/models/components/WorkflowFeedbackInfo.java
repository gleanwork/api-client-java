/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class WorkflowFeedbackInfo {

    /**
     * Where the feedback of the workflow originated from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends WorkflowFeedbackInfoSource> source;

    @JsonCreator
    public WorkflowFeedbackInfo(
            @JsonProperty("source") Optional<? extends WorkflowFeedbackInfoSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
    }
    
    public WorkflowFeedbackInfo() {
        this(Optional.empty());
    }

    /**
     * Where the feedback of the workflow originated from
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkflowFeedbackInfoSource> source() {
        return (Optional<WorkflowFeedbackInfoSource>) source;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Where the feedback of the workflow originated from
     */
    public WorkflowFeedbackInfo withSource(WorkflowFeedbackInfoSource source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * Where the feedback of the workflow originated from
     */
    public WorkflowFeedbackInfo withSource(Optional<? extends WorkflowFeedbackInfoSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowFeedbackInfo other = (WorkflowFeedbackInfo) o;
        return 
            Utils.enhancedDeepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowFeedbackInfo.class,
                "source", source);
    }
    
    public final static class Builder {
 
        private Optional<? extends WorkflowFeedbackInfoSource> source = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Where the feedback of the workflow originated from
         */
        public Builder source(WorkflowFeedbackInfoSource source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * Where the feedback of the workflow originated from
         */
        public Builder source(Optional<? extends WorkflowFeedbackInfoSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public WorkflowFeedbackInfo build() {
            return new WorkflowFeedbackInfo(
                source);
        }
    }
}
