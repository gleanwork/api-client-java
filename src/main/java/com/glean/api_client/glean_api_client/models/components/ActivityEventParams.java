/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ActivityEventParams {

    /**
     * The HTML content of the page body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodyContent")
    private Optional<String> bodyContent;

    /**
     * The full datasource instance name inferred from the URL of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstance")
    private Optional<String> datasourceInstance;

    /**
     * The datasource without the instance inferred from the URL of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceOnlyName")
    private Optional<String> instanceOnlyName;

    /**
     * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<Long> duration;

    /**
     * The user's search query associated with a SEARCH.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * The referring URL of the VIEW or SEARCH.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referrer")
    private Optional<String> referrer;

    /**
     * The page title associated with the URL of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("truncated")
    private Optional<Boolean> truncated;

    @JsonCreator
    public ActivityEventParams(
            @JsonProperty("bodyContent") Optional<String> bodyContent,
            @JsonProperty("datasourceInstance") Optional<String> datasourceInstance,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("instanceOnlyName") Optional<String> instanceOnlyName,
            @JsonProperty("duration") Optional<Long> duration,
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("referrer") Optional<String> referrer,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("truncated") Optional<Boolean> truncated) {
        Utils.checkNotNull(bodyContent, "bodyContent");
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(instanceOnlyName, "instanceOnlyName");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(referrer, "referrer");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(truncated, "truncated");
        this.bodyContent = bodyContent;
        this.datasourceInstance = datasourceInstance;
        this.datasource = datasource;
        this.instanceOnlyName = instanceOnlyName;
        this.duration = duration;
        this.query = query;
        this.referrer = referrer;
        this.title = title;
        this.truncated = truncated;
    }
    
    public ActivityEventParams() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The HTML content of the page body.
     */
    @JsonIgnore
    public Optional<String> bodyContent() {
        return bodyContent;
    }

    /**
     * The full datasource instance name inferred from the URL of the event
     */
    @JsonIgnore
    public Optional<String> datasourceInstance() {
        return datasourceInstance;
    }

    /**
     * The datasource without the instance inferred from the URL of the event
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
     */
    @JsonIgnore
    public Optional<String> instanceOnlyName() {
        return instanceOnlyName;
    }

    /**
     * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
     */
    @JsonIgnore
    public Optional<Long> duration() {
        return duration;
    }

    /**
     * The user's search query associated with a SEARCH.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * The referring URL of the VIEW or SEARCH.
     */
    @JsonIgnore
    public Optional<String> referrer() {
        return referrer;
    }

    /**
     * The page title associated with the URL of the event
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
     */
    @JsonIgnore
    public Optional<Boolean> truncated() {
        return truncated;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The HTML content of the page body.
     */
    public ActivityEventParams withBodyContent(String bodyContent) {
        Utils.checkNotNull(bodyContent, "bodyContent");
        this.bodyContent = Optional.ofNullable(bodyContent);
        return this;
    }

    /**
     * The HTML content of the page body.
     */
    public ActivityEventParams withBodyContent(Optional<String> bodyContent) {
        Utils.checkNotNull(bodyContent, "bodyContent");
        this.bodyContent = bodyContent;
        return this;
    }

    /**
     * The full datasource instance name inferred from the URL of the event
     */
    public ActivityEventParams withDatasourceInstance(String datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = Optional.ofNullable(datasourceInstance);
        return this;
    }

    /**
     * The full datasource instance name inferred from the URL of the event
     */
    public ActivityEventParams withDatasourceInstance(Optional<String> datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = datasourceInstance;
        return this;
    }

    /**
     * The datasource without the instance inferred from the URL of the event
     */
    public ActivityEventParams withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The datasource without the instance inferred from the URL of the event
     */
    public ActivityEventParams withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
     */
    public ActivityEventParams withInstanceOnlyName(String instanceOnlyName) {
        Utils.checkNotNull(instanceOnlyName, "instanceOnlyName");
        this.instanceOnlyName = Optional.ofNullable(instanceOnlyName);
        return this;
    }

    /**
     * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
     */
    public ActivityEventParams withInstanceOnlyName(Optional<String> instanceOnlyName) {
        Utils.checkNotNull(instanceOnlyName, "instanceOnlyName");
        this.instanceOnlyName = instanceOnlyName;
        return this;
    }

    /**
     * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
     */
    public ActivityEventParams withDuration(long duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    /**
     * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
     */
    public ActivityEventParams withDuration(Optional<Long> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * The user's search query associated with a SEARCH.
     */
    public ActivityEventParams withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * The user's search query associated with a SEARCH.
     */
    public ActivityEventParams withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * The referring URL of the VIEW or SEARCH.
     */
    public ActivityEventParams withReferrer(String referrer) {
        Utils.checkNotNull(referrer, "referrer");
        this.referrer = Optional.ofNullable(referrer);
        return this;
    }

    /**
     * The referring URL of the VIEW or SEARCH.
     */
    public ActivityEventParams withReferrer(Optional<String> referrer) {
        Utils.checkNotNull(referrer, "referrer");
        this.referrer = referrer;
        return this;
    }

    /**
     * The page title associated with the URL of the event
     */
    public ActivityEventParams withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The page title associated with the URL of the event
     */
    public ActivityEventParams withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
     */
    public ActivityEventParams withTruncated(boolean truncated) {
        Utils.checkNotNull(truncated, "truncated");
        this.truncated = Optional.ofNullable(truncated);
        return this;
    }

    /**
     * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
     */
    public ActivityEventParams withTruncated(Optional<Boolean> truncated) {
        Utils.checkNotNull(truncated, "truncated");
        this.truncated = truncated;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityEventParams other = (ActivityEventParams) o;
        return 
            Objects.deepEquals(this.bodyContent, other.bodyContent) &&
            Objects.deepEquals(this.datasourceInstance, other.datasourceInstance) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.instanceOnlyName, other.instanceOnlyName) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.referrer, other.referrer) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.truncated, other.truncated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bodyContent,
            datasourceInstance,
            datasource,
            instanceOnlyName,
            duration,
            query,
            referrer,
            title,
            truncated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityEventParams.class,
                "bodyContent", bodyContent,
                "datasourceInstance", datasourceInstance,
                "datasource", datasource,
                "instanceOnlyName", instanceOnlyName,
                "duration", duration,
                "query", query,
                "referrer", referrer,
                "title", title,
                "truncated", truncated);
    }
    
    public final static class Builder {
 
        private Optional<String> bodyContent = Optional.empty();
 
        private Optional<String> datasourceInstance = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> instanceOnlyName = Optional.empty();
 
        private Optional<Long> duration = Optional.empty();
 
        private Optional<String> query = Optional.empty();
 
        private Optional<String> referrer = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<Boolean> truncated = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The HTML content of the page body.
         */
        public Builder bodyContent(String bodyContent) {
            Utils.checkNotNull(bodyContent, "bodyContent");
            this.bodyContent = Optional.ofNullable(bodyContent);
            return this;
        }

        /**
         * The HTML content of the page body.
         */
        public Builder bodyContent(Optional<String> bodyContent) {
            Utils.checkNotNull(bodyContent, "bodyContent");
            this.bodyContent = bodyContent;
            return this;
        }

        /**
         * The full datasource instance name inferred from the URL of the event
         */
        public Builder datasourceInstance(String datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = Optional.ofNullable(datasourceInstance);
            return this;
        }

        /**
         * The full datasource instance name inferred from the URL of the event
         */
        public Builder datasourceInstance(Optional<String> datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = datasourceInstance;
            return this;
        }

        /**
         * The datasource without the instance inferred from the URL of the event
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The datasource without the instance inferred from the URL of the event
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
         */
        public Builder instanceOnlyName(String instanceOnlyName) {
            Utils.checkNotNull(instanceOnlyName, "instanceOnlyName");
            this.instanceOnlyName = Optional.ofNullable(instanceOnlyName);
            return this;
        }

        /**
         * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
         */
        public Builder instanceOnlyName(Optional<String> instanceOnlyName) {
            Utils.checkNotNull(instanceOnlyName, "instanceOnlyName");
            this.instanceOnlyName = instanceOnlyName;
            return this;
        }

        /**
         * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
         */
        public Builder duration(long duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        /**
         * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
         */
        public Builder duration(Optional<Long> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * The user's search query associated with a SEARCH.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * The user's search query associated with a SEARCH.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * The referring URL of the VIEW or SEARCH.
         */
        public Builder referrer(String referrer) {
            Utils.checkNotNull(referrer, "referrer");
            this.referrer = Optional.ofNullable(referrer);
            return this;
        }

        /**
         * The referring URL of the VIEW or SEARCH.
         */
        public Builder referrer(Optional<String> referrer) {
            Utils.checkNotNull(referrer, "referrer");
            this.referrer = referrer;
            return this;
        }

        /**
         * The page title associated with the URL of the event
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The page title associated with the URL of the event
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
         */
        public Builder truncated(boolean truncated) {
            Utils.checkNotNull(truncated, "truncated");
            this.truncated = Optional.ofNullable(truncated);
            return this;
        }

        /**
         * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
         */
        public Builder truncated(Optional<Boolean> truncated) {
            Utils.checkNotNull(truncated, "truncated");
            this.truncated = truncated;
            return this;
        }
        
        public ActivityEventParams build() {
            return new ActivityEventParams(
                bodyContent,
                datasourceInstance,
                datasource,
                instanceOnlyName,
                duration,
                query,
                referrer,
                title,
                truncated);
        }
    }
}
