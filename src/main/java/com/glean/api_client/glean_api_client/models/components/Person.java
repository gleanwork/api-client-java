/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Person {

    /**
     * The display name.
     */
    @JsonProperty("name")
    private String name;

    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    @JsonProperty("obfuscatedId")
    private String obfuscatedId;

    /**
     * A list of documents related to this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedDocuments")
    private Optional<? extends List<RelatedDocuments>> relatedDocuments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends PersonMetadata> metadata;

    @JsonCreator
    public Person(
            @JsonProperty("name") String name,
            @JsonProperty("obfuscatedId") String obfuscatedId,
            @JsonProperty("relatedDocuments") Optional<? extends List<RelatedDocuments>> relatedDocuments,
            @JsonProperty("metadata") Optional<? extends PersonMetadata> metadata) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(obfuscatedId, "obfuscatedId");
        Utils.checkNotNull(relatedDocuments, "relatedDocuments");
        Utils.checkNotNull(metadata, "metadata");
        this.name = name;
        this.obfuscatedId = obfuscatedId;
        this.relatedDocuments = relatedDocuments;
        this.metadata = metadata;
    }
    
    public Person(
            String name,
            String obfuscatedId) {
        this(name, obfuscatedId, Optional.empty(), Optional.empty());
    }

    /**
     * The display name.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    @JsonIgnore
    public String obfuscatedId() {
        return obfuscatedId;
    }

    /**
     * A list of documents related to this person.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<RelatedDocuments>> relatedDocuments() {
        return (Optional<List<RelatedDocuments>>) relatedDocuments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PersonMetadata> metadata() {
        return (Optional<PersonMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The display name.
     */
    public Person withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    public Person withObfuscatedId(String obfuscatedId) {
        Utils.checkNotNull(obfuscatedId, "obfuscatedId");
        this.obfuscatedId = obfuscatedId;
        return this;
    }

    /**
     * A list of documents related to this person.
     */
    public Person withRelatedDocuments(List<RelatedDocuments> relatedDocuments) {
        Utils.checkNotNull(relatedDocuments, "relatedDocuments");
        this.relatedDocuments = Optional.ofNullable(relatedDocuments);
        return this;
    }

    /**
     * A list of documents related to this person.
     */
    public Person withRelatedDocuments(Optional<? extends List<RelatedDocuments>> relatedDocuments) {
        Utils.checkNotNull(relatedDocuments, "relatedDocuments");
        this.relatedDocuments = relatedDocuments;
        return this;
    }

    public Person withMetadata(PersonMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public Person withMetadata(Optional<? extends PersonMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Person other = (Person) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.obfuscatedId, other.obfuscatedId) &&
            Objects.deepEquals(this.relatedDocuments, other.relatedDocuments) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            obfuscatedId,
            relatedDocuments,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Person.class,
                "name", name,
                "obfuscatedId", obfuscatedId,
                "relatedDocuments", relatedDocuments,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String obfuscatedId;
 
        private Optional<? extends List<RelatedDocuments>> relatedDocuments = Optional.empty();
 
        private Optional<? extends PersonMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The display name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * An opaque identifier that can be used to request metadata for a Person.
         */
        public Builder obfuscatedId(String obfuscatedId) {
            Utils.checkNotNull(obfuscatedId, "obfuscatedId");
            this.obfuscatedId = obfuscatedId;
            return this;
        }

        /**
         * A list of documents related to this person.
         */
        public Builder relatedDocuments(List<RelatedDocuments> relatedDocuments) {
            Utils.checkNotNull(relatedDocuments, "relatedDocuments");
            this.relatedDocuments = Optional.ofNullable(relatedDocuments);
            return this;
        }

        /**
         * A list of documents related to this person.
         */
        public Builder relatedDocuments(Optional<? extends List<RelatedDocuments>> relatedDocuments) {
            Utils.checkNotNull(relatedDocuments, "relatedDocuments");
            this.relatedDocuments = relatedDocuments;
            return this;
        }

        public Builder metadata(PersonMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends PersonMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public Person build() {
            return new Person(
                name,
                obfuscatedId,
                relatedDocuments,
                metadata);
        }
    }
}
