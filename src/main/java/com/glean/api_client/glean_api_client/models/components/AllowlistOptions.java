/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * AllowlistOptions
 * 
 * <p>Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
 */
public class AllowlistOptions {

    /**
     * list of words and phrases to consider as whitelisted content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private Optional<? extends List<String>> terms;

    @JsonCreator
    public AllowlistOptions(
            @JsonProperty("terms") Optional<? extends List<String>> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
    }
    
    public AllowlistOptions() {
        this(Optional.empty());
    }

    /**
     * list of words and phrases to consider as whitelisted content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> terms() {
        return (Optional<List<String>>) terms;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * list of words and phrases to consider as whitelisted content
     */
    public AllowlistOptions withTerms(List<String> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = Optional.ofNullable(terms);
        return this;
    }

    /**
     * list of words and phrases to consider as whitelisted content
     */
    public AllowlistOptions withTerms(Optional<? extends List<String>> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AllowlistOptions other = (AllowlistOptions) o;
        return 
            Objects.deepEquals(this.terms, other.terms);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            terms);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AllowlistOptions.class,
                "terms", terms);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> terms = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * list of words and phrases to consider as whitelisted content
         */
        public Builder terms(List<String> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = Optional.ofNullable(terms);
            return this;
        }

        /**
         * list of words and phrases to consider as whitelisted content
         */
        public Builder terms(Optional<? extends List<String>> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = terms;
            return this;
        }
        
        public AllowlistOptions build() {
            return new AllowlistOptions(
                terms);
        }
    }
}
