/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class IndexStatus {

    /**
     * When the document was last crawled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastCrawledTime")
    private Optional<OffsetDateTime> lastCrawledTime;

    /**
     * When the document was last indexed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastIndexedTime")
    private Optional<OffsetDateTime> lastIndexedTime;

    @JsonCreator
    public IndexStatus(
            @JsonProperty("lastCrawledTime") Optional<OffsetDateTime> lastCrawledTime,
            @JsonProperty("lastIndexedTime") Optional<OffsetDateTime> lastIndexedTime) {
        Utils.checkNotNull(lastCrawledTime, "lastCrawledTime");
        Utils.checkNotNull(lastIndexedTime, "lastIndexedTime");
        this.lastCrawledTime = lastCrawledTime;
        this.lastIndexedTime = lastIndexedTime;
    }
    
    public IndexStatus() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * When the document was last crawled
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastCrawledTime() {
        return lastCrawledTime;
    }

    /**
     * When the document was last indexed
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastIndexedTime() {
        return lastIndexedTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * When the document was last crawled
     */
    public IndexStatus withLastCrawledTime(OffsetDateTime lastCrawledTime) {
        Utils.checkNotNull(lastCrawledTime, "lastCrawledTime");
        this.lastCrawledTime = Optional.ofNullable(lastCrawledTime);
        return this;
    }

    /**
     * When the document was last crawled
     */
    public IndexStatus withLastCrawledTime(Optional<OffsetDateTime> lastCrawledTime) {
        Utils.checkNotNull(lastCrawledTime, "lastCrawledTime");
        this.lastCrawledTime = lastCrawledTime;
        return this;
    }

    /**
     * When the document was last indexed
     */
    public IndexStatus withLastIndexedTime(OffsetDateTime lastIndexedTime) {
        Utils.checkNotNull(lastIndexedTime, "lastIndexedTime");
        this.lastIndexedTime = Optional.ofNullable(lastIndexedTime);
        return this;
    }

    /**
     * When the document was last indexed
     */
    public IndexStatus withLastIndexedTime(Optional<OffsetDateTime> lastIndexedTime) {
        Utils.checkNotNull(lastIndexedTime, "lastIndexedTime");
        this.lastIndexedTime = lastIndexedTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexStatus other = (IndexStatus) o;
        return 
            Objects.deepEquals(this.lastCrawledTime, other.lastCrawledTime) &&
            Objects.deepEquals(this.lastIndexedTime, other.lastIndexedTime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lastCrawledTime,
            lastIndexedTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndexStatus.class,
                "lastCrawledTime", lastCrawledTime,
                "lastIndexedTime", lastIndexedTime);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> lastCrawledTime = Optional.empty();
 
        private Optional<OffsetDateTime> lastIndexedTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * When the document was last crawled
         */
        public Builder lastCrawledTime(OffsetDateTime lastCrawledTime) {
            Utils.checkNotNull(lastCrawledTime, "lastCrawledTime");
            this.lastCrawledTime = Optional.ofNullable(lastCrawledTime);
            return this;
        }

        /**
         * When the document was last crawled
         */
        public Builder lastCrawledTime(Optional<OffsetDateTime> lastCrawledTime) {
            Utils.checkNotNull(lastCrawledTime, "lastCrawledTime");
            this.lastCrawledTime = lastCrawledTime;
            return this;
        }

        /**
         * When the document was last indexed
         */
        public Builder lastIndexedTime(OffsetDateTime lastIndexedTime) {
            Utils.checkNotNull(lastIndexedTime, "lastIndexedTime");
            this.lastIndexedTime = Optional.ofNullable(lastIndexedTime);
            return this;
        }

        /**
         * When the document was last indexed
         */
        public Builder lastIndexedTime(Optional<OffsetDateTime> lastIndexedTime) {
            Utils.checkNotNull(lastIndexedTime, "lastIndexedTime");
            this.lastIndexedTime = lastIndexedTime;
            return this;
        }
        
        public IndexStatus build() {
            return new IndexStatus(
                lastCrawledTime,
                lastIndexedTime);
        }
    }
}
