/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * CustomDatasourceConfig
 * 
 * <p>Structure describing config properties of a custom datasource
 */
public class CustomDatasourceConfig {

    /**
     * Unique identifier of datasource instance to which this config applies.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    /**
     * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceCategory")
    private Optional<? extends DatasourceCategory> datasourceCategory;

    /**
     * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlRegex")
    private Optional<String> urlRegex;

    /**
     * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconUrl")
    private Optional<String> iconUrl;

    /**
     * The list of top-level `objectType`s for the datasource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectDefinitions")
    private Optional<? extends List<ObjectDefinition>> objectDefinitions;

    /**
     * Example text for what to search for in this datasource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestionText")
    private Optional<String> suggestionText;

    /**
     * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homeUrl")
    private Optional<String> homeUrl;

    /**
     * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crawlerSeedUrls")
    private Optional<? extends List<String>> crawlerSeedUrls;

    /**
     * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconDarkUrl")
    private Optional<String> iconDarkUrl;

    /**
     * List of built-in facet types that should be hidden for the datasource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideBuiltInFacets")
    private Optional<? extends List<HideBuiltInFacet>> hideBuiltInFacets;

    /**
     * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canonicalizingURLRegex")
    private Optional<? extends List<CanonicalizingRegexType>> canonicalizingURLRegex;

    /**
     * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canonicalizingTitleRegex")
    private Optional<? extends List<CanonicalizingRegexType>> canonicalizingTitleRegex;

    /**
     * A regex that identifies titles that should not be indexed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redlistTitleRegex")
    private Optional<String> redlistTitleRegex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorType")
    private Optional<? extends CustomDatasourceConfigConnectorType> connectorType;

    /**
     * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quicklinks")
    private Optional<? extends List<Quicklink>> quicklinks;

    /**
     * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renderConfigPreset")
    private Optional<String> renderConfigPreset;

    /**
     * Aliases that can be used as `app` operator-values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aliases")
    private Optional<? extends List<String>> aliases;

    /**
     * Whether or not this datasource is hosted on-premise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOnPrem")
    private Optional<Boolean> isOnPrem;

    /**
     * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustUrlRegexForViewActivity")
    private Optional<Boolean> trustUrlRegexForViewActivity;

    /**
     * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeUtmSource")
    private Optional<Boolean> includeUtmSource;

    /**
     * If true, the fragment part of the URL will be stripped when converting to a canonical url.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripFragmentInCanonicalUrl")
    private Optional<Boolean> stripFragmentInCanonicalUrl;

    /**
     * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityDatasourceName")
    private Optional<String> identityDatasourceName;

    /**
     * If the datasource uses a specific product access group, then the name of that group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productAccessGroup")
    private Optional<String> productAccessGroup;

    /**
     * whether email is used to reference users in document ACLs and in group memberships.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isUserReferencedByEmail")
    private Optional<Boolean> isUserReferencedByEmail;

    /**
     * True if this datasource is used to push custom entities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEntityDatasource")
    private Optional<Boolean> isEntityDatasource;

    /**
     * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isTestDatasource")
    private Optional<Boolean> isTestDatasource;

    @JsonCreator
    public CustomDatasourceConfig(
            @JsonProperty("name") String name,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("datasourceCategory") Optional<? extends DatasourceCategory> datasourceCategory,
            @JsonProperty("urlRegex") Optional<String> urlRegex,
            @JsonProperty("iconUrl") Optional<String> iconUrl,
            @JsonProperty("objectDefinitions") Optional<? extends List<ObjectDefinition>> objectDefinitions,
            @JsonProperty("suggestionText") Optional<String> suggestionText,
            @JsonProperty("homeUrl") Optional<String> homeUrl,
            @JsonProperty("crawlerSeedUrls") Optional<? extends List<String>> crawlerSeedUrls,
            @JsonProperty("iconDarkUrl") Optional<String> iconDarkUrl,
            @JsonProperty("hideBuiltInFacets") Optional<? extends List<HideBuiltInFacet>> hideBuiltInFacets,
            @JsonProperty("canonicalizingURLRegex") Optional<? extends List<CanonicalizingRegexType>> canonicalizingURLRegex,
            @JsonProperty("canonicalizingTitleRegex") Optional<? extends List<CanonicalizingRegexType>> canonicalizingTitleRegex,
            @JsonProperty("redlistTitleRegex") Optional<String> redlistTitleRegex,
            @JsonProperty("connectorType") Optional<? extends CustomDatasourceConfigConnectorType> connectorType,
            @JsonProperty("quicklinks") Optional<? extends List<Quicklink>> quicklinks,
            @JsonProperty("renderConfigPreset") Optional<String> renderConfigPreset,
            @JsonProperty("aliases") Optional<? extends List<String>> aliases,
            @JsonProperty("isOnPrem") Optional<Boolean> isOnPrem,
            @JsonProperty("trustUrlRegexForViewActivity") Optional<Boolean> trustUrlRegexForViewActivity,
            @JsonProperty("includeUtmSource") Optional<Boolean> includeUtmSource,
            @JsonProperty("stripFragmentInCanonicalUrl") Optional<Boolean> stripFragmentInCanonicalUrl,
            @JsonProperty("identityDatasourceName") Optional<String> identityDatasourceName,
            @JsonProperty("productAccessGroup") Optional<String> productAccessGroup,
            @JsonProperty("isUserReferencedByEmail") Optional<Boolean> isUserReferencedByEmail,
            @JsonProperty("isEntityDatasource") Optional<Boolean> isEntityDatasource,
            @JsonProperty("isTestDatasource") Optional<Boolean> isTestDatasource) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(datasourceCategory, "datasourceCategory");
        Utils.checkNotNull(urlRegex, "urlRegex");
        Utils.checkNotNull(iconUrl, "iconUrl");
        Utils.checkNotNull(objectDefinitions, "objectDefinitions");
        Utils.checkNotNull(suggestionText, "suggestionText");
        Utils.checkNotNull(homeUrl, "homeUrl");
        Utils.checkNotNull(crawlerSeedUrls, "crawlerSeedUrls");
        Utils.checkNotNull(iconDarkUrl, "iconDarkUrl");
        Utils.checkNotNull(hideBuiltInFacets, "hideBuiltInFacets");
        Utils.checkNotNull(canonicalizingURLRegex, "canonicalizingURLRegex");
        Utils.checkNotNull(canonicalizingTitleRegex, "canonicalizingTitleRegex");
        Utils.checkNotNull(redlistTitleRegex, "redlistTitleRegex");
        Utils.checkNotNull(connectorType, "connectorType");
        Utils.checkNotNull(quicklinks, "quicklinks");
        Utils.checkNotNull(renderConfigPreset, "renderConfigPreset");
        Utils.checkNotNull(aliases, "aliases");
        Utils.checkNotNull(isOnPrem, "isOnPrem");
        Utils.checkNotNull(trustUrlRegexForViewActivity, "trustUrlRegexForViewActivity");
        Utils.checkNotNull(includeUtmSource, "includeUtmSource");
        Utils.checkNotNull(stripFragmentInCanonicalUrl, "stripFragmentInCanonicalUrl");
        Utils.checkNotNull(identityDatasourceName, "identityDatasourceName");
        Utils.checkNotNull(productAccessGroup, "productAccessGroup");
        Utils.checkNotNull(isUserReferencedByEmail, "isUserReferencedByEmail");
        Utils.checkNotNull(isEntityDatasource, "isEntityDatasource");
        Utils.checkNotNull(isTestDatasource, "isTestDatasource");
        this.name = name;
        this.displayName = displayName;
        this.datasourceCategory = datasourceCategory;
        this.urlRegex = urlRegex;
        this.iconUrl = iconUrl;
        this.objectDefinitions = objectDefinitions;
        this.suggestionText = suggestionText;
        this.homeUrl = homeUrl;
        this.crawlerSeedUrls = crawlerSeedUrls;
        this.iconDarkUrl = iconDarkUrl;
        this.hideBuiltInFacets = hideBuiltInFacets;
        this.canonicalizingURLRegex = canonicalizingURLRegex;
        this.canonicalizingTitleRegex = canonicalizingTitleRegex;
        this.redlistTitleRegex = redlistTitleRegex;
        this.connectorType = connectorType;
        this.quicklinks = quicklinks;
        this.renderConfigPreset = renderConfigPreset;
        this.aliases = aliases;
        this.isOnPrem = isOnPrem;
        this.trustUrlRegexForViewActivity = trustUrlRegexForViewActivity;
        this.includeUtmSource = includeUtmSource;
        this.stripFragmentInCanonicalUrl = stripFragmentInCanonicalUrl;
        this.identityDatasourceName = identityDatasourceName;
        this.productAccessGroup = productAccessGroup;
        this.isUserReferencedByEmail = isUserReferencedByEmail;
        this.isEntityDatasource = isEntityDatasource;
        this.isTestDatasource = isTestDatasource;
    }
    
    public CustomDatasourceConfig(
            String name) {
        this(name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of datasource instance to which this config applies.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
     */
    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    /**
     * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DatasourceCategory> datasourceCategory() {
        return (Optional<DatasourceCategory>) datasourceCategory;
    }

    /**
     * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
     */
    @JsonIgnore
    public Optional<String> urlRegex() {
        return urlRegex;
    }

    /**
     * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonIgnore
    public Optional<String> iconUrl() {
        return iconUrl;
    }

    /**
     * The list of top-level `objectType`s for the datasource.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ObjectDefinition>> objectDefinitions() {
        return (Optional<List<ObjectDefinition>>) objectDefinitions;
    }

    /**
     * Example text for what to search for in this datasource
     */
    @JsonIgnore
    public Optional<String> suggestionText() {
        return suggestionText;
    }

    /**
     * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
     */
    @JsonIgnore
    public Optional<String> homeUrl() {
        return homeUrl;
    }

    /**
     * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> crawlerSeedUrls() {
        return (Optional<List<String>>) crawlerSeedUrls;
    }

    /**
     * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonIgnore
    public Optional<String> iconDarkUrl() {
        return iconDarkUrl;
    }

    /**
     * List of built-in facet types that should be hidden for the datasource.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HideBuiltInFacet>> hideBuiltInFacets() {
        return (Optional<List<HideBuiltInFacet>>) hideBuiltInFacets;
    }

    /**
     * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CanonicalizingRegexType>> canonicalizingURLRegex() {
        return (Optional<List<CanonicalizingRegexType>>) canonicalizingURLRegex;
    }

    /**
     * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CanonicalizingRegexType>> canonicalizingTitleRegex() {
        return (Optional<List<CanonicalizingRegexType>>) canonicalizingTitleRegex;
    }

    /**
     * A regex that identifies titles that should not be indexed
     */
    @JsonIgnore
    public Optional<String> redlistTitleRegex() {
        return redlistTitleRegex;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomDatasourceConfigConnectorType> connectorType() {
        return (Optional<CustomDatasourceConfigConnectorType>) connectorType;
    }

    /**
     * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Quicklink>> quicklinks() {
        return (Optional<List<Quicklink>>) quicklinks;
    }

    /**
     * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
     */
    @JsonIgnore
    public Optional<String> renderConfigPreset() {
        return renderConfigPreset;
    }

    /**
     * Aliases that can be used as `app` operator-values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> aliases() {
        return (Optional<List<String>>) aliases;
    }

    /**
     * Whether or not this datasource is hosted on-premise.
     */
    @JsonIgnore
    public Optional<Boolean> isOnPrem() {
        return isOnPrem;
    }

    /**
     * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
     */
    @JsonIgnore
    public Optional<Boolean> trustUrlRegexForViewActivity() {
        return trustUrlRegexForViewActivity;
    }

    /**
     * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
     */
    @JsonIgnore
    public Optional<Boolean> includeUtmSource() {
        return includeUtmSource;
    }

    /**
     * If true, the fragment part of the URL will be stripped when converting to a canonical url.
     */
    @JsonIgnore
    public Optional<Boolean> stripFragmentInCanonicalUrl() {
        return stripFragmentInCanonicalUrl;
    }

    /**
     * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
     */
    @JsonIgnore
    public Optional<String> identityDatasourceName() {
        return identityDatasourceName;
    }

    /**
     * If the datasource uses a specific product access group, then the name of that group.
     */
    @JsonIgnore
    public Optional<String> productAccessGroup() {
        return productAccessGroup;
    }

    /**
     * whether email is used to reference users in document ACLs and in group memberships.
     */
    @JsonIgnore
    public Optional<Boolean> isUserReferencedByEmail() {
        return isUserReferencedByEmail;
    }

    /**
     * True if this datasource is used to push custom entities.
     */
    @JsonIgnore
    public Optional<Boolean> isEntityDatasource() {
        return isEntityDatasource;
    }

    /**
     * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
     */
    @JsonIgnore
    public Optional<Boolean> isTestDatasource() {
        return isTestDatasource;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier of datasource instance to which this config applies.
     */
    public CustomDatasourceConfig withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
     */
    public CustomDatasourceConfig withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    /**
     * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
     */
    public CustomDatasourceConfig withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
     */
    public CustomDatasourceConfig withDatasourceCategory(DatasourceCategory datasourceCategory) {
        Utils.checkNotNull(datasourceCategory, "datasourceCategory");
        this.datasourceCategory = Optional.ofNullable(datasourceCategory);
        return this;
    }

    /**
     * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
     */
    public CustomDatasourceConfig withDatasourceCategory(Optional<? extends DatasourceCategory> datasourceCategory) {
        Utils.checkNotNull(datasourceCategory, "datasourceCategory");
        this.datasourceCategory = datasourceCategory;
        return this;
    }

    /**
     * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
     */
    public CustomDatasourceConfig withUrlRegex(String urlRegex) {
        Utils.checkNotNull(urlRegex, "urlRegex");
        this.urlRegex = Optional.ofNullable(urlRegex);
        return this;
    }

    /**
     * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
     */
    public CustomDatasourceConfig withUrlRegex(Optional<String> urlRegex) {
        Utils.checkNotNull(urlRegex, "urlRegex");
        this.urlRegex = urlRegex;
        return this;
    }

    /**
     * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public CustomDatasourceConfig withIconUrl(String iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = Optional.ofNullable(iconUrl);
        return this;
    }

    /**
     * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public CustomDatasourceConfig withIconUrl(Optional<String> iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = iconUrl;
        return this;
    }

    /**
     * The list of top-level `objectType`s for the datasource.
     */
    public CustomDatasourceConfig withObjectDefinitions(List<ObjectDefinition> objectDefinitions) {
        Utils.checkNotNull(objectDefinitions, "objectDefinitions");
        this.objectDefinitions = Optional.ofNullable(objectDefinitions);
        return this;
    }

    /**
     * The list of top-level `objectType`s for the datasource.
     */
    public CustomDatasourceConfig withObjectDefinitions(Optional<? extends List<ObjectDefinition>> objectDefinitions) {
        Utils.checkNotNull(objectDefinitions, "objectDefinitions");
        this.objectDefinitions = objectDefinitions;
        return this;
    }

    /**
     * Example text for what to search for in this datasource
     */
    public CustomDatasourceConfig withSuggestionText(String suggestionText) {
        Utils.checkNotNull(suggestionText, "suggestionText");
        this.suggestionText = Optional.ofNullable(suggestionText);
        return this;
    }

    /**
     * Example text for what to search for in this datasource
     */
    public CustomDatasourceConfig withSuggestionText(Optional<String> suggestionText) {
        Utils.checkNotNull(suggestionText, "suggestionText");
        this.suggestionText = suggestionText;
        return this;
    }

    /**
     * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
     */
    public CustomDatasourceConfig withHomeUrl(String homeUrl) {
        Utils.checkNotNull(homeUrl, "homeUrl");
        this.homeUrl = Optional.ofNullable(homeUrl);
        return this;
    }

    /**
     * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
     */
    public CustomDatasourceConfig withHomeUrl(Optional<String> homeUrl) {
        Utils.checkNotNull(homeUrl, "homeUrl");
        this.homeUrl = homeUrl;
        return this;
    }

    /**
     * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
     */
    public CustomDatasourceConfig withCrawlerSeedUrls(List<String> crawlerSeedUrls) {
        Utils.checkNotNull(crawlerSeedUrls, "crawlerSeedUrls");
        this.crawlerSeedUrls = Optional.ofNullable(crawlerSeedUrls);
        return this;
    }

    /**
     * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
     */
    public CustomDatasourceConfig withCrawlerSeedUrls(Optional<? extends List<String>> crawlerSeedUrls) {
        Utils.checkNotNull(crawlerSeedUrls, "crawlerSeedUrls");
        this.crawlerSeedUrls = crawlerSeedUrls;
        return this;
    }

    /**
     * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public CustomDatasourceConfig withIconDarkUrl(String iconDarkUrl) {
        Utils.checkNotNull(iconDarkUrl, "iconDarkUrl");
        this.iconDarkUrl = Optional.ofNullable(iconDarkUrl);
        return this;
    }

    /**
     * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public CustomDatasourceConfig withIconDarkUrl(Optional<String> iconDarkUrl) {
        Utils.checkNotNull(iconDarkUrl, "iconDarkUrl");
        this.iconDarkUrl = iconDarkUrl;
        return this;
    }

    /**
     * List of built-in facet types that should be hidden for the datasource.
     */
    public CustomDatasourceConfig withHideBuiltInFacets(List<HideBuiltInFacet> hideBuiltInFacets) {
        Utils.checkNotNull(hideBuiltInFacets, "hideBuiltInFacets");
        this.hideBuiltInFacets = Optional.ofNullable(hideBuiltInFacets);
        return this;
    }

    /**
     * List of built-in facet types that should be hidden for the datasource.
     */
    public CustomDatasourceConfig withHideBuiltInFacets(Optional<? extends List<HideBuiltInFacet>> hideBuiltInFacets) {
        Utils.checkNotNull(hideBuiltInFacets, "hideBuiltInFacets");
        this.hideBuiltInFacets = hideBuiltInFacets;
        return this;
    }

    /**
     * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
     */
    public CustomDatasourceConfig withCanonicalizingURLRegex(List<CanonicalizingRegexType> canonicalizingURLRegex) {
        Utils.checkNotNull(canonicalizingURLRegex, "canonicalizingURLRegex");
        this.canonicalizingURLRegex = Optional.ofNullable(canonicalizingURLRegex);
        return this;
    }

    /**
     * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
     */
    public CustomDatasourceConfig withCanonicalizingURLRegex(Optional<? extends List<CanonicalizingRegexType>> canonicalizingURLRegex) {
        Utils.checkNotNull(canonicalizingURLRegex, "canonicalizingURLRegex");
        this.canonicalizingURLRegex = canonicalizingURLRegex;
        return this;
    }

    /**
     * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
     */
    public CustomDatasourceConfig withCanonicalizingTitleRegex(List<CanonicalizingRegexType> canonicalizingTitleRegex) {
        Utils.checkNotNull(canonicalizingTitleRegex, "canonicalizingTitleRegex");
        this.canonicalizingTitleRegex = Optional.ofNullable(canonicalizingTitleRegex);
        return this;
    }

    /**
     * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
     */
    public CustomDatasourceConfig withCanonicalizingTitleRegex(Optional<? extends List<CanonicalizingRegexType>> canonicalizingTitleRegex) {
        Utils.checkNotNull(canonicalizingTitleRegex, "canonicalizingTitleRegex");
        this.canonicalizingTitleRegex = canonicalizingTitleRegex;
        return this;
    }

    /**
     * A regex that identifies titles that should not be indexed
     */
    public CustomDatasourceConfig withRedlistTitleRegex(String redlistTitleRegex) {
        Utils.checkNotNull(redlistTitleRegex, "redlistTitleRegex");
        this.redlistTitleRegex = Optional.ofNullable(redlistTitleRegex);
        return this;
    }

    /**
     * A regex that identifies titles that should not be indexed
     */
    public CustomDatasourceConfig withRedlistTitleRegex(Optional<String> redlistTitleRegex) {
        Utils.checkNotNull(redlistTitleRegex, "redlistTitleRegex");
        this.redlistTitleRegex = redlistTitleRegex;
        return this;
    }

    public CustomDatasourceConfig withConnectorType(CustomDatasourceConfigConnectorType connectorType) {
        Utils.checkNotNull(connectorType, "connectorType");
        this.connectorType = Optional.ofNullable(connectorType);
        return this;
    }

    public CustomDatasourceConfig withConnectorType(Optional<? extends CustomDatasourceConfigConnectorType> connectorType) {
        Utils.checkNotNull(connectorType, "connectorType");
        this.connectorType = connectorType;
        return this;
    }

    /**
     * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
     */
    public CustomDatasourceConfig withQuicklinks(List<Quicklink> quicklinks) {
        Utils.checkNotNull(quicklinks, "quicklinks");
        this.quicklinks = Optional.ofNullable(quicklinks);
        return this;
    }

    /**
     * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
     */
    public CustomDatasourceConfig withQuicklinks(Optional<? extends List<Quicklink>> quicklinks) {
        Utils.checkNotNull(quicklinks, "quicklinks");
        this.quicklinks = quicklinks;
        return this;
    }

    /**
     * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
     */
    public CustomDatasourceConfig withRenderConfigPreset(String renderConfigPreset) {
        Utils.checkNotNull(renderConfigPreset, "renderConfigPreset");
        this.renderConfigPreset = Optional.ofNullable(renderConfigPreset);
        return this;
    }

    /**
     * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
     */
    public CustomDatasourceConfig withRenderConfigPreset(Optional<String> renderConfigPreset) {
        Utils.checkNotNull(renderConfigPreset, "renderConfigPreset");
        this.renderConfigPreset = renderConfigPreset;
        return this;
    }

    /**
     * Aliases that can be used as `app` operator-values.
     */
    public CustomDatasourceConfig withAliases(List<String> aliases) {
        Utils.checkNotNull(aliases, "aliases");
        this.aliases = Optional.ofNullable(aliases);
        return this;
    }

    /**
     * Aliases that can be used as `app` operator-values.
     */
    public CustomDatasourceConfig withAliases(Optional<? extends List<String>> aliases) {
        Utils.checkNotNull(aliases, "aliases");
        this.aliases = aliases;
        return this;
    }

    /**
     * Whether or not this datasource is hosted on-premise.
     */
    public CustomDatasourceConfig withIsOnPrem(boolean isOnPrem) {
        Utils.checkNotNull(isOnPrem, "isOnPrem");
        this.isOnPrem = Optional.ofNullable(isOnPrem);
        return this;
    }

    /**
     * Whether or not this datasource is hosted on-premise.
     */
    public CustomDatasourceConfig withIsOnPrem(Optional<Boolean> isOnPrem) {
        Utils.checkNotNull(isOnPrem, "isOnPrem");
        this.isOnPrem = isOnPrem;
        return this;
    }

    /**
     * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
     */
    public CustomDatasourceConfig withTrustUrlRegexForViewActivity(boolean trustUrlRegexForViewActivity) {
        Utils.checkNotNull(trustUrlRegexForViewActivity, "trustUrlRegexForViewActivity");
        this.trustUrlRegexForViewActivity = Optional.ofNullable(trustUrlRegexForViewActivity);
        return this;
    }

    /**
     * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
     */
    public CustomDatasourceConfig withTrustUrlRegexForViewActivity(Optional<Boolean> trustUrlRegexForViewActivity) {
        Utils.checkNotNull(trustUrlRegexForViewActivity, "trustUrlRegexForViewActivity");
        this.trustUrlRegexForViewActivity = trustUrlRegexForViewActivity;
        return this;
    }

    /**
     * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
     */
    public CustomDatasourceConfig withIncludeUtmSource(boolean includeUtmSource) {
        Utils.checkNotNull(includeUtmSource, "includeUtmSource");
        this.includeUtmSource = Optional.ofNullable(includeUtmSource);
        return this;
    }

    /**
     * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
     */
    public CustomDatasourceConfig withIncludeUtmSource(Optional<Boolean> includeUtmSource) {
        Utils.checkNotNull(includeUtmSource, "includeUtmSource");
        this.includeUtmSource = includeUtmSource;
        return this;
    }

    /**
     * If true, the fragment part of the URL will be stripped when converting to a canonical url.
     */
    public CustomDatasourceConfig withStripFragmentInCanonicalUrl(boolean stripFragmentInCanonicalUrl) {
        Utils.checkNotNull(stripFragmentInCanonicalUrl, "stripFragmentInCanonicalUrl");
        this.stripFragmentInCanonicalUrl = Optional.ofNullable(stripFragmentInCanonicalUrl);
        return this;
    }

    /**
     * If true, the fragment part of the URL will be stripped when converting to a canonical url.
     */
    public CustomDatasourceConfig withStripFragmentInCanonicalUrl(Optional<Boolean> stripFragmentInCanonicalUrl) {
        Utils.checkNotNull(stripFragmentInCanonicalUrl, "stripFragmentInCanonicalUrl");
        this.stripFragmentInCanonicalUrl = stripFragmentInCanonicalUrl;
        return this;
    }

    /**
     * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
     */
    public CustomDatasourceConfig withIdentityDatasourceName(String identityDatasourceName) {
        Utils.checkNotNull(identityDatasourceName, "identityDatasourceName");
        this.identityDatasourceName = Optional.ofNullable(identityDatasourceName);
        return this;
    }

    /**
     * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
     */
    public CustomDatasourceConfig withIdentityDatasourceName(Optional<String> identityDatasourceName) {
        Utils.checkNotNull(identityDatasourceName, "identityDatasourceName");
        this.identityDatasourceName = identityDatasourceName;
        return this;
    }

    /**
     * If the datasource uses a specific product access group, then the name of that group.
     */
    public CustomDatasourceConfig withProductAccessGroup(String productAccessGroup) {
        Utils.checkNotNull(productAccessGroup, "productAccessGroup");
        this.productAccessGroup = Optional.ofNullable(productAccessGroup);
        return this;
    }

    /**
     * If the datasource uses a specific product access group, then the name of that group.
     */
    public CustomDatasourceConfig withProductAccessGroup(Optional<String> productAccessGroup) {
        Utils.checkNotNull(productAccessGroup, "productAccessGroup");
        this.productAccessGroup = productAccessGroup;
        return this;
    }

    /**
     * whether email is used to reference users in document ACLs and in group memberships.
     */
    public CustomDatasourceConfig withIsUserReferencedByEmail(boolean isUserReferencedByEmail) {
        Utils.checkNotNull(isUserReferencedByEmail, "isUserReferencedByEmail");
        this.isUserReferencedByEmail = Optional.ofNullable(isUserReferencedByEmail);
        return this;
    }

    /**
     * whether email is used to reference users in document ACLs and in group memberships.
     */
    public CustomDatasourceConfig withIsUserReferencedByEmail(Optional<Boolean> isUserReferencedByEmail) {
        Utils.checkNotNull(isUserReferencedByEmail, "isUserReferencedByEmail");
        this.isUserReferencedByEmail = isUserReferencedByEmail;
        return this;
    }

    /**
     * True if this datasource is used to push custom entities.
     */
    public CustomDatasourceConfig withIsEntityDatasource(boolean isEntityDatasource) {
        Utils.checkNotNull(isEntityDatasource, "isEntityDatasource");
        this.isEntityDatasource = Optional.ofNullable(isEntityDatasource);
        return this;
    }

    /**
     * True if this datasource is used to push custom entities.
     */
    public CustomDatasourceConfig withIsEntityDatasource(Optional<Boolean> isEntityDatasource) {
        Utils.checkNotNull(isEntityDatasource, "isEntityDatasource");
        this.isEntityDatasource = isEntityDatasource;
        return this;
    }

    /**
     * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
     */
    public CustomDatasourceConfig withIsTestDatasource(boolean isTestDatasource) {
        Utils.checkNotNull(isTestDatasource, "isTestDatasource");
        this.isTestDatasource = Optional.ofNullable(isTestDatasource);
        return this;
    }

    /**
     * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
     */
    public CustomDatasourceConfig withIsTestDatasource(Optional<Boolean> isTestDatasource) {
        Utils.checkNotNull(isTestDatasource, "isTestDatasource");
        this.isTestDatasource = isTestDatasource;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomDatasourceConfig other = (CustomDatasourceConfig) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.datasourceCategory, other.datasourceCategory) &&
            Objects.deepEquals(this.urlRegex, other.urlRegex) &&
            Objects.deepEquals(this.iconUrl, other.iconUrl) &&
            Objects.deepEquals(this.objectDefinitions, other.objectDefinitions) &&
            Objects.deepEquals(this.suggestionText, other.suggestionText) &&
            Objects.deepEquals(this.homeUrl, other.homeUrl) &&
            Objects.deepEquals(this.crawlerSeedUrls, other.crawlerSeedUrls) &&
            Objects.deepEquals(this.iconDarkUrl, other.iconDarkUrl) &&
            Objects.deepEquals(this.hideBuiltInFacets, other.hideBuiltInFacets) &&
            Objects.deepEquals(this.canonicalizingURLRegex, other.canonicalizingURLRegex) &&
            Objects.deepEquals(this.canonicalizingTitleRegex, other.canonicalizingTitleRegex) &&
            Objects.deepEquals(this.redlistTitleRegex, other.redlistTitleRegex) &&
            Objects.deepEquals(this.connectorType, other.connectorType) &&
            Objects.deepEquals(this.quicklinks, other.quicklinks) &&
            Objects.deepEquals(this.renderConfigPreset, other.renderConfigPreset) &&
            Objects.deepEquals(this.aliases, other.aliases) &&
            Objects.deepEquals(this.isOnPrem, other.isOnPrem) &&
            Objects.deepEquals(this.trustUrlRegexForViewActivity, other.trustUrlRegexForViewActivity) &&
            Objects.deepEquals(this.includeUtmSource, other.includeUtmSource) &&
            Objects.deepEquals(this.stripFragmentInCanonicalUrl, other.stripFragmentInCanonicalUrl) &&
            Objects.deepEquals(this.identityDatasourceName, other.identityDatasourceName) &&
            Objects.deepEquals(this.productAccessGroup, other.productAccessGroup) &&
            Objects.deepEquals(this.isUserReferencedByEmail, other.isUserReferencedByEmail) &&
            Objects.deepEquals(this.isEntityDatasource, other.isEntityDatasource) &&
            Objects.deepEquals(this.isTestDatasource, other.isTestDatasource);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            displayName,
            datasourceCategory,
            urlRegex,
            iconUrl,
            objectDefinitions,
            suggestionText,
            homeUrl,
            crawlerSeedUrls,
            iconDarkUrl,
            hideBuiltInFacets,
            canonicalizingURLRegex,
            canonicalizingTitleRegex,
            redlistTitleRegex,
            connectorType,
            quicklinks,
            renderConfigPreset,
            aliases,
            isOnPrem,
            trustUrlRegexForViewActivity,
            includeUtmSource,
            stripFragmentInCanonicalUrl,
            identityDatasourceName,
            productAccessGroup,
            isUserReferencedByEmail,
            isEntityDatasource,
            isTestDatasource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomDatasourceConfig.class,
                "name", name,
                "displayName", displayName,
                "datasourceCategory", datasourceCategory,
                "urlRegex", urlRegex,
                "iconUrl", iconUrl,
                "objectDefinitions", objectDefinitions,
                "suggestionText", suggestionText,
                "homeUrl", homeUrl,
                "crawlerSeedUrls", crawlerSeedUrls,
                "iconDarkUrl", iconDarkUrl,
                "hideBuiltInFacets", hideBuiltInFacets,
                "canonicalizingURLRegex", canonicalizingURLRegex,
                "canonicalizingTitleRegex", canonicalizingTitleRegex,
                "redlistTitleRegex", redlistTitleRegex,
                "connectorType", connectorType,
                "quicklinks", quicklinks,
                "renderConfigPreset", renderConfigPreset,
                "aliases", aliases,
                "isOnPrem", isOnPrem,
                "trustUrlRegexForViewActivity", trustUrlRegexForViewActivity,
                "includeUtmSource", includeUtmSource,
                "stripFragmentInCanonicalUrl", stripFragmentInCanonicalUrl,
                "identityDatasourceName", identityDatasourceName,
                "productAccessGroup", productAccessGroup,
                "isUserReferencedByEmail", isUserReferencedByEmail,
                "isEntityDatasource", isEntityDatasource,
                "isTestDatasource", isTestDatasource);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<? extends DatasourceCategory> datasourceCategory;
 
        private Optional<String> urlRegex = Optional.empty();
 
        private Optional<String> iconUrl = Optional.empty();
 
        private Optional<? extends List<ObjectDefinition>> objectDefinitions = Optional.empty();
 
        private Optional<String> suggestionText = Optional.empty();
 
        private Optional<String> homeUrl = Optional.empty();
 
        private Optional<? extends List<String>> crawlerSeedUrls = Optional.empty();
 
        private Optional<String> iconDarkUrl = Optional.empty();
 
        private Optional<? extends List<HideBuiltInFacet>> hideBuiltInFacets = Optional.empty();
 
        private Optional<? extends List<CanonicalizingRegexType>> canonicalizingURLRegex = Optional.empty();
 
        private Optional<? extends List<CanonicalizingRegexType>> canonicalizingTitleRegex = Optional.empty();
 
        private Optional<String> redlistTitleRegex = Optional.empty();
 
        private Optional<? extends CustomDatasourceConfigConnectorType> connectorType = Optional.empty();
 
        private Optional<? extends List<Quicklink>> quicklinks = Optional.empty();
 
        private Optional<String> renderConfigPreset = Optional.empty();
 
        private Optional<? extends List<String>> aliases = Optional.empty();
 
        private Optional<Boolean> isOnPrem = Optional.empty();
 
        private Optional<Boolean> trustUrlRegexForViewActivity;
 
        private Optional<Boolean> includeUtmSource = Optional.empty();
 
        private Optional<Boolean> stripFragmentInCanonicalUrl;
 
        private Optional<String> identityDatasourceName = Optional.empty();
 
        private Optional<String> productAccessGroup = Optional.empty();
 
        private Optional<Boolean> isUserReferencedByEmail = Optional.empty();
 
        private Optional<Boolean> isEntityDatasource;
 
        private Optional<Boolean> isTestDatasource;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of datasource instance to which this config applies.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
         */
        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
         */
        public Builder datasourceCategory(DatasourceCategory datasourceCategory) {
            Utils.checkNotNull(datasourceCategory, "datasourceCategory");
            this.datasourceCategory = Optional.ofNullable(datasourceCategory);
            return this;
        }

        /**
         * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
         */
        public Builder datasourceCategory(Optional<? extends DatasourceCategory> datasourceCategory) {
            Utils.checkNotNull(datasourceCategory, "datasourceCategory");
            this.datasourceCategory = datasourceCategory;
            return this;
        }

        /**
         * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
         */
        public Builder urlRegex(String urlRegex) {
            Utils.checkNotNull(urlRegex, "urlRegex");
            this.urlRegex = Optional.ofNullable(urlRegex);
            return this;
        }

        /**
         * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
         */
        public Builder urlRegex(Optional<String> urlRegex) {
            Utils.checkNotNull(urlRegex, "urlRegex");
            this.urlRegex = urlRegex;
            return this;
        }

        /**
         * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder iconUrl(String iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = Optional.ofNullable(iconUrl);
            return this;
        }

        /**
         * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder iconUrl(Optional<String> iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = iconUrl;
            return this;
        }

        /**
         * The list of top-level `objectType`s for the datasource.
         */
        public Builder objectDefinitions(List<ObjectDefinition> objectDefinitions) {
            Utils.checkNotNull(objectDefinitions, "objectDefinitions");
            this.objectDefinitions = Optional.ofNullable(objectDefinitions);
            return this;
        }

        /**
         * The list of top-level `objectType`s for the datasource.
         */
        public Builder objectDefinitions(Optional<? extends List<ObjectDefinition>> objectDefinitions) {
            Utils.checkNotNull(objectDefinitions, "objectDefinitions");
            this.objectDefinitions = objectDefinitions;
            return this;
        }

        /**
         * Example text for what to search for in this datasource
         */
        public Builder suggestionText(String suggestionText) {
            Utils.checkNotNull(suggestionText, "suggestionText");
            this.suggestionText = Optional.ofNullable(suggestionText);
            return this;
        }

        /**
         * Example text for what to search for in this datasource
         */
        public Builder suggestionText(Optional<String> suggestionText) {
            Utils.checkNotNull(suggestionText, "suggestionText");
            this.suggestionText = suggestionText;
            return this;
        }

        /**
         * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
         */
        public Builder homeUrl(String homeUrl) {
            Utils.checkNotNull(homeUrl, "homeUrl");
            this.homeUrl = Optional.ofNullable(homeUrl);
            return this;
        }

        /**
         * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
         */
        public Builder homeUrl(Optional<String> homeUrl) {
            Utils.checkNotNull(homeUrl, "homeUrl");
            this.homeUrl = homeUrl;
            return this;
        }

        /**
         * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
         */
        public Builder crawlerSeedUrls(List<String> crawlerSeedUrls) {
            Utils.checkNotNull(crawlerSeedUrls, "crawlerSeedUrls");
            this.crawlerSeedUrls = Optional.ofNullable(crawlerSeedUrls);
            return this;
        }

        /**
         * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
         */
        public Builder crawlerSeedUrls(Optional<? extends List<String>> crawlerSeedUrls) {
            Utils.checkNotNull(crawlerSeedUrls, "crawlerSeedUrls");
            this.crawlerSeedUrls = crawlerSeedUrls;
            return this;
        }

        /**
         * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder iconDarkUrl(String iconDarkUrl) {
            Utils.checkNotNull(iconDarkUrl, "iconDarkUrl");
            this.iconDarkUrl = Optional.ofNullable(iconDarkUrl);
            return this;
        }

        /**
         * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder iconDarkUrl(Optional<String> iconDarkUrl) {
            Utils.checkNotNull(iconDarkUrl, "iconDarkUrl");
            this.iconDarkUrl = iconDarkUrl;
            return this;
        }

        /**
         * List of built-in facet types that should be hidden for the datasource.
         */
        public Builder hideBuiltInFacets(List<HideBuiltInFacet> hideBuiltInFacets) {
            Utils.checkNotNull(hideBuiltInFacets, "hideBuiltInFacets");
            this.hideBuiltInFacets = Optional.ofNullable(hideBuiltInFacets);
            return this;
        }

        /**
         * List of built-in facet types that should be hidden for the datasource.
         */
        public Builder hideBuiltInFacets(Optional<? extends List<HideBuiltInFacet>> hideBuiltInFacets) {
            Utils.checkNotNull(hideBuiltInFacets, "hideBuiltInFacets");
            this.hideBuiltInFacets = hideBuiltInFacets;
            return this;
        }

        /**
         * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
         */
        public Builder canonicalizingURLRegex(List<CanonicalizingRegexType> canonicalizingURLRegex) {
            Utils.checkNotNull(canonicalizingURLRegex, "canonicalizingURLRegex");
            this.canonicalizingURLRegex = Optional.ofNullable(canonicalizingURLRegex);
            return this;
        }

        /**
         * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
         */
        public Builder canonicalizingURLRegex(Optional<? extends List<CanonicalizingRegexType>> canonicalizingURLRegex) {
            Utils.checkNotNull(canonicalizingURLRegex, "canonicalizingURLRegex");
            this.canonicalizingURLRegex = canonicalizingURLRegex;
            return this;
        }

        /**
         * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
         */
        public Builder canonicalizingTitleRegex(List<CanonicalizingRegexType> canonicalizingTitleRegex) {
            Utils.checkNotNull(canonicalizingTitleRegex, "canonicalizingTitleRegex");
            this.canonicalizingTitleRegex = Optional.ofNullable(canonicalizingTitleRegex);
            return this;
        }

        /**
         * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
         */
        public Builder canonicalizingTitleRegex(Optional<? extends List<CanonicalizingRegexType>> canonicalizingTitleRegex) {
            Utils.checkNotNull(canonicalizingTitleRegex, "canonicalizingTitleRegex");
            this.canonicalizingTitleRegex = canonicalizingTitleRegex;
            return this;
        }

        /**
         * A regex that identifies titles that should not be indexed
         */
        public Builder redlistTitleRegex(String redlistTitleRegex) {
            Utils.checkNotNull(redlistTitleRegex, "redlistTitleRegex");
            this.redlistTitleRegex = Optional.ofNullable(redlistTitleRegex);
            return this;
        }

        /**
         * A regex that identifies titles that should not be indexed
         */
        public Builder redlistTitleRegex(Optional<String> redlistTitleRegex) {
            Utils.checkNotNull(redlistTitleRegex, "redlistTitleRegex");
            this.redlistTitleRegex = redlistTitleRegex;
            return this;
        }

        public Builder connectorType(CustomDatasourceConfigConnectorType connectorType) {
            Utils.checkNotNull(connectorType, "connectorType");
            this.connectorType = Optional.ofNullable(connectorType);
            return this;
        }

        public Builder connectorType(Optional<? extends CustomDatasourceConfigConnectorType> connectorType) {
            Utils.checkNotNull(connectorType, "connectorType");
            this.connectorType = connectorType;
            return this;
        }

        /**
         * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
         */
        public Builder quicklinks(List<Quicklink> quicklinks) {
            Utils.checkNotNull(quicklinks, "quicklinks");
            this.quicklinks = Optional.ofNullable(quicklinks);
            return this;
        }

        /**
         * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
         */
        public Builder quicklinks(Optional<? extends List<Quicklink>> quicklinks) {
            Utils.checkNotNull(quicklinks, "quicklinks");
            this.quicklinks = quicklinks;
            return this;
        }

        /**
         * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
         */
        public Builder renderConfigPreset(String renderConfigPreset) {
            Utils.checkNotNull(renderConfigPreset, "renderConfigPreset");
            this.renderConfigPreset = Optional.ofNullable(renderConfigPreset);
            return this;
        }

        /**
         * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
         */
        public Builder renderConfigPreset(Optional<String> renderConfigPreset) {
            Utils.checkNotNull(renderConfigPreset, "renderConfigPreset");
            this.renderConfigPreset = renderConfigPreset;
            return this;
        }

        /**
         * Aliases that can be used as `app` operator-values.
         */
        public Builder aliases(List<String> aliases) {
            Utils.checkNotNull(aliases, "aliases");
            this.aliases = Optional.ofNullable(aliases);
            return this;
        }

        /**
         * Aliases that can be used as `app` operator-values.
         */
        public Builder aliases(Optional<? extends List<String>> aliases) {
            Utils.checkNotNull(aliases, "aliases");
            this.aliases = aliases;
            return this;
        }

        /**
         * Whether or not this datasource is hosted on-premise.
         */
        public Builder isOnPrem(boolean isOnPrem) {
            Utils.checkNotNull(isOnPrem, "isOnPrem");
            this.isOnPrem = Optional.ofNullable(isOnPrem);
            return this;
        }

        /**
         * Whether or not this datasource is hosted on-premise.
         */
        public Builder isOnPrem(Optional<Boolean> isOnPrem) {
            Utils.checkNotNull(isOnPrem, "isOnPrem");
            this.isOnPrem = isOnPrem;
            return this;
        }

        /**
         * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
         */
        public Builder trustUrlRegexForViewActivity(boolean trustUrlRegexForViewActivity) {
            Utils.checkNotNull(trustUrlRegexForViewActivity, "trustUrlRegexForViewActivity");
            this.trustUrlRegexForViewActivity = Optional.ofNullable(trustUrlRegexForViewActivity);
            return this;
        }

        /**
         * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
         */
        public Builder trustUrlRegexForViewActivity(Optional<Boolean> trustUrlRegexForViewActivity) {
            Utils.checkNotNull(trustUrlRegexForViewActivity, "trustUrlRegexForViewActivity");
            this.trustUrlRegexForViewActivity = trustUrlRegexForViewActivity;
            return this;
        }

        /**
         * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
         */
        public Builder includeUtmSource(boolean includeUtmSource) {
            Utils.checkNotNull(includeUtmSource, "includeUtmSource");
            this.includeUtmSource = Optional.ofNullable(includeUtmSource);
            return this;
        }

        /**
         * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
         */
        public Builder includeUtmSource(Optional<Boolean> includeUtmSource) {
            Utils.checkNotNull(includeUtmSource, "includeUtmSource");
            this.includeUtmSource = includeUtmSource;
            return this;
        }

        /**
         * If true, the fragment part of the URL will be stripped when converting to a canonical url.
         */
        public Builder stripFragmentInCanonicalUrl(boolean stripFragmentInCanonicalUrl) {
            Utils.checkNotNull(stripFragmentInCanonicalUrl, "stripFragmentInCanonicalUrl");
            this.stripFragmentInCanonicalUrl = Optional.ofNullable(stripFragmentInCanonicalUrl);
            return this;
        }

        /**
         * If true, the fragment part of the URL will be stripped when converting to a canonical url.
         */
        public Builder stripFragmentInCanonicalUrl(Optional<Boolean> stripFragmentInCanonicalUrl) {
            Utils.checkNotNull(stripFragmentInCanonicalUrl, "stripFragmentInCanonicalUrl");
            this.stripFragmentInCanonicalUrl = stripFragmentInCanonicalUrl;
            return this;
        }

        /**
         * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
         */
        public Builder identityDatasourceName(String identityDatasourceName) {
            Utils.checkNotNull(identityDatasourceName, "identityDatasourceName");
            this.identityDatasourceName = Optional.ofNullable(identityDatasourceName);
            return this;
        }

        /**
         * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
         */
        public Builder identityDatasourceName(Optional<String> identityDatasourceName) {
            Utils.checkNotNull(identityDatasourceName, "identityDatasourceName");
            this.identityDatasourceName = identityDatasourceName;
            return this;
        }

        /**
         * If the datasource uses a specific product access group, then the name of that group.
         */
        public Builder productAccessGroup(String productAccessGroup) {
            Utils.checkNotNull(productAccessGroup, "productAccessGroup");
            this.productAccessGroup = Optional.ofNullable(productAccessGroup);
            return this;
        }

        /**
         * If the datasource uses a specific product access group, then the name of that group.
         */
        public Builder productAccessGroup(Optional<String> productAccessGroup) {
            Utils.checkNotNull(productAccessGroup, "productAccessGroup");
            this.productAccessGroup = productAccessGroup;
            return this;
        }

        /**
         * whether email is used to reference users in document ACLs and in group memberships.
         */
        public Builder isUserReferencedByEmail(boolean isUserReferencedByEmail) {
            Utils.checkNotNull(isUserReferencedByEmail, "isUserReferencedByEmail");
            this.isUserReferencedByEmail = Optional.ofNullable(isUserReferencedByEmail);
            return this;
        }

        /**
         * whether email is used to reference users in document ACLs and in group memberships.
         */
        public Builder isUserReferencedByEmail(Optional<Boolean> isUserReferencedByEmail) {
            Utils.checkNotNull(isUserReferencedByEmail, "isUserReferencedByEmail");
            this.isUserReferencedByEmail = isUserReferencedByEmail;
            return this;
        }

        /**
         * True if this datasource is used to push custom entities.
         */
        public Builder isEntityDatasource(boolean isEntityDatasource) {
            Utils.checkNotNull(isEntityDatasource, "isEntityDatasource");
            this.isEntityDatasource = Optional.ofNullable(isEntityDatasource);
            return this;
        }

        /**
         * True if this datasource is used to push custom entities.
         */
        public Builder isEntityDatasource(Optional<Boolean> isEntityDatasource) {
            Utils.checkNotNull(isEntityDatasource, "isEntityDatasource");
            this.isEntityDatasource = isEntityDatasource;
            return this;
        }

        /**
         * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
         */
        public Builder isTestDatasource(boolean isTestDatasource) {
            Utils.checkNotNull(isTestDatasource, "isTestDatasource");
            this.isTestDatasource = Optional.ofNullable(isTestDatasource);
            return this;
        }

        /**
         * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
         */
        public Builder isTestDatasource(Optional<Boolean> isTestDatasource) {
            Utils.checkNotNull(isTestDatasource, "isTestDatasource");
            this.isTestDatasource = isTestDatasource;
            return this;
        }
        
        public CustomDatasourceConfig build() {
            if (datasourceCategory == null) {
                datasourceCategory = _SINGLETON_VALUE_DatasourceCategory.value();
            }
            if (trustUrlRegexForViewActivity == null) {
                trustUrlRegexForViewActivity = _SINGLETON_VALUE_TrustUrlRegexForViewActivity.value();
            }
            if (stripFragmentInCanonicalUrl == null) {
                stripFragmentInCanonicalUrl = _SINGLETON_VALUE_StripFragmentInCanonicalUrl.value();
            }
            if (isEntityDatasource == null) {
                isEntityDatasource = _SINGLETON_VALUE_IsEntityDatasource.value();
            }
            if (isTestDatasource == null) {
                isTestDatasource = _SINGLETON_VALUE_IsTestDatasource.value();
            }
            return new CustomDatasourceConfig(
                name,
                displayName,
                datasourceCategory,
                urlRegex,
                iconUrl,
                objectDefinitions,
                suggestionText,
                homeUrl,
                crawlerSeedUrls,
                iconDarkUrl,
                hideBuiltInFacets,
                canonicalizingURLRegex,
                canonicalizingTitleRegex,
                redlistTitleRegex,
                connectorType,
                quicklinks,
                renderConfigPreset,
                aliases,
                isOnPrem,
                trustUrlRegexForViewActivity,
                includeUtmSource,
                stripFragmentInCanonicalUrl,
                identityDatasourceName,
                productAccessGroup,
                isUserReferencedByEmail,
                isEntityDatasource,
                isTestDatasource);
        }

        private static final LazySingletonValue<Optional<? extends DatasourceCategory>> _SINGLETON_VALUE_DatasourceCategory =
                new LazySingletonValue<>(
                        "datasourceCategory",
                        "\"UNCATEGORIZED\"",
                        new TypeReference<Optional<? extends DatasourceCategory>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_TrustUrlRegexForViewActivity =
                new LazySingletonValue<>(
                        "trustUrlRegexForViewActivity",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_StripFragmentInCanonicalUrl =
                new LazySingletonValue<>(
                        "stripFragmentInCanonicalUrl",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IsEntityDatasource =
                new LazySingletonValue<>(
                        "isEntityDatasource",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IsTestDatasource =
                new LazySingletonValue<>(
                        "isTestDatasource",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
