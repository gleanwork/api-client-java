/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ObjectDefinition
 * 
 * <p>The definition for an `DocumentMetadata.objectType` within a datasource.
 */
public class ObjectDefinition {

    /**
     * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The user-friendly name of the object for display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayLabel")
    private Optional<String> displayLabel;

    /**
     * The document category of this object type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docCategory")
    private Optional<? extends DocCategory> docCategory;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyDefinitions")
    private Optional<? extends List<PropertyDefinition>> propertyDefinitions;

    /**
     * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyGroups")
    private Optional<? extends List<PropertyGroup>> propertyGroups;

    /**
     * Whether or not the object is summarizable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summarizable")
    private Optional<Boolean> summarizable;

    @JsonCreator
    public ObjectDefinition(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("displayLabel") Optional<String> displayLabel,
            @JsonProperty("docCategory") Optional<? extends DocCategory> docCategory,
            @JsonProperty("propertyDefinitions") Optional<? extends List<PropertyDefinition>> propertyDefinitions,
            @JsonProperty("propertyGroups") Optional<? extends List<PropertyGroup>> propertyGroups,
            @JsonProperty("summarizable") Optional<Boolean> summarizable) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayLabel, "displayLabel");
        Utils.checkNotNull(docCategory, "docCategory");
        Utils.checkNotNull(propertyDefinitions, "propertyDefinitions");
        Utils.checkNotNull(propertyGroups, "propertyGroups");
        Utils.checkNotNull(summarizable, "summarizable");
        this.name = name;
        this.displayLabel = displayLabel;
        this.docCategory = docCategory;
        this.propertyDefinitions = propertyDefinitions;
        this.propertyGroups = propertyGroups;
        this.summarizable = summarizable;
    }
    
    public ObjectDefinition() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The user-friendly name of the object for display.
     */
    @JsonIgnore
    public Optional<String> displayLabel() {
        return displayLabel;
    }

    /**
     * The document category of this object type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocCategory> docCategory() {
        return (Optional<DocCategory>) docCategory;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyDefinition>> propertyDefinitions() {
        return (Optional<List<PropertyDefinition>>) propertyDefinitions;
    }

    /**
     * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyGroup>> propertyGroups() {
        return (Optional<List<PropertyGroup>>) propertyGroups;
    }

    /**
     * Whether or not the object is summarizable
     */
    @JsonIgnore
    public Optional<Boolean> summarizable() {
        return summarizable;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
     */
    public ObjectDefinition withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
     */
    public ObjectDefinition withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The user-friendly name of the object for display.
     */
    public ObjectDefinition withDisplayLabel(String displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = Optional.ofNullable(displayLabel);
        return this;
    }

    /**
     * The user-friendly name of the object for display.
     */
    public ObjectDefinition withDisplayLabel(Optional<String> displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = displayLabel;
        return this;
    }

    /**
     * The document category of this object type.
     */
    public ObjectDefinition withDocCategory(DocCategory docCategory) {
        Utils.checkNotNull(docCategory, "docCategory");
        this.docCategory = Optional.ofNullable(docCategory);
        return this;
    }

    /**
     * The document category of this object type.
     */
    public ObjectDefinition withDocCategory(Optional<? extends DocCategory> docCategory) {
        Utils.checkNotNull(docCategory, "docCategory");
        this.docCategory = docCategory;
        return this;
    }

    public ObjectDefinition withPropertyDefinitions(List<PropertyDefinition> propertyDefinitions) {
        Utils.checkNotNull(propertyDefinitions, "propertyDefinitions");
        this.propertyDefinitions = Optional.ofNullable(propertyDefinitions);
        return this;
    }

    public ObjectDefinition withPropertyDefinitions(Optional<? extends List<PropertyDefinition>> propertyDefinitions) {
        Utils.checkNotNull(propertyDefinitions, "propertyDefinitions");
        this.propertyDefinitions = propertyDefinitions;
        return this;
    }

    /**
     * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
     */
    public ObjectDefinition withPropertyGroups(List<PropertyGroup> propertyGroups) {
        Utils.checkNotNull(propertyGroups, "propertyGroups");
        this.propertyGroups = Optional.ofNullable(propertyGroups);
        return this;
    }

    /**
     * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
     */
    public ObjectDefinition withPropertyGroups(Optional<? extends List<PropertyGroup>> propertyGroups) {
        Utils.checkNotNull(propertyGroups, "propertyGroups");
        this.propertyGroups = propertyGroups;
        return this;
    }

    /**
     * Whether or not the object is summarizable
     */
    public ObjectDefinition withSummarizable(boolean summarizable) {
        Utils.checkNotNull(summarizable, "summarizable");
        this.summarizable = Optional.ofNullable(summarizable);
        return this;
    }

    /**
     * Whether or not the object is summarizable
     */
    public ObjectDefinition withSummarizable(Optional<Boolean> summarizable) {
        Utils.checkNotNull(summarizable, "summarizable");
        this.summarizable = summarizable;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjectDefinition other = (ObjectDefinition) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.displayLabel, other.displayLabel) &&
            Objects.deepEquals(this.docCategory, other.docCategory) &&
            Objects.deepEquals(this.propertyDefinitions, other.propertyDefinitions) &&
            Objects.deepEquals(this.propertyGroups, other.propertyGroups) &&
            Objects.deepEquals(this.summarizable, other.summarizable);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            displayLabel,
            docCategory,
            propertyDefinitions,
            propertyGroups,
            summarizable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjectDefinition.class,
                "name", name,
                "displayLabel", displayLabel,
                "docCategory", docCategory,
                "propertyDefinitions", propertyDefinitions,
                "propertyGroups", propertyGroups,
                "summarizable", summarizable);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> displayLabel = Optional.empty();
 
        private Optional<? extends DocCategory> docCategory = Optional.empty();
 
        private Optional<? extends List<PropertyDefinition>> propertyDefinitions = Optional.empty();
 
        private Optional<? extends List<PropertyGroup>> propertyGroups = Optional.empty();
 
        private Optional<Boolean> summarizable = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The user-friendly name of the object for display.
         */
        public Builder displayLabel(String displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = Optional.ofNullable(displayLabel);
            return this;
        }

        /**
         * The user-friendly name of the object for display.
         */
        public Builder displayLabel(Optional<String> displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = displayLabel;
            return this;
        }

        /**
         * The document category of this object type.
         */
        public Builder docCategory(DocCategory docCategory) {
            Utils.checkNotNull(docCategory, "docCategory");
            this.docCategory = Optional.ofNullable(docCategory);
            return this;
        }

        /**
         * The document category of this object type.
         */
        public Builder docCategory(Optional<? extends DocCategory> docCategory) {
            Utils.checkNotNull(docCategory, "docCategory");
            this.docCategory = docCategory;
            return this;
        }

        public Builder propertyDefinitions(List<PropertyDefinition> propertyDefinitions) {
            Utils.checkNotNull(propertyDefinitions, "propertyDefinitions");
            this.propertyDefinitions = Optional.ofNullable(propertyDefinitions);
            return this;
        }

        public Builder propertyDefinitions(Optional<? extends List<PropertyDefinition>> propertyDefinitions) {
            Utils.checkNotNull(propertyDefinitions, "propertyDefinitions");
            this.propertyDefinitions = propertyDefinitions;
            return this;
        }

        /**
         * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
         */
        public Builder propertyGroups(List<PropertyGroup> propertyGroups) {
            Utils.checkNotNull(propertyGroups, "propertyGroups");
            this.propertyGroups = Optional.ofNullable(propertyGroups);
            return this;
        }

        /**
         * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
         */
        public Builder propertyGroups(Optional<? extends List<PropertyGroup>> propertyGroups) {
            Utils.checkNotNull(propertyGroups, "propertyGroups");
            this.propertyGroups = propertyGroups;
            return this;
        }

        /**
         * Whether or not the object is summarizable
         */
        public Builder summarizable(boolean summarizable) {
            Utils.checkNotNull(summarizable, "summarizable");
            this.summarizable = Optional.ofNullable(summarizable);
            return this;
        }

        /**
         * Whether or not the object is summarizable
         */
        public Builder summarizable(Optional<Boolean> summarizable) {
            Utils.checkNotNull(summarizable, "summarizable");
            this.summarizable = summarizable;
            return this;
        }
        
        public ObjectDefinition build() {
            return new ObjectDefinition(
                name,
                displayLabel,
                docCategory,
                propertyDefinitions,
                propertyGroups,
                summarizable);
        }
    }
}
