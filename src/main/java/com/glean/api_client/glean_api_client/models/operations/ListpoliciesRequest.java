/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class ListpoliciesRequest {

    /**
     * Filter to return reports with a given value of auto-hide.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=autoHide")
    private Optional<Boolean> autoHide;

    /**
     * Filter to return reports with a given frequency.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=frequency")
    private Optional<String> frequency;

    @JsonCreator
    public ListpoliciesRequest(
            Optional<Boolean> autoHide,
            Optional<String> frequency) {
        Utils.checkNotNull(autoHide, "autoHide");
        Utils.checkNotNull(frequency, "frequency");
        this.autoHide = autoHide;
        this.frequency = frequency;
    }
    
    public ListpoliciesRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Filter to return reports with a given value of auto-hide.
     */
    @JsonIgnore
    public Optional<Boolean> autoHide() {
        return autoHide;
    }

    /**
     * Filter to return reports with a given frequency.
     */
    @JsonIgnore
    public Optional<String> frequency() {
        return frequency;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Filter to return reports with a given value of auto-hide.
     */
    public ListpoliciesRequest withAutoHide(boolean autoHide) {
        Utils.checkNotNull(autoHide, "autoHide");
        this.autoHide = Optional.ofNullable(autoHide);
        return this;
    }

    /**
     * Filter to return reports with a given value of auto-hide.
     */
    public ListpoliciesRequest withAutoHide(Optional<Boolean> autoHide) {
        Utils.checkNotNull(autoHide, "autoHide");
        this.autoHide = autoHide;
        return this;
    }

    /**
     * Filter to return reports with a given frequency.
     */
    public ListpoliciesRequest withFrequency(String frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * Filter to return reports with a given frequency.
     */
    public ListpoliciesRequest withFrequency(Optional<String> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListpoliciesRequest other = (ListpoliciesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.autoHide, other.autoHide) &&
            Utils.enhancedDeepEquals(this.frequency, other.frequency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            autoHide,
            frequency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListpoliciesRequest.class,
                "autoHide", autoHide,
                "frequency", frequency);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> autoHide = Optional.empty();
 
        private Optional<String> frequency = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter to return reports with a given value of auto-hide.
         */
        public Builder autoHide(boolean autoHide) {
            Utils.checkNotNull(autoHide, "autoHide");
            this.autoHide = Optional.ofNullable(autoHide);
            return this;
        }

        /**
         * Filter to return reports with a given value of auto-hide.
         */
        public Builder autoHide(Optional<Boolean> autoHide) {
            Utils.checkNotNull(autoHide, "autoHide");
            this.autoHide = autoHide;
            return this;
        }

        /**
         * Filter to return reports with a given frequency.
         */
        public Builder frequency(String frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * Filter to return reports with a given frequency.
         */
        public Builder frequency(Optional<String> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }
        
        public ListpoliciesRequest build() {
            return new ListpoliciesRequest(
                autoHide,
                frequency);
        }
    }
}
