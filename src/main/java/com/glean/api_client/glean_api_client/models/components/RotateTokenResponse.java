/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * RotateTokenResponse
 * 
 * <p>Describes the response body of the /rotatetoken API call
 */
public class RotateTokenResponse {

    /**
     * New raw secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawSecret")
    private Optional<String> rawSecret;

    /**
     * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Long> createdAt;

    /**
     * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotationPeriodMinutes")
    private Optional<Long> rotationPeriodMinutes;

    @JsonCreator
    public RotateTokenResponse(
            @JsonProperty("rawSecret") Optional<String> rawSecret,
            @JsonProperty("createdAt") Optional<Long> createdAt,
            @JsonProperty("rotationPeriodMinutes") Optional<Long> rotationPeriodMinutes) {
        Utils.checkNotNull(rawSecret, "rawSecret");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(rotationPeriodMinutes, "rotationPeriodMinutes");
        this.rawSecret = rawSecret;
        this.createdAt = createdAt;
        this.rotationPeriodMinutes = rotationPeriodMinutes;
    }
    
    public RotateTokenResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * New raw secret
     */
    @JsonIgnore
    public Optional<String> rawSecret() {
        return rawSecret;
    }

    /**
     * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
     */
    @JsonIgnore
    public Optional<Long> rotationPeriodMinutes() {
        return rotationPeriodMinutes;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * New raw secret
     */
    public RotateTokenResponse withRawSecret(String rawSecret) {
        Utils.checkNotNull(rawSecret, "rawSecret");
        this.rawSecret = Optional.ofNullable(rawSecret);
        return this;
    }

    /**
     * New raw secret
     */
    public RotateTokenResponse withRawSecret(Optional<String> rawSecret) {
        Utils.checkNotNull(rawSecret, "rawSecret");
        this.rawSecret = rawSecret;
        return this;
    }

    /**
     * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
     */
    public RotateTokenResponse withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
     */
    public RotateTokenResponse withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
     */
    public RotateTokenResponse withRotationPeriodMinutes(long rotationPeriodMinutes) {
        Utils.checkNotNull(rotationPeriodMinutes, "rotationPeriodMinutes");
        this.rotationPeriodMinutes = Optional.ofNullable(rotationPeriodMinutes);
        return this;
    }

    /**
     * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
     */
    public RotateTokenResponse withRotationPeriodMinutes(Optional<Long> rotationPeriodMinutes) {
        Utils.checkNotNull(rotationPeriodMinutes, "rotationPeriodMinutes");
        this.rotationPeriodMinutes = rotationPeriodMinutes;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RotateTokenResponse other = (RotateTokenResponse) o;
        return 
            Objects.deepEquals(this.rawSecret, other.rawSecret) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.rotationPeriodMinutes, other.rotationPeriodMinutes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            rawSecret,
            createdAt,
            rotationPeriodMinutes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RotateTokenResponse.class,
                "rawSecret", rawSecret,
                "createdAt", createdAt,
                "rotationPeriodMinutes", rotationPeriodMinutes);
    }
    
    public final static class Builder {
 
        private Optional<String> rawSecret = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<Long> rotationPeriodMinutes = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * New raw secret
         */
        public Builder rawSecret(String rawSecret) {
            Utils.checkNotNull(rawSecret, "rawSecret");
            this.rawSecret = Optional.ofNullable(rawSecret);
            return this;
        }

        /**
         * New raw secret
         */
        public Builder rawSecret(Optional<String> rawSecret) {
            Utils.checkNotNull(rawSecret, "rawSecret");
            this.rawSecret = rawSecret;
            return this;
        }

        /**
         * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
         */
        public Builder rotationPeriodMinutes(long rotationPeriodMinutes) {
            Utils.checkNotNull(rotationPeriodMinutes, "rotationPeriodMinutes");
            this.rotationPeriodMinutes = Optional.ofNullable(rotationPeriodMinutes);
            return this;
        }

        /**
         * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
         */
        public Builder rotationPeriodMinutes(Optional<Long> rotationPeriodMinutes) {
            Utils.checkNotNull(rotationPeriodMinutes, "rotationPeriodMinutes");
            this.rotationPeriodMinutes = rotationPeriodMinutes;
            return this;
        }
        
        public RotateTokenResponse build() {
            return new RotateTokenResponse(
                rawSecret,
                createdAt,
                rotationPeriodMinutes);
        }
    }
}
