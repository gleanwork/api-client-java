/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Shortcut {

    /**
     * The opaque id of the user generated content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    /**
     * Link text following go/ prefix as entered by the user.
     */
    @JsonProperty("inputAlias")
    private String inputAlias;

    /**
     * Destination URL for the shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationUrl")
    private Optional<String> destinationUrl;

    /**
     * Glean Document ID for the URL, if known.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationDocumentId")
    private Optional<String> destinationDocumentId;

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unlisted")
    private Optional<Boolean> unlisted;

    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlTemplate")
    private Optional<String> urlTemplate;

    /**
     * A list of user roles added for the Shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedRoles")
    private Optional<? extends List<UserRoleSpecification>> addedRoles;

    /**
     * A list of user roles removed for the Shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedRoles")
    private Optional<? extends List<UserRoleSpecification>> removedRoles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    private Optional<? extends Person> createdBy;

    /**
     * The time the shortcut was created in ISO format (ISO 8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<OffsetDateTime> createTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends Person> updatedBy;

    /**
     * The time the shortcut was updated in ISO format (ISO 8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    private Optional<OffsetDateTime> updateTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationDocument")
    private Optional<? extends Document> destinationDocument;

    /**
     * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/&lt;inputAlias&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intermediateUrl")
    private Optional<String> intermediateUrl;

    /**
     * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewPrefix")
    private Optional<String> viewPrefix;

    /**
     * Indicates whether a shortcut is native or external.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isExternal")
    private Optional<Boolean> isExternal;

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editUrl")
    private Optional<String> editUrl;

    /**
     * canonical link text following go/ prefix where hyphen/underscore is removed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alias")
    private Optional<String> alias;

    /**
     * Title for the Go Link
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * A list of user roles for the Go Link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonCreator
    public Shortcut(
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("inputAlias") String inputAlias,
            @JsonProperty("destinationUrl") Optional<String> destinationUrl,
            @JsonProperty("destinationDocumentId") Optional<String> destinationDocumentId,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("unlisted") Optional<Boolean> unlisted,
            @JsonProperty("urlTemplate") Optional<String> urlTemplate,
            @JsonProperty("addedRoles") Optional<? extends List<UserRoleSpecification>> addedRoles,
            @JsonProperty("removedRoles") Optional<? extends List<UserRoleSpecification>> removedRoles,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("createdBy") Optional<? extends Person> createdBy,
            @JsonProperty("createTime") Optional<OffsetDateTime> createTime,
            @JsonProperty("updatedBy") Optional<? extends Person> updatedBy,
            @JsonProperty("updateTime") Optional<OffsetDateTime> updateTime,
            @JsonProperty("destinationDocument") Optional<? extends Document> destinationDocument,
            @JsonProperty("intermediateUrl") Optional<String> intermediateUrl,
            @JsonProperty("viewPrefix") Optional<String> viewPrefix,
            @JsonProperty("isExternal") Optional<Boolean> isExternal,
            @JsonProperty("editUrl") Optional<String> editUrl,
            @JsonProperty("alias") Optional<String> alias,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(inputAlias, "inputAlias");
        Utils.checkNotNull(destinationUrl, "destinationUrl");
        Utils.checkNotNull(destinationDocumentId, "destinationDocumentId");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(unlisted, "unlisted");
        Utils.checkNotNull(urlTemplate, "urlTemplate");
        Utils.checkNotNull(addedRoles, "addedRoles");
        Utils.checkNotNull(removedRoles, "removedRoles");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(updateTime, "updateTime");
        Utils.checkNotNull(destinationDocument, "destinationDocument");
        Utils.checkNotNull(intermediateUrl, "intermediateUrl");
        Utils.checkNotNull(viewPrefix, "viewPrefix");
        Utils.checkNotNull(isExternal, "isExternal");
        Utils.checkNotNull(editUrl, "editUrl");
        Utils.checkNotNull(alias, "alias");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(roles, "roles");
        this.id = id;
        this.inputAlias = inputAlias;
        this.destinationUrl = destinationUrl;
        this.destinationDocumentId = destinationDocumentId;
        this.description = description;
        this.unlisted = unlisted;
        this.urlTemplate = urlTemplate;
        this.addedRoles = addedRoles;
        this.removedRoles = removedRoles;
        this.permissions = permissions;
        this.createdBy = createdBy;
        this.createTime = createTime;
        this.updatedBy = updatedBy;
        this.updateTime = updateTime;
        this.destinationDocument = destinationDocument;
        this.intermediateUrl = intermediateUrl;
        this.viewPrefix = viewPrefix;
        this.isExternal = isExternal;
        this.editUrl = editUrl;
        this.alias = alias;
        this.title = title;
        this.roles = roles;
    }
    
    public Shortcut(
            String inputAlias) {
        this(Optional.empty(), inputAlias, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The opaque id of the user generated content.
     */
    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    /**
     * Link text following go/ prefix as entered by the user.
     */
    @JsonIgnore
    public String inputAlias() {
        return inputAlias;
    }

    /**
     * Destination URL for the shortcut.
     */
    @JsonIgnore
    public Optional<String> destinationUrl() {
        return destinationUrl;
    }

    /**
     * Glean Document ID for the URL, if known.
     */
    @JsonIgnore
    public Optional<String> destinationDocumentId() {
        return destinationDocumentId;
    }

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    @JsonIgnore
    public Optional<Boolean> unlisted() {
        return unlisted;
    }

    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    @JsonIgnore
    public Optional<String> urlTemplate() {
        return urlTemplate;
    }

    /**
     * A list of user roles added for the Shortcut.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> addedRoles() {
        return (Optional<List<UserRoleSpecification>>) addedRoles;
    }

    /**
     * A list of user roles removed for the Shortcut.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> removedRoles() {
        return (Optional<List<UserRoleSpecification>>) removedRoles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> createdBy() {
        return (Optional<Person>) createdBy;
    }

    /**
     * The time the shortcut was created in ISO format (ISO 8601).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> createTime() {
        return createTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> updatedBy() {
        return (Optional<Person>) updatedBy;
    }

    /**
     * The time the shortcut was updated in ISO format (ISO 8601).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> updateTime() {
        return updateTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> destinationDocument() {
        return (Optional<Document>) destinationDocument;
    }

    /**
     * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/&lt;inputAlias&gt;.
     */
    @JsonIgnore
    public Optional<String> intermediateUrl() {
        return intermediateUrl;
    }

    /**
     * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
     */
    @JsonIgnore
    public Optional<String> viewPrefix() {
        return viewPrefix;
    }

    /**
     * Indicates whether a shortcut is native or external.
     */
    @JsonIgnore
    public Optional<Boolean> isExternal() {
        return isExternal;
    }

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    @JsonIgnore
    public Optional<String> editUrl() {
        return editUrl;
    }

    /**
     * canonical link text following go/ prefix where hyphen/underscore is removed.
     */
    @JsonIgnore
    public Optional<String> alias() {
        return alias;
    }

    /**
     * Title for the Go Link
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * A list of user roles for the Go Link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The opaque id of the user generated content.
     */
    public Shortcut withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The opaque id of the user generated content.
     */
    public Shortcut withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Link text following go/ prefix as entered by the user.
     */
    public Shortcut withInputAlias(String inputAlias) {
        Utils.checkNotNull(inputAlias, "inputAlias");
        this.inputAlias = inputAlias;
        return this;
    }

    /**
     * Destination URL for the shortcut.
     */
    public Shortcut withDestinationUrl(String destinationUrl) {
        Utils.checkNotNull(destinationUrl, "destinationUrl");
        this.destinationUrl = Optional.ofNullable(destinationUrl);
        return this;
    }

    /**
     * Destination URL for the shortcut.
     */
    public Shortcut withDestinationUrl(Optional<String> destinationUrl) {
        Utils.checkNotNull(destinationUrl, "destinationUrl");
        this.destinationUrl = destinationUrl;
        return this;
    }

    /**
     * Glean Document ID for the URL, if known.
     */
    public Shortcut withDestinationDocumentId(String destinationDocumentId) {
        Utils.checkNotNull(destinationDocumentId, "destinationDocumentId");
        this.destinationDocumentId = Optional.ofNullable(destinationDocumentId);
        return this;
    }

    /**
     * Glean Document ID for the URL, if known.
     */
    public Shortcut withDestinationDocumentId(Optional<String> destinationDocumentId) {
        Utils.checkNotNull(destinationDocumentId, "destinationDocumentId");
        this.destinationDocumentId = destinationDocumentId;
        return this;
    }

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    public Shortcut withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    public Shortcut withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    public Shortcut withUnlisted(boolean unlisted) {
        Utils.checkNotNull(unlisted, "unlisted");
        this.unlisted = Optional.ofNullable(unlisted);
        return this;
    }

    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    public Shortcut withUnlisted(Optional<Boolean> unlisted) {
        Utils.checkNotNull(unlisted, "unlisted");
        this.unlisted = unlisted;
        return this;
    }

    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    public Shortcut withUrlTemplate(String urlTemplate) {
        Utils.checkNotNull(urlTemplate, "urlTemplate");
        this.urlTemplate = Optional.ofNullable(urlTemplate);
        return this;
    }

    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    public Shortcut withUrlTemplate(Optional<String> urlTemplate) {
        Utils.checkNotNull(urlTemplate, "urlTemplate");
        this.urlTemplate = urlTemplate;
        return this;
    }

    /**
     * A list of user roles added for the Shortcut.
     */
    public Shortcut withAddedRoles(List<UserRoleSpecification> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = Optional.ofNullable(addedRoles);
        return this;
    }

    /**
     * A list of user roles added for the Shortcut.
     */
    public Shortcut withAddedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = addedRoles;
        return this;
    }

    /**
     * A list of user roles removed for the Shortcut.
     */
    public Shortcut withRemovedRoles(List<UserRoleSpecification> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = Optional.ofNullable(removedRoles);
        return this;
    }

    /**
     * A list of user roles removed for the Shortcut.
     */
    public Shortcut withRemovedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = removedRoles;
        return this;
    }

    public Shortcut withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public Shortcut withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    public Shortcut withCreatedBy(Person createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }

    public Shortcut withCreatedBy(Optional<? extends Person> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The time the shortcut was created in ISO format (ISO 8601).
     */
    public Shortcut withCreateTime(OffsetDateTime createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    /**
     * The time the shortcut was created in ISO format (ISO 8601).
     */
    public Shortcut withCreateTime(Optional<OffsetDateTime> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    public Shortcut withUpdatedBy(Person updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    public Shortcut withUpdatedBy(Optional<? extends Person> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The time the shortcut was updated in ISO format (ISO 8601).
     */
    public Shortcut withUpdateTime(OffsetDateTime updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = Optional.ofNullable(updateTime);
        return this;
    }

    /**
     * The time the shortcut was updated in ISO format (ISO 8601).
     */
    public Shortcut withUpdateTime(Optional<OffsetDateTime> updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = updateTime;
        return this;
    }

    public Shortcut withDestinationDocument(Document destinationDocument) {
        Utils.checkNotNull(destinationDocument, "destinationDocument");
        this.destinationDocument = Optional.ofNullable(destinationDocument);
        return this;
    }

    public Shortcut withDestinationDocument(Optional<? extends Document> destinationDocument) {
        Utils.checkNotNull(destinationDocument, "destinationDocument");
        this.destinationDocument = destinationDocument;
        return this;
    }

    /**
     * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/&lt;inputAlias&gt;.
     */
    public Shortcut withIntermediateUrl(String intermediateUrl) {
        Utils.checkNotNull(intermediateUrl, "intermediateUrl");
        this.intermediateUrl = Optional.ofNullable(intermediateUrl);
        return this;
    }

    /**
     * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/&lt;inputAlias&gt;.
     */
    public Shortcut withIntermediateUrl(Optional<String> intermediateUrl) {
        Utils.checkNotNull(intermediateUrl, "intermediateUrl");
        this.intermediateUrl = intermediateUrl;
        return this;
    }

    /**
     * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
     */
    public Shortcut withViewPrefix(String viewPrefix) {
        Utils.checkNotNull(viewPrefix, "viewPrefix");
        this.viewPrefix = Optional.ofNullable(viewPrefix);
        return this;
    }

    /**
     * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
     */
    public Shortcut withViewPrefix(Optional<String> viewPrefix) {
        Utils.checkNotNull(viewPrefix, "viewPrefix");
        this.viewPrefix = viewPrefix;
        return this;
    }

    /**
     * Indicates whether a shortcut is native or external.
     */
    public Shortcut withIsExternal(boolean isExternal) {
        Utils.checkNotNull(isExternal, "isExternal");
        this.isExternal = Optional.ofNullable(isExternal);
        return this;
    }

    /**
     * Indicates whether a shortcut is native or external.
     */
    public Shortcut withIsExternal(Optional<Boolean> isExternal) {
        Utils.checkNotNull(isExternal, "isExternal");
        this.isExternal = isExternal;
        return this;
    }

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    public Shortcut withEditUrl(String editUrl) {
        Utils.checkNotNull(editUrl, "editUrl");
        this.editUrl = Optional.ofNullable(editUrl);
        return this;
    }

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    public Shortcut withEditUrl(Optional<String> editUrl) {
        Utils.checkNotNull(editUrl, "editUrl");
        this.editUrl = editUrl;
        return this;
    }

    /**
     * canonical link text following go/ prefix where hyphen/underscore is removed.
     */
    public Shortcut withAlias(String alias) {
        Utils.checkNotNull(alias, "alias");
        this.alias = Optional.ofNullable(alias);
        return this;
    }

    /**
     * canonical link text following go/ prefix where hyphen/underscore is removed.
     */
    public Shortcut withAlias(Optional<String> alias) {
        Utils.checkNotNull(alias, "alias");
        this.alias = alias;
        return this;
    }

    /**
     * Title for the Go Link
     */
    public Shortcut withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Title for the Go Link
     */
    public Shortcut withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * A list of user roles for the Go Link.
     */
    public Shortcut withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of user roles for the Go Link.
     */
    public Shortcut withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Shortcut other = (Shortcut) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.inputAlias, other.inputAlias) &&
            Objects.deepEquals(this.destinationUrl, other.destinationUrl) &&
            Objects.deepEquals(this.destinationDocumentId, other.destinationDocumentId) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.unlisted, other.unlisted) &&
            Objects.deepEquals(this.urlTemplate, other.urlTemplate) &&
            Objects.deepEquals(this.addedRoles, other.addedRoles) &&
            Objects.deepEquals(this.removedRoles, other.removedRoles) &&
            Objects.deepEquals(this.permissions, other.permissions) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.createTime, other.createTime) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.updateTime, other.updateTime) &&
            Objects.deepEquals(this.destinationDocument, other.destinationDocument) &&
            Objects.deepEquals(this.intermediateUrl, other.intermediateUrl) &&
            Objects.deepEquals(this.viewPrefix, other.viewPrefix) &&
            Objects.deepEquals(this.isExternal, other.isExternal) &&
            Objects.deepEquals(this.editUrl, other.editUrl) &&
            Objects.deepEquals(this.alias, other.alias) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.roles, other.roles);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            inputAlias,
            destinationUrl,
            destinationDocumentId,
            description,
            unlisted,
            urlTemplate,
            addedRoles,
            removedRoles,
            permissions,
            createdBy,
            createTime,
            updatedBy,
            updateTime,
            destinationDocument,
            intermediateUrl,
            viewPrefix,
            isExternal,
            editUrl,
            alias,
            title,
            roles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Shortcut.class,
                "id", id,
                "inputAlias", inputAlias,
                "destinationUrl", destinationUrl,
                "destinationDocumentId", destinationDocumentId,
                "description", description,
                "unlisted", unlisted,
                "urlTemplate", urlTemplate,
                "addedRoles", addedRoles,
                "removedRoles", removedRoles,
                "permissions", permissions,
                "createdBy", createdBy,
                "createTime", createTime,
                "updatedBy", updatedBy,
                "updateTime", updateTime,
                "destinationDocument", destinationDocument,
                "intermediateUrl", intermediateUrl,
                "viewPrefix", viewPrefix,
                "isExternal", isExternal,
                "editUrl", editUrl,
                "alias", alias,
                "title", title,
                "roles", roles);
    }
    
    public final static class Builder {
 
        private Optional<Long> id = Optional.empty();
 
        private String inputAlias;
 
        private Optional<String> destinationUrl = Optional.empty();
 
        private Optional<String> destinationDocumentId = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Boolean> unlisted = Optional.empty();
 
        private Optional<String> urlTemplate = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> addedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> removedRoles = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private Optional<? extends Person> createdBy = Optional.empty();
 
        private Optional<OffsetDateTime> createTime = Optional.empty();
 
        private Optional<? extends Person> updatedBy = Optional.empty();
 
        private Optional<OffsetDateTime> updateTime = Optional.empty();
 
        private Optional<? extends Document> destinationDocument = Optional.empty();
 
        private Optional<String> intermediateUrl = Optional.empty();
 
        private Optional<String> viewPrefix = Optional.empty();
 
        private Optional<Boolean> isExternal = Optional.empty();
 
        private Optional<String> editUrl = Optional.empty();
 
        private Optional<String> alias = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The opaque id of the user generated content.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The opaque id of the user generated content.
         */
        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Link text following go/ prefix as entered by the user.
         */
        public Builder inputAlias(String inputAlias) {
            Utils.checkNotNull(inputAlias, "inputAlias");
            this.inputAlias = inputAlias;
            return this;
        }

        /**
         * Destination URL for the shortcut.
         */
        public Builder destinationUrl(String destinationUrl) {
            Utils.checkNotNull(destinationUrl, "destinationUrl");
            this.destinationUrl = Optional.ofNullable(destinationUrl);
            return this;
        }

        /**
         * Destination URL for the shortcut.
         */
        public Builder destinationUrl(Optional<String> destinationUrl) {
            Utils.checkNotNull(destinationUrl, "destinationUrl");
            this.destinationUrl = destinationUrl;
            return this;
        }

        /**
         * Glean Document ID for the URL, if known.
         */
        public Builder destinationDocumentId(String destinationDocumentId) {
            Utils.checkNotNull(destinationDocumentId, "destinationDocumentId");
            this.destinationDocumentId = Optional.ofNullable(destinationDocumentId);
            return this;
        }

        /**
         * Glean Document ID for the URL, if known.
         */
        public Builder destinationDocumentId(Optional<String> destinationDocumentId) {
            Utils.checkNotNull(destinationDocumentId, "destinationDocumentId");
            this.destinationDocumentId = destinationDocumentId;
            return this;
        }

        /**
         * A short, plain text blurb to help people understand the intent of the shortcut.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short, plain text blurb to help people understand the intent of the shortcut.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
         */
        public Builder unlisted(boolean unlisted) {
            Utils.checkNotNull(unlisted, "unlisted");
            this.unlisted = Optional.ofNullable(unlisted);
            return this;
        }

        /**
         * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
         */
        public Builder unlisted(Optional<Boolean> unlisted) {
            Utils.checkNotNull(unlisted, "unlisted");
            this.unlisted = unlisted;
            return this;
        }

        /**
         * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
         */
        public Builder urlTemplate(String urlTemplate) {
            Utils.checkNotNull(urlTemplate, "urlTemplate");
            this.urlTemplate = Optional.ofNullable(urlTemplate);
            return this;
        }

        /**
         * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
         */
        public Builder urlTemplate(Optional<String> urlTemplate) {
            Utils.checkNotNull(urlTemplate, "urlTemplate");
            this.urlTemplate = urlTemplate;
            return this;
        }

        /**
         * A list of user roles added for the Shortcut.
         */
        public Builder addedRoles(List<UserRoleSpecification> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = Optional.ofNullable(addedRoles);
            return this;
        }

        /**
         * A list of user roles added for the Shortcut.
         */
        public Builder addedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = addedRoles;
            return this;
        }

        /**
         * A list of user roles removed for the Shortcut.
         */
        public Builder removedRoles(List<UserRoleSpecification> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = Optional.ofNullable(removedRoles);
            return this;
        }

        /**
         * A list of user roles removed for the Shortcut.
         */
        public Builder removedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = removedRoles;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        public Builder createdBy(Person createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        public Builder createdBy(Optional<? extends Person> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The time the shortcut was created in ISO format (ISO 8601).
         */
        public Builder createTime(OffsetDateTime createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        /**
         * The time the shortcut was created in ISO format (ISO 8601).
         */
        public Builder createTime(Optional<OffsetDateTime> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        public Builder updatedBy(Person updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        public Builder updatedBy(Optional<? extends Person> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The time the shortcut was updated in ISO format (ISO 8601).
         */
        public Builder updateTime(OffsetDateTime updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        /**
         * The time the shortcut was updated in ISO format (ISO 8601).
         */
        public Builder updateTime(Optional<OffsetDateTime> updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = updateTime;
            return this;
        }

        public Builder destinationDocument(Document destinationDocument) {
            Utils.checkNotNull(destinationDocument, "destinationDocument");
            this.destinationDocument = Optional.ofNullable(destinationDocument);
            return this;
        }

        public Builder destinationDocument(Optional<? extends Document> destinationDocument) {
            Utils.checkNotNull(destinationDocument, "destinationDocument");
            this.destinationDocument = destinationDocument;
            return this;
        }

        /**
         * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/&lt;inputAlias&gt;.
         */
        public Builder intermediateUrl(String intermediateUrl) {
            Utils.checkNotNull(intermediateUrl, "intermediateUrl");
            this.intermediateUrl = Optional.ofNullable(intermediateUrl);
            return this;
        }

        /**
         * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/&lt;inputAlias&gt;.
         */
        public Builder intermediateUrl(Optional<String> intermediateUrl) {
            Utils.checkNotNull(intermediateUrl, "intermediateUrl");
            this.intermediateUrl = intermediateUrl;
            return this;
        }

        /**
         * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
         */
        public Builder viewPrefix(String viewPrefix) {
            Utils.checkNotNull(viewPrefix, "viewPrefix");
            this.viewPrefix = Optional.ofNullable(viewPrefix);
            return this;
        }

        /**
         * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
         */
        public Builder viewPrefix(Optional<String> viewPrefix) {
            Utils.checkNotNull(viewPrefix, "viewPrefix");
            this.viewPrefix = viewPrefix;
            return this;
        }

        /**
         * Indicates whether a shortcut is native or external.
         */
        public Builder isExternal(boolean isExternal) {
            Utils.checkNotNull(isExternal, "isExternal");
            this.isExternal = Optional.ofNullable(isExternal);
            return this;
        }

        /**
         * Indicates whether a shortcut is native or external.
         */
        public Builder isExternal(Optional<Boolean> isExternal) {
            Utils.checkNotNull(isExternal, "isExternal");
            this.isExternal = isExternal;
            return this;
        }

        /**
         * The URL using which the user can access the edit page of the shortcut.
         */
        public Builder editUrl(String editUrl) {
            Utils.checkNotNull(editUrl, "editUrl");
            this.editUrl = Optional.ofNullable(editUrl);
            return this;
        }

        /**
         * The URL using which the user can access the edit page of the shortcut.
         */
        public Builder editUrl(Optional<String> editUrl) {
            Utils.checkNotNull(editUrl, "editUrl");
            this.editUrl = editUrl;
            return this;
        }

        /**
         * canonical link text following go/ prefix where hyphen/underscore is removed.
         */
        public Builder alias(String alias) {
            Utils.checkNotNull(alias, "alias");
            this.alias = Optional.ofNullable(alias);
            return this;
        }

        /**
         * canonical link text following go/ prefix where hyphen/underscore is removed.
         */
        public Builder alias(Optional<String> alias) {
            Utils.checkNotNull(alias, "alias");
            this.alias = alias;
            return this;
        }

        /**
         * Title for the Go Link
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Title for the Go Link
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * A list of user roles for the Go Link.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of user roles for the Go Link.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }
        
        public Shortcut build() {
            return new Shortcut(
                id,
                inputAlias,
                destinationUrl,
                destinationDocumentId,
                description,
                unlisted,
                urlTemplate,
                addedRoles,
                removedRoles,
                permissions,
                createdBy,
                createTime,
                updatedBy,
                updateTime,
                destinationDocument,
                intermediateUrl,
                viewPrefix,
                isExternal,
                editUrl,
                alias,
                title,
                roles);
        }
    }
}
