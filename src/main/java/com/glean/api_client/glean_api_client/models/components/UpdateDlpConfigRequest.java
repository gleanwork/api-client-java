/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class UpdateDlpConfigRequest {

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    private Optional<? extends DlpConfig> config;

    /**
     * Only "ONCE" is supported for reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<String> frequency;

    @JsonCreator
    public UpdateDlpConfigRequest(
            @JsonProperty("config") Optional<? extends DlpConfig> config,
            @JsonProperty("frequency") Optional<String> frequency) {
        Utils.checkNotNull(config, "config");
        Utils.checkNotNull(frequency, "frequency");
        this.config = config;
        this.frequency = frequency;
    }
    
    public UpdateDlpConfigRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpConfig> config() {
        return (Optional<DlpConfig>) config;
    }

    /**
     * Only "ONCE" is supported for reports.
     */
    @JsonIgnore
    public Optional<String> frequency() {
        return frequency;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public UpdateDlpConfigRequest withConfig(DlpConfig config) {
        Utils.checkNotNull(config, "config");
        this.config = Optional.ofNullable(config);
        return this;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public UpdateDlpConfigRequest withConfig(Optional<? extends DlpConfig> config) {
        Utils.checkNotNull(config, "config");
        this.config = config;
        return this;
    }

    /**
     * Only "ONCE" is supported for reports.
     */
    public UpdateDlpConfigRequest withFrequency(String frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * Only "ONCE" is supported for reports.
     */
    public UpdateDlpConfigRequest withFrequency(Optional<String> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDlpConfigRequest other = (UpdateDlpConfigRequest) o;
        return 
            Utils.enhancedDeepEquals(this.config, other.config) &&
            Utils.enhancedDeepEquals(this.frequency, other.frequency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            config,
            frequency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDlpConfigRequest.class,
                "config", config,
                "frequency", frequency);
    }
    
    public final static class Builder {
 
        private Optional<? extends DlpConfig> config = Optional.empty();
 
        private Optional<String> frequency = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(DlpConfig config) {
            Utils.checkNotNull(config, "config");
            this.config = Optional.ofNullable(config);
            return this;
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(Optional<? extends DlpConfig> config) {
            Utils.checkNotNull(config, "config");
            this.config = config;
            return this;
        }

        /**
         * Only "ONCE" is supported for reports.
         */
        public Builder frequency(String frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * Only "ONCE" is supported for reports.
         */
        public Builder frequency(Optional<String> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }
        
        public UpdateDlpConfigRequest build() {
            return new UpdateDlpConfigRequest(
                config,
                frequency);
        }
    }
}
