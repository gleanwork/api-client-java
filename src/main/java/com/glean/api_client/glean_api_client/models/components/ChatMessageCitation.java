/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * ChatMessageCitation
 * 
 * <p>Information about the source for a ChatMessage.
 */
public class ChatMessageCitation {

    /**
     * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocument")
    private Optional<? extends Document> sourceDocument;

    /**
     * Structure for file uploaded by a user for Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceFile")
    private Optional<? extends ChatFile> sourceFile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourcePerson")
    private Optional<? extends Person> sourcePerson;

    /**
     * Each reference range and its corresponding snippets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceRanges")
    private Optional<? extends List<ReferenceRange>> referenceRanges;

    @JsonCreator
    public ChatMessageCitation(
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("sourceDocument") Optional<? extends Document> sourceDocument,
            @JsonProperty("sourceFile") Optional<? extends ChatFile> sourceFile,
            @JsonProperty("sourcePerson") Optional<? extends Person> sourcePerson,
            @JsonProperty("referenceRanges") Optional<? extends List<ReferenceRange>> referenceRanges) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        Utils.checkNotNull(sourceFile, "sourceFile");
        Utils.checkNotNull(sourcePerson, "sourcePerson");
        Utils.checkNotNull(referenceRanges, "referenceRanges");
        this.trackingToken = trackingToken;
        this.sourceDocument = sourceDocument;
        this.sourceFile = sourceFile;
        this.sourcePerson = sourcePerson;
        this.referenceRanges = referenceRanges;
    }
    
    public ChatMessageCitation() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> sourceDocument() {
        return (Optional<Document>) sourceDocument;
    }

    /**
     * Structure for file uploaded by a user for Chat.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatFile> sourceFile() {
        return (Optional<ChatFile>) sourceFile;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> sourcePerson() {
        return (Optional<Person>) sourcePerson;
    }

    /**
     * Each reference range and its corresponding snippets
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ReferenceRange>> referenceRanges() {
        return (Optional<List<ReferenceRange>>) referenceRanges;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
     */
    public ChatMessageCitation withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
     */
    public ChatMessageCitation withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public ChatMessageCitation withSourceDocument(Document sourceDocument) {
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        this.sourceDocument = Optional.ofNullable(sourceDocument);
        return this;
    }

    public ChatMessageCitation withSourceDocument(Optional<? extends Document> sourceDocument) {
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        this.sourceDocument = sourceDocument;
        return this;
    }

    /**
     * Structure for file uploaded by a user for Chat.
     */
    public ChatMessageCitation withSourceFile(ChatFile sourceFile) {
        Utils.checkNotNull(sourceFile, "sourceFile");
        this.sourceFile = Optional.ofNullable(sourceFile);
        return this;
    }

    /**
     * Structure for file uploaded by a user for Chat.
     */
    public ChatMessageCitation withSourceFile(Optional<? extends ChatFile> sourceFile) {
        Utils.checkNotNull(sourceFile, "sourceFile");
        this.sourceFile = sourceFile;
        return this;
    }

    public ChatMessageCitation withSourcePerson(Person sourcePerson) {
        Utils.checkNotNull(sourcePerson, "sourcePerson");
        this.sourcePerson = Optional.ofNullable(sourcePerson);
        return this;
    }

    public ChatMessageCitation withSourcePerson(Optional<? extends Person> sourcePerson) {
        Utils.checkNotNull(sourcePerson, "sourcePerson");
        this.sourcePerson = sourcePerson;
        return this;
    }

    /**
     * Each reference range and its corresponding snippets
     */
    public ChatMessageCitation withReferenceRanges(List<ReferenceRange> referenceRanges) {
        Utils.checkNotNull(referenceRanges, "referenceRanges");
        this.referenceRanges = Optional.ofNullable(referenceRanges);
        return this;
    }

    /**
     * Each reference range and its corresponding snippets
     */
    public ChatMessageCitation withReferenceRanges(Optional<? extends List<ReferenceRange>> referenceRanges) {
        Utils.checkNotNull(referenceRanges, "referenceRanges");
        this.referenceRanges = referenceRanges;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatMessageCitation other = (ChatMessageCitation) o;
        return 
            Utils.enhancedDeepEquals(this.trackingToken, other.trackingToken) &&
            Utils.enhancedDeepEquals(this.sourceDocument, other.sourceDocument) &&
            Utils.enhancedDeepEquals(this.sourceFile, other.sourceFile) &&
            Utils.enhancedDeepEquals(this.sourcePerson, other.sourcePerson) &&
            Utils.enhancedDeepEquals(this.referenceRanges, other.referenceRanges);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            trackingToken,
            sourceDocument,
            sourceFile,
            sourcePerson,
            referenceRanges);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatMessageCitation.class,
                "trackingToken", trackingToken,
                "sourceDocument", sourceDocument,
                "sourceFile", sourceFile,
                "sourcePerson", sourcePerson,
                "referenceRanges", referenceRanges);
    }
    
    public final static class Builder {
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends Document> sourceDocument = Optional.empty();
 
        private Optional<? extends ChatFile> sourceFile = Optional.empty();
 
        private Optional<? extends Person> sourcePerson = Optional.empty();
 
        private Optional<? extends List<ReferenceRange>> referenceRanges = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder sourceDocument(Document sourceDocument) {
            Utils.checkNotNull(sourceDocument, "sourceDocument");
            this.sourceDocument = Optional.ofNullable(sourceDocument);
            return this;
        }

        public Builder sourceDocument(Optional<? extends Document> sourceDocument) {
            Utils.checkNotNull(sourceDocument, "sourceDocument");
            this.sourceDocument = sourceDocument;
            return this;
        }

        /**
         * Structure for file uploaded by a user for Chat.
         */
        public Builder sourceFile(ChatFile sourceFile) {
            Utils.checkNotNull(sourceFile, "sourceFile");
            this.sourceFile = Optional.ofNullable(sourceFile);
            return this;
        }

        /**
         * Structure for file uploaded by a user for Chat.
         */
        public Builder sourceFile(Optional<? extends ChatFile> sourceFile) {
            Utils.checkNotNull(sourceFile, "sourceFile");
            this.sourceFile = sourceFile;
            return this;
        }

        public Builder sourcePerson(Person sourcePerson) {
            Utils.checkNotNull(sourcePerson, "sourcePerson");
            this.sourcePerson = Optional.ofNullable(sourcePerson);
            return this;
        }

        public Builder sourcePerson(Optional<? extends Person> sourcePerson) {
            Utils.checkNotNull(sourcePerson, "sourcePerson");
            this.sourcePerson = sourcePerson;
            return this;
        }

        /**
         * Each reference range and its corresponding snippets
         */
        public Builder referenceRanges(List<ReferenceRange> referenceRanges) {
            Utils.checkNotNull(referenceRanges, "referenceRanges");
            this.referenceRanges = Optional.ofNullable(referenceRanges);
            return this;
        }

        /**
         * Each reference range and its corresponding snippets
         */
        public Builder referenceRanges(Optional<? extends List<ReferenceRange>> referenceRanges) {
            Utils.checkNotNull(referenceRanges, "referenceRanges");
            this.referenceRanges = referenceRanges;
            return this;
        }
        
        public ChatMessageCitation build() {
            return new ChatMessageCitation(
                trackingToken,
                sourceDocument,
                sourceFile,
                sourcePerson,
                referenceRanges);
        }
    }
}
