/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class DeleteCollectionItemRequest {

    /**
     * The ID of the Collection to remove an item in.
     */
    @JsonProperty("collectionId")
    private double collectionId;

    /**
     * The item ID of the CollectionItem to remove from this Collection.
     */
    @JsonProperty("itemId")
    private String itemId;

    /**
     * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentId")
    private Optional<String> documentId;

    @JsonCreator
    public DeleteCollectionItemRequest(
            @JsonProperty("collectionId") double collectionId,
            @JsonProperty("itemId") String itemId,
            @JsonProperty("documentId") Optional<String> documentId) {
        Utils.checkNotNull(collectionId, "collectionId");
        Utils.checkNotNull(itemId, "itemId");
        Utils.checkNotNull(documentId, "documentId");
        this.collectionId = collectionId;
        this.itemId = itemId;
        this.documentId = documentId;
    }
    
    public DeleteCollectionItemRequest(
            double collectionId,
            String itemId) {
        this(collectionId, itemId, Optional.empty());
    }

    /**
     * The ID of the Collection to remove an item in.
     */
    @JsonIgnore
    public double collectionId() {
        return collectionId;
    }

    /**
     * The item ID of the CollectionItem to remove from this Collection.
     */
    @JsonIgnore
    public String itemId() {
        return itemId;
    }

    /**
     * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
     */
    @JsonIgnore
    public Optional<String> documentId() {
        return documentId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the Collection to remove an item in.
     */
    public DeleteCollectionItemRequest withCollectionId(double collectionId) {
        Utils.checkNotNull(collectionId, "collectionId");
        this.collectionId = collectionId;
        return this;
    }

    /**
     * The item ID of the CollectionItem to remove from this Collection.
     */
    public DeleteCollectionItemRequest withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    /**
     * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
     */
    public DeleteCollectionItemRequest withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = Optional.ofNullable(documentId);
        return this;
    }

    /**
     * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
     */
    public DeleteCollectionItemRequest withDocumentId(Optional<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteCollectionItemRequest other = (DeleteCollectionItemRequest) o;
        return 
            Utils.enhancedDeepEquals(this.collectionId, other.collectionId) &&
            Utils.enhancedDeepEquals(this.itemId, other.itemId) &&
            Utils.enhancedDeepEquals(this.documentId, other.documentId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            collectionId,
            itemId,
            documentId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteCollectionItemRequest.class,
                "collectionId", collectionId,
                "itemId", itemId,
                "documentId", documentId);
    }
    
    public final static class Builder {
 
        private Double collectionId;
 
        private String itemId;
 
        private Optional<String> documentId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the Collection to remove an item in.
         */
        public Builder collectionId(double collectionId) {
            Utils.checkNotNull(collectionId, "collectionId");
            this.collectionId = collectionId;
            return this;
        }

        /**
         * The item ID of the CollectionItem to remove from this Collection.
         */
        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }

        /**
         * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = Optional.ofNullable(documentId);
            return this;
        }

        /**
         * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
         */
        public Builder documentId(Optional<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }
        
        public DeleteCollectionItemRequest build() {
            return new DeleteCollectionItemRequest(
                collectionId,
                itemId,
                documentId);
        }
    }
}
