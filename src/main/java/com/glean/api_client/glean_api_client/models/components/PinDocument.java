/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

public class PinDocument {

    /**
     * The query strings for which the pinned result will show.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queries")
    private Optional<? extends List<String>> queries;

    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * The opaque id of the pin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The document which should be a pinned result.
     */
    @JsonProperty("documentId")
    private String documentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribution")
    private Optional<? extends Person> attribution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends Person> updatedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<OffsetDateTime> createTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    private Optional<OffsetDateTime> updateTime;

    @JsonCreator
    public PinDocument(
            @JsonProperty("queries") Optional<? extends List<String>> queries,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("documentId") String documentId,
            @JsonProperty("attribution") Optional<? extends Person> attribution,
            @JsonProperty("updatedBy") Optional<? extends Person> updatedBy,
            @JsonProperty("createTime") Optional<OffsetDateTime> createTime,
            @JsonProperty("updateTime") Optional<OffsetDateTime> updateTime) {
        Utils.checkNotNull(queries, "queries");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(attribution, "attribution");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(updateTime, "updateTime");
        this.queries = queries;
        this.audienceFilters = audienceFilters;
        this.id = id;
        this.documentId = documentId;
        this.attribution = attribution;
        this.updatedBy = updatedBy;
        this.createTime = createTime;
        this.updateTime = updateTime;
    }
    
    public PinDocument(
            String documentId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), documentId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The query strings for which the pinned result will show.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> queries() {
        return (Optional<List<String>>) queries;
    }

    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * The opaque id of the pin.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The document which should be a pinned result.
     */
    @JsonIgnore
    public String documentId() {
        return documentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> attribution() {
        return (Optional<Person>) attribution;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> updatedBy() {
        return (Optional<Person>) updatedBy;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createTime() {
        return createTime;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updateTime() {
        return updateTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The query strings for which the pinned result will show.
     */
    public PinDocument withQueries(List<String> queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = Optional.ofNullable(queries);
        return this;
    }

    /**
     * The query strings for which the pinned result will show.
     */
    public PinDocument withQueries(Optional<? extends List<String>> queries) {
        Utils.checkNotNull(queries, "queries");
        this.queries = queries;
        return this;
    }

    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    public PinDocument withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    public PinDocument withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * The opaque id of the pin.
     */
    public PinDocument withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The opaque id of the pin.
     */
    public PinDocument withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The document which should be a pinned result.
     */
    public PinDocument withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    public PinDocument withAttribution(Person attribution) {
        Utils.checkNotNull(attribution, "attribution");
        this.attribution = Optional.ofNullable(attribution);
        return this;
    }

    public PinDocument withAttribution(Optional<? extends Person> attribution) {
        Utils.checkNotNull(attribution, "attribution");
        this.attribution = attribution;
        return this;
    }

    public PinDocument withUpdatedBy(Person updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    public PinDocument withUpdatedBy(Optional<? extends Person> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    public PinDocument withCreateTime(OffsetDateTime createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    public PinDocument withCreateTime(Optional<OffsetDateTime> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    public PinDocument withUpdateTime(OffsetDateTime updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = Optional.ofNullable(updateTime);
        return this;
    }

    public PinDocument withUpdateTime(Optional<OffsetDateTime> updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = updateTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PinDocument other = (PinDocument) o;
        return 
            Utils.enhancedDeepEquals(this.queries, other.queries) &&
            Utils.enhancedDeepEquals(this.audienceFilters, other.audienceFilters) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.documentId, other.documentId) &&
            Utils.enhancedDeepEquals(this.attribution, other.attribution) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createTime, other.createTime) &&
            Utils.enhancedDeepEquals(this.updateTime, other.updateTime);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            queries,
            audienceFilters,
            id,
            documentId,
            attribution,
            updatedBy,
            createTime,
            updateTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PinDocument.class,
                "queries", queries,
                "audienceFilters", audienceFilters,
                "id", id,
                "documentId", documentId,
                "attribution", attribution,
                "updatedBy", updatedBy,
                "createTime", createTime,
                "updateTime", updateTime);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> queries = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private String documentId;
 
        private Optional<? extends Person> attribution = Optional.empty();
 
        private Optional<? extends Person> updatedBy = Optional.empty();
 
        private Optional<OffsetDateTime> createTime = Optional.empty();
 
        private Optional<OffsetDateTime> updateTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The query strings for which the pinned result will show.
         */
        public Builder queries(List<String> queries) {
            Utils.checkNotNull(queries, "queries");
            this.queries = Optional.ofNullable(queries);
            return this;
        }

        /**
         * The query strings for which the pinned result will show.
         */
        public Builder queries(Optional<? extends List<String>> queries) {
            Utils.checkNotNull(queries, "queries");
            this.queries = queries;
            return this;
        }

        /**
         * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * The opaque id of the pin.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The opaque id of the pin.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The document which should be a pinned result.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        public Builder attribution(Person attribution) {
            Utils.checkNotNull(attribution, "attribution");
            this.attribution = Optional.ofNullable(attribution);
            return this;
        }

        public Builder attribution(Optional<? extends Person> attribution) {
            Utils.checkNotNull(attribution, "attribution");
            this.attribution = attribution;
            return this;
        }

        public Builder updatedBy(Person updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        public Builder updatedBy(Optional<? extends Person> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        public Builder createTime(OffsetDateTime createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        public Builder createTime(Optional<OffsetDateTime> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        public Builder updateTime(OffsetDateTime updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        public Builder updateTime(Optional<OffsetDateTime> updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = updateTime;
            return this;
        }
        
        public PinDocument build() {
            return new PinDocument(
                queries,
                audienceFilters,
                id,
                documentId,
                attribution,
                updatedBy,
                createTime,
                updateTime);
        }
    }
}
