/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * DatasourceMembershipDefinition
 * 
 * <p>describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
 */
public class DatasourceMembershipDefinition {

    /**
     * The group for which the membership is specified
     */
    @JsonProperty("groupName")
    private String groupName;

    /**
     * If the member is a user, then the email or datasource id for the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberUserId")
    private Optional<String> memberUserId;

    /**
     * If the member is a group, then the name of the member group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberGroupName")
    private Optional<String> memberGroupName;

    @JsonCreator
    public DatasourceMembershipDefinition(
            @JsonProperty("groupName") String groupName,
            @JsonProperty("memberUserId") Optional<String> memberUserId,
            @JsonProperty("memberGroupName") Optional<String> memberGroupName) {
        Utils.checkNotNull(groupName, "groupName");
        Utils.checkNotNull(memberUserId, "memberUserId");
        Utils.checkNotNull(memberGroupName, "memberGroupName");
        this.groupName = groupName;
        this.memberUserId = memberUserId;
        this.memberGroupName = memberGroupName;
    }
    
    public DatasourceMembershipDefinition(
            String groupName) {
        this(groupName, Optional.empty(), Optional.empty());
    }

    /**
     * The group for which the membership is specified
     */
    @JsonIgnore
    public String groupName() {
        return groupName;
    }

    /**
     * If the member is a user, then the email or datasource id for the user
     */
    @JsonIgnore
    public Optional<String> memberUserId() {
        return memberUserId;
    }

    /**
     * If the member is a group, then the name of the member group
     */
    @JsonIgnore
    public Optional<String> memberGroupName() {
        return memberGroupName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The group for which the membership is specified
     */
    public DatasourceMembershipDefinition withGroupName(String groupName) {
        Utils.checkNotNull(groupName, "groupName");
        this.groupName = groupName;
        return this;
    }

    /**
     * If the member is a user, then the email or datasource id for the user
     */
    public DatasourceMembershipDefinition withMemberUserId(String memberUserId) {
        Utils.checkNotNull(memberUserId, "memberUserId");
        this.memberUserId = Optional.ofNullable(memberUserId);
        return this;
    }

    /**
     * If the member is a user, then the email or datasource id for the user
     */
    public DatasourceMembershipDefinition withMemberUserId(Optional<String> memberUserId) {
        Utils.checkNotNull(memberUserId, "memberUserId");
        this.memberUserId = memberUserId;
        return this;
    }

    /**
     * If the member is a group, then the name of the member group
     */
    public DatasourceMembershipDefinition withMemberGroupName(String memberGroupName) {
        Utils.checkNotNull(memberGroupName, "memberGroupName");
        this.memberGroupName = Optional.ofNullable(memberGroupName);
        return this;
    }

    /**
     * If the member is a group, then the name of the member group
     */
    public DatasourceMembershipDefinition withMemberGroupName(Optional<String> memberGroupName) {
        Utils.checkNotNull(memberGroupName, "memberGroupName");
        this.memberGroupName = memberGroupName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DatasourceMembershipDefinition other = (DatasourceMembershipDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.groupName, other.groupName) &&
            Utils.enhancedDeepEquals(this.memberUserId, other.memberUserId) &&
            Utils.enhancedDeepEquals(this.memberGroupName, other.memberGroupName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            groupName,
            memberUserId,
            memberGroupName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DatasourceMembershipDefinition.class,
                "groupName", groupName,
                "memberUserId", memberUserId,
                "memberGroupName", memberGroupName);
    }
    
    public final static class Builder {
 
        private String groupName;
 
        private Optional<String> memberUserId = Optional.empty();
 
        private Optional<String> memberGroupName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The group for which the membership is specified
         */
        public Builder groupName(String groupName) {
            Utils.checkNotNull(groupName, "groupName");
            this.groupName = groupName;
            return this;
        }

        /**
         * If the member is a user, then the email or datasource id for the user
         */
        public Builder memberUserId(String memberUserId) {
            Utils.checkNotNull(memberUserId, "memberUserId");
            this.memberUserId = Optional.ofNullable(memberUserId);
            return this;
        }

        /**
         * If the member is a user, then the email or datasource id for the user
         */
        public Builder memberUserId(Optional<String> memberUserId) {
            Utils.checkNotNull(memberUserId, "memberUserId");
            this.memberUserId = memberUserId;
            return this;
        }

        /**
         * If the member is a group, then the name of the member group
         */
        public Builder memberGroupName(String memberGroupName) {
            Utils.checkNotNull(memberGroupName, "memberGroupName");
            this.memberGroupName = Optional.ofNullable(memberGroupName);
            return this;
        }

        /**
         * If the member is a group, then the name of the member group
         */
        public Builder memberGroupName(Optional<String> memberGroupName) {
            Utils.checkNotNull(memberGroupName, "memberGroupName");
            this.memberGroupName = memberGroupName;
            return this;
        }
        
        public DatasourceMembershipDefinition build() {
            return new DatasourceMembershipDefinition(
                groupName,
                memberUserId,
                memberGroupName);
        }
    }
}
