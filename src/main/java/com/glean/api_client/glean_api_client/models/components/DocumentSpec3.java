/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class DocumentSpec3 {

    /**
     * The type of the user generated content (UGC datasource).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ugcType")
    private Optional<? extends DocumentSpecUgcType> ugcType;

    /**
     * The id for user generated content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentId")
    private Optional<Long> contentId;

    /**
     * The specific type of the user generated content type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docType")
    private Optional<String> docType;

    @JsonCreator
    public DocumentSpec3(
            @JsonProperty("ugcType") Optional<? extends DocumentSpecUgcType> ugcType,
            @JsonProperty("contentId") Optional<Long> contentId,
            @JsonProperty("docType") Optional<String> docType) {
        Utils.checkNotNull(ugcType, "ugcType");
        Utils.checkNotNull(contentId, "contentId");
        Utils.checkNotNull(docType, "docType");
        this.ugcType = ugcType;
        this.contentId = contentId;
        this.docType = docType;
    }
    
    public DocumentSpec3() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of the user generated content (UGC datasource).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSpecUgcType> ugcType() {
        return (Optional<DocumentSpecUgcType>) ugcType;
    }

    /**
     * The id for user generated content.
     */
    @JsonIgnore
    public Optional<Long> contentId() {
        return contentId;
    }

    /**
     * The specific type of the user generated content type.
     */
    @JsonIgnore
    public Optional<String> docType() {
        return docType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of the user generated content (UGC datasource).
     */
    public DocumentSpec3 withUgcType(DocumentSpecUgcType ugcType) {
        Utils.checkNotNull(ugcType, "ugcType");
        this.ugcType = Optional.ofNullable(ugcType);
        return this;
    }

    /**
     * The type of the user generated content (UGC datasource).
     */
    public DocumentSpec3 withUgcType(Optional<? extends DocumentSpecUgcType> ugcType) {
        Utils.checkNotNull(ugcType, "ugcType");
        this.ugcType = ugcType;
        return this;
    }

    /**
     * The id for user generated content.
     */
    public DocumentSpec3 withContentId(long contentId) {
        Utils.checkNotNull(contentId, "contentId");
        this.contentId = Optional.ofNullable(contentId);
        return this;
    }

    /**
     * The id for user generated content.
     */
    public DocumentSpec3 withContentId(Optional<Long> contentId) {
        Utils.checkNotNull(contentId, "contentId");
        this.contentId = contentId;
        return this;
    }

    /**
     * The specific type of the user generated content type.
     */
    public DocumentSpec3 withDocType(String docType) {
        Utils.checkNotNull(docType, "docType");
        this.docType = Optional.ofNullable(docType);
        return this;
    }

    /**
     * The specific type of the user generated content type.
     */
    public DocumentSpec3 withDocType(Optional<String> docType) {
        Utils.checkNotNull(docType, "docType");
        this.docType = docType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentSpec3 other = (DocumentSpec3) o;
        return 
            Objects.deepEquals(this.ugcType, other.ugcType) &&
            Objects.deepEquals(this.contentId, other.contentId) &&
            Objects.deepEquals(this.docType, other.docType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ugcType,
            contentId,
            docType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentSpec3.class,
                "ugcType", ugcType,
                "contentId", contentId,
                "docType", docType);
    }
    
    public final static class Builder {
 
        private Optional<? extends DocumentSpecUgcType> ugcType = Optional.empty();
 
        private Optional<Long> contentId = Optional.empty();
 
        private Optional<String> docType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of the user generated content (UGC datasource).
         */
        public Builder ugcType(DocumentSpecUgcType ugcType) {
            Utils.checkNotNull(ugcType, "ugcType");
            this.ugcType = Optional.ofNullable(ugcType);
            return this;
        }

        /**
         * The type of the user generated content (UGC datasource).
         */
        public Builder ugcType(Optional<? extends DocumentSpecUgcType> ugcType) {
            Utils.checkNotNull(ugcType, "ugcType");
            this.ugcType = ugcType;
            return this;
        }

        /**
         * The id for user generated content.
         */
        public Builder contentId(long contentId) {
            Utils.checkNotNull(contentId, "contentId");
            this.contentId = Optional.ofNullable(contentId);
            return this;
        }

        /**
         * The id for user generated content.
         */
        public Builder contentId(Optional<Long> contentId) {
            Utils.checkNotNull(contentId, "contentId");
            this.contentId = contentId;
            return this;
        }

        /**
         * The specific type of the user generated content type.
         */
        public Builder docType(String docType) {
            Utils.checkNotNull(docType, "docType");
            this.docType = Optional.ofNullable(docType);
            return this;
        }

        /**
         * The specific type of the user generated content type.
         */
        public Builder docType(Optional<String> docType) {
            Utils.checkNotNull(docType, "docType");
            this.docType = docType;
            return this;
        }
        
        public DocumentSpec3 build() {
            return new DocumentSpec3(
                ugcType,
                contentId,
                docType);
        }
    }
}
