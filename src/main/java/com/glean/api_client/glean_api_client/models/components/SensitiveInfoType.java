/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class SensitiveInfoType {

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("likelihoodThreshold")
    @Deprecated
    private Optional<? extends LikelihoodThreshold> likelihoodThreshold;

    /**
     * Text representation of an info-type to scan for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infoType")
    private Optional<String> infoType;

    @JsonCreator
    public SensitiveInfoType(
            @JsonProperty("likelihoodThreshold") Optional<? extends LikelihoodThreshold> likelihoodThreshold,
            @JsonProperty("infoType") Optional<String> infoType) {
        Utils.checkNotNull(likelihoodThreshold, "likelihoodThreshold");
        Utils.checkNotNull(infoType, "infoType");
        this.likelihoodThreshold = likelihoodThreshold;
        this.infoType = infoType;
    }
    
    public SensitiveInfoType() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LikelihoodThreshold> likelihoodThreshold() {
        return (Optional<LikelihoodThreshold>) likelihoodThreshold;
    }

    /**
     * Text representation of an info-type to scan for.
     */
    @JsonIgnore
    public Optional<String> infoType() {
        return infoType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SensitiveInfoType withLikelihoodThreshold(LikelihoodThreshold likelihoodThreshold) {
        Utils.checkNotNull(likelihoodThreshold, "likelihoodThreshold");
        this.likelihoodThreshold = Optional.ofNullable(likelihoodThreshold);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SensitiveInfoType withLikelihoodThreshold(Optional<? extends LikelihoodThreshold> likelihoodThreshold) {
        Utils.checkNotNull(likelihoodThreshold, "likelihoodThreshold");
        this.likelihoodThreshold = likelihoodThreshold;
        return this;
    }

    /**
     * Text representation of an info-type to scan for.
     */
    public SensitiveInfoType withInfoType(String infoType) {
        Utils.checkNotNull(infoType, "infoType");
        this.infoType = Optional.ofNullable(infoType);
        return this;
    }

    /**
     * Text representation of an info-type to scan for.
     */
    public SensitiveInfoType withInfoType(Optional<String> infoType) {
        Utils.checkNotNull(infoType, "infoType");
        this.infoType = infoType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SensitiveInfoType other = (SensitiveInfoType) o;
        return 
            Utils.enhancedDeepEquals(this.likelihoodThreshold, other.likelihoodThreshold) &&
            Utils.enhancedDeepEquals(this.infoType, other.infoType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            likelihoodThreshold,
            infoType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SensitiveInfoType.class,
                "likelihoodThreshold", likelihoodThreshold,
                "infoType", infoType);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<? extends LikelihoodThreshold> likelihoodThreshold = Optional.empty();
 
        private Optional<String> infoType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder likelihoodThreshold(LikelihoodThreshold likelihoodThreshold) {
            Utils.checkNotNull(likelihoodThreshold, "likelihoodThreshold");
            this.likelihoodThreshold = Optional.ofNullable(likelihoodThreshold);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder likelihoodThreshold(Optional<? extends LikelihoodThreshold> likelihoodThreshold) {
            Utils.checkNotNull(likelihoodThreshold, "likelihoodThreshold");
            this.likelihoodThreshold = likelihoodThreshold;
            return this;
        }

        /**
         * Text representation of an info-type to scan for.
         */
        public Builder infoType(String infoType) {
            Utils.checkNotNull(infoType, "infoType");
            this.infoType = Optional.ofNullable(infoType);
            return this;
        }

        /**
         * Text representation of an info-type to scan for.
         */
        public Builder infoType(Optional<String> infoType) {
            Utils.checkNotNull(infoType, "infoType");
            this.infoType = infoType;
            return this;
        }
        
        public SensitiveInfoType build() {
            return new SensitiveInfoType(
                likelihoodThreshold,
                infoType);
        }
    }
}
