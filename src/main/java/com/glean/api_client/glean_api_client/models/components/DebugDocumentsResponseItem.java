/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * DebugDocumentsResponseItem
 * 
 * <p>Describes the response body of a single document in the /debug/{datasource}/documents API call
 */
public class DebugDocumentsResponseItem {

    /**
     * Id of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docId")
    private Optional<String> docId;

    /**
     * objectType of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    private Optional<String> objectType;

    /**
     * Describes the response body of the /debug/{datasource}/document API call
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debugInfo")
    private Optional<? extends DebugDocumentResponse> debugInfo;

    @JsonCreator
    public DebugDocumentsResponseItem(
            @JsonProperty("docId") Optional<String> docId,
            @JsonProperty("objectType") Optional<String> objectType,
            @JsonProperty("debugInfo") Optional<? extends DebugDocumentResponse> debugInfo) {
        Utils.checkNotNull(docId, "docId");
        Utils.checkNotNull(objectType, "objectType");
        Utils.checkNotNull(debugInfo, "debugInfo");
        this.docId = docId;
        this.objectType = objectType;
        this.debugInfo = debugInfo;
    }
    
    public DebugDocumentsResponseItem() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Id of the document
     */
    @JsonIgnore
    public Optional<String> docId() {
        return docId;
    }

    /**
     * objectType of the document
     */
    @JsonIgnore
    public Optional<String> objectType() {
        return objectType;
    }

    /**
     * Describes the response body of the /debug/{datasource}/document API call
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DebugDocumentResponse> debugInfo() {
        return (Optional<DebugDocumentResponse>) debugInfo;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Id of the document
     */
    public DebugDocumentsResponseItem withDocId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = Optional.ofNullable(docId);
        return this;
    }

    /**
     * Id of the document
     */
    public DebugDocumentsResponseItem withDocId(Optional<String> docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }

    /**
     * objectType of the document
     */
    public DebugDocumentsResponseItem withObjectType(String objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = Optional.ofNullable(objectType);
        return this;
    }

    /**
     * objectType of the document
     */
    public DebugDocumentsResponseItem withObjectType(Optional<String> objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = objectType;
        return this;
    }

    /**
     * Describes the response body of the /debug/{datasource}/document API call
     */
    public DebugDocumentsResponseItem withDebugInfo(DebugDocumentResponse debugInfo) {
        Utils.checkNotNull(debugInfo, "debugInfo");
        this.debugInfo = Optional.ofNullable(debugInfo);
        return this;
    }

    /**
     * Describes the response body of the /debug/{datasource}/document API call
     */
    public DebugDocumentsResponseItem withDebugInfo(Optional<? extends DebugDocumentResponse> debugInfo) {
        Utils.checkNotNull(debugInfo, "debugInfo");
        this.debugInfo = debugInfo;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugDocumentsResponseItem other = (DebugDocumentsResponseItem) o;
        return 
            Objects.deepEquals(this.docId, other.docId) &&
            Objects.deepEquals(this.objectType, other.objectType) &&
            Objects.deepEquals(this.debugInfo, other.debugInfo);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            docId,
            objectType,
            debugInfo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugDocumentsResponseItem.class,
                "docId", docId,
                "objectType", objectType,
                "debugInfo", debugInfo);
    }
    
    public final static class Builder {
 
        private Optional<String> docId = Optional.empty();
 
        private Optional<String> objectType = Optional.empty();
 
        private Optional<? extends DebugDocumentResponse> debugInfo = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Id of the document
         */
        public Builder docId(String docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = Optional.ofNullable(docId);
            return this;
        }

        /**
         * Id of the document
         */
        public Builder docId(Optional<String> docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = docId;
            return this;
        }

        /**
         * objectType of the document
         */
        public Builder objectType(String objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = Optional.ofNullable(objectType);
            return this;
        }

        /**
         * objectType of the document
         */
        public Builder objectType(Optional<String> objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = objectType;
            return this;
        }

        /**
         * Describes the response body of the /debug/{datasource}/document API call
         */
        public Builder debugInfo(DebugDocumentResponse debugInfo) {
            Utils.checkNotNull(debugInfo, "debugInfo");
            this.debugInfo = Optional.ofNullable(debugInfo);
            return this;
        }

        /**
         * Describes the response body of the /debug/{datasource}/document API call
         */
        public Builder debugInfo(Optional<? extends DebugDocumentResponse> debugInfo) {
            Utils.checkNotNull(debugInfo, "debugInfo");
            this.debugInfo = debugInfo;
            return this;
        }
        
        public DebugDocumentsResponseItem build() {
            return new DebugDocumentsResponseItem(
                docId,
                objectType,
                debugInfo);
        }
    }
}
