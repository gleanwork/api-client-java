/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * CalendarEvent
 * 
 * <p>A generic, light-weight calendar event.
 */
public class CalendarEvent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    private Optional<? extends TimeInterval> time;

    /**
     * The nature of the event, for example "out of office".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventType")
    private Optional<? extends CalendarEventEventType> eventType;

    /**
     * The calendar event id
     */
    @JsonProperty("id")
    private String id;

    /**
     * A permalink for this calendar event
     */
    @JsonProperty("url")
    private String url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendees")
    private Optional<? extends CalendarAttendees> attendees;

    /**
     * The location that this event is taking place at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conferenceData")
    private Optional<? extends ConferenceData> conferenceData;

    /**
     * The HTML description of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The app or other repository type from which the event was extracted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * The event has a transcript associated with it enabling features like summarization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasTranscript")
    private Optional<Boolean> hasTranscript;

    /**
     * A link to the transcript of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcriptUrl")
    private Optional<String> transcriptUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classifications")
    private Optional<? extends List<EventClassification>> classifications;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generatedAttachments")
    private Optional<? extends List<GeneratedAttachment>> generatedAttachments;

    @JsonCreator
    public CalendarEvent(
            @JsonProperty("time") Optional<? extends TimeInterval> time,
            @JsonProperty("eventType") Optional<? extends CalendarEventEventType> eventType,
            @JsonProperty("id") String id,
            @JsonProperty("url") String url,
            @JsonProperty("attendees") Optional<? extends CalendarAttendees> attendees,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("conferenceData") Optional<? extends ConferenceData> conferenceData,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("hasTranscript") Optional<Boolean> hasTranscript,
            @JsonProperty("transcriptUrl") Optional<String> transcriptUrl,
            @JsonProperty("classifications") Optional<? extends List<EventClassification>> classifications,
            @JsonProperty("generatedAttachments") Optional<? extends List<GeneratedAttachment>> generatedAttachments) {
        Utils.checkNotNull(time, "time");
        Utils.checkNotNull(eventType, "eventType");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(attendees, "attendees");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(conferenceData, "conferenceData");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(hasTranscript, "hasTranscript");
        Utils.checkNotNull(transcriptUrl, "transcriptUrl");
        Utils.checkNotNull(classifications, "classifications");
        Utils.checkNotNull(generatedAttachments, "generatedAttachments");
        this.time = time;
        this.eventType = eventType;
        this.id = id;
        this.url = url;
        this.attendees = attendees;
        this.location = location;
        this.conferenceData = conferenceData;
        this.description = description;
        this.datasource = datasource;
        this.hasTranscript = hasTranscript;
        this.transcriptUrl = transcriptUrl;
        this.classifications = classifications;
        this.generatedAttachments = generatedAttachments;
    }
    
    public CalendarEvent(
            String id,
            String url) {
        this(Optional.empty(), Optional.empty(), id, url, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeInterval> time() {
        return (Optional<TimeInterval>) time;
    }

    /**
     * The nature of the event, for example "out of office".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CalendarEventEventType> eventType() {
        return (Optional<CalendarEventEventType>) eventType;
    }

    /**
     * The calendar event id
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * A permalink for this calendar event
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CalendarAttendees> attendees() {
        return (Optional<CalendarAttendees>) attendees;
    }

    /**
     * The location that this event is taking place at.
     */
    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConferenceData> conferenceData() {
        return (Optional<ConferenceData>) conferenceData;
    }

    /**
     * The HTML description of the event.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The app or other repository type from which the event was extracted
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * The event has a transcript associated with it enabling features like summarization
     */
    @JsonIgnore
    public Optional<Boolean> hasTranscript() {
        return hasTranscript;
    }

    /**
     * A link to the transcript of the event
     */
    @JsonIgnore
    public Optional<String> transcriptUrl() {
        return transcriptUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EventClassification>> classifications() {
        return (Optional<List<EventClassification>>) classifications;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GeneratedAttachment>> generatedAttachments() {
        return (Optional<List<GeneratedAttachment>>) generatedAttachments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CalendarEvent withTime(TimeInterval time) {
        Utils.checkNotNull(time, "time");
        this.time = Optional.ofNullable(time);
        return this;
    }

    public CalendarEvent withTime(Optional<? extends TimeInterval> time) {
        Utils.checkNotNull(time, "time");
        this.time = time;
        return this;
    }

    /**
     * The nature of the event, for example "out of office".
     */
    public CalendarEvent withEventType(CalendarEventEventType eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = Optional.ofNullable(eventType);
        return this;
    }

    /**
     * The nature of the event, for example "out of office".
     */
    public CalendarEvent withEventType(Optional<? extends CalendarEventEventType> eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = eventType;
        return this;
    }

    /**
     * The calendar event id
     */
    public CalendarEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A permalink for this calendar event
     */
    public CalendarEvent withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public CalendarEvent withAttendees(CalendarAttendees attendees) {
        Utils.checkNotNull(attendees, "attendees");
        this.attendees = Optional.ofNullable(attendees);
        return this;
    }

    public CalendarEvent withAttendees(Optional<? extends CalendarAttendees> attendees) {
        Utils.checkNotNull(attendees, "attendees");
        this.attendees = attendees;
        return this;
    }

    /**
     * The location that this event is taking place at.
     */
    public CalendarEvent withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    /**
     * The location that this event is taking place at.
     */
    public CalendarEvent withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public CalendarEvent withConferenceData(ConferenceData conferenceData) {
        Utils.checkNotNull(conferenceData, "conferenceData");
        this.conferenceData = Optional.ofNullable(conferenceData);
        return this;
    }

    public CalendarEvent withConferenceData(Optional<? extends ConferenceData> conferenceData) {
        Utils.checkNotNull(conferenceData, "conferenceData");
        this.conferenceData = conferenceData;
        return this;
    }

    /**
     * The HTML description of the event.
     */
    public CalendarEvent withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The HTML description of the event.
     */
    public CalendarEvent withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The app or other repository type from which the event was extracted
     */
    public CalendarEvent withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The app or other repository type from which the event was extracted
     */
    public CalendarEvent withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The event has a transcript associated with it enabling features like summarization
     */
    public CalendarEvent withHasTranscript(boolean hasTranscript) {
        Utils.checkNotNull(hasTranscript, "hasTranscript");
        this.hasTranscript = Optional.ofNullable(hasTranscript);
        return this;
    }

    /**
     * The event has a transcript associated with it enabling features like summarization
     */
    public CalendarEvent withHasTranscript(Optional<Boolean> hasTranscript) {
        Utils.checkNotNull(hasTranscript, "hasTranscript");
        this.hasTranscript = hasTranscript;
        return this;
    }

    /**
     * A link to the transcript of the event
     */
    public CalendarEvent withTranscriptUrl(String transcriptUrl) {
        Utils.checkNotNull(transcriptUrl, "transcriptUrl");
        this.transcriptUrl = Optional.ofNullable(transcriptUrl);
        return this;
    }

    /**
     * A link to the transcript of the event
     */
    public CalendarEvent withTranscriptUrl(Optional<String> transcriptUrl) {
        Utils.checkNotNull(transcriptUrl, "transcriptUrl");
        this.transcriptUrl = transcriptUrl;
        return this;
    }

    public CalendarEvent withClassifications(List<EventClassification> classifications) {
        Utils.checkNotNull(classifications, "classifications");
        this.classifications = Optional.ofNullable(classifications);
        return this;
    }

    public CalendarEvent withClassifications(Optional<? extends List<EventClassification>> classifications) {
        Utils.checkNotNull(classifications, "classifications");
        this.classifications = classifications;
        return this;
    }

    public CalendarEvent withGeneratedAttachments(List<GeneratedAttachment> generatedAttachments) {
        Utils.checkNotNull(generatedAttachments, "generatedAttachments");
        this.generatedAttachments = Optional.ofNullable(generatedAttachments);
        return this;
    }

    public CalendarEvent withGeneratedAttachments(Optional<? extends List<GeneratedAttachment>> generatedAttachments) {
        Utils.checkNotNull(generatedAttachments, "generatedAttachments");
        this.generatedAttachments = generatedAttachments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarEvent other = (CalendarEvent) o;
        return 
            Utils.enhancedDeepEquals(this.time, other.time) &&
            Utils.enhancedDeepEquals(this.eventType, other.eventType) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.attendees, other.attendees) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.conferenceData, other.conferenceData) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.hasTranscript, other.hasTranscript) &&
            Utils.enhancedDeepEquals(this.transcriptUrl, other.transcriptUrl) &&
            Utils.enhancedDeepEquals(this.classifications, other.classifications) &&
            Utils.enhancedDeepEquals(this.generatedAttachments, other.generatedAttachments);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            time,
            eventType,
            id,
            url,
            attendees,
            location,
            conferenceData,
            description,
            datasource,
            hasTranscript,
            transcriptUrl,
            classifications,
            generatedAttachments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarEvent.class,
                "time", time,
                "eventType", eventType,
                "id", id,
                "url", url,
                "attendees", attendees,
                "location", location,
                "conferenceData", conferenceData,
                "description", description,
                "datasource", datasource,
                "hasTranscript", hasTranscript,
                "transcriptUrl", transcriptUrl,
                "classifications", classifications,
                "generatedAttachments", generatedAttachments);
    }
    
    public final static class Builder {
 
        private Optional<? extends TimeInterval> time = Optional.empty();
 
        private Optional<? extends CalendarEventEventType> eventType = Optional.empty();
 
        private String id;
 
        private String url;
 
        private Optional<? extends CalendarAttendees> attendees = Optional.empty();
 
        private Optional<String> location = Optional.empty();
 
        private Optional<? extends ConferenceData> conferenceData = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<Boolean> hasTranscript = Optional.empty();
 
        private Optional<String> transcriptUrl = Optional.empty();
 
        private Optional<? extends List<EventClassification>> classifications = Optional.empty();
 
        private Optional<? extends List<GeneratedAttachment>> generatedAttachments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder time(TimeInterval time) {
            Utils.checkNotNull(time, "time");
            this.time = Optional.ofNullable(time);
            return this;
        }

        public Builder time(Optional<? extends TimeInterval> time) {
            Utils.checkNotNull(time, "time");
            this.time = time;
            return this;
        }

        /**
         * The nature of the event, for example "out of office".
         */
        public Builder eventType(CalendarEventEventType eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * The nature of the event, for example "out of office".
         */
        public Builder eventType(Optional<? extends CalendarEventEventType> eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = eventType;
            return this;
        }

        /**
         * The calendar event id
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A permalink for this calendar event
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder attendees(CalendarAttendees attendees) {
            Utils.checkNotNull(attendees, "attendees");
            this.attendees = Optional.ofNullable(attendees);
            return this;
        }

        public Builder attendees(Optional<? extends CalendarAttendees> attendees) {
            Utils.checkNotNull(attendees, "attendees");
            this.attendees = attendees;
            return this;
        }

        /**
         * The location that this event is taking place at.
         */
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        /**
         * The location that this event is taking place at.
         */
        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder conferenceData(ConferenceData conferenceData) {
            Utils.checkNotNull(conferenceData, "conferenceData");
            this.conferenceData = Optional.ofNullable(conferenceData);
            return this;
        }

        public Builder conferenceData(Optional<? extends ConferenceData> conferenceData) {
            Utils.checkNotNull(conferenceData, "conferenceData");
            this.conferenceData = conferenceData;
            return this;
        }

        /**
         * The HTML description of the event.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The HTML description of the event.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The app or other repository type from which the event was extracted
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The app or other repository type from which the event was extracted
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The event has a transcript associated with it enabling features like summarization
         */
        public Builder hasTranscript(boolean hasTranscript) {
            Utils.checkNotNull(hasTranscript, "hasTranscript");
            this.hasTranscript = Optional.ofNullable(hasTranscript);
            return this;
        }

        /**
         * The event has a transcript associated with it enabling features like summarization
         */
        public Builder hasTranscript(Optional<Boolean> hasTranscript) {
            Utils.checkNotNull(hasTranscript, "hasTranscript");
            this.hasTranscript = hasTranscript;
            return this;
        }

        /**
         * A link to the transcript of the event
         */
        public Builder transcriptUrl(String transcriptUrl) {
            Utils.checkNotNull(transcriptUrl, "transcriptUrl");
            this.transcriptUrl = Optional.ofNullable(transcriptUrl);
            return this;
        }

        /**
         * A link to the transcript of the event
         */
        public Builder transcriptUrl(Optional<String> transcriptUrl) {
            Utils.checkNotNull(transcriptUrl, "transcriptUrl");
            this.transcriptUrl = transcriptUrl;
            return this;
        }

        public Builder classifications(List<EventClassification> classifications) {
            Utils.checkNotNull(classifications, "classifications");
            this.classifications = Optional.ofNullable(classifications);
            return this;
        }

        public Builder classifications(Optional<? extends List<EventClassification>> classifications) {
            Utils.checkNotNull(classifications, "classifications");
            this.classifications = classifications;
            return this;
        }

        public Builder generatedAttachments(List<GeneratedAttachment> generatedAttachments) {
            Utils.checkNotNull(generatedAttachments, "generatedAttachments");
            this.generatedAttachments = Optional.ofNullable(generatedAttachments);
            return this;
        }

        public Builder generatedAttachments(Optional<? extends List<GeneratedAttachment>> generatedAttachments) {
            Utils.checkNotNull(generatedAttachments, "generatedAttachments");
            this.generatedAttachments = generatedAttachments;
            return this;
        }
        
        public CalendarEvent build() {
            return new CalendarEvent(
                time,
                eventType,
                id,
                url,
                attendees,
                location,
                conferenceData,
                description,
                datasource,
                hasTranscript,
                transcriptUrl,
                classifications,
                generatedAttachments);
        }
    }
}
