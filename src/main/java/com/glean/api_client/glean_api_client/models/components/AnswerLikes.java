/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class AnswerLikes {

    @JsonProperty("likedBy")
    private List<AnswerLike> likedBy;

    /**
     * Whether the user in context liked the answer.
     */
    @JsonProperty("likedByUser")
    private boolean likedByUser;

    /**
     * The total number of likes for the answer.
     */
    @JsonProperty("numLikes")
    private long numLikes;

    @JsonCreator
    public AnswerLikes(
            @JsonProperty("likedBy") List<AnswerLike> likedBy,
            @JsonProperty("likedByUser") boolean likedByUser,
            @JsonProperty("numLikes") long numLikes) {
        Utils.checkNotNull(likedBy, "likedBy");
        Utils.checkNotNull(likedByUser, "likedByUser");
        Utils.checkNotNull(numLikes, "numLikes");
        this.likedBy = likedBy;
        this.likedByUser = likedByUser;
        this.numLikes = numLikes;
    }

    @JsonIgnore
    public List<AnswerLike> likedBy() {
        return likedBy;
    }

    /**
     * Whether the user in context liked the answer.
     */
    @JsonIgnore
    public boolean likedByUser() {
        return likedByUser;
    }

    /**
     * The total number of likes for the answer.
     */
    @JsonIgnore
    public long numLikes() {
        return numLikes;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AnswerLikes withLikedBy(List<AnswerLike> likedBy) {
        Utils.checkNotNull(likedBy, "likedBy");
        this.likedBy = likedBy;
        return this;
    }

    /**
     * Whether the user in context liked the answer.
     */
    public AnswerLikes withLikedByUser(boolean likedByUser) {
        Utils.checkNotNull(likedByUser, "likedByUser");
        this.likedByUser = likedByUser;
        return this;
    }

    /**
     * The total number of likes for the answer.
     */
    public AnswerLikes withNumLikes(long numLikes) {
        Utils.checkNotNull(numLikes, "numLikes");
        this.numLikes = numLikes;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnswerLikes other = (AnswerLikes) o;
        return 
            Objects.deepEquals(this.likedBy, other.likedBy) &&
            Objects.deepEquals(this.likedByUser, other.likedByUser) &&
            Objects.deepEquals(this.numLikes, other.numLikes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            likedBy,
            likedByUser,
            numLikes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnswerLikes.class,
                "likedBy", likedBy,
                "likedByUser", likedByUser,
                "numLikes", numLikes);
    }
    
    public final static class Builder {
 
        private List<AnswerLike> likedBy;
 
        private Boolean likedByUser;
 
        private Long numLikes;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder likedBy(List<AnswerLike> likedBy) {
            Utils.checkNotNull(likedBy, "likedBy");
            this.likedBy = likedBy;
            return this;
        }

        /**
         * Whether the user in context liked the answer.
         */
        public Builder likedByUser(boolean likedByUser) {
            Utils.checkNotNull(likedByUser, "likedByUser");
            this.likedByUser = likedByUser;
            return this;
        }

        /**
         * The total number of likes for the answer.
         */
        public Builder numLikes(long numLikes) {
            Utils.checkNotNull(numLikes, "numLikes");
            this.numLikes = numLikes;
            return this;
        }
        
        public AnswerLikes build() {
            return new AnswerLikes(
                likedBy,
                likedByUser,
                numLikes);
        }
    }
}
