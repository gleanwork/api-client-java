/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class CreateDlpReportRequest {

    /**
     * Name of the policy being created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    private Optional<? extends DlpConfig> config;

    /**
     * Interval between scans. DAILY is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<? extends DlpFrequency> frequency;

    /**
     * Controls whether the policy should hide documents with violations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoHideDocs")
    private Optional<Boolean> autoHideDocs;

    @JsonCreator
    public CreateDlpReportRequest(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("config") Optional<? extends DlpConfig> config,
            @JsonProperty("frequency") Optional<? extends DlpFrequency> frequency,
            @JsonProperty("autoHideDocs") Optional<Boolean> autoHideDocs) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(config, "config");
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.name = name;
        this.config = config;
        this.frequency = frequency;
        this.autoHideDocs = autoHideDocs;
    }
    
    public CreateDlpReportRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the policy being created.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpConfig> config() {
        return (Optional<DlpConfig>) config;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpFrequency> frequency() {
        return (Optional<DlpFrequency>) frequency;
    }

    /**
     * Controls whether the policy should hide documents with violations.
     */
    @JsonIgnore
    public Optional<Boolean> autoHideDocs() {
        return autoHideDocs;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the policy being created.
     */
    public CreateDlpReportRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the policy being created.
     */
    public CreateDlpReportRequest withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public CreateDlpReportRequest withConfig(DlpConfig config) {
        Utils.checkNotNull(config, "config");
        this.config = Optional.ofNullable(config);
        return this;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public CreateDlpReportRequest withConfig(Optional<? extends DlpConfig> config) {
        Utils.checkNotNull(config, "config");
        this.config = config;
        return this;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    public CreateDlpReportRequest withFrequency(DlpFrequency frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    public CreateDlpReportRequest withFrequency(Optional<? extends DlpFrequency> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    /**
     * Controls whether the policy should hide documents with violations.
     */
    public CreateDlpReportRequest withAutoHideDocs(boolean autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = Optional.ofNullable(autoHideDocs);
        return this;
    }

    /**
     * Controls whether the policy should hide documents with violations.
     */
    public CreateDlpReportRequest withAutoHideDocs(Optional<Boolean> autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = autoHideDocs;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDlpReportRequest other = (CreateDlpReportRequest) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.config, other.config) &&
            Utils.enhancedDeepEquals(this.frequency, other.frequency) &&
            Utils.enhancedDeepEquals(this.autoHideDocs, other.autoHideDocs);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            config,
            frequency,
            autoHideDocs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDlpReportRequest.class,
                "name", name,
                "config", config,
                "frequency", frequency,
                "autoHideDocs", autoHideDocs);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends DlpConfig> config = Optional.empty();
 
        private Optional<? extends DlpFrequency> frequency = Optional.empty();
 
        private Optional<Boolean> autoHideDocs = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the policy being created.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the policy being created.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(DlpConfig config) {
            Utils.checkNotNull(config, "config");
            this.config = Optional.ofNullable(config);
            return this;
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(Optional<? extends DlpConfig> config) {
            Utils.checkNotNull(config, "config");
            this.config = config;
            return this;
        }

        /**
         * Interval between scans. DAILY is deprecated.
         */
        public Builder frequency(DlpFrequency frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * Interval between scans. DAILY is deprecated.
         */
        public Builder frequency(Optional<? extends DlpFrequency> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }

        /**
         * Controls whether the policy should hide documents with violations.
         */
        public Builder autoHideDocs(boolean autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = Optional.ofNullable(autoHideDocs);
            return this;
        }

        /**
         * Controls whether the policy should hide documents with violations.
         */
        public Builder autoHideDocs(Optional<Boolean> autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = autoHideDocs;
            return this;
        }
        
        public CreateDlpReportRequest build() {
            return new CreateDlpReportRequest(
                name,
                config,
                frequency,
                autoHideDocs);
        }
    }
}
