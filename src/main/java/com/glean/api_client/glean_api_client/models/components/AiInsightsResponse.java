/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AiInsightsResponse {

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastLogTimestamp")
    private Optional<Long> lastLogTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assistantInsights")
    private Optional<? extends List<UserActivityInsight>> assistantInsights;

    /**
     * Total number of Active Assistant users (chat, summary, AIA) in requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalActiveAssistantUsers")
    private Optional<Long> totalActiveAssistantUsers;

    /**
     * Total number of Chat messages sent in requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalChatMessages")
    private Optional<Long> totalChatMessages;

    /**
     * Total number of AI Document Summarizations invoked in the requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAiSummarizations")
    private Optional<Long> totalAiSummarizations;

    /**
     * Total number of AI Answers generated in the requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAiAnswers")
    private Optional<Long> totalAiAnswers;

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalUpvotes")
    private Optional<Long> totalUpvotes;

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDownvotes")
    private Optional<Long> totalDownvotes;

    /**
     * Total number of Gleanbot responses, both proactive and reactive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalGleanbotResponses")
    private Optional<Long> totalGleanbotResponses;

    /**
     * Total number of Gleanbot responses shared publicly (upvoted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalGleanbotResponsesShared")
    private Optional<Long> totalGleanbotResponsesShared;

    /**
     * Total number of Glean responses rejected as not helpful (downvoted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalGleanbotResponsesNotHelpful")
    private Optional<Long> totalGleanbotResponsesNotHelpful;

    /**
     * list of departments applicable for users tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonCreator
    public AiInsightsResponse(
            @JsonProperty("lastLogTimestamp") Optional<Long> lastLogTimestamp,
            @JsonProperty("assistantInsights") Optional<? extends List<UserActivityInsight>> assistantInsights,
            @JsonProperty("totalActiveAssistantUsers") Optional<Long> totalActiveAssistantUsers,
            @JsonProperty("totalChatMessages") Optional<Long> totalChatMessages,
            @JsonProperty("totalAiSummarizations") Optional<Long> totalAiSummarizations,
            @JsonProperty("totalAiAnswers") Optional<Long> totalAiAnswers,
            @JsonProperty("totalUpvotes") Optional<Long> totalUpvotes,
            @JsonProperty("totalDownvotes") Optional<Long> totalDownvotes,
            @JsonProperty("totalGleanbotResponses") Optional<Long> totalGleanbotResponses,
            @JsonProperty("totalGleanbotResponsesShared") Optional<Long> totalGleanbotResponsesShared,
            @JsonProperty("totalGleanbotResponsesNotHelpful") Optional<Long> totalGleanbotResponsesNotHelpful,
            @JsonProperty("departments") Optional<? extends List<String>> departments) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        Utils.checkNotNull(assistantInsights, "assistantInsights");
        Utils.checkNotNull(totalActiveAssistantUsers, "totalActiveAssistantUsers");
        Utils.checkNotNull(totalChatMessages, "totalChatMessages");
        Utils.checkNotNull(totalAiSummarizations, "totalAiSummarizations");
        Utils.checkNotNull(totalAiAnswers, "totalAiAnswers");
        Utils.checkNotNull(totalUpvotes, "totalUpvotes");
        Utils.checkNotNull(totalDownvotes, "totalDownvotes");
        Utils.checkNotNull(totalGleanbotResponses, "totalGleanbotResponses");
        Utils.checkNotNull(totalGleanbotResponsesShared, "totalGleanbotResponsesShared");
        Utils.checkNotNull(totalGleanbotResponsesNotHelpful, "totalGleanbotResponsesNotHelpful");
        Utils.checkNotNull(departments, "departments");
        this.lastLogTimestamp = lastLogTimestamp;
        this.assistantInsights = assistantInsights;
        this.totalActiveAssistantUsers = totalActiveAssistantUsers;
        this.totalChatMessages = totalChatMessages;
        this.totalAiSummarizations = totalAiSummarizations;
        this.totalAiAnswers = totalAiAnswers;
        this.totalUpvotes = totalUpvotes;
        this.totalDownvotes = totalDownvotes;
        this.totalGleanbotResponses = totalGleanbotResponses;
        this.totalGleanbotResponsesShared = totalGleanbotResponsesShared;
        this.totalGleanbotResponsesNotHelpful = totalGleanbotResponsesNotHelpful;
        this.departments = departments;
    }
    
    public AiInsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastLogTimestamp() {
        return lastLogTimestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserActivityInsight>> assistantInsights() {
        return (Optional<List<UserActivityInsight>>) assistantInsights;
    }

    /**
     * Total number of Active Assistant users (chat, summary, AIA) in requested period.
     */
    @JsonIgnore
    public Optional<Long> totalActiveAssistantUsers() {
        return totalActiveAssistantUsers;
    }

    /**
     * Total number of Chat messages sent in requested period.
     */
    @JsonIgnore
    public Optional<Long> totalChatMessages() {
        return totalChatMessages;
    }

    /**
     * Total number of AI Document Summarizations invoked in the requested period.
     */
    @JsonIgnore
    public Optional<Long> totalAiSummarizations() {
        return totalAiSummarizations;
    }

    /**
     * Total number of AI Answers generated in the requested period.
     */
    @JsonIgnore
    public Optional<Long> totalAiAnswers() {
        return totalAiAnswers;
    }

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    @JsonIgnore
    public Optional<Long> totalUpvotes() {
        return totalUpvotes;
    }

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    @JsonIgnore
    public Optional<Long> totalDownvotes() {
        return totalDownvotes;
    }

    /**
     * Total number of Gleanbot responses, both proactive and reactive.
     */
    @JsonIgnore
    public Optional<Long> totalGleanbotResponses() {
        return totalGleanbotResponses;
    }

    /**
     * Total number of Gleanbot responses shared publicly (upvoted).
     */
    @JsonIgnore
    public Optional<Long> totalGleanbotResponsesShared() {
        return totalGleanbotResponsesShared;
    }

    /**
     * Total number of Glean responses rejected as not helpful (downvoted).
     */
    @JsonIgnore
    public Optional<Long> totalGleanbotResponsesNotHelpful() {
        return totalGleanbotResponsesNotHelpful;
    }

    /**
     * list of departments applicable for users tab.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public AiInsightsResponse withLastLogTimestamp(long lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
        return this;
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public AiInsightsResponse withLastLogTimestamp(Optional<Long> lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = lastLogTimestamp;
        return this;
    }

    public AiInsightsResponse withAssistantInsights(List<UserActivityInsight> assistantInsights) {
        Utils.checkNotNull(assistantInsights, "assistantInsights");
        this.assistantInsights = Optional.ofNullable(assistantInsights);
        return this;
    }

    public AiInsightsResponse withAssistantInsights(Optional<? extends List<UserActivityInsight>> assistantInsights) {
        Utils.checkNotNull(assistantInsights, "assistantInsights");
        this.assistantInsights = assistantInsights;
        return this;
    }

    /**
     * Total number of Active Assistant users (chat, summary, AIA) in requested period.
     */
    public AiInsightsResponse withTotalActiveAssistantUsers(long totalActiveAssistantUsers) {
        Utils.checkNotNull(totalActiveAssistantUsers, "totalActiveAssistantUsers");
        this.totalActiveAssistantUsers = Optional.ofNullable(totalActiveAssistantUsers);
        return this;
    }

    /**
     * Total number of Active Assistant users (chat, summary, AIA) in requested period.
     */
    public AiInsightsResponse withTotalActiveAssistantUsers(Optional<Long> totalActiveAssistantUsers) {
        Utils.checkNotNull(totalActiveAssistantUsers, "totalActiveAssistantUsers");
        this.totalActiveAssistantUsers = totalActiveAssistantUsers;
        return this;
    }

    /**
     * Total number of Chat messages sent in requested period.
     */
    public AiInsightsResponse withTotalChatMessages(long totalChatMessages) {
        Utils.checkNotNull(totalChatMessages, "totalChatMessages");
        this.totalChatMessages = Optional.ofNullable(totalChatMessages);
        return this;
    }

    /**
     * Total number of Chat messages sent in requested period.
     */
    public AiInsightsResponse withTotalChatMessages(Optional<Long> totalChatMessages) {
        Utils.checkNotNull(totalChatMessages, "totalChatMessages");
        this.totalChatMessages = totalChatMessages;
        return this;
    }

    /**
     * Total number of AI Document Summarizations invoked in the requested period.
     */
    public AiInsightsResponse withTotalAiSummarizations(long totalAiSummarizations) {
        Utils.checkNotNull(totalAiSummarizations, "totalAiSummarizations");
        this.totalAiSummarizations = Optional.ofNullable(totalAiSummarizations);
        return this;
    }

    /**
     * Total number of AI Document Summarizations invoked in the requested period.
     */
    public AiInsightsResponse withTotalAiSummarizations(Optional<Long> totalAiSummarizations) {
        Utils.checkNotNull(totalAiSummarizations, "totalAiSummarizations");
        this.totalAiSummarizations = totalAiSummarizations;
        return this;
    }

    /**
     * Total number of AI Answers generated in the requested period.
     */
    public AiInsightsResponse withTotalAiAnswers(long totalAiAnswers) {
        Utils.checkNotNull(totalAiAnswers, "totalAiAnswers");
        this.totalAiAnswers = Optional.ofNullable(totalAiAnswers);
        return this;
    }

    /**
     * Total number of AI Answers generated in the requested period.
     */
    public AiInsightsResponse withTotalAiAnswers(Optional<Long> totalAiAnswers) {
        Utils.checkNotNull(totalAiAnswers, "totalAiAnswers");
        this.totalAiAnswers = totalAiAnswers;
        return this;
    }

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    public AiInsightsResponse withTotalUpvotes(long totalUpvotes) {
        Utils.checkNotNull(totalUpvotes, "totalUpvotes");
        this.totalUpvotes = Optional.ofNullable(totalUpvotes);
        return this;
    }

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    public AiInsightsResponse withTotalUpvotes(Optional<Long> totalUpvotes) {
        Utils.checkNotNull(totalUpvotes, "totalUpvotes");
        this.totalUpvotes = totalUpvotes;
        return this;
    }

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    public AiInsightsResponse withTotalDownvotes(long totalDownvotes) {
        Utils.checkNotNull(totalDownvotes, "totalDownvotes");
        this.totalDownvotes = Optional.ofNullable(totalDownvotes);
        return this;
    }

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    public AiInsightsResponse withTotalDownvotes(Optional<Long> totalDownvotes) {
        Utils.checkNotNull(totalDownvotes, "totalDownvotes");
        this.totalDownvotes = totalDownvotes;
        return this;
    }

    /**
     * Total number of Gleanbot responses, both proactive and reactive.
     */
    public AiInsightsResponse withTotalGleanbotResponses(long totalGleanbotResponses) {
        Utils.checkNotNull(totalGleanbotResponses, "totalGleanbotResponses");
        this.totalGleanbotResponses = Optional.ofNullable(totalGleanbotResponses);
        return this;
    }

    /**
     * Total number of Gleanbot responses, both proactive and reactive.
     */
    public AiInsightsResponse withTotalGleanbotResponses(Optional<Long> totalGleanbotResponses) {
        Utils.checkNotNull(totalGleanbotResponses, "totalGleanbotResponses");
        this.totalGleanbotResponses = totalGleanbotResponses;
        return this;
    }

    /**
     * Total number of Gleanbot responses shared publicly (upvoted).
     */
    public AiInsightsResponse withTotalGleanbotResponsesShared(long totalGleanbotResponsesShared) {
        Utils.checkNotNull(totalGleanbotResponsesShared, "totalGleanbotResponsesShared");
        this.totalGleanbotResponsesShared = Optional.ofNullable(totalGleanbotResponsesShared);
        return this;
    }

    /**
     * Total number of Gleanbot responses shared publicly (upvoted).
     */
    public AiInsightsResponse withTotalGleanbotResponsesShared(Optional<Long> totalGleanbotResponsesShared) {
        Utils.checkNotNull(totalGleanbotResponsesShared, "totalGleanbotResponsesShared");
        this.totalGleanbotResponsesShared = totalGleanbotResponsesShared;
        return this;
    }

    /**
     * Total number of Glean responses rejected as not helpful (downvoted).
     */
    public AiInsightsResponse withTotalGleanbotResponsesNotHelpful(long totalGleanbotResponsesNotHelpful) {
        Utils.checkNotNull(totalGleanbotResponsesNotHelpful, "totalGleanbotResponsesNotHelpful");
        this.totalGleanbotResponsesNotHelpful = Optional.ofNullable(totalGleanbotResponsesNotHelpful);
        return this;
    }

    /**
     * Total number of Glean responses rejected as not helpful (downvoted).
     */
    public AiInsightsResponse withTotalGleanbotResponsesNotHelpful(Optional<Long> totalGleanbotResponsesNotHelpful) {
        Utils.checkNotNull(totalGleanbotResponsesNotHelpful, "totalGleanbotResponsesNotHelpful");
        this.totalGleanbotResponsesNotHelpful = totalGleanbotResponsesNotHelpful;
        return this;
    }

    /**
     * list of departments applicable for users tab.
     */
    public AiInsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * list of departments applicable for users tab.
     */
    public AiInsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AiInsightsResponse other = (AiInsightsResponse) o;
        return 
            Objects.deepEquals(this.lastLogTimestamp, other.lastLogTimestamp) &&
            Objects.deepEquals(this.assistantInsights, other.assistantInsights) &&
            Objects.deepEquals(this.totalActiveAssistantUsers, other.totalActiveAssistantUsers) &&
            Objects.deepEquals(this.totalChatMessages, other.totalChatMessages) &&
            Objects.deepEquals(this.totalAiSummarizations, other.totalAiSummarizations) &&
            Objects.deepEquals(this.totalAiAnswers, other.totalAiAnswers) &&
            Objects.deepEquals(this.totalUpvotes, other.totalUpvotes) &&
            Objects.deepEquals(this.totalDownvotes, other.totalDownvotes) &&
            Objects.deepEquals(this.totalGleanbotResponses, other.totalGleanbotResponses) &&
            Objects.deepEquals(this.totalGleanbotResponsesShared, other.totalGleanbotResponsesShared) &&
            Objects.deepEquals(this.totalGleanbotResponsesNotHelpful, other.totalGleanbotResponsesNotHelpful) &&
            Objects.deepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lastLogTimestamp,
            assistantInsights,
            totalActiveAssistantUsers,
            totalChatMessages,
            totalAiSummarizations,
            totalAiAnswers,
            totalUpvotes,
            totalDownvotes,
            totalGleanbotResponses,
            totalGleanbotResponsesShared,
            totalGleanbotResponsesNotHelpful,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AiInsightsResponse.class,
                "lastLogTimestamp", lastLogTimestamp,
                "assistantInsights", assistantInsights,
                "totalActiveAssistantUsers", totalActiveAssistantUsers,
                "totalChatMessages", totalChatMessages,
                "totalAiSummarizations", totalAiSummarizations,
                "totalAiAnswers", totalAiAnswers,
                "totalUpvotes", totalUpvotes,
                "totalDownvotes", totalDownvotes,
                "totalGleanbotResponses", totalGleanbotResponses,
                "totalGleanbotResponsesShared", totalGleanbotResponsesShared,
                "totalGleanbotResponsesNotHelpful", totalGleanbotResponsesNotHelpful,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private Optional<Long> lastLogTimestamp = Optional.empty();
 
        private Optional<? extends List<UserActivityInsight>> assistantInsights = Optional.empty();
 
        private Optional<Long> totalActiveAssistantUsers = Optional.empty();
 
        private Optional<Long> totalChatMessages = Optional.empty();
 
        private Optional<Long> totalAiSummarizations = Optional.empty();
 
        private Optional<Long> totalAiAnswers = Optional.empty();
 
        private Optional<Long> totalUpvotes = Optional.empty();
 
        private Optional<Long> totalDownvotes = Optional.empty();
 
        private Optional<Long> totalGleanbotResponses = Optional.empty();
 
        private Optional<Long> totalGleanbotResponsesShared = Optional.empty();
 
        private Optional<Long> totalGleanbotResponsesNotHelpful = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(long lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
            return this;
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(Optional<Long> lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = lastLogTimestamp;
            return this;
        }

        public Builder assistantInsights(List<UserActivityInsight> assistantInsights) {
            Utils.checkNotNull(assistantInsights, "assistantInsights");
            this.assistantInsights = Optional.ofNullable(assistantInsights);
            return this;
        }

        public Builder assistantInsights(Optional<? extends List<UserActivityInsight>> assistantInsights) {
            Utils.checkNotNull(assistantInsights, "assistantInsights");
            this.assistantInsights = assistantInsights;
            return this;
        }

        /**
         * Total number of Active Assistant users (chat, summary, AIA) in requested period.
         */
        public Builder totalActiveAssistantUsers(long totalActiveAssistantUsers) {
            Utils.checkNotNull(totalActiveAssistantUsers, "totalActiveAssistantUsers");
            this.totalActiveAssistantUsers = Optional.ofNullable(totalActiveAssistantUsers);
            return this;
        }

        /**
         * Total number of Active Assistant users (chat, summary, AIA) in requested period.
         */
        public Builder totalActiveAssistantUsers(Optional<Long> totalActiveAssistantUsers) {
            Utils.checkNotNull(totalActiveAssistantUsers, "totalActiveAssistantUsers");
            this.totalActiveAssistantUsers = totalActiveAssistantUsers;
            return this;
        }

        /**
         * Total number of Chat messages sent in requested period.
         */
        public Builder totalChatMessages(long totalChatMessages) {
            Utils.checkNotNull(totalChatMessages, "totalChatMessages");
            this.totalChatMessages = Optional.ofNullable(totalChatMessages);
            return this;
        }

        /**
         * Total number of Chat messages sent in requested period.
         */
        public Builder totalChatMessages(Optional<Long> totalChatMessages) {
            Utils.checkNotNull(totalChatMessages, "totalChatMessages");
            this.totalChatMessages = totalChatMessages;
            return this;
        }

        /**
         * Total number of AI Document Summarizations invoked in the requested period.
         */
        public Builder totalAiSummarizations(long totalAiSummarizations) {
            Utils.checkNotNull(totalAiSummarizations, "totalAiSummarizations");
            this.totalAiSummarizations = Optional.ofNullable(totalAiSummarizations);
            return this;
        }

        /**
         * Total number of AI Document Summarizations invoked in the requested period.
         */
        public Builder totalAiSummarizations(Optional<Long> totalAiSummarizations) {
            Utils.checkNotNull(totalAiSummarizations, "totalAiSummarizations");
            this.totalAiSummarizations = totalAiSummarizations;
            return this;
        }

        /**
         * Total number of AI Answers generated in the requested period.
         */
        public Builder totalAiAnswers(long totalAiAnswers) {
            Utils.checkNotNull(totalAiAnswers, "totalAiAnswers");
            this.totalAiAnswers = Optional.ofNullable(totalAiAnswers);
            return this;
        }

        /**
         * Total number of AI Answers generated in the requested period.
         */
        public Builder totalAiAnswers(Optional<Long> totalAiAnswers) {
            Utils.checkNotNull(totalAiAnswers, "totalAiAnswers");
            this.totalAiAnswers = totalAiAnswers;
            return this;
        }

        /**
         * Total number of Chat messages which received upvotes by the user.
         */
        public Builder totalUpvotes(long totalUpvotes) {
            Utils.checkNotNull(totalUpvotes, "totalUpvotes");
            this.totalUpvotes = Optional.ofNullable(totalUpvotes);
            return this;
        }

        /**
         * Total number of Chat messages which received upvotes by the user.
         */
        public Builder totalUpvotes(Optional<Long> totalUpvotes) {
            Utils.checkNotNull(totalUpvotes, "totalUpvotes");
            this.totalUpvotes = totalUpvotes;
            return this;
        }

        /**
         * Total number of Chat messages which received downvotes by the user.
         */
        public Builder totalDownvotes(long totalDownvotes) {
            Utils.checkNotNull(totalDownvotes, "totalDownvotes");
            this.totalDownvotes = Optional.ofNullable(totalDownvotes);
            return this;
        }

        /**
         * Total number of Chat messages which received downvotes by the user.
         */
        public Builder totalDownvotes(Optional<Long> totalDownvotes) {
            Utils.checkNotNull(totalDownvotes, "totalDownvotes");
            this.totalDownvotes = totalDownvotes;
            return this;
        }

        /**
         * Total number of Gleanbot responses, both proactive and reactive.
         */
        public Builder totalGleanbotResponses(long totalGleanbotResponses) {
            Utils.checkNotNull(totalGleanbotResponses, "totalGleanbotResponses");
            this.totalGleanbotResponses = Optional.ofNullable(totalGleanbotResponses);
            return this;
        }

        /**
         * Total number of Gleanbot responses, both proactive and reactive.
         */
        public Builder totalGleanbotResponses(Optional<Long> totalGleanbotResponses) {
            Utils.checkNotNull(totalGleanbotResponses, "totalGleanbotResponses");
            this.totalGleanbotResponses = totalGleanbotResponses;
            return this;
        }

        /**
         * Total number of Gleanbot responses shared publicly (upvoted).
         */
        public Builder totalGleanbotResponsesShared(long totalGleanbotResponsesShared) {
            Utils.checkNotNull(totalGleanbotResponsesShared, "totalGleanbotResponsesShared");
            this.totalGleanbotResponsesShared = Optional.ofNullable(totalGleanbotResponsesShared);
            return this;
        }

        /**
         * Total number of Gleanbot responses shared publicly (upvoted).
         */
        public Builder totalGleanbotResponsesShared(Optional<Long> totalGleanbotResponsesShared) {
            Utils.checkNotNull(totalGleanbotResponsesShared, "totalGleanbotResponsesShared");
            this.totalGleanbotResponsesShared = totalGleanbotResponsesShared;
            return this;
        }

        /**
         * Total number of Glean responses rejected as not helpful (downvoted).
         */
        public Builder totalGleanbotResponsesNotHelpful(long totalGleanbotResponsesNotHelpful) {
            Utils.checkNotNull(totalGleanbotResponsesNotHelpful, "totalGleanbotResponsesNotHelpful");
            this.totalGleanbotResponsesNotHelpful = Optional.ofNullable(totalGleanbotResponsesNotHelpful);
            return this;
        }

        /**
         * Total number of Glean responses rejected as not helpful (downvoted).
         */
        public Builder totalGleanbotResponsesNotHelpful(Optional<Long> totalGleanbotResponsesNotHelpful) {
            Utils.checkNotNull(totalGleanbotResponsesNotHelpful, "totalGleanbotResponsesNotHelpful");
            this.totalGleanbotResponsesNotHelpful = totalGleanbotResponsesNotHelpful;
            return this;
        }

        /**
         * list of departments applicable for users tab.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * list of departments applicable for users tab.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public AiInsightsResponse build() {
            return new AiInsightsResponse(
                lastLogTimestamp,
                assistantInsights,
                totalActiveAssistantUsers,
                totalChatMessages,
                totalAiSummarizations,
                totalAiAnswers,
                totalUpvotes,
                totalDownvotes,
                totalGleanbotResponses,
                totalGleanbotResponsesShared,
                totalGleanbotResponsesNotHelpful,
                departments);
        }
    }
}
