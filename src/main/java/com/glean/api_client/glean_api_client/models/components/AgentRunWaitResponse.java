/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class AgentRunWaitResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run")
    private Optional<? extends AgentRun> run;

    /**
     * The messages returned by the run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<Message>> messages;

    @JsonCreator
    public AgentRunWaitResponse(
            @JsonProperty("run") Optional<? extends AgentRun> run,
            @JsonProperty("messages") Optional<? extends List<Message>> messages) {
        Utils.checkNotNull(run, "run");
        Utils.checkNotNull(messages, "messages");
        this.run = run;
        this.messages = messages;
    }
    
    public AgentRunWaitResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AgentRun> run() {
        return (Optional<AgentRun>) run;
    }

    /**
     * The messages returned by the run.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Message>> messages() {
        return (Optional<List<Message>>) messages;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AgentRunWaitResponse withRun(AgentRun run) {
        Utils.checkNotNull(run, "run");
        this.run = Optional.ofNullable(run);
        return this;
    }

    public AgentRunWaitResponse withRun(Optional<? extends AgentRun> run) {
        Utils.checkNotNull(run, "run");
        this.run = run;
        return this;
    }

    /**
     * The messages returned by the run.
     */
    public AgentRunWaitResponse withMessages(List<Message> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    /**
     * The messages returned by the run.
     */
    public AgentRunWaitResponse withMessages(Optional<? extends List<Message>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgentRunWaitResponse other = (AgentRunWaitResponse) o;
        return 
            Utils.enhancedDeepEquals(this.run, other.run) &&
            Utils.enhancedDeepEquals(this.messages, other.messages);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            run,
            messages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgentRunWaitResponse.class,
                "run", run,
                "messages", messages);
    }
    
    public final static class Builder {
 
        private Optional<? extends AgentRun> run = Optional.empty();
 
        private Optional<? extends List<Message>> messages = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder run(AgentRun run) {
            Utils.checkNotNull(run, "run");
            this.run = Optional.ofNullable(run);
            return this;
        }

        public Builder run(Optional<? extends AgentRun> run) {
            Utils.checkNotNull(run, "run");
            this.run = run;
            return this;
        }

        /**
         * The messages returned by the run.
         */
        public Builder messages(List<Message> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * The messages returned by the run.
         */
        public Builder messages(Optional<? extends List<Message>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }
        
        public AgentRunWaitResponse build() {
            return new AgentRunWaitResponse(
                run,
                messages);
        }
    }
}
