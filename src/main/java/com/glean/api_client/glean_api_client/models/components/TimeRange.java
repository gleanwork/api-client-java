/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class TimeRange {

    /**
     * start time of the time range, applicable for the CUSTOM type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<OffsetDateTime> startTime;

    /**
     * end time of the time range, applicable for the CUSTOM type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<OffsetDateTime> endTime;

    @JsonCreator
    public TimeRange(
            @JsonProperty("startTime") Optional<OffsetDateTime> startTime,
            @JsonProperty("endTime") Optional<OffsetDateTime> endTime) {
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        this.startTime = startTime;
        this.endTime = endTime;
    }
    
    public TimeRange() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * start time of the time range, applicable for the CUSTOM type.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startTime() {
        return startTime;
    }

    /**
     * end time of the time range, applicable for the CUSTOM type.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> endTime() {
        return endTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * start time of the time range, applicable for the CUSTOM type.
     */
    public TimeRange withStartTime(OffsetDateTime startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * start time of the time range, applicable for the CUSTOM type.
     */
    public TimeRange withStartTime(Optional<OffsetDateTime> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * end time of the time range, applicable for the CUSTOM type.
     */
    public TimeRange withEndTime(OffsetDateTime endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * end time of the time range, applicable for the CUSTOM type.
     */
    public TimeRange withEndTime(Optional<OffsetDateTime> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeRange other = (TimeRange) o;
        return 
            Objects.deepEquals(this.startTime, other.startTime) &&
            Objects.deepEquals(this.endTime, other.endTime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startTime,
            endTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimeRange.class,
                "startTime", startTime,
                "endTime", endTime);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> startTime = Optional.empty();
 
        private Optional<OffsetDateTime> endTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * start time of the time range, applicable for the CUSTOM type.
         */
        public Builder startTime(OffsetDateTime startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * start time of the time range, applicable for the CUSTOM type.
         */
        public Builder startTime(Optional<OffsetDateTime> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * end time of the time range, applicable for the CUSTOM type.
         */
        public Builder endTime(OffsetDateTime endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * end time of the time range, applicable for the CUSTOM type.
         */
        public Builder endTime(Optional<OffsetDateTime> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }
        
        public TimeRange build() {
            return new TimeRange(
                startTime,
                endTime);
        }
    }
}
