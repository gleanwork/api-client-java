/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * StructuredLocation
 * 
 * <p>Detailed location with information about country, state, city etc.
 */
public class StructuredLocation {

    /**
     * Desk number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deskLocation")
    private Optional<String> deskLocation;

    /**
     * Location's timezone, e.g. UTC, PST.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    /**
     * Office address or name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<String> address;

    /**
     * Name of the city.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * State code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * Region information, e.g. NORAM, APAC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<String> region;

    /**
     * ZIP Code for the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipCode")
    private Optional<String> zipCode;

    /**
     * Country name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    private Optional<String> countryCode;

    @JsonCreator
    public StructuredLocation(
            @JsonProperty("deskLocation") Optional<String> deskLocation,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("address") Optional<String> address,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("region") Optional<String> region,
            @JsonProperty("zipCode") Optional<String> zipCode,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("countryCode") Optional<String> countryCode) {
        Utils.checkNotNull(deskLocation, "deskLocation");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(zipCode, "zipCode");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(countryCode, "countryCode");
        this.deskLocation = deskLocation;
        this.timezone = timezone;
        this.address = address;
        this.city = city;
        this.state = state;
        this.region = region;
        this.zipCode = zipCode;
        this.country = country;
        this.countryCode = countryCode;
    }
    
    public StructuredLocation() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Desk number.
     */
    @JsonIgnore
    public Optional<String> deskLocation() {
        return deskLocation;
    }

    /**
     * Location's timezone, e.g. UTC, PST.
     */
    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    /**
     * Office address or name.
     */
    @JsonIgnore
    public Optional<String> address() {
        return address;
    }

    /**
     * Name of the city.
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * State code.
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * Region information, e.g. NORAM, APAC.
     */
    @JsonIgnore
    public Optional<String> region() {
        return region;
    }

    /**
     * ZIP Code for the address.
     */
    @JsonIgnore
    public Optional<String> zipCode() {
        return zipCode;
    }

    /**
     * Country name.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
     */
    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Desk number.
     */
    public StructuredLocation withDeskLocation(String deskLocation) {
        Utils.checkNotNull(deskLocation, "deskLocation");
        this.deskLocation = Optional.ofNullable(deskLocation);
        return this;
    }

    /**
     * Desk number.
     */
    public StructuredLocation withDeskLocation(Optional<String> deskLocation) {
        Utils.checkNotNull(deskLocation, "deskLocation");
        this.deskLocation = deskLocation;
        return this;
    }

    /**
     * Location's timezone, e.g. UTC, PST.
     */
    public StructuredLocation withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    /**
     * Location's timezone, e.g. UTC, PST.
     */
    public StructuredLocation withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    /**
     * Office address or name.
     */
    public StructuredLocation withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    /**
     * Office address or name.
     */
    public StructuredLocation withAddress(Optional<String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * Name of the city.
     */
    public StructuredLocation withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * Name of the city.
     */
    public StructuredLocation withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * State code.
     */
    public StructuredLocation withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * State code.
     */
    public StructuredLocation withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Region information, e.g. NORAM, APAC.
     */
    public StructuredLocation withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * Region information, e.g. NORAM, APAC.
     */
    public StructuredLocation withRegion(Optional<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * ZIP Code for the address.
     */
    public StructuredLocation withZipCode(String zipCode) {
        Utils.checkNotNull(zipCode, "zipCode");
        this.zipCode = Optional.ofNullable(zipCode);
        return this;
    }

    /**
     * ZIP Code for the address.
     */
    public StructuredLocation withZipCode(Optional<String> zipCode) {
        Utils.checkNotNull(zipCode, "zipCode");
        this.zipCode = zipCode;
        return this;
    }

    /**
     * Country name.
     */
    public StructuredLocation withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * Country name.
     */
    public StructuredLocation withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
     */
    public StructuredLocation withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    /**
     * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
     */
    public StructuredLocation withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StructuredLocation other = (StructuredLocation) o;
        return 
            Objects.deepEquals(this.deskLocation, other.deskLocation) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.zipCode, other.zipCode) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.countryCode, other.countryCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            deskLocation,
            timezone,
            address,
            city,
            state,
            region,
            zipCode,
            country,
            countryCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StructuredLocation.class,
                "deskLocation", deskLocation,
                "timezone", timezone,
                "address", address,
                "city", city,
                "state", state,
                "region", region,
                "zipCode", zipCode,
                "country", country,
                "countryCode", countryCode);
    }
    
    public final static class Builder {
 
        private Optional<String> deskLocation = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<String> address = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<String> region = Optional.empty();
 
        private Optional<String> zipCode = Optional.empty();
 
        private Optional<String> country = Optional.empty();
 
        private Optional<String> countryCode = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Desk number.
         */
        public Builder deskLocation(String deskLocation) {
            Utils.checkNotNull(deskLocation, "deskLocation");
            this.deskLocation = Optional.ofNullable(deskLocation);
            return this;
        }

        /**
         * Desk number.
         */
        public Builder deskLocation(Optional<String> deskLocation) {
            Utils.checkNotNull(deskLocation, "deskLocation");
            this.deskLocation = deskLocation;
            return this;
        }

        /**
         * Location's timezone, e.g. UTC, PST.
         */
        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        /**
         * Location's timezone, e.g. UTC, PST.
         */
        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        /**
         * Office address or name.
         */
        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * Office address or name.
         */
        public Builder address(Optional<String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * Name of the city.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * Name of the city.
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * State code.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * State code.
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Region information, e.g. NORAM, APAC.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * Region information, e.g. NORAM, APAC.
         */
        public Builder region(Optional<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * ZIP Code for the address.
         */
        public Builder zipCode(String zipCode) {
            Utils.checkNotNull(zipCode, "zipCode");
            this.zipCode = Optional.ofNullable(zipCode);
            return this;
        }

        /**
         * ZIP Code for the address.
         */
        public Builder zipCode(Optional<String> zipCode) {
            Utils.checkNotNull(zipCode, "zipCode");
            this.zipCode = zipCode;
            return this;
        }

        /**
         * Country name.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Country name.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
         */
        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
         */
        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }
        
        public StructuredLocation build() {
            return new StructuredLocation(
                deskLocation,
                timezone,
                address,
                city,
                state,
                region,
                zipCode,
                country,
                countryCode);
        }
    }
}
