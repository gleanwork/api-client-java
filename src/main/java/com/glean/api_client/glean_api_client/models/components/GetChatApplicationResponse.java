/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetChatApplicationResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application")
    private Optional<? extends Object> application;

    @JsonCreator
    public GetChatApplicationResponse(
            @JsonProperty("application") Optional<? extends Object> application) {
        Utils.checkNotNull(application, "application");
        this.application = application;
    }
    
    public GetChatApplicationResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> application() {
        return (Optional<Object>) application;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetChatApplicationResponse withApplication(Object application) {
        Utils.checkNotNull(application, "application");
        this.application = Optional.ofNullable(application);
        return this;
    }

    public GetChatApplicationResponse withApplication(Optional<? extends Object> application) {
        Utils.checkNotNull(application, "application");
        this.application = application;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChatApplicationResponse other = (GetChatApplicationResponse) o;
        return 
            Objects.deepEquals(this.application, other.application);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            application);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChatApplicationResponse.class,
                "application", application);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> application = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder application(Object application) {
            Utils.checkNotNull(application, "application");
            this.application = Optional.ofNullable(application);
            return this;
        }

        public Builder application(Optional<? extends Object> application) {
            Utils.checkNotNull(application, "application");
            this.application = application;
            return this;
        }
        
        public GetChatApplicationResponse build() {
            return new GetChatApplicationResponse(
                application);
        }
    }
}
