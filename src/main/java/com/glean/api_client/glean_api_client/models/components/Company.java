/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Company {

    /**
     * User-friendly display name.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Link to internal company company profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileUrl")
    private Optional<String> profileUrl;

    /**
     * Link to company's associated websites.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websiteUrls")
    private Optional<? extends List<String>> websiteUrls;

    /**
     * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoUrl")
    private Optional<String> logoUrl;

    /**
     * User facing string representing the company's location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;

    /**
     * Phone number as a number string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * Fax number as a number string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private Optional<String> fax;

    /**
     * User facing string representing the company's industry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industry")
    private Optional<String> industry;

    /**
     * Average company's annual revenue for reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annualRevenue")
    private Optional<Double> annualRevenue;

    /**
     * Average company's number of employees for reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfEmployees")
    private Optional<Long> numberOfEmployees;

    /**
     * Company's stock symbol if company is public.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockSymbol")
    private Optional<String> stockSymbol;

    /**
     * The date when the company was founded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("foundedDate")
    private Optional<LocalDate> foundedDate;

    /**
     * User facing description of company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("about")
    private Optional<String> about;

    @JsonCreator
    public Company(
            @JsonProperty("name") String name,
            @JsonProperty("profileUrl") Optional<String> profileUrl,
            @JsonProperty("websiteUrls") Optional<? extends List<String>> websiteUrls,
            @JsonProperty("logoUrl") Optional<String> logoUrl,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("fax") Optional<String> fax,
            @JsonProperty("industry") Optional<String> industry,
            @JsonProperty("annualRevenue") Optional<Double> annualRevenue,
            @JsonProperty("numberOfEmployees") Optional<Long> numberOfEmployees,
            @JsonProperty("stockSymbol") Optional<String> stockSymbol,
            @JsonProperty("foundedDate") Optional<LocalDate> foundedDate,
            @JsonProperty("about") Optional<String> about) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(profileUrl, "profileUrl");
        Utils.checkNotNull(websiteUrls, "websiteUrls");
        Utils.checkNotNull(logoUrl, "logoUrl");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(fax, "fax");
        Utils.checkNotNull(industry, "industry");
        Utils.checkNotNull(annualRevenue, "annualRevenue");
        Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
        Utils.checkNotNull(stockSymbol, "stockSymbol");
        Utils.checkNotNull(foundedDate, "foundedDate");
        Utils.checkNotNull(about, "about");
        this.name = name;
        this.profileUrl = profileUrl;
        this.websiteUrls = websiteUrls;
        this.logoUrl = logoUrl;
        this.location = location;
        this.phone = phone;
        this.fax = fax;
        this.industry = industry;
        this.annualRevenue = annualRevenue;
        this.numberOfEmployees = numberOfEmployees;
        this.stockSymbol = stockSymbol;
        this.foundedDate = foundedDate;
        this.about = about;
    }
    
    public Company(
            String name) {
        this(name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * User-friendly display name.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Link to internal company company profile.
     */
    @JsonIgnore
    public Optional<String> profileUrl() {
        return profileUrl;
    }

    /**
     * Link to company's associated websites.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> websiteUrls() {
        return (Optional<List<String>>) websiteUrls;
    }

    /**
     * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonIgnore
    public Optional<String> logoUrl() {
        return logoUrl;
    }

    /**
     * User facing string representing the company's location.
     */
    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    /**
     * Phone number as a number string.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * Fax number as a number string.
     */
    @JsonIgnore
    public Optional<String> fax() {
        return fax;
    }

    /**
     * User facing string representing the company's industry.
     */
    @JsonIgnore
    public Optional<String> industry() {
        return industry;
    }

    /**
     * Average company's annual revenue for reference.
     */
    @JsonIgnore
    public Optional<Double> annualRevenue() {
        return annualRevenue;
    }

    /**
     * Average company's number of employees for reference.
     */
    @JsonIgnore
    public Optional<Long> numberOfEmployees() {
        return numberOfEmployees;
    }

    /**
     * Company's stock symbol if company is public.
     */
    @JsonIgnore
    public Optional<String> stockSymbol() {
        return stockSymbol;
    }

    /**
     * The date when the company was founded.
     */
    @JsonIgnore
    public Optional<LocalDate> foundedDate() {
        return foundedDate;
    }

    /**
     * User facing description of company.
     */
    @JsonIgnore
    public Optional<String> about() {
        return about;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * User-friendly display name.
     */
    public Company withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Link to internal company company profile.
     */
    public Company withProfileUrl(String profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = Optional.ofNullable(profileUrl);
        return this;
    }

    /**
     * Link to internal company company profile.
     */
    public Company withProfileUrl(Optional<String> profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = profileUrl;
        return this;
    }

    /**
     * Link to company's associated websites.
     */
    public Company withWebsiteUrls(List<String> websiteUrls) {
        Utils.checkNotNull(websiteUrls, "websiteUrls");
        this.websiteUrls = Optional.ofNullable(websiteUrls);
        return this;
    }

    /**
     * Link to company's associated websites.
     */
    public Company withWebsiteUrls(Optional<? extends List<String>> websiteUrls) {
        Utils.checkNotNull(websiteUrls, "websiteUrls");
        this.websiteUrls = websiteUrls;
        return this;
    }

    /**
     * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public Company withLogoUrl(String logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = Optional.ofNullable(logoUrl);
        return this;
    }

    /**
     * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public Company withLogoUrl(Optional<String> logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = logoUrl;
        return this;
    }

    /**
     * User facing string representing the company's location.
     */
    public Company withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    /**
     * User facing string representing the company's location.
     */
    public Company withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * Phone number as a number string.
     */
    public Company withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Phone number as a number string.
     */
    public Company withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * Fax number as a number string.
     */
    public Company withFax(String fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = Optional.ofNullable(fax);
        return this;
    }

    /**
     * Fax number as a number string.
     */
    public Company withFax(Optional<String> fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = fax;
        return this;
    }

    /**
     * User facing string representing the company's industry.
     */
    public Company withIndustry(String industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = Optional.ofNullable(industry);
        return this;
    }

    /**
     * User facing string representing the company's industry.
     */
    public Company withIndustry(Optional<String> industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = industry;
        return this;
    }

    /**
     * Average company's annual revenue for reference.
     */
    public Company withAnnualRevenue(double annualRevenue) {
        Utils.checkNotNull(annualRevenue, "annualRevenue");
        this.annualRevenue = Optional.ofNullable(annualRevenue);
        return this;
    }

    /**
     * Average company's annual revenue for reference.
     */
    public Company withAnnualRevenue(Optional<Double> annualRevenue) {
        Utils.checkNotNull(annualRevenue, "annualRevenue");
        this.annualRevenue = annualRevenue;
        return this;
    }

    /**
     * Average company's number of employees for reference.
     */
    public Company withNumberOfEmployees(long numberOfEmployees) {
        Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
        this.numberOfEmployees = Optional.ofNullable(numberOfEmployees);
        return this;
    }

    /**
     * Average company's number of employees for reference.
     */
    public Company withNumberOfEmployees(Optional<Long> numberOfEmployees) {
        Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
        this.numberOfEmployees = numberOfEmployees;
        return this;
    }

    /**
     * Company's stock symbol if company is public.
     */
    public Company withStockSymbol(String stockSymbol) {
        Utils.checkNotNull(stockSymbol, "stockSymbol");
        this.stockSymbol = Optional.ofNullable(stockSymbol);
        return this;
    }

    /**
     * Company's stock symbol if company is public.
     */
    public Company withStockSymbol(Optional<String> stockSymbol) {
        Utils.checkNotNull(stockSymbol, "stockSymbol");
        this.stockSymbol = stockSymbol;
        return this;
    }

    /**
     * The date when the company was founded.
     */
    public Company withFoundedDate(LocalDate foundedDate) {
        Utils.checkNotNull(foundedDate, "foundedDate");
        this.foundedDate = Optional.ofNullable(foundedDate);
        return this;
    }

    /**
     * The date when the company was founded.
     */
    public Company withFoundedDate(Optional<LocalDate> foundedDate) {
        Utils.checkNotNull(foundedDate, "foundedDate");
        this.foundedDate = foundedDate;
        return this;
    }

    /**
     * User facing description of company.
     */
    public Company withAbout(String about) {
        Utils.checkNotNull(about, "about");
        this.about = Optional.ofNullable(about);
        return this;
    }

    /**
     * User facing description of company.
     */
    public Company withAbout(Optional<String> about) {
        Utils.checkNotNull(about, "about");
        this.about = about;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Company other = (Company) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.profileUrl, other.profileUrl) &&
            Objects.deepEquals(this.websiteUrls, other.websiteUrls) &&
            Objects.deepEquals(this.logoUrl, other.logoUrl) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.fax, other.fax) &&
            Objects.deepEquals(this.industry, other.industry) &&
            Objects.deepEquals(this.annualRevenue, other.annualRevenue) &&
            Objects.deepEquals(this.numberOfEmployees, other.numberOfEmployees) &&
            Objects.deepEquals(this.stockSymbol, other.stockSymbol) &&
            Objects.deepEquals(this.foundedDate, other.foundedDate) &&
            Objects.deepEquals(this.about, other.about);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            profileUrl,
            websiteUrls,
            logoUrl,
            location,
            phone,
            fax,
            industry,
            annualRevenue,
            numberOfEmployees,
            stockSymbol,
            foundedDate,
            about);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Company.class,
                "name", name,
                "profileUrl", profileUrl,
                "websiteUrls", websiteUrls,
                "logoUrl", logoUrl,
                "location", location,
                "phone", phone,
                "fax", fax,
                "industry", industry,
                "annualRevenue", annualRevenue,
                "numberOfEmployees", numberOfEmployees,
                "stockSymbol", stockSymbol,
                "foundedDate", foundedDate,
                "about", about);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<String> profileUrl = Optional.empty();
 
        private Optional<? extends List<String>> websiteUrls = Optional.empty();
 
        private Optional<String> logoUrl = Optional.empty();
 
        private Optional<String> location = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private Optional<String> fax = Optional.empty();
 
        private Optional<String> industry = Optional.empty();
 
        private Optional<Double> annualRevenue = Optional.empty();
 
        private Optional<Long> numberOfEmployees = Optional.empty();
 
        private Optional<String> stockSymbol = Optional.empty();
 
        private Optional<LocalDate> foundedDate = Optional.empty();
 
        private Optional<String> about = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * User-friendly display name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Link to internal company company profile.
         */
        public Builder profileUrl(String profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = Optional.ofNullable(profileUrl);
            return this;
        }

        /**
         * Link to internal company company profile.
         */
        public Builder profileUrl(Optional<String> profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = profileUrl;
            return this;
        }

        /**
         * Link to company's associated websites.
         */
        public Builder websiteUrls(List<String> websiteUrls) {
            Utils.checkNotNull(websiteUrls, "websiteUrls");
            this.websiteUrls = Optional.ofNullable(websiteUrls);
            return this;
        }

        /**
         * Link to company's associated websites.
         */
        public Builder websiteUrls(Optional<? extends List<String>> websiteUrls) {
            Utils.checkNotNull(websiteUrls, "websiteUrls");
            this.websiteUrls = websiteUrls;
            return this;
        }

        /**
         * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder logoUrl(String logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        /**
         * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder logoUrl(Optional<String> logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = logoUrl;
            return this;
        }

        /**
         * User facing string representing the company's location.
         */
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        /**
         * User facing string representing the company's location.
         */
        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        /**
         * Phone number as a number string.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Phone number as a number string.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * Fax number as a number string.
         */
        public Builder fax(String fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = Optional.ofNullable(fax);
            return this;
        }

        /**
         * Fax number as a number string.
         */
        public Builder fax(Optional<String> fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = fax;
            return this;
        }

        /**
         * User facing string representing the company's industry.
         */
        public Builder industry(String industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = Optional.ofNullable(industry);
            return this;
        }

        /**
         * User facing string representing the company's industry.
         */
        public Builder industry(Optional<String> industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = industry;
            return this;
        }

        /**
         * Average company's annual revenue for reference.
         */
        public Builder annualRevenue(double annualRevenue) {
            Utils.checkNotNull(annualRevenue, "annualRevenue");
            this.annualRevenue = Optional.ofNullable(annualRevenue);
            return this;
        }

        /**
         * Average company's annual revenue for reference.
         */
        public Builder annualRevenue(Optional<Double> annualRevenue) {
            Utils.checkNotNull(annualRevenue, "annualRevenue");
            this.annualRevenue = annualRevenue;
            return this;
        }

        /**
         * Average company's number of employees for reference.
         */
        public Builder numberOfEmployees(long numberOfEmployees) {
            Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
            this.numberOfEmployees = Optional.ofNullable(numberOfEmployees);
            return this;
        }

        /**
         * Average company's number of employees for reference.
         */
        public Builder numberOfEmployees(Optional<Long> numberOfEmployees) {
            Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
            this.numberOfEmployees = numberOfEmployees;
            return this;
        }

        /**
         * Company's stock symbol if company is public.
         */
        public Builder stockSymbol(String stockSymbol) {
            Utils.checkNotNull(stockSymbol, "stockSymbol");
            this.stockSymbol = Optional.ofNullable(stockSymbol);
            return this;
        }

        /**
         * Company's stock symbol if company is public.
         */
        public Builder stockSymbol(Optional<String> stockSymbol) {
            Utils.checkNotNull(stockSymbol, "stockSymbol");
            this.stockSymbol = stockSymbol;
            return this;
        }

        /**
         * The date when the company was founded.
         */
        public Builder foundedDate(LocalDate foundedDate) {
            Utils.checkNotNull(foundedDate, "foundedDate");
            this.foundedDate = Optional.ofNullable(foundedDate);
            return this;
        }

        /**
         * The date when the company was founded.
         */
        public Builder foundedDate(Optional<LocalDate> foundedDate) {
            Utils.checkNotNull(foundedDate, "foundedDate");
            this.foundedDate = foundedDate;
            return this;
        }

        /**
         * User facing description of company.
         */
        public Builder about(String about) {
            Utils.checkNotNull(about, "about");
            this.about = Optional.ofNullable(about);
            return this;
        }

        /**
         * User facing description of company.
         */
        public Builder about(Optional<String> about) {
            Utils.checkNotNull(about, "about");
            this.about = about;
            return this;
        }
        
        public Company build() {
            return new Company(
                name,
                profileUrl,
                websiteUrls,
                logoUrl,
                location,
                phone,
                fax,
                industry,
                annualRevenue,
                numberOfEmployees,
                stockSymbol,
                foundedDate,
                about);
        }
    }
}
