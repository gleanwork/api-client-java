/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CreateDlpReportResponse {

    /**
     * Full policy information that will be used for scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report")
    private Optional<? extends DlpReport> report;

    @JsonCreator
    public CreateDlpReportResponse(
            @JsonProperty("report") Optional<? extends DlpReport> report) {
        Utils.checkNotNull(report, "report");
        this.report = report;
    }
    
    public CreateDlpReportResponse() {
        this(Optional.empty());
    }

    /**
     * Full policy information that will be used for scans.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpReport> report() {
        return (Optional<DlpReport>) report;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Full policy information that will be used for scans.
     */
    public CreateDlpReportResponse withReport(DlpReport report) {
        Utils.checkNotNull(report, "report");
        this.report = Optional.ofNullable(report);
        return this;
    }

    /**
     * Full policy information that will be used for scans.
     */
    public CreateDlpReportResponse withReport(Optional<? extends DlpReport> report) {
        Utils.checkNotNull(report, "report");
        this.report = report;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDlpReportResponse other = (CreateDlpReportResponse) o;
        return 
            Objects.deepEquals(this.report, other.report);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            report);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDlpReportResponse.class,
                "report", report);
    }
    
    public final static class Builder {
 
        private Optional<? extends DlpReport> report = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Full policy information that will be used for scans.
         */
        public Builder report(DlpReport report) {
            Utils.checkNotNull(report, "report");
            this.report = Optional.ofNullable(report);
            return this;
        }

        /**
         * Full policy information that will be used for scans.
         */
        public Builder report(Optional<? extends DlpReport> report) {
            Utils.checkNotNull(report, "report");
            this.report = report;
            return this;
        }
        
        public CreateDlpReportResponse build() {
            return new CreateDlpReportResponse(
                report);
        }
    }
}
