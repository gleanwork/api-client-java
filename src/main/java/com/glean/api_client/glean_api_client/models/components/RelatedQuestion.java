/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class RelatedQuestion {

    /**
     * The text of the related question
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question")
    private Optional<String> question;

    /**
     * The answer for the related question
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answer")
    private Optional<String> answer;

    /**
     * Subsections of the answer string to which some special formatting should be applied (eg. bold)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ranges")
    private Optional<? extends List<TextRange>> ranges;

    @JsonCreator
    public RelatedQuestion(
            @JsonProperty("question") Optional<String> question,
            @JsonProperty("answer") Optional<String> answer,
            @JsonProperty("ranges") Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(question, "question");
        Utils.checkNotNull(answer, "answer");
        Utils.checkNotNull(ranges, "ranges");
        this.question = question;
        this.answer = answer;
        this.ranges = ranges;
    }
    
    public RelatedQuestion() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The text of the related question
     */
    @JsonIgnore
    public Optional<String> question() {
        return question;
    }

    /**
     * The answer for the related question
     */
    @JsonIgnore
    public Optional<String> answer() {
        return answer;
    }

    /**
     * Subsections of the answer string to which some special formatting should be applied (eg. bold)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> ranges() {
        return (Optional<List<TextRange>>) ranges;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The text of the related question
     */
    public RelatedQuestion withQuestion(String question) {
        Utils.checkNotNull(question, "question");
        this.question = Optional.ofNullable(question);
        return this;
    }

    /**
     * The text of the related question
     */
    public RelatedQuestion withQuestion(Optional<String> question) {
        Utils.checkNotNull(question, "question");
        this.question = question;
        return this;
    }

    /**
     * The answer for the related question
     */
    public RelatedQuestion withAnswer(String answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = Optional.ofNullable(answer);
        return this;
    }

    /**
     * The answer for the related question
     */
    public RelatedQuestion withAnswer(Optional<String> answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = answer;
        return this;
    }

    /**
     * Subsections of the answer string to which some special formatting should be applied (eg. bold)
     */
    public RelatedQuestion withRanges(List<TextRange> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = Optional.ofNullable(ranges);
        return this;
    }

    /**
     * Subsections of the answer string to which some special formatting should be applied (eg. bold)
     */
    public RelatedQuestion withRanges(Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = ranges;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RelatedQuestion other = (RelatedQuestion) o;
        return 
            Utils.enhancedDeepEquals(this.question, other.question) &&
            Utils.enhancedDeepEquals(this.answer, other.answer) &&
            Utils.enhancedDeepEquals(this.ranges, other.ranges);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            question,
            answer,
            ranges);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RelatedQuestion.class,
                "question", question,
                "answer", answer,
                "ranges", ranges);
    }
    
    public final static class Builder {
 
        private Optional<String> question = Optional.empty();
 
        private Optional<String> answer = Optional.empty();
 
        private Optional<? extends List<TextRange>> ranges = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The text of the related question
         */
        public Builder question(String question) {
            Utils.checkNotNull(question, "question");
            this.question = Optional.ofNullable(question);
            return this;
        }

        /**
         * The text of the related question
         */
        public Builder question(Optional<String> question) {
            Utils.checkNotNull(question, "question");
            this.question = question;
            return this;
        }

        /**
         * The answer for the related question
         */
        public Builder answer(String answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = Optional.ofNullable(answer);
            return this;
        }

        /**
         * The answer for the related question
         */
        public Builder answer(Optional<String> answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = answer;
            return this;
        }

        /**
         * Subsections of the answer string to which some special formatting should be applied (eg. bold)
         */
        public Builder ranges(List<TextRange> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * Subsections of the answer string to which some special formatting should be applied (eg. bold)
         */
        public Builder ranges(Optional<? extends List<TextRange>> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = ranges;
            return this;
        }
        
        public RelatedQuestion build() {
            return new RelatedQuestion(
                question,
                answer,
                ranges);
        }
    }
}
