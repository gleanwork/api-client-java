/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class QuerySuggestion {

    /**
     * A query term missing from the original query on which this suggestion is based.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("missingTerm")
    private Optional<String> missingTerm;

    /**
     * The query being suggested (e.g. enforcing the missing term from the original query).
     */
    @JsonProperty("query")
    private String query;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchProviderInfo")
    private Optional<? extends SearchProviderInfo> searchProviderInfo;

    /**
     * A user-facing description to display for the suggestion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private Optional<String> label;

    /**
     * The datasource associated with the suggestion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestOptions")
    private Optional<? extends SearchRequestOptions> requestOptions;

    /**
     * The bolded ranges within the query of the QuerySuggestion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ranges")
    private Optional<? extends List<TextRange>> ranges;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputDetails")
    private Optional<? extends SearchRequestInputDetails> inputDetails;

    @JsonCreator
    public QuerySuggestion(
            @JsonProperty("missingTerm") Optional<String> missingTerm,
            @JsonProperty("query") String query,
            @JsonProperty("searchProviderInfo") Optional<? extends SearchProviderInfo> searchProviderInfo,
            @JsonProperty("label") Optional<String> label,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("requestOptions") Optional<? extends SearchRequestOptions> requestOptions,
            @JsonProperty("ranges") Optional<? extends List<TextRange>> ranges,
            @JsonProperty("inputDetails") Optional<? extends SearchRequestInputDetails> inputDetails) {
        Utils.checkNotNull(missingTerm, "missingTerm");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(searchProviderInfo, "searchProviderInfo");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(requestOptions, "requestOptions");
        Utils.checkNotNull(ranges, "ranges");
        Utils.checkNotNull(inputDetails, "inputDetails");
        this.missingTerm = missingTerm;
        this.query = query;
        this.searchProviderInfo = searchProviderInfo;
        this.label = label;
        this.datasource = datasource;
        this.requestOptions = requestOptions;
        this.ranges = ranges;
        this.inputDetails = inputDetails;
    }
    
    public QuerySuggestion(
            String query) {
        this(Optional.empty(), query, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A query term missing from the original query on which this suggestion is based.
     */
    @JsonIgnore
    public Optional<String> missingTerm() {
        return missingTerm;
    }

    /**
     * The query being suggested (e.g. enforcing the missing term from the original query).
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchProviderInfo> searchProviderInfo() {
        return (Optional<SearchProviderInfo>) searchProviderInfo;
    }

    /**
     * A user-facing description to display for the suggestion.
     */
    @JsonIgnore
    public Optional<String> label() {
        return label;
    }

    /**
     * The datasource associated with the suggestion.
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchRequestOptions> requestOptions() {
        return (Optional<SearchRequestOptions>) requestOptions;
    }

    /**
     * The bolded ranges within the query of the QuerySuggestion.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> ranges() {
        return (Optional<List<TextRange>>) ranges;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchRequestInputDetails> inputDetails() {
        return (Optional<SearchRequestInputDetails>) inputDetails;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A query term missing from the original query on which this suggestion is based.
     */
    public QuerySuggestion withMissingTerm(String missingTerm) {
        Utils.checkNotNull(missingTerm, "missingTerm");
        this.missingTerm = Optional.ofNullable(missingTerm);
        return this;
    }

    /**
     * A query term missing from the original query on which this suggestion is based.
     */
    public QuerySuggestion withMissingTerm(Optional<String> missingTerm) {
        Utils.checkNotNull(missingTerm, "missingTerm");
        this.missingTerm = missingTerm;
        return this;
    }

    /**
     * The query being suggested (e.g. enforcing the missing term from the original query).
     */
    public QuerySuggestion withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    public QuerySuggestion withSearchProviderInfo(SearchProviderInfo searchProviderInfo) {
        Utils.checkNotNull(searchProviderInfo, "searchProviderInfo");
        this.searchProviderInfo = Optional.ofNullable(searchProviderInfo);
        return this;
    }

    public QuerySuggestion withSearchProviderInfo(Optional<? extends SearchProviderInfo> searchProviderInfo) {
        Utils.checkNotNull(searchProviderInfo, "searchProviderInfo");
        this.searchProviderInfo = searchProviderInfo;
        return this;
    }

    /**
     * A user-facing description to display for the suggestion.
     */
    public QuerySuggestion withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }

    /**
     * A user-facing description to display for the suggestion.
     */
    public QuerySuggestion withLabel(Optional<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * The datasource associated with the suggestion.
     */
    public QuerySuggestion withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The datasource associated with the suggestion.
     */
    public QuerySuggestion withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    public QuerySuggestion withRequestOptions(SearchRequestOptions requestOptions) {
        Utils.checkNotNull(requestOptions, "requestOptions");
        this.requestOptions = Optional.ofNullable(requestOptions);
        return this;
    }

    public QuerySuggestion withRequestOptions(Optional<? extends SearchRequestOptions> requestOptions) {
        Utils.checkNotNull(requestOptions, "requestOptions");
        this.requestOptions = requestOptions;
        return this;
    }

    /**
     * The bolded ranges within the query of the QuerySuggestion.
     */
    public QuerySuggestion withRanges(List<TextRange> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = Optional.ofNullable(ranges);
        return this;
    }

    /**
     * The bolded ranges within the query of the QuerySuggestion.
     */
    public QuerySuggestion withRanges(Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = ranges;
        return this;
    }

    public QuerySuggestion withInputDetails(SearchRequestInputDetails inputDetails) {
        Utils.checkNotNull(inputDetails, "inputDetails");
        this.inputDetails = Optional.ofNullable(inputDetails);
        return this;
    }

    public QuerySuggestion withInputDetails(Optional<? extends SearchRequestInputDetails> inputDetails) {
        Utils.checkNotNull(inputDetails, "inputDetails");
        this.inputDetails = inputDetails;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySuggestion other = (QuerySuggestion) o;
        return 
            Utils.enhancedDeepEquals(this.missingTerm, other.missingTerm) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.searchProviderInfo, other.searchProviderInfo) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.requestOptions, other.requestOptions) &&
            Utils.enhancedDeepEquals(this.ranges, other.ranges) &&
            Utils.enhancedDeepEquals(this.inputDetails, other.inputDetails);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            missingTerm,
            query,
            searchProviderInfo,
            label,
            datasource,
            requestOptions,
            ranges,
            inputDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QuerySuggestion.class,
                "missingTerm", missingTerm,
                "query", query,
                "searchProviderInfo", searchProviderInfo,
                "label", label,
                "datasource", datasource,
                "requestOptions", requestOptions,
                "ranges", ranges,
                "inputDetails", inputDetails);
    }
    
    public final static class Builder {
 
        private Optional<String> missingTerm = Optional.empty();
 
        private String query;
 
        private Optional<? extends SearchProviderInfo> searchProviderInfo = Optional.empty();
 
        private Optional<String> label = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<? extends SearchRequestOptions> requestOptions = Optional.empty();
 
        private Optional<? extends List<TextRange>> ranges = Optional.empty();
 
        private Optional<? extends SearchRequestInputDetails> inputDetails = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A query term missing from the original query on which this suggestion is based.
         */
        public Builder missingTerm(String missingTerm) {
            Utils.checkNotNull(missingTerm, "missingTerm");
            this.missingTerm = Optional.ofNullable(missingTerm);
            return this;
        }

        /**
         * A query term missing from the original query on which this suggestion is based.
         */
        public Builder missingTerm(Optional<String> missingTerm) {
            Utils.checkNotNull(missingTerm, "missingTerm");
            this.missingTerm = missingTerm;
            return this;
        }

        /**
         * The query being suggested (e.g. enforcing the missing term from the original query).
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        public Builder searchProviderInfo(SearchProviderInfo searchProviderInfo) {
            Utils.checkNotNull(searchProviderInfo, "searchProviderInfo");
            this.searchProviderInfo = Optional.ofNullable(searchProviderInfo);
            return this;
        }

        public Builder searchProviderInfo(Optional<? extends SearchProviderInfo> searchProviderInfo) {
            Utils.checkNotNull(searchProviderInfo, "searchProviderInfo");
            this.searchProviderInfo = searchProviderInfo;
            return this;
        }

        /**
         * A user-facing description to display for the suggestion.
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * A user-facing description to display for the suggestion.
         */
        public Builder label(Optional<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * The datasource associated with the suggestion.
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The datasource associated with the suggestion.
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        public Builder requestOptions(SearchRequestOptions requestOptions) {
            Utils.checkNotNull(requestOptions, "requestOptions");
            this.requestOptions = Optional.ofNullable(requestOptions);
            return this;
        }

        public Builder requestOptions(Optional<? extends SearchRequestOptions> requestOptions) {
            Utils.checkNotNull(requestOptions, "requestOptions");
            this.requestOptions = requestOptions;
            return this;
        }

        /**
         * The bolded ranges within the query of the QuerySuggestion.
         */
        public Builder ranges(List<TextRange> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * The bolded ranges within the query of the QuerySuggestion.
         */
        public Builder ranges(Optional<? extends List<TextRange>> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = ranges;
            return this;
        }

        public Builder inputDetails(SearchRequestInputDetails inputDetails) {
            Utils.checkNotNull(inputDetails, "inputDetails");
            this.inputDetails = Optional.ofNullable(inputDetails);
            return this;
        }

        public Builder inputDetails(Optional<? extends SearchRequestInputDetails> inputDetails) {
            Utils.checkNotNull(inputDetails, "inputDetails");
            this.inputDetails = inputDetails;
            return this;
        }
        
        public QuerySuggestion build() {
            return new QuerySuggestion(
                missingTerm,
                query,
                searchProviderInfo,
                label,
                datasource,
                requestOptions,
                ranges,
                inputDetails);
        }
    }
}
