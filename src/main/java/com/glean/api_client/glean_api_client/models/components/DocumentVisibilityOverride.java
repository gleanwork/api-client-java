/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class DocumentVisibilityOverride {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docId")
    private Optional<String> docId;

    /**
     * The visibility-override state of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("override")
    private Optional<? extends DocumentVisibilityOverrideOverride> override;

    @JsonCreator
    public DocumentVisibilityOverride(
            @JsonProperty("docId") Optional<String> docId,
            @JsonProperty("override") Optional<? extends DocumentVisibilityOverrideOverride> override) {
        Utils.checkNotNull(docId, "docId");
        Utils.checkNotNull(override, "override");
        this.docId = docId;
        this.override = override;
    }
    
    public DocumentVisibilityOverride() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> docId() {
        return docId;
    }

    /**
     * The visibility-override state of the document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentVisibilityOverrideOverride> override() {
        return (Optional<DocumentVisibilityOverrideOverride>) override;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DocumentVisibilityOverride withDocId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = Optional.ofNullable(docId);
        return this;
    }

    public DocumentVisibilityOverride withDocId(Optional<String> docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }

    /**
     * The visibility-override state of the document.
     */
    public DocumentVisibilityOverride withOverride(DocumentVisibilityOverrideOverride override) {
        Utils.checkNotNull(override, "override");
        this.override = Optional.ofNullable(override);
        return this;
    }

    /**
     * The visibility-override state of the document.
     */
    public DocumentVisibilityOverride withOverride(Optional<? extends DocumentVisibilityOverrideOverride> override) {
        Utils.checkNotNull(override, "override");
        this.override = override;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentVisibilityOverride other = (DocumentVisibilityOverride) o;
        return 
            Utils.enhancedDeepEquals(this.docId, other.docId) &&
            Utils.enhancedDeepEquals(this.override, other.override);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            docId,
            override);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentVisibilityOverride.class,
                "docId", docId,
                "override", override);
    }
    
    public final static class Builder {
 
        private Optional<String> docId = Optional.empty();
 
        private Optional<? extends DocumentVisibilityOverrideOverride> override = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder docId(String docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = Optional.ofNullable(docId);
            return this;
        }

        public Builder docId(Optional<String> docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = docId;
            return this;
        }

        /**
         * The visibility-override state of the document.
         */
        public Builder override(DocumentVisibilityOverrideOverride override) {
            Utils.checkNotNull(override, "override");
            this.override = Optional.ofNullable(override);
            return this;
        }

        /**
         * The visibility-override state of the document.
         */
        public Builder override(Optional<? extends DocumentVisibilityOverrideOverride> override) {
            Utils.checkNotNull(override, "override");
            this.override = override;
            return this;
        }
        
        public DocumentVisibilityOverride build() {
            return new DocumentVisibilityOverride(
                docId,
                override);
        }
    }
}
