/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ListCollectionsRequest {

    /**
     * Whether to include the audience filters with the listed Collections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeAudience")
    private Optional<Boolean> includeAudience;

    /**
     * Whether to include the editor roles with the listed Collections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeRoles")
    private Optional<Boolean> includeRoles;

    /**
     * The datasource type this Collection can hold.
     * ANSWERS - for Collections representing answer boards
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedDatasource")
    private Optional<String> allowedDatasource;

    @JsonCreator
    public ListCollectionsRequest(
            @JsonProperty("includeAudience") Optional<Boolean> includeAudience,
            @JsonProperty("includeRoles") Optional<Boolean> includeRoles,
            @JsonProperty("allowedDatasource") Optional<String> allowedDatasource) {
        Utils.checkNotNull(includeAudience, "includeAudience");
        Utils.checkNotNull(includeRoles, "includeRoles");
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.includeAudience = includeAudience;
        this.includeRoles = includeRoles;
        this.allowedDatasource = allowedDatasource;
    }
    
    public ListCollectionsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether to include the audience filters with the listed Collections.
     */
    @JsonIgnore
    public Optional<Boolean> includeAudience() {
        return includeAudience;
    }

    /**
     * Whether to include the editor roles with the listed Collections.
     */
    @JsonIgnore
    public Optional<Boolean> includeRoles() {
        return includeRoles;
    }

    /**
     * The datasource type this Collection can hold.
     * ANSWERS - for Collections representing answer boards
     */
    @JsonIgnore
    public Optional<String> allowedDatasource() {
        return allowedDatasource;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether to include the audience filters with the listed Collections.
     */
    public ListCollectionsRequest withIncludeAudience(boolean includeAudience) {
        Utils.checkNotNull(includeAudience, "includeAudience");
        this.includeAudience = Optional.ofNullable(includeAudience);
        return this;
    }

    /**
     * Whether to include the audience filters with the listed Collections.
     */
    public ListCollectionsRequest withIncludeAudience(Optional<Boolean> includeAudience) {
        Utils.checkNotNull(includeAudience, "includeAudience");
        this.includeAudience = includeAudience;
        return this;
    }

    /**
     * Whether to include the editor roles with the listed Collections.
     */
    public ListCollectionsRequest withIncludeRoles(boolean includeRoles) {
        Utils.checkNotNull(includeRoles, "includeRoles");
        this.includeRoles = Optional.ofNullable(includeRoles);
        return this;
    }

    /**
     * Whether to include the editor roles with the listed Collections.
     */
    public ListCollectionsRequest withIncludeRoles(Optional<Boolean> includeRoles) {
        Utils.checkNotNull(includeRoles, "includeRoles");
        this.includeRoles = includeRoles;
        return this;
    }

    /**
     * The datasource type this Collection can hold.
     * ANSWERS - for Collections representing answer boards
     */
    public ListCollectionsRequest withAllowedDatasource(String allowedDatasource) {
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.allowedDatasource = Optional.ofNullable(allowedDatasource);
        return this;
    }

    /**
     * The datasource type this Collection can hold.
     * ANSWERS - for Collections representing answer boards
     */
    public ListCollectionsRequest withAllowedDatasource(Optional<String> allowedDatasource) {
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.allowedDatasource = allowedDatasource;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCollectionsRequest other = (ListCollectionsRequest) o;
        return 
            Objects.deepEquals(this.includeAudience, other.includeAudience) &&
            Objects.deepEquals(this.includeRoles, other.includeRoles) &&
            Objects.deepEquals(this.allowedDatasource, other.allowedDatasource);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            includeAudience,
            includeRoles,
            allowedDatasource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCollectionsRequest.class,
                "includeAudience", includeAudience,
                "includeRoles", includeRoles,
                "allowedDatasource", allowedDatasource);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> includeAudience = Optional.empty();
 
        private Optional<Boolean> includeRoles = Optional.empty();
 
        private Optional<String> allowedDatasource = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to include the audience filters with the listed Collections.
         */
        public Builder includeAudience(boolean includeAudience) {
            Utils.checkNotNull(includeAudience, "includeAudience");
            this.includeAudience = Optional.ofNullable(includeAudience);
            return this;
        }

        /**
         * Whether to include the audience filters with the listed Collections.
         */
        public Builder includeAudience(Optional<Boolean> includeAudience) {
            Utils.checkNotNull(includeAudience, "includeAudience");
            this.includeAudience = includeAudience;
            return this;
        }

        /**
         * Whether to include the editor roles with the listed Collections.
         */
        public Builder includeRoles(boolean includeRoles) {
            Utils.checkNotNull(includeRoles, "includeRoles");
            this.includeRoles = Optional.ofNullable(includeRoles);
            return this;
        }

        /**
         * Whether to include the editor roles with the listed Collections.
         */
        public Builder includeRoles(Optional<Boolean> includeRoles) {
            Utils.checkNotNull(includeRoles, "includeRoles");
            this.includeRoles = includeRoles;
            return this;
        }

        /**
         * The datasource type this Collection can hold.
         * ANSWERS - for Collections representing answer boards
         */
        public Builder allowedDatasource(String allowedDatasource) {
            Utils.checkNotNull(allowedDatasource, "allowedDatasource");
            this.allowedDatasource = Optional.ofNullable(allowedDatasource);
            return this;
        }

        /**
         * The datasource type this Collection can hold.
         * ANSWERS - for Collections representing answer boards
         */
        public Builder allowedDatasource(Optional<String> allowedDatasource) {
            Utils.checkNotNull(allowedDatasource, "allowedDatasource");
            this.allowedDatasource = allowedDatasource;
            return this;
        }
        
        public ListCollectionsRequest build() {
            return new ListCollectionsRequest(
                includeAudience,
                includeRoles,
                allowedDatasource);
        }
    }
}
