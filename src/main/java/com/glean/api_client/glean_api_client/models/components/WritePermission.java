/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * WritePermission
 * 
 * <p>Describes the write permissions levels that a user has for a specific feature
 */
public class WritePermission {

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopeType")
    private Optional<? extends ScopeType> scopeType;

    /**
     * True if user has create permission for this feature and scope
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create")
    private Optional<Boolean> create;

    /**
     * True if user has update permission for this feature and scope
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update")
    private Optional<Boolean> update;

    /**
     * True if user has delete permission for this feature and scope
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete")
    private Optional<Boolean> delete;

    @JsonCreator
    public WritePermission(
            @JsonProperty("scopeType") Optional<? extends ScopeType> scopeType,
            @JsonProperty("create") Optional<Boolean> create,
            @JsonProperty("update") Optional<Boolean> update,
            @JsonProperty("delete") Optional<Boolean> delete) {
        Utils.checkNotNull(scopeType, "scopeType");
        Utils.checkNotNull(create, "create");
        Utils.checkNotNull(update, "update");
        Utils.checkNotNull(delete, "delete");
        this.scopeType = scopeType;
        this.create = create;
        this.update = update;
        this.delete = delete;
    }
    
    public WritePermission() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ScopeType> scopeType() {
        return (Optional<ScopeType>) scopeType;
    }

    /**
     * True if user has create permission for this feature and scope
     */
    @JsonIgnore
    public Optional<Boolean> create() {
        return create;
    }

    /**
     * True if user has update permission for this feature and scope
     */
    @JsonIgnore
    public Optional<Boolean> update() {
        return update;
    }

    /**
     * True if user has delete permission for this feature and scope
     */
    @JsonIgnore
    public Optional<Boolean> delete() {
        return delete;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    public WritePermission withScopeType(ScopeType scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = Optional.ofNullable(scopeType);
        return this;
    }

    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    public WritePermission withScopeType(Optional<? extends ScopeType> scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = scopeType;
        return this;
    }

    /**
     * True if user has create permission for this feature and scope
     */
    public WritePermission withCreate(boolean create) {
        Utils.checkNotNull(create, "create");
        this.create = Optional.ofNullable(create);
        return this;
    }

    /**
     * True if user has create permission for this feature and scope
     */
    public WritePermission withCreate(Optional<Boolean> create) {
        Utils.checkNotNull(create, "create");
        this.create = create;
        return this;
    }

    /**
     * True if user has update permission for this feature and scope
     */
    public WritePermission withUpdate(boolean update) {
        Utils.checkNotNull(update, "update");
        this.update = Optional.ofNullable(update);
        return this;
    }

    /**
     * True if user has update permission for this feature and scope
     */
    public WritePermission withUpdate(Optional<Boolean> update) {
        Utils.checkNotNull(update, "update");
        this.update = update;
        return this;
    }

    /**
     * True if user has delete permission for this feature and scope
     */
    public WritePermission withDelete(boolean delete) {
        Utils.checkNotNull(delete, "delete");
        this.delete = Optional.ofNullable(delete);
        return this;
    }

    /**
     * True if user has delete permission for this feature and scope
     */
    public WritePermission withDelete(Optional<Boolean> delete) {
        Utils.checkNotNull(delete, "delete");
        this.delete = delete;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WritePermission other = (WritePermission) o;
        return 
            Objects.deepEquals(this.scopeType, other.scopeType) &&
            Objects.deepEquals(this.create, other.create) &&
            Objects.deepEquals(this.update, other.update) &&
            Objects.deepEquals(this.delete, other.delete);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            scopeType,
            create,
            update,
            delete);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WritePermission.class,
                "scopeType", scopeType,
                "create", create,
                "update", update,
                "delete", delete);
    }
    
    public final static class Builder {
 
        private Optional<? extends ScopeType> scopeType = Optional.empty();
 
        private Optional<Boolean> create = Optional.empty();
 
        private Optional<Boolean> update = Optional.empty();
 
        private Optional<Boolean> delete = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
         */
        public Builder scopeType(ScopeType scopeType) {
            Utils.checkNotNull(scopeType, "scopeType");
            this.scopeType = Optional.ofNullable(scopeType);
            return this;
        }

        /**
         * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
         */
        public Builder scopeType(Optional<? extends ScopeType> scopeType) {
            Utils.checkNotNull(scopeType, "scopeType");
            this.scopeType = scopeType;
            return this;
        }

        /**
         * True if user has create permission for this feature and scope
         */
        public Builder create(boolean create) {
            Utils.checkNotNull(create, "create");
            this.create = Optional.ofNullable(create);
            return this;
        }

        /**
         * True if user has create permission for this feature and scope
         */
        public Builder create(Optional<Boolean> create) {
            Utils.checkNotNull(create, "create");
            this.create = create;
            return this;
        }

        /**
         * True if user has update permission for this feature and scope
         */
        public Builder update(boolean update) {
            Utils.checkNotNull(update, "update");
            this.update = Optional.ofNullable(update);
            return this;
        }

        /**
         * True if user has update permission for this feature and scope
         */
        public Builder update(Optional<Boolean> update) {
            Utils.checkNotNull(update, "update");
            this.update = update;
            return this;
        }

        /**
         * True if user has delete permission for this feature and scope
         */
        public Builder delete(boolean delete) {
            Utils.checkNotNull(delete, "delete");
            this.delete = Optional.ofNullable(delete);
            return this;
        }

        /**
         * True if user has delete permission for this feature and scope
         */
        public Builder delete(Optional<Boolean> delete) {
            Utils.checkNotNull(delete, "delete");
            this.delete = delete;
            return this;
        }
        
        public WritePermission build() {
            return new WritePermission(
                scopeType,
                create,
                update,
                delete);
        }
    }
}
