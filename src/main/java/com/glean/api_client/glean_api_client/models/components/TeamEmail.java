/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * TeamEmail
 * 
 * <p>Information about a team's email
 */
public class TeamEmail {

    /**
     * An email address
     */
    @JsonProperty("email")
    private String email;

    /**
     * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public TeamEmail(
            @JsonProperty("email") String email,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(type, "type");
        this.email = email;
        this.type = type;
    }
    
    public TeamEmail(
            String email) {
        this(email, Optional.empty());
    }

    /**
     * An email address
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An email address
     */
    public TeamEmail withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
     */
    public TeamEmail withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
     */
    public TeamEmail withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeamEmail other = (TeamEmail) o;
        return 
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            email,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TeamEmail.class,
                "email", email,
                "type", type);
    }
    
    public final static class Builder {
 
        private String email;
 
        private Optional<String> type;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An email address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public TeamEmail build() {
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }
            return new TeamEmail(
                email,
                type);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"OTHER\"",
                        new TypeReference<Optional<String>>() {});
    }
}
