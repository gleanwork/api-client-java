/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CustomFieldData {

    /**
     * A user-facing label for this field.
     */
    @JsonProperty("label")
    private String label;

    @JsonProperty("values")
    private List<CustomFieldValue> values;

    /**
     * Determines whether the client should display this custom field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayable")
    private Optional<Boolean> displayable;

    @JsonCreator
    public CustomFieldData(
            @JsonProperty("label") String label,
            @JsonProperty("values") List<CustomFieldValue> values,
            @JsonProperty("displayable") Optional<Boolean> displayable) {
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(values, "values");
        Utils.checkNotNull(displayable, "displayable");
        this.label = label;
        this.values = values;
        this.displayable = displayable;
    }
    
    public CustomFieldData(
            String label,
            List<CustomFieldValue> values) {
        this(label, values, Optional.empty());
    }

    /**
     * A user-facing label for this field.
     */
    @JsonIgnore
    public String label() {
        return label;
    }

    @JsonIgnore
    public List<CustomFieldValue> values() {
        return values;
    }

    /**
     * Determines whether the client should display this custom field
     */
    @JsonIgnore
    public Optional<Boolean> displayable() {
        return displayable;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A user-facing label for this field.
     */
    public CustomFieldData withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public CustomFieldData withValues(List<CustomFieldValue> values) {
        Utils.checkNotNull(values, "values");
        this.values = values;
        return this;
    }

    /**
     * Determines whether the client should display this custom field
     */
    public CustomFieldData withDisplayable(boolean displayable) {
        Utils.checkNotNull(displayable, "displayable");
        this.displayable = Optional.ofNullable(displayable);
        return this;
    }

    /**
     * Determines whether the client should display this custom field
     */
    public CustomFieldData withDisplayable(Optional<Boolean> displayable) {
        Utils.checkNotNull(displayable, "displayable");
        this.displayable = displayable;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomFieldData other = (CustomFieldData) o;
        return 
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.values, other.values) &&
            Objects.deepEquals(this.displayable, other.displayable);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            label,
            values,
            displayable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomFieldData.class,
                "label", label,
                "values", values,
                "displayable", displayable);
    }
    
    public final static class Builder {
 
        private String label;
 
        private List<CustomFieldValue> values;
 
        private Optional<Boolean> displayable;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A user-facing label for this field.
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder values(List<CustomFieldValue> values) {
            Utils.checkNotNull(values, "values");
            this.values = values;
            return this;
        }

        /**
         * Determines whether the client should display this custom field
         */
        public Builder displayable(boolean displayable) {
            Utils.checkNotNull(displayable, "displayable");
            this.displayable = Optional.ofNullable(displayable);
            return this;
        }

        /**
         * Determines whether the client should display this custom field
         */
        public Builder displayable(Optional<Boolean> displayable) {
            Utils.checkNotNull(displayable, "displayable");
            this.displayable = displayable;
            return this;
        }
        
        public CustomFieldData build() {
            if (displayable == null) {
                displayable = _SINGLETON_VALUE_Displayable.value();
            }
            return new CustomFieldData(
                label,
                values,
                displayable);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Displayable =
                new LazySingletonValue<>(
                        "displayable",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
