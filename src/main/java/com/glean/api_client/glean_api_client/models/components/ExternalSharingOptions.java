/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * ExternalSharingOptions
 * 
 * <p>Controls how "shared" a document must be to get picked for scans.
 * 
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
@Deprecated
public class ExternalSharingOptions {

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    @Deprecated
    private Optional<Boolean> enabled;

    /**
     * The minimum number of users the document is shared with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("threshold")
    private Optional<Long> threshold;

    /**
     * Documents will be filtered based on how many people have access to it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thresholdEnabled")
    private Optional<Boolean> thresholdEnabled;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anyoneWithLinkEnabled")
    @Deprecated
    private Optional<Boolean> anyoneWithLinkEnabled;

    /**
     * Only users within the organization can access the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anyoneInternalEnabled")
    private Optional<Boolean> anyoneInternalEnabled;

    /**
     * Anyone on the internet can access the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymousAccessEnabled")
    private Optional<Boolean> anonymousAccessEnabled;

    /**
     * Enable user access check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAccessEnabled")
    private Optional<Boolean> userAccessEnabled;

    /**
     * Any one of the specified users can access the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userIds")
    private Optional<? extends List<String>> userIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainAccessEnabled")
    private Optional<Boolean> domainAccessEnabled;

    @JsonCreator
    public ExternalSharingOptions(
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("threshold") Optional<Long> threshold,
            @JsonProperty("thresholdEnabled") Optional<Boolean> thresholdEnabled,
            @JsonProperty("anyoneWithLinkEnabled") Optional<Boolean> anyoneWithLinkEnabled,
            @JsonProperty("anyoneInternalEnabled") Optional<Boolean> anyoneInternalEnabled,
            @JsonProperty("anonymousAccessEnabled") Optional<Boolean> anonymousAccessEnabled,
            @JsonProperty("userAccessEnabled") Optional<Boolean> userAccessEnabled,
            @JsonProperty("userIds") Optional<? extends List<String>> userIds,
            @JsonProperty("domainAccessEnabled") Optional<Boolean> domainAccessEnabled) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(threshold, "threshold");
        Utils.checkNotNull(thresholdEnabled, "thresholdEnabled");
        Utils.checkNotNull(anyoneWithLinkEnabled, "anyoneWithLinkEnabled");
        Utils.checkNotNull(anyoneInternalEnabled, "anyoneInternalEnabled");
        Utils.checkNotNull(anonymousAccessEnabled, "anonymousAccessEnabled");
        Utils.checkNotNull(userAccessEnabled, "userAccessEnabled");
        Utils.checkNotNull(userIds, "userIds");
        Utils.checkNotNull(domainAccessEnabled, "domainAccessEnabled");
        this.enabled = enabled;
        this.threshold = threshold;
        this.thresholdEnabled = thresholdEnabled;
        this.anyoneWithLinkEnabled = anyoneWithLinkEnabled;
        this.anyoneInternalEnabled = anyoneInternalEnabled;
        this.anonymousAccessEnabled = anonymousAccessEnabled;
        this.userAccessEnabled = userAccessEnabled;
        this.userIds = userIds;
        this.domainAccessEnabled = domainAccessEnabled;
    }
    
    public ExternalSharingOptions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * The minimum number of users the document is shared with.
     */
    @JsonIgnore
    public Optional<Long> threshold() {
        return threshold;
    }

    /**
     * Documents will be filtered based on how many people have access to it.
     */
    @JsonIgnore
    public Optional<Boolean> thresholdEnabled() {
        return thresholdEnabled;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> anyoneWithLinkEnabled() {
        return anyoneWithLinkEnabled;
    }

    /**
     * Only users within the organization can access the document.
     */
    @JsonIgnore
    public Optional<Boolean> anyoneInternalEnabled() {
        return anyoneInternalEnabled;
    }

    /**
     * Anyone on the internet can access the document.
     */
    @JsonIgnore
    public Optional<Boolean> anonymousAccessEnabled() {
        return anonymousAccessEnabled;
    }

    /**
     * Enable user access check
     */
    @JsonIgnore
    public Optional<Boolean> userAccessEnabled() {
        return userAccessEnabled;
    }

    /**
     * Any one of the specified users can access the document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> userIds() {
        return (Optional<List<String>>) userIds;
    }

    @JsonIgnore
    public Optional<Boolean> domainAccessEnabled() {
        return domainAccessEnabled;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ExternalSharingOptions withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ExternalSharingOptions withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * The minimum number of users the document is shared with.
     */
    public ExternalSharingOptions withThreshold(long threshold) {
        Utils.checkNotNull(threshold, "threshold");
        this.threshold = Optional.ofNullable(threshold);
        return this;
    }

    /**
     * The minimum number of users the document is shared with.
     */
    public ExternalSharingOptions withThreshold(Optional<Long> threshold) {
        Utils.checkNotNull(threshold, "threshold");
        this.threshold = threshold;
        return this;
    }

    /**
     * Documents will be filtered based on how many people have access to it.
     */
    public ExternalSharingOptions withThresholdEnabled(boolean thresholdEnabled) {
        Utils.checkNotNull(thresholdEnabled, "thresholdEnabled");
        this.thresholdEnabled = Optional.ofNullable(thresholdEnabled);
        return this;
    }

    /**
     * Documents will be filtered based on how many people have access to it.
     */
    public ExternalSharingOptions withThresholdEnabled(Optional<Boolean> thresholdEnabled) {
        Utils.checkNotNull(thresholdEnabled, "thresholdEnabled");
        this.thresholdEnabled = thresholdEnabled;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ExternalSharingOptions withAnyoneWithLinkEnabled(boolean anyoneWithLinkEnabled) {
        Utils.checkNotNull(anyoneWithLinkEnabled, "anyoneWithLinkEnabled");
        this.anyoneWithLinkEnabled = Optional.ofNullable(anyoneWithLinkEnabled);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ExternalSharingOptions withAnyoneWithLinkEnabled(Optional<Boolean> anyoneWithLinkEnabled) {
        Utils.checkNotNull(anyoneWithLinkEnabled, "anyoneWithLinkEnabled");
        this.anyoneWithLinkEnabled = anyoneWithLinkEnabled;
        return this;
    }

    /**
     * Only users within the organization can access the document.
     */
    public ExternalSharingOptions withAnyoneInternalEnabled(boolean anyoneInternalEnabled) {
        Utils.checkNotNull(anyoneInternalEnabled, "anyoneInternalEnabled");
        this.anyoneInternalEnabled = Optional.ofNullable(anyoneInternalEnabled);
        return this;
    }

    /**
     * Only users within the organization can access the document.
     */
    public ExternalSharingOptions withAnyoneInternalEnabled(Optional<Boolean> anyoneInternalEnabled) {
        Utils.checkNotNull(anyoneInternalEnabled, "anyoneInternalEnabled");
        this.anyoneInternalEnabled = anyoneInternalEnabled;
        return this;
    }

    /**
     * Anyone on the internet can access the document.
     */
    public ExternalSharingOptions withAnonymousAccessEnabled(boolean anonymousAccessEnabled) {
        Utils.checkNotNull(anonymousAccessEnabled, "anonymousAccessEnabled");
        this.anonymousAccessEnabled = Optional.ofNullable(anonymousAccessEnabled);
        return this;
    }

    /**
     * Anyone on the internet can access the document.
     */
    public ExternalSharingOptions withAnonymousAccessEnabled(Optional<Boolean> anonymousAccessEnabled) {
        Utils.checkNotNull(anonymousAccessEnabled, "anonymousAccessEnabled");
        this.anonymousAccessEnabled = anonymousAccessEnabled;
        return this;
    }

    /**
     * Enable user access check
     */
    public ExternalSharingOptions withUserAccessEnabled(boolean userAccessEnabled) {
        Utils.checkNotNull(userAccessEnabled, "userAccessEnabled");
        this.userAccessEnabled = Optional.ofNullable(userAccessEnabled);
        return this;
    }

    /**
     * Enable user access check
     */
    public ExternalSharingOptions withUserAccessEnabled(Optional<Boolean> userAccessEnabled) {
        Utils.checkNotNull(userAccessEnabled, "userAccessEnabled");
        this.userAccessEnabled = userAccessEnabled;
        return this;
    }

    /**
     * Any one of the specified users can access the document.
     */
    public ExternalSharingOptions withUserIds(List<String> userIds) {
        Utils.checkNotNull(userIds, "userIds");
        this.userIds = Optional.ofNullable(userIds);
        return this;
    }

    /**
     * Any one of the specified users can access the document.
     */
    public ExternalSharingOptions withUserIds(Optional<? extends List<String>> userIds) {
        Utils.checkNotNull(userIds, "userIds");
        this.userIds = userIds;
        return this;
    }

    public ExternalSharingOptions withDomainAccessEnabled(boolean domainAccessEnabled) {
        Utils.checkNotNull(domainAccessEnabled, "domainAccessEnabled");
        this.domainAccessEnabled = Optional.ofNullable(domainAccessEnabled);
        return this;
    }

    public ExternalSharingOptions withDomainAccessEnabled(Optional<Boolean> domainAccessEnabled) {
        Utils.checkNotNull(domainAccessEnabled, "domainAccessEnabled");
        this.domainAccessEnabled = domainAccessEnabled;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalSharingOptions other = (ExternalSharingOptions) o;
        return 
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.threshold, other.threshold) &&
            Utils.enhancedDeepEquals(this.thresholdEnabled, other.thresholdEnabled) &&
            Utils.enhancedDeepEquals(this.anyoneWithLinkEnabled, other.anyoneWithLinkEnabled) &&
            Utils.enhancedDeepEquals(this.anyoneInternalEnabled, other.anyoneInternalEnabled) &&
            Utils.enhancedDeepEquals(this.anonymousAccessEnabled, other.anonymousAccessEnabled) &&
            Utils.enhancedDeepEquals(this.userAccessEnabled, other.userAccessEnabled) &&
            Utils.enhancedDeepEquals(this.userIds, other.userIds) &&
            Utils.enhancedDeepEquals(this.domainAccessEnabled, other.domainAccessEnabled);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            enabled,
            threshold,
            thresholdEnabled,
            anyoneWithLinkEnabled,
            anyoneInternalEnabled,
            anonymousAccessEnabled,
            userAccessEnabled,
            userIds,
            domainAccessEnabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExternalSharingOptions.class,
                "enabled", enabled,
                "threshold", threshold,
                "thresholdEnabled", thresholdEnabled,
                "anyoneWithLinkEnabled", anyoneWithLinkEnabled,
                "anyoneInternalEnabled", anyoneInternalEnabled,
                "anonymousAccessEnabled", anonymousAccessEnabled,
                "userAccessEnabled", userAccessEnabled,
                "userIds", userIds,
                "domainAccessEnabled", domainAccessEnabled);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<Boolean> enabled = Optional.empty();
 
        private Optional<Long> threshold = Optional.empty();
 
        private Optional<Boolean> thresholdEnabled = Optional.empty();
 
        @Deprecated
        private Optional<Boolean> anyoneWithLinkEnabled = Optional.empty();
 
        private Optional<Boolean> anyoneInternalEnabled = Optional.empty();
 
        private Optional<Boolean> anonymousAccessEnabled = Optional.empty();
 
        private Optional<Boolean> userAccessEnabled = Optional.empty();
 
        private Optional<? extends List<String>> userIds = Optional.empty();
 
        private Optional<Boolean> domainAccessEnabled = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * The minimum number of users the document is shared with.
         */
        public Builder threshold(long threshold) {
            Utils.checkNotNull(threshold, "threshold");
            this.threshold = Optional.ofNullable(threshold);
            return this;
        }

        /**
         * The minimum number of users the document is shared with.
         */
        public Builder threshold(Optional<Long> threshold) {
            Utils.checkNotNull(threshold, "threshold");
            this.threshold = threshold;
            return this;
        }

        /**
         * Documents will be filtered based on how many people have access to it.
         */
        public Builder thresholdEnabled(boolean thresholdEnabled) {
            Utils.checkNotNull(thresholdEnabled, "thresholdEnabled");
            this.thresholdEnabled = Optional.ofNullable(thresholdEnabled);
            return this;
        }

        /**
         * Documents will be filtered based on how many people have access to it.
         */
        public Builder thresholdEnabled(Optional<Boolean> thresholdEnabled) {
            Utils.checkNotNull(thresholdEnabled, "thresholdEnabled");
            this.thresholdEnabled = thresholdEnabled;
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder anyoneWithLinkEnabled(boolean anyoneWithLinkEnabled) {
            Utils.checkNotNull(anyoneWithLinkEnabled, "anyoneWithLinkEnabled");
            this.anyoneWithLinkEnabled = Optional.ofNullable(anyoneWithLinkEnabled);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder anyoneWithLinkEnabled(Optional<Boolean> anyoneWithLinkEnabled) {
            Utils.checkNotNull(anyoneWithLinkEnabled, "anyoneWithLinkEnabled");
            this.anyoneWithLinkEnabled = anyoneWithLinkEnabled;
            return this;
        }

        /**
         * Only users within the organization can access the document.
         */
        public Builder anyoneInternalEnabled(boolean anyoneInternalEnabled) {
            Utils.checkNotNull(anyoneInternalEnabled, "anyoneInternalEnabled");
            this.anyoneInternalEnabled = Optional.ofNullable(anyoneInternalEnabled);
            return this;
        }

        /**
         * Only users within the organization can access the document.
         */
        public Builder anyoneInternalEnabled(Optional<Boolean> anyoneInternalEnabled) {
            Utils.checkNotNull(anyoneInternalEnabled, "anyoneInternalEnabled");
            this.anyoneInternalEnabled = anyoneInternalEnabled;
            return this;
        }

        /**
         * Anyone on the internet can access the document.
         */
        public Builder anonymousAccessEnabled(boolean anonymousAccessEnabled) {
            Utils.checkNotNull(anonymousAccessEnabled, "anonymousAccessEnabled");
            this.anonymousAccessEnabled = Optional.ofNullable(anonymousAccessEnabled);
            return this;
        }

        /**
         * Anyone on the internet can access the document.
         */
        public Builder anonymousAccessEnabled(Optional<Boolean> anonymousAccessEnabled) {
            Utils.checkNotNull(anonymousAccessEnabled, "anonymousAccessEnabled");
            this.anonymousAccessEnabled = anonymousAccessEnabled;
            return this;
        }

        /**
         * Enable user access check
         */
        public Builder userAccessEnabled(boolean userAccessEnabled) {
            Utils.checkNotNull(userAccessEnabled, "userAccessEnabled");
            this.userAccessEnabled = Optional.ofNullable(userAccessEnabled);
            return this;
        }

        /**
         * Enable user access check
         */
        public Builder userAccessEnabled(Optional<Boolean> userAccessEnabled) {
            Utils.checkNotNull(userAccessEnabled, "userAccessEnabled");
            this.userAccessEnabled = userAccessEnabled;
            return this;
        }

        /**
         * Any one of the specified users can access the document.
         */
        public Builder userIds(List<String> userIds) {
            Utils.checkNotNull(userIds, "userIds");
            this.userIds = Optional.ofNullable(userIds);
            return this;
        }

        /**
         * Any one of the specified users can access the document.
         */
        public Builder userIds(Optional<? extends List<String>> userIds) {
            Utils.checkNotNull(userIds, "userIds");
            this.userIds = userIds;
            return this;
        }

        public Builder domainAccessEnabled(boolean domainAccessEnabled) {
            Utils.checkNotNull(domainAccessEnabled, "domainAccessEnabled");
            this.domainAccessEnabled = Optional.ofNullable(domainAccessEnabled);
            return this;
        }

        public Builder domainAccessEnabled(Optional<Boolean> domainAccessEnabled) {
            Utils.checkNotNull(domainAccessEnabled, "domainAccessEnabled");
            this.domainAccessEnabled = domainAccessEnabled;
            return this;
        }
        
        public ExternalSharingOptions build() {
            return new ExternalSharingOptions(
                enabled,
                threshold,
                thresholdEnabled,
                anyoneWithLinkEnabled,
                anyoneInternalEnabled,
                anonymousAccessEnabled,
                userAccessEnabled,
                userIds,
                domainAccessEnabled);
        }
    }
}
