/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class GetdocvisibilityRequest {

    /**
     * List of doc-ids which will have their hide status fetched.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=docIds")
    private Optional<? extends List<String>> docIds;

    @JsonCreator
    public GetdocvisibilityRequest(
            Optional<? extends List<String>> docIds) {
        Utils.checkNotNull(docIds, "docIds");
        this.docIds = docIds;
    }
    
    public GetdocvisibilityRequest() {
        this(Optional.empty());
    }

    /**
     * List of doc-ids which will have their hide status fetched.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> docIds() {
        return (Optional<List<String>>) docIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of doc-ids which will have their hide status fetched.
     */
    public GetdocvisibilityRequest withDocIds(List<String> docIds) {
        Utils.checkNotNull(docIds, "docIds");
        this.docIds = Optional.ofNullable(docIds);
        return this;
    }

    /**
     * List of doc-ids which will have their hide status fetched.
     */
    public GetdocvisibilityRequest withDocIds(Optional<? extends List<String>> docIds) {
        Utils.checkNotNull(docIds, "docIds");
        this.docIds = docIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetdocvisibilityRequest other = (GetdocvisibilityRequest) o;
        return 
            Utils.enhancedDeepEquals(this.docIds, other.docIds);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            docIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetdocvisibilityRequest.class,
                "docIds", docIds);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> docIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of doc-ids which will have their hide status fetched.
         */
        public Builder docIds(List<String> docIds) {
            Utils.checkNotNull(docIds, "docIds");
            this.docIds = Optional.ofNullable(docIds);
            return this;
        }

        /**
         * List of doc-ids which will have their hide status fetched.
         */
        public Builder docIds(Optional<? extends List<String>> docIds) {
            Utils.checkNotNull(docIds, "docIds");
            this.docIds = docIds;
            return this;
        }
        
        public GetdocvisibilityRequest build() {
            return new GetdocvisibilityRequest(
                docIds);
        }
    }
}
