/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class ListCollectionsResponse {

    /**
     * List of all Collections, no Collection items are fetched.
     */
    @JsonProperty("collections")
    private List<Collection> collections;

    @JsonCreator
    public ListCollectionsResponse(
            @JsonProperty("collections") List<Collection> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = collections;
    }

    /**
     * List of all Collections, no Collection items are fetched.
     */
    @JsonIgnore
    public List<Collection> collections() {
        return collections;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * List of all Collections, no Collection items are fetched.
     */
    public ListCollectionsResponse withCollections(List<Collection> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = collections;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCollectionsResponse other = (ListCollectionsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.collections, other.collections);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            collections);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCollectionsResponse.class,
                "collections", collections);
    }
    
    public final static class Builder {
 
        private List<Collection> collections;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of all Collections, no Collection items are fetched.
         */
        public Builder collections(List<Collection> collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = collections;
            return this;
        }
        
        public ListCollectionsResponse build() {
            return new ListCollectionsResponse(
                collections);
        }
    }
}
