/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;

/**
 * IndexDocumentsRequest
 * 
 * <p>Describes the request body of the /indexdocuments API call
 */
public class IndexDocumentsRequest {

    /**
     * Optional id parameter to identify and track a batch of documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadId")
    private Optional<String> uploadId;

    /**
     * Datasource of the documents
     */
    @JsonProperty("datasource")
    private String datasource;

    /**
     * Batch of documents being added/updated
     */
    @JsonProperty("documents")
    private List<DocumentDefinition> documents;

    @JsonCreator
    public IndexDocumentsRequest(
            @JsonProperty("uploadId") Optional<String> uploadId,
            @JsonProperty("datasource") String datasource,
            @JsonProperty("documents") List<DocumentDefinition> documents) {
        Utils.checkNotNull(uploadId, "uploadId");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(documents, "documents");
        this.uploadId = uploadId;
        this.datasource = datasource;
        this.documents = documents;
    }
    
    public IndexDocumentsRequest(
            String datasource,
            List<DocumentDefinition> documents) {
        this(Optional.empty(), datasource, documents);
    }

    /**
     * Optional id parameter to identify and track a batch of documents.
     */
    @JsonIgnore
    public Optional<String> uploadId() {
        return uploadId;
    }

    /**
     * Datasource of the documents
     */
    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * Batch of documents being added/updated
     */
    @JsonIgnore
    public List<DocumentDefinition> documents() {
        return documents;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Optional id parameter to identify and track a batch of documents.
     */
    public IndexDocumentsRequest withUploadId(String uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = Optional.ofNullable(uploadId);
        return this;
    }

    /**
     * Optional id parameter to identify and track a batch of documents.
     */
    public IndexDocumentsRequest withUploadId(Optional<String> uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = uploadId;
        return this;
    }

    /**
     * Datasource of the documents
     */
    public IndexDocumentsRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * Batch of documents being added/updated
     */
    public IndexDocumentsRequest withDocuments(List<DocumentDefinition> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexDocumentsRequest other = (IndexDocumentsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.uploadId, other.uploadId) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.documents, other.documents);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uploadId,
            datasource,
            documents);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndexDocumentsRequest.class,
                "uploadId", uploadId,
                "datasource", datasource,
                "documents", documents);
    }
    
    public final static class Builder {
 
        private Optional<String> uploadId = Optional.empty();
 
        private String datasource;
 
        private List<DocumentDefinition> documents;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optional id parameter to identify and track a batch of documents.
         */
        public Builder uploadId(String uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = Optional.ofNullable(uploadId);
            return this;
        }

        /**
         * Optional id parameter to identify and track a batch of documents.
         */
        public Builder uploadId(Optional<String> uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = uploadId;
            return this;
        }

        /**
         * Datasource of the documents
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * Batch of documents being added/updated
         */
        public Builder documents(List<DocumentDefinition> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }
        
        public IndexDocumentsRequest build() {
            return new IndexDocumentsRequest(
                uploadId,
                datasource,
                documents);
        }
    }
}
