/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * IndexEmployeeRequest
 * 
 * <p>Info about an employee and optional version for that info
 */
public class IndexEmployeeRequest {

    /**
     * Describes employee info
     */
    @JsonProperty("employee")
    private EmployeeInfoDefinition employee;

    /**
     * Version number for the employee object. If absent or 0 then no version checks are done
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<Long> version;

    @JsonCreator
    public IndexEmployeeRequest(
            @JsonProperty("employee") EmployeeInfoDefinition employee,
            @JsonProperty("version") Optional<Long> version) {
        Utils.checkNotNull(employee, "employee");
        Utils.checkNotNull(version, "version");
        this.employee = employee;
        this.version = version;
    }
    
    public IndexEmployeeRequest(
            EmployeeInfoDefinition employee) {
        this(employee, Optional.empty());
    }

    /**
     * Describes employee info
     */
    @JsonIgnore
    public EmployeeInfoDefinition employee() {
        return employee;
    }

    /**
     * Version number for the employee object. If absent or 0 then no version checks are done
     */
    @JsonIgnore
    public Optional<Long> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes employee info
     */
    public IndexEmployeeRequest withEmployee(EmployeeInfoDefinition employee) {
        Utils.checkNotNull(employee, "employee");
        this.employee = employee;
        return this;
    }

    /**
     * Version number for the employee object. If absent or 0 then no version checks are done
     */
    public IndexEmployeeRequest withVersion(long version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Version number for the employee object. If absent or 0 then no version checks are done
     */
    public IndexEmployeeRequest withVersion(Optional<Long> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexEmployeeRequest other = (IndexEmployeeRequest) o;
        return 
            Objects.deepEquals(this.employee, other.employee) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employee,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndexEmployeeRequest.class,
                "employee", employee,
                "version", version);
    }
    
    public final static class Builder {
 
        private EmployeeInfoDefinition employee;
 
        private Optional<Long> version = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes employee info
         */
        public Builder employee(EmployeeInfoDefinition employee) {
            Utils.checkNotNull(employee, "employee");
            this.employee = employee;
            return this;
        }

        /**
         * Version number for the employee object. If absent or 0 then no version checks are done
         */
        public Builder version(long version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Version number for the employee object. If absent or 0 then no version checks are done
         */
        public Builder version(Optional<Long> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public IndexEmployeeRequest build() {
            return new IndexEmployeeRequest(
                employee,
                version);
        }
    }
}
