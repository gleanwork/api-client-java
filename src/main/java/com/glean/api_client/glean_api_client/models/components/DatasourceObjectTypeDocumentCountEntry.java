/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class DatasourceObjectTypeDocumentCountEntry {

    /**
     * The object type of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    private Optional<String> objectType;

    /**
     * The number of documents of the corresponding objectType
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    @JsonCreator
    public DatasourceObjectTypeDocumentCountEntry(
            @JsonProperty("objectType") Optional<String> objectType,
            @JsonProperty("count") Optional<Long> count) {
        Utils.checkNotNull(objectType, "objectType");
        Utils.checkNotNull(count, "count");
        this.objectType = objectType;
        this.count = count;
    }
    
    public DatasourceObjectTypeDocumentCountEntry() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The object type of the document
     */
    @JsonIgnore
    public Optional<String> objectType() {
        return objectType;
    }

    /**
     * The number of documents of the corresponding objectType
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The object type of the document
     */
    public DatasourceObjectTypeDocumentCountEntry withObjectType(String objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = Optional.ofNullable(objectType);
        return this;
    }

    /**
     * The object type of the document
     */
    public DatasourceObjectTypeDocumentCountEntry withObjectType(Optional<String> objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = objectType;
        return this;
    }

    /**
     * The number of documents of the corresponding objectType
     */
    public DatasourceObjectTypeDocumentCountEntry withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * The number of documents of the corresponding objectType
     */
    public DatasourceObjectTypeDocumentCountEntry withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DatasourceObjectTypeDocumentCountEntry other = (DatasourceObjectTypeDocumentCountEntry) o;
        return 
            Utils.enhancedDeepEquals(this.objectType, other.objectType) &&
            Utils.enhancedDeepEquals(this.count, other.count);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            objectType,
            count);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DatasourceObjectTypeDocumentCountEntry.class,
                "objectType", objectType,
                "count", count);
    }
    
    public final static class Builder {
 
        private Optional<String> objectType = Optional.empty();
 
        private Optional<Long> count = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The object type of the document
         */
        public Builder objectType(String objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = Optional.ofNullable(objectType);
            return this;
        }

        /**
         * The object type of the document
         */
        public Builder objectType(Optional<String> objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = objectType;
            return this;
        }

        /**
         * The number of documents of the corresponding objectType
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of documents of the corresponding objectType
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }
        
        public DatasourceObjectTypeDocumentCountEntry build() {
            return new DatasourceObjectTypeDocumentCountEntry(
                objectType,
                count);
        }
    }
}
