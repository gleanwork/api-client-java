/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class EditCollectionItemRequest {

    /**
     * The optional name of the Collection item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<String> icon;

    /**
     * The ID of the Collection to edit CollectionItems in.
     */
    @JsonProperty("collectionId")
    private long collectionId;

    /**
     * The ID of the CollectionItem to edit.
     */
    @JsonProperty("itemId")
    private String itemId;

    @JsonCreator
    public EditCollectionItemRequest(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("icon") Optional<String> icon,
            @JsonProperty("collectionId") long collectionId,
            @JsonProperty("itemId") String itemId) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(icon, "icon");
        Utils.checkNotNull(collectionId, "collectionId");
        Utils.checkNotNull(itemId, "itemId");
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.collectionId = collectionId;
        this.itemId = itemId;
    }
    
    public EditCollectionItemRequest(
            long collectionId,
            String itemId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), collectionId, itemId);
    }

    /**
     * The optional name of the Collection item.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    @JsonIgnore
    public Optional<String> icon() {
        return icon;
    }

    /**
     * The ID of the Collection to edit CollectionItems in.
     */
    @JsonIgnore
    public long collectionId() {
        return collectionId;
    }

    /**
     * The ID of the CollectionItem to edit.
     */
    @JsonIgnore
    public String itemId() {
        return itemId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The optional name of the Collection item.
     */
    public EditCollectionItemRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The optional name of the Collection item.
     */
    public EditCollectionItemRequest withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    public EditCollectionItemRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    public EditCollectionItemRequest withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    public EditCollectionItemRequest withIcon(String icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    public EditCollectionItemRequest withIcon(Optional<String> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }

    /**
     * The ID of the Collection to edit CollectionItems in.
     */
    public EditCollectionItemRequest withCollectionId(long collectionId) {
        Utils.checkNotNull(collectionId, "collectionId");
        this.collectionId = collectionId;
        return this;
    }

    /**
     * The ID of the CollectionItem to edit.
     */
    public EditCollectionItemRequest withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditCollectionItemRequest other = (EditCollectionItemRequest) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.icon, other.icon) &&
            Utils.enhancedDeepEquals(this.collectionId, other.collectionId) &&
            Utils.enhancedDeepEquals(this.itemId, other.itemId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            description,
            icon,
            collectionId,
            itemId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EditCollectionItemRequest.class,
                "name", name,
                "description", description,
                "icon", icon,
                "collectionId", collectionId,
                "itemId", itemId);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> icon = Optional.empty();
 
        private Long collectionId;
 
        private String itemId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The optional name of the Collection item.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The optional name of the Collection item.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A helpful description of why this CollectionItem is in the Collection that it's in.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A helpful description of why this CollectionItem is in the Collection that it's in.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The emoji icon for this CollectionItem. Only used for Text type items.
         */
        public Builder icon(String icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        /**
         * The emoji icon for this CollectionItem. Only used for Text type items.
         */
        public Builder icon(Optional<String> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }

        /**
         * The ID of the Collection to edit CollectionItems in.
         */
        public Builder collectionId(long collectionId) {
            Utils.checkNotNull(collectionId, "collectionId");
            this.collectionId = collectionId;
            return this;
        }

        /**
         * The ID of the CollectionItem to edit.
         */
        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }
        
        public EditCollectionItemRequest build() {
            return new EditCollectionItemRequest(
                name,
                description,
                icon,
                collectionId,
                itemId);
        }
    }
}
