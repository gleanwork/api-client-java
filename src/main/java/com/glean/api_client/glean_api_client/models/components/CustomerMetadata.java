/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;

public class CustomerMetadata {

    /**
     * The user visible id of the salesforce customer account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceId")
    private Optional<String> datasourceId;

    /**
     * Custom fields specific to individual datasources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customData")
    private Optional<? extends Map<String, CustomDataValue>> customData;

    @JsonCreator
    public CustomerMetadata(
            @JsonProperty("datasourceId") Optional<String> datasourceId,
            @JsonProperty("customData") Optional<? extends Map<String, CustomDataValue>> customData) {
        Utils.checkNotNull(datasourceId, "datasourceId");
        Utils.checkNotNull(customData, "customData");
        this.datasourceId = datasourceId;
        this.customData = customData;
    }
    
    public CustomerMetadata() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The user visible id of the salesforce customer account.
     */
    @JsonIgnore
    public Optional<String> datasourceId() {
        return datasourceId;
    }

    /**
     * Custom fields specific to individual datasources
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, CustomDataValue>> customData() {
        return (Optional<Map<String, CustomDataValue>>) customData;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The user visible id of the salesforce customer account.
     */
    public CustomerMetadata withDatasourceId(String datasourceId) {
        Utils.checkNotNull(datasourceId, "datasourceId");
        this.datasourceId = Optional.ofNullable(datasourceId);
        return this;
    }

    /**
     * The user visible id of the salesforce customer account.
     */
    public CustomerMetadata withDatasourceId(Optional<String> datasourceId) {
        Utils.checkNotNull(datasourceId, "datasourceId");
        this.datasourceId = datasourceId;
        return this;
    }

    /**
     * Custom fields specific to individual datasources
     */
    public CustomerMetadata withCustomData(Map<String, CustomDataValue> customData) {
        Utils.checkNotNull(customData, "customData");
        this.customData = Optional.ofNullable(customData);
        return this;
    }

    /**
     * Custom fields specific to individual datasources
     */
    public CustomerMetadata withCustomData(Optional<? extends Map<String, CustomDataValue>> customData) {
        Utils.checkNotNull(customData, "customData");
        this.customData = customData;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomerMetadata other = (CustomerMetadata) o;
        return 
            Utils.enhancedDeepEquals(this.datasourceId, other.datasourceId) &&
            Utils.enhancedDeepEquals(this.customData, other.customData);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            datasourceId,
            customData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomerMetadata.class,
                "datasourceId", datasourceId,
                "customData", customData);
    }
    
    public final static class Builder {
 
        private Optional<String> datasourceId = Optional.empty();
 
        private Optional<? extends Map<String, CustomDataValue>> customData = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The user visible id of the salesforce customer account.
         */
        public Builder datasourceId(String datasourceId) {
            Utils.checkNotNull(datasourceId, "datasourceId");
            this.datasourceId = Optional.ofNullable(datasourceId);
            return this;
        }

        /**
         * The user visible id of the salesforce customer account.
         */
        public Builder datasourceId(Optional<String> datasourceId) {
            Utils.checkNotNull(datasourceId, "datasourceId");
            this.datasourceId = datasourceId;
            return this;
        }

        /**
         * Custom fields specific to individual datasources
         */
        public Builder customData(Map<String, CustomDataValue> customData) {
            Utils.checkNotNull(customData, "customData");
            this.customData = Optional.ofNullable(customData);
            return this;
        }

        /**
         * Custom fields specific to individual datasources
         */
        public Builder customData(Optional<? extends Map<String, CustomDataValue>> customData) {
            Utils.checkNotNull(customData, "customData");
            this.customData = customData;
            return this;
        }
        
        public CustomerMetadata build() {
            return new CustomerMetadata(
                datasourceId,
                customData);
        }
    }
}
