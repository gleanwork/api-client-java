/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * AiAppActionCounts
 * 
 * <p>Map from action to frequency.
 */
public class AiAppActionCounts {

    /**
     * Total number of Slackbot responses, both proactive and reactive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSlackbotResponses")
    private Optional<Long> totalSlackbotResponses;

    /**
     * Total number of Slackbot responses shared publicly (upvoted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSlackbotResponsesShared")
    private Optional<Long> totalSlackbotResponsesShared;

    /**
     * Total number of Slackbot responses rejected as not helpful (downvoted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSlackbotResponsesNotHelpful")
    private Optional<Long> totalSlackbotResponsesNotHelpful;

    /**
     * Total number of Chat messages sent in requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalChatMessages")
    private Optional<Long> totalChatMessages;

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalUpvotes")
    private Optional<Long> totalUpvotes;

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDownvotes")
    private Optional<Long> totalDownvotes;

    @JsonIgnore
    private Map<String, Long> additionalProperties;

    @JsonCreator
    public AiAppActionCounts(
            @JsonProperty("totalSlackbotResponses") Optional<Long> totalSlackbotResponses,
            @JsonProperty("totalSlackbotResponsesShared") Optional<Long> totalSlackbotResponsesShared,
            @JsonProperty("totalSlackbotResponsesNotHelpful") Optional<Long> totalSlackbotResponsesNotHelpful,
            @JsonProperty("totalChatMessages") Optional<Long> totalChatMessages,
            @JsonProperty("totalUpvotes") Optional<Long> totalUpvotes,
            @JsonProperty("totalDownvotes") Optional<Long> totalDownvotes) {
        Utils.checkNotNull(totalSlackbotResponses, "totalSlackbotResponses");
        Utils.checkNotNull(totalSlackbotResponsesShared, "totalSlackbotResponsesShared");
        Utils.checkNotNull(totalSlackbotResponsesNotHelpful, "totalSlackbotResponsesNotHelpful");
        Utils.checkNotNull(totalChatMessages, "totalChatMessages");
        Utils.checkNotNull(totalUpvotes, "totalUpvotes");
        Utils.checkNotNull(totalDownvotes, "totalDownvotes");
        this.totalSlackbotResponses = totalSlackbotResponses;
        this.totalSlackbotResponsesShared = totalSlackbotResponsesShared;
        this.totalSlackbotResponsesNotHelpful = totalSlackbotResponsesNotHelpful;
        this.totalChatMessages = totalChatMessages;
        this.totalUpvotes = totalUpvotes;
        this.totalDownvotes = totalDownvotes;
        this.additionalProperties = new HashMap<>();
    }
    
    public AiAppActionCounts() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Total number of Slackbot responses, both proactive and reactive.
     */
    @JsonIgnore
    public Optional<Long> totalSlackbotResponses() {
        return totalSlackbotResponses;
    }

    /**
     * Total number of Slackbot responses shared publicly (upvoted).
     */
    @JsonIgnore
    public Optional<Long> totalSlackbotResponsesShared() {
        return totalSlackbotResponsesShared;
    }

    /**
     * Total number of Slackbot responses rejected as not helpful (downvoted).
     */
    @JsonIgnore
    public Optional<Long> totalSlackbotResponsesNotHelpful() {
        return totalSlackbotResponsesNotHelpful;
    }

    /**
     * Total number of Chat messages sent in requested period.
     */
    @JsonIgnore
    public Optional<Long> totalChatMessages() {
        return totalChatMessages;
    }

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    @JsonIgnore
    public Optional<Long> totalUpvotes() {
        return totalUpvotes;
    }

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    @JsonIgnore
    public Optional<Long> totalDownvotes() {
        return totalDownvotes;
    }

    @JsonAnyGetter
    public Map<String, Long> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Total number of Slackbot responses, both proactive and reactive.
     */
    public AiAppActionCounts withTotalSlackbotResponses(long totalSlackbotResponses) {
        Utils.checkNotNull(totalSlackbotResponses, "totalSlackbotResponses");
        this.totalSlackbotResponses = Optional.ofNullable(totalSlackbotResponses);
        return this;
    }

    /**
     * Total number of Slackbot responses, both proactive and reactive.
     */
    public AiAppActionCounts withTotalSlackbotResponses(Optional<Long> totalSlackbotResponses) {
        Utils.checkNotNull(totalSlackbotResponses, "totalSlackbotResponses");
        this.totalSlackbotResponses = totalSlackbotResponses;
        return this;
    }

    /**
     * Total number of Slackbot responses shared publicly (upvoted).
     */
    public AiAppActionCounts withTotalSlackbotResponsesShared(long totalSlackbotResponsesShared) {
        Utils.checkNotNull(totalSlackbotResponsesShared, "totalSlackbotResponsesShared");
        this.totalSlackbotResponsesShared = Optional.ofNullable(totalSlackbotResponsesShared);
        return this;
    }

    /**
     * Total number of Slackbot responses shared publicly (upvoted).
     */
    public AiAppActionCounts withTotalSlackbotResponsesShared(Optional<Long> totalSlackbotResponsesShared) {
        Utils.checkNotNull(totalSlackbotResponsesShared, "totalSlackbotResponsesShared");
        this.totalSlackbotResponsesShared = totalSlackbotResponsesShared;
        return this;
    }

    /**
     * Total number of Slackbot responses rejected as not helpful (downvoted).
     */
    public AiAppActionCounts withTotalSlackbotResponsesNotHelpful(long totalSlackbotResponsesNotHelpful) {
        Utils.checkNotNull(totalSlackbotResponsesNotHelpful, "totalSlackbotResponsesNotHelpful");
        this.totalSlackbotResponsesNotHelpful = Optional.ofNullable(totalSlackbotResponsesNotHelpful);
        return this;
    }

    /**
     * Total number of Slackbot responses rejected as not helpful (downvoted).
     */
    public AiAppActionCounts withTotalSlackbotResponsesNotHelpful(Optional<Long> totalSlackbotResponsesNotHelpful) {
        Utils.checkNotNull(totalSlackbotResponsesNotHelpful, "totalSlackbotResponsesNotHelpful");
        this.totalSlackbotResponsesNotHelpful = totalSlackbotResponsesNotHelpful;
        return this;
    }

    /**
     * Total number of Chat messages sent in requested period.
     */
    public AiAppActionCounts withTotalChatMessages(long totalChatMessages) {
        Utils.checkNotNull(totalChatMessages, "totalChatMessages");
        this.totalChatMessages = Optional.ofNullable(totalChatMessages);
        return this;
    }

    /**
     * Total number of Chat messages sent in requested period.
     */
    public AiAppActionCounts withTotalChatMessages(Optional<Long> totalChatMessages) {
        Utils.checkNotNull(totalChatMessages, "totalChatMessages");
        this.totalChatMessages = totalChatMessages;
        return this;
    }

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    public AiAppActionCounts withTotalUpvotes(long totalUpvotes) {
        Utils.checkNotNull(totalUpvotes, "totalUpvotes");
        this.totalUpvotes = Optional.ofNullable(totalUpvotes);
        return this;
    }

    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    public AiAppActionCounts withTotalUpvotes(Optional<Long> totalUpvotes) {
        Utils.checkNotNull(totalUpvotes, "totalUpvotes");
        this.totalUpvotes = totalUpvotes;
        return this;
    }

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    public AiAppActionCounts withTotalDownvotes(long totalDownvotes) {
        Utils.checkNotNull(totalDownvotes, "totalDownvotes");
        this.totalDownvotes = Optional.ofNullable(totalDownvotes);
        return this;
    }

    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    public AiAppActionCounts withTotalDownvotes(Optional<Long> totalDownvotes) {
        Utils.checkNotNull(totalDownvotes, "totalDownvotes");
        this.totalDownvotes = totalDownvotes;
        return this;
    }

    @JsonAnySetter
    public AiAppActionCounts withAdditionalProperty(String key, long value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public AiAppActionCounts withAdditionalProperties(Map<String, Long> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AiAppActionCounts other = (AiAppActionCounts) o;
        return 
            Objects.deepEquals(this.totalSlackbotResponses, other.totalSlackbotResponses) &&
            Objects.deepEquals(this.totalSlackbotResponsesShared, other.totalSlackbotResponsesShared) &&
            Objects.deepEquals(this.totalSlackbotResponsesNotHelpful, other.totalSlackbotResponsesNotHelpful) &&
            Objects.deepEquals(this.totalChatMessages, other.totalChatMessages) &&
            Objects.deepEquals(this.totalUpvotes, other.totalUpvotes) &&
            Objects.deepEquals(this.totalDownvotes, other.totalDownvotes) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            totalSlackbotResponses,
            totalSlackbotResponsesShared,
            totalSlackbotResponsesNotHelpful,
            totalChatMessages,
            totalUpvotes,
            totalDownvotes,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AiAppActionCounts.class,
                "totalSlackbotResponses", totalSlackbotResponses,
                "totalSlackbotResponsesShared", totalSlackbotResponsesShared,
                "totalSlackbotResponsesNotHelpful", totalSlackbotResponsesNotHelpful,
                "totalChatMessages", totalChatMessages,
                "totalUpvotes", totalUpvotes,
                "totalDownvotes", totalDownvotes,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private Optional<Long> totalSlackbotResponses = Optional.empty();
 
        private Optional<Long> totalSlackbotResponsesShared = Optional.empty();
 
        private Optional<Long> totalSlackbotResponsesNotHelpful = Optional.empty();
 
        private Optional<Long> totalChatMessages = Optional.empty();
 
        private Optional<Long> totalUpvotes = Optional.empty();
 
        private Optional<Long> totalDownvotes = Optional.empty();
 
        private Map<String, Long> additionalProperties = new HashMap<>();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Total number of Slackbot responses, both proactive and reactive.
         */
        public Builder totalSlackbotResponses(long totalSlackbotResponses) {
            Utils.checkNotNull(totalSlackbotResponses, "totalSlackbotResponses");
            this.totalSlackbotResponses = Optional.ofNullable(totalSlackbotResponses);
            return this;
        }

        /**
         * Total number of Slackbot responses, both proactive and reactive.
         */
        public Builder totalSlackbotResponses(Optional<Long> totalSlackbotResponses) {
            Utils.checkNotNull(totalSlackbotResponses, "totalSlackbotResponses");
            this.totalSlackbotResponses = totalSlackbotResponses;
            return this;
        }

        /**
         * Total number of Slackbot responses shared publicly (upvoted).
         */
        public Builder totalSlackbotResponsesShared(long totalSlackbotResponsesShared) {
            Utils.checkNotNull(totalSlackbotResponsesShared, "totalSlackbotResponsesShared");
            this.totalSlackbotResponsesShared = Optional.ofNullable(totalSlackbotResponsesShared);
            return this;
        }

        /**
         * Total number of Slackbot responses shared publicly (upvoted).
         */
        public Builder totalSlackbotResponsesShared(Optional<Long> totalSlackbotResponsesShared) {
            Utils.checkNotNull(totalSlackbotResponsesShared, "totalSlackbotResponsesShared");
            this.totalSlackbotResponsesShared = totalSlackbotResponsesShared;
            return this;
        }

        /**
         * Total number of Slackbot responses rejected as not helpful (downvoted).
         */
        public Builder totalSlackbotResponsesNotHelpful(long totalSlackbotResponsesNotHelpful) {
            Utils.checkNotNull(totalSlackbotResponsesNotHelpful, "totalSlackbotResponsesNotHelpful");
            this.totalSlackbotResponsesNotHelpful = Optional.ofNullable(totalSlackbotResponsesNotHelpful);
            return this;
        }

        /**
         * Total number of Slackbot responses rejected as not helpful (downvoted).
         */
        public Builder totalSlackbotResponsesNotHelpful(Optional<Long> totalSlackbotResponsesNotHelpful) {
            Utils.checkNotNull(totalSlackbotResponsesNotHelpful, "totalSlackbotResponsesNotHelpful");
            this.totalSlackbotResponsesNotHelpful = totalSlackbotResponsesNotHelpful;
            return this;
        }

        /**
         * Total number of Chat messages sent in requested period.
         */
        public Builder totalChatMessages(long totalChatMessages) {
            Utils.checkNotNull(totalChatMessages, "totalChatMessages");
            this.totalChatMessages = Optional.ofNullable(totalChatMessages);
            return this;
        }

        /**
         * Total number of Chat messages sent in requested period.
         */
        public Builder totalChatMessages(Optional<Long> totalChatMessages) {
            Utils.checkNotNull(totalChatMessages, "totalChatMessages");
            this.totalChatMessages = totalChatMessages;
            return this;
        }

        /**
         * Total number of Chat messages which received upvotes by the user.
         */
        public Builder totalUpvotes(long totalUpvotes) {
            Utils.checkNotNull(totalUpvotes, "totalUpvotes");
            this.totalUpvotes = Optional.ofNullable(totalUpvotes);
            return this;
        }

        /**
         * Total number of Chat messages which received upvotes by the user.
         */
        public Builder totalUpvotes(Optional<Long> totalUpvotes) {
            Utils.checkNotNull(totalUpvotes, "totalUpvotes");
            this.totalUpvotes = totalUpvotes;
            return this;
        }

        /**
         * Total number of Chat messages which received downvotes by the user.
         */
        public Builder totalDownvotes(long totalDownvotes) {
            Utils.checkNotNull(totalDownvotes, "totalDownvotes");
            this.totalDownvotes = Optional.ofNullable(totalDownvotes);
            return this;
        }

        /**
         * Total number of Chat messages which received downvotes by the user.
         */
        public Builder totalDownvotes(Optional<Long> totalDownvotes) {
            Utils.checkNotNull(totalDownvotes, "totalDownvotes");
            this.totalDownvotes = totalDownvotes;
            return this;
        }

        public Builder additionalProperty(String key, long value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Long> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public AiAppActionCounts build() {
            return new AiAppActionCounts(
                totalSlackbotResponses,
                totalSlackbotResponsesShared,
                totalSlackbotResponsesNotHelpful,
                totalChatMessages,
                totalUpvotes,
                totalDownvotes)
                .withAdditionalProperties(additionalProperties);
        }
    }
}
