/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class EditAnswerRequest {

    /**
     * The opaque ID of the Answer.
     */
    @JsonProperty("id")
    private long id;

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docId")
    private Optional<String> docId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question")
    private Optional<String> question;

    /**
     * Additional ways of phrasing this question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("questionVariations")
    private Optional<? extends List<String>> questionVariations;

    /**
     * The plain text answer to the question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodyText")
    private Optional<String> bodyText;

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boardId")
    @Deprecated
    private Optional<Long> boardId;

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * A list of user roles for the answer added by the owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedRoles")
    private Optional<? extends List<UserRoleSpecification>> addedRoles;

    /**
     * A list of user roles for the answer removed by the owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedRoles")
    private Optional<? extends List<UserRoleSpecification>> removedRoles;

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocumentSpec")
    private Optional<? extends DocumentSpecUnion> sourceDocumentSpec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private Optional<? extends EditAnswerRequestSourceType> sourceType;

    /**
     * IDs of Collections to which a document is added.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedCollections")
    private Optional<? extends List<Long>> addedCollections;

    /**
     * IDs of Collections from which a document is removed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedCollections")
    private Optional<? extends List<Long>> removedCollections;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("combinedAnswerText")
    private Optional<? extends StructuredTextMutableProperties> combinedAnswerText;

    @JsonCreator
    public EditAnswerRequest(
            @JsonProperty("id") long id,
            @JsonProperty("docId") Optional<String> docId,
            @JsonProperty("question") Optional<String> question,
            @JsonProperty("questionVariations") Optional<? extends List<String>> questionVariations,
            @JsonProperty("bodyText") Optional<String> bodyText,
            @JsonProperty("boardId") Optional<Long> boardId,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("addedRoles") Optional<? extends List<UserRoleSpecification>> addedRoles,
            @JsonProperty("removedRoles") Optional<? extends List<UserRoleSpecification>> removedRoles,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles,
            @JsonProperty("sourceDocumentSpec") Optional<? extends DocumentSpecUnion> sourceDocumentSpec,
            @JsonProperty("sourceType") Optional<? extends EditAnswerRequestSourceType> sourceType,
            @JsonProperty("addedCollections") Optional<? extends List<Long>> addedCollections,
            @JsonProperty("removedCollections") Optional<? extends List<Long>> removedCollections,
            @JsonProperty("combinedAnswerText") Optional<? extends StructuredTextMutableProperties> combinedAnswerText) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(docId, "docId");
        Utils.checkNotNull(question, "question");
        Utils.checkNotNull(questionVariations, "questionVariations");
        Utils.checkNotNull(bodyText, "bodyText");
        Utils.checkNotNull(boardId, "boardId");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(addedRoles, "addedRoles");
        Utils.checkNotNull(removedRoles, "removedRoles");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(addedCollections, "addedCollections");
        Utils.checkNotNull(removedCollections, "removedCollections");
        Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
        this.id = id;
        this.docId = docId;
        this.question = question;
        this.questionVariations = questionVariations;
        this.bodyText = bodyText;
        this.boardId = boardId;
        this.audienceFilters = audienceFilters;
        this.addedRoles = addedRoles;
        this.removedRoles = removedRoles;
        this.roles = roles;
        this.sourceDocumentSpec = sourceDocumentSpec;
        this.sourceType = sourceType;
        this.addedCollections = addedCollections;
        this.removedCollections = removedCollections;
        this.combinedAnswerText = combinedAnswerText;
    }
    
    public EditAnswerRequest(
            long id) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The opaque ID of the Answer.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    @JsonIgnore
    public Optional<String> docId() {
        return docId;
    }

    @JsonIgnore
    public Optional<String> question() {
        return question;
    }

    /**
     * Additional ways of phrasing this question.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> questionVariations() {
        return (Optional<List<String>>) questionVariations;
    }

    /**
     * The plain text answer to the question.
     */
    @JsonIgnore
    public Optional<String> bodyText() {
        return bodyText;
    }

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Long> boardId() {
        return boardId;
    }

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * A list of user roles for the answer added by the owner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> addedRoles() {
        return (Optional<List<UserRoleSpecification>>) addedRoles;
    }

    /**
     * A list of user roles for the answer removed by the owner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> removedRoles() {
        return (Optional<List<UserRoleSpecification>>) removedRoles;
    }

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSpecUnion> sourceDocumentSpec() {
        return (Optional<DocumentSpecUnion>) sourceDocumentSpec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EditAnswerRequestSourceType> sourceType() {
        return (Optional<EditAnswerRequestSourceType>) sourceType;
    }

    /**
     * IDs of Collections to which a document is added.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> addedCollections() {
        return (Optional<List<Long>>) addedCollections;
    }

    /**
     * IDs of Collections from which a document is removed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> removedCollections() {
        return (Optional<List<Long>>) removedCollections;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredTextMutableProperties> combinedAnswerText() {
        return (Optional<StructuredTextMutableProperties>) combinedAnswerText;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The opaque ID of the Answer.
     */
    public EditAnswerRequest withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    public EditAnswerRequest withDocId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = Optional.ofNullable(docId);
        return this;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    public EditAnswerRequest withDocId(Optional<String> docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }

    public EditAnswerRequest withQuestion(String question) {
        Utils.checkNotNull(question, "question");
        this.question = Optional.ofNullable(question);
        return this;
    }

    public EditAnswerRequest withQuestion(Optional<String> question) {
        Utils.checkNotNull(question, "question");
        this.question = question;
        return this;
    }

    /**
     * Additional ways of phrasing this question.
     */
    public EditAnswerRequest withQuestionVariations(List<String> questionVariations) {
        Utils.checkNotNull(questionVariations, "questionVariations");
        this.questionVariations = Optional.ofNullable(questionVariations);
        return this;
    }

    /**
     * Additional ways of phrasing this question.
     */
    public EditAnswerRequest withQuestionVariations(Optional<? extends List<String>> questionVariations) {
        Utils.checkNotNull(questionVariations, "questionVariations");
        this.questionVariations = questionVariations;
        return this;
    }

    /**
     * The plain text answer to the question.
     */
    public EditAnswerRequest withBodyText(String bodyText) {
        Utils.checkNotNull(bodyText, "bodyText");
        this.bodyText = Optional.ofNullable(bodyText);
        return this;
    }

    /**
     * The plain text answer to the question.
     */
    public EditAnswerRequest withBodyText(Optional<String> bodyText) {
        Utils.checkNotNull(bodyText, "bodyText");
        this.bodyText = bodyText;
        return this;
    }

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EditAnswerRequest withBoardId(long boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = Optional.ofNullable(boardId);
        return this;
    }

    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EditAnswerRequest withBoardId(Optional<Long> boardId) {
        Utils.checkNotNull(boardId, "boardId");
        this.boardId = boardId;
        return this;
    }

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    public EditAnswerRequest withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    public EditAnswerRequest withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * A list of user roles for the answer added by the owner.
     */
    public EditAnswerRequest withAddedRoles(List<UserRoleSpecification> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = Optional.ofNullable(addedRoles);
        return this;
    }

    /**
     * A list of user roles for the answer added by the owner.
     */
    public EditAnswerRequest withAddedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = addedRoles;
        return this;
    }

    /**
     * A list of user roles for the answer removed by the owner.
     */
    public EditAnswerRequest withRemovedRoles(List<UserRoleSpecification> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = Optional.ofNullable(removedRoles);
        return this;
    }

    /**
     * A list of user roles for the answer removed by the owner.
     */
    public EditAnswerRequest withRemovedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = removedRoles;
        return this;
    }

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    public EditAnswerRequest withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    public EditAnswerRequest withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public EditAnswerRequest withSourceDocumentSpec(DocumentSpecUnion sourceDocumentSpec) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        this.sourceDocumentSpec = Optional.ofNullable(sourceDocumentSpec);
        return this;
    }

    public EditAnswerRequest withSourceDocumentSpec(Optional<? extends DocumentSpecUnion> sourceDocumentSpec) {
        Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
        this.sourceDocumentSpec = sourceDocumentSpec;
        return this;
    }

    public EditAnswerRequest withSourceType(EditAnswerRequestSourceType sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = Optional.ofNullable(sourceType);
        return this;
    }

    public EditAnswerRequest withSourceType(Optional<? extends EditAnswerRequestSourceType> sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    /**
     * IDs of Collections to which a document is added.
     */
    public EditAnswerRequest withAddedCollections(List<Long> addedCollections) {
        Utils.checkNotNull(addedCollections, "addedCollections");
        this.addedCollections = Optional.ofNullable(addedCollections);
        return this;
    }

    /**
     * IDs of Collections to which a document is added.
     */
    public EditAnswerRequest withAddedCollections(Optional<? extends List<Long>> addedCollections) {
        Utils.checkNotNull(addedCollections, "addedCollections");
        this.addedCollections = addedCollections;
        return this;
    }

    /**
     * IDs of Collections from which a document is removed.
     */
    public EditAnswerRequest withRemovedCollections(List<Long> removedCollections) {
        Utils.checkNotNull(removedCollections, "removedCollections");
        this.removedCollections = Optional.ofNullable(removedCollections);
        return this;
    }

    /**
     * IDs of Collections from which a document is removed.
     */
    public EditAnswerRequest withRemovedCollections(Optional<? extends List<Long>> removedCollections) {
        Utils.checkNotNull(removedCollections, "removedCollections");
        this.removedCollections = removedCollections;
        return this;
    }

    public EditAnswerRequest withCombinedAnswerText(StructuredTextMutableProperties combinedAnswerText) {
        Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
        this.combinedAnswerText = Optional.ofNullable(combinedAnswerText);
        return this;
    }

    public EditAnswerRequest withCombinedAnswerText(Optional<? extends StructuredTextMutableProperties> combinedAnswerText) {
        Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
        this.combinedAnswerText = combinedAnswerText;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditAnswerRequest other = (EditAnswerRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.docId, other.docId) &&
            Utils.enhancedDeepEquals(this.question, other.question) &&
            Utils.enhancedDeepEquals(this.questionVariations, other.questionVariations) &&
            Utils.enhancedDeepEquals(this.bodyText, other.bodyText) &&
            Utils.enhancedDeepEquals(this.boardId, other.boardId) &&
            Utils.enhancedDeepEquals(this.audienceFilters, other.audienceFilters) &&
            Utils.enhancedDeepEquals(this.addedRoles, other.addedRoles) &&
            Utils.enhancedDeepEquals(this.removedRoles, other.removedRoles) &&
            Utils.enhancedDeepEquals(this.roles, other.roles) &&
            Utils.enhancedDeepEquals(this.sourceDocumentSpec, other.sourceDocumentSpec) &&
            Utils.enhancedDeepEquals(this.sourceType, other.sourceType) &&
            Utils.enhancedDeepEquals(this.addedCollections, other.addedCollections) &&
            Utils.enhancedDeepEquals(this.removedCollections, other.removedCollections) &&
            Utils.enhancedDeepEquals(this.combinedAnswerText, other.combinedAnswerText);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            docId,
            question,
            questionVariations,
            bodyText,
            boardId,
            audienceFilters,
            addedRoles,
            removedRoles,
            roles,
            sourceDocumentSpec,
            sourceType,
            addedCollections,
            removedCollections,
            combinedAnswerText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EditAnswerRequest.class,
                "id", id,
                "docId", docId,
                "question", question,
                "questionVariations", questionVariations,
                "bodyText", bodyText,
                "boardId", boardId,
                "audienceFilters", audienceFilters,
                "addedRoles", addedRoles,
                "removedRoles", removedRoles,
                "roles", roles,
                "sourceDocumentSpec", sourceDocumentSpec,
                "sourceType", sourceType,
                "addedCollections", addedCollections,
                "removedCollections", removedCollections,
                "combinedAnswerText", combinedAnswerText);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private Optional<String> docId = Optional.empty();
 
        private Optional<String> question = Optional.empty();
 
        private Optional<? extends List<String>> questionVariations = Optional.empty();
 
        private Optional<String> bodyText = Optional.empty();
 
        @Deprecated
        private Optional<Long> boardId = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> addedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> removedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
 
        private Optional<? extends DocumentSpecUnion> sourceDocumentSpec = Optional.empty();
 
        private Optional<? extends EditAnswerRequestSourceType> sourceType = Optional.empty();
 
        private Optional<? extends List<Long>> addedCollections = Optional.empty();
 
        private Optional<? extends List<Long>> removedCollections = Optional.empty();
 
        private Optional<? extends StructuredTextMutableProperties> combinedAnswerText = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The opaque ID of the Answer.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
         */
        public Builder docId(String docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = Optional.ofNullable(docId);
            return this;
        }

        /**
         * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
         */
        public Builder docId(Optional<String> docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = docId;
            return this;
        }

        public Builder question(String question) {
            Utils.checkNotNull(question, "question");
            this.question = Optional.ofNullable(question);
            return this;
        }

        public Builder question(Optional<String> question) {
            Utils.checkNotNull(question, "question");
            this.question = question;
            return this;
        }

        /**
         * Additional ways of phrasing this question.
         */
        public Builder questionVariations(List<String> questionVariations) {
            Utils.checkNotNull(questionVariations, "questionVariations");
            this.questionVariations = Optional.ofNullable(questionVariations);
            return this;
        }

        /**
         * Additional ways of phrasing this question.
         */
        public Builder questionVariations(Optional<? extends List<String>> questionVariations) {
            Utils.checkNotNull(questionVariations, "questionVariations");
            this.questionVariations = questionVariations;
            return this;
        }

        /**
         * The plain text answer to the question.
         */
        public Builder bodyText(String bodyText) {
            Utils.checkNotNull(bodyText, "bodyText");
            this.bodyText = Optional.ofNullable(bodyText);
            return this;
        }

        /**
         * The plain text answer to the question.
         */
        public Builder bodyText(Optional<String> bodyText) {
            Utils.checkNotNull(bodyText, "bodyText");
            this.bodyText = bodyText;
            return this;
        }

        /**
         * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder boardId(long boardId) {
            Utils.checkNotNull(boardId, "boardId");
            this.boardId = Optional.ofNullable(boardId);
            return this;
        }

        /**
         * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder boardId(Optional<Long> boardId) {
            Utils.checkNotNull(boardId, "boardId");
            this.boardId = boardId;
            return this;
        }

        /**
         * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * A list of user roles for the answer added by the owner.
         */
        public Builder addedRoles(List<UserRoleSpecification> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = Optional.ofNullable(addedRoles);
            return this;
        }

        /**
         * A list of user roles for the answer added by the owner.
         */
        public Builder addedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = addedRoles;
            return this;
        }

        /**
         * A list of user roles for the answer removed by the owner.
         */
        public Builder removedRoles(List<UserRoleSpecification> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = Optional.ofNullable(removedRoles);
            return this;
        }

        /**
         * A list of user roles for the answer removed by the owner.
         */
        public Builder removedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = removedRoles;
            return this;
        }

        /**
         * A list of roles for this answer explicitly granted by an owner, editor, or admin.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of roles for this answer explicitly granted by an owner, editor, or admin.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }

        public Builder sourceDocumentSpec(DocumentSpecUnion sourceDocumentSpec) {
            Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
            this.sourceDocumentSpec = Optional.ofNullable(sourceDocumentSpec);
            return this;
        }

        public Builder sourceDocumentSpec(Optional<? extends DocumentSpecUnion> sourceDocumentSpec) {
            Utils.checkNotNull(sourceDocumentSpec, "sourceDocumentSpec");
            this.sourceDocumentSpec = sourceDocumentSpec;
            return this;
        }

        public Builder sourceType(EditAnswerRequestSourceType sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = Optional.ofNullable(sourceType);
            return this;
        }

        public Builder sourceType(Optional<? extends EditAnswerRequestSourceType> sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }

        /**
         * IDs of Collections to which a document is added.
         */
        public Builder addedCollections(List<Long> addedCollections) {
            Utils.checkNotNull(addedCollections, "addedCollections");
            this.addedCollections = Optional.ofNullable(addedCollections);
            return this;
        }

        /**
         * IDs of Collections to which a document is added.
         */
        public Builder addedCollections(Optional<? extends List<Long>> addedCollections) {
            Utils.checkNotNull(addedCollections, "addedCollections");
            this.addedCollections = addedCollections;
            return this;
        }

        /**
         * IDs of Collections from which a document is removed.
         */
        public Builder removedCollections(List<Long> removedCollections) {
            Utils.checkNotNull(removedCollections, "removedCollections");
            this.removedCollections = Optional.ofNullable(removedCollections);
            return this;
        }

        /**
         * IDs of Collections from which a document is removed.
         */
        public Builder removedCollections(Optional<? extends List<Long>> removedCollections) {
            Utils.checkNotNull(removedCollections, "removedCollections");
            this.removedCollections = removedCollections;
            return this;
        }

        public Builder combinedAnswerText(StructuredTextMutableProperties combinedAnswerText) {
            Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
            this.combinedAnswerText = Optional.ofNullable(combinedAnswerText);
            return this;
        }

        public Builder combinedAnswerText(Optional<? extends StructuredTextMutableProperties> combinedAnswerText) {
            Utils.checkNotNull(combinedAnswerText, "combinedAnswerText");
            this.combinedAnswerText = combinedAnswerText;
            return this;
        }
        
        public EditAnswerRequest build() {
            return new EditAnswerRequest(
                id,
                docId,
                question,
                questionVariations,
                bodyText,
                boardId,
                audienceFilters,
                addedRoles,
                removedRoles,
                roles,
                sourceDocumentSpec,
                sourceType,
                addedCollections,
                removedCollections,
                combinedAnswerText);
        }
    }
}
