/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * AuthConfig
 * 
 * <p>Config for tool's authentication method.
 */
public class AuthConfig {

    /**
     * Whether or not this tool is hosted on-premise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOnPrem")
    private Optional<Boolean> isOnPrem;

    /**
     * Whether or not this uses central auth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usesCentralAuth")
    private Optional<Boolean> usesCentralAuth;

    /**
     * The type of authentication being used.
     * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
     * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
     * 'OAUTH_USER' uses individual user tokens for external API calls.
     * 'DWD' refers to domain wide delegation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AuthConfigType> type;

    /**
     * The type of grant type being used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantType")
    private Optional<? extends GrantType> grantType;

    /**
     * Auth status of the tool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AuthConfigStatus> status;

    /**
     * The URL where users will be directed to start the OAuth flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_url")
    private Optional<String> clientUrl;

    /**
     * A list of strings denoting the different scopes or access levels required by the tool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private Optional<? extends List<String>> scopes;

    /**
     * A list of strings denoting the different audience which can access the tool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audiences")
    private Optional<? extends List<String>> audiences;

    /**
     * The OAuth provider's endpoint, where access tokens are requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorization_url")
    private Optional<String> authorizationUrl;

    /**
     * The time the tool was last authorized in ISO format (ISO 8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastAuthorizedAt")
    private Optional<OffsetDateTime> lastAuthorizedAt;

    @JsonCreator
    public AuthConfig(
            @JsonProperty("isOnPrem") Optional<Boolean> isOnPrem,
            @JsonProperty("usesCentralAuth") Optional<Boolean> usesCentralAuth,
            @JsonProperty("type") Optional<? extends AuthConfigType> type,
            @JsonProperty("grantType") Optional<? extends GrantType> grantType,
            @JsonProperty("status") Optional<? extends AuthConfigStatus> status,
            @JsonProperty("client_url") Optional<String> clientUrl,
            @JsonProperty("scopes") Optional<? extends List<String>> scopes,
            @JsonProperty("audiences") Optional<? extends List<String>> audiences,
            @JsonProperty("authorization_url") Optional<String> authorizationUrl,
            @JsonProperty("lastAuthorizedAt") Optional<OffsetDateTime> lastAuthorizedAt) {
        Utils.checkNotNull(isOnPrem, "isOnPrem");
        Utils.checkNotNull(usesCentralAuth, "usesCentralAuth");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(clientUrl, "clientUrl");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(audiences, "audiences");
        Utils.checkNotNull(authorizationUrl, "authorizationUrl");
        Utils.checkNotNull(lastAuthorizedAt, "lastAuthorizedAt");
        this.isOnPrem = isOnPrem;
        this.usesCentralAuth = usesCentralAuth;
        this.type = type;
        this.grantType = grantType;
        this.status = status;
        this.clientUrl = clientUrl;
        this.scopes = scopes;
        this.audiences = audiences;
        this.authorizationUrl = authorizationUrl;
        this.lastAuthorizedAt = lastAuthorizedAt;
    }
    
    public AuthConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether or not this tool is hosted on-premise.
     */
    @JsonIgnore
    public Optional<Boolean> isOnPrem() {
        return isOnPrem;
    }

    /**
     * Whether or not this uses central auth.
     */
    @JsonIgnore
    public Optional<Boolean> usesCentralAuth() {
        return usesCentralAuth;
    }

    /**
     * The type of authentication being used.
     * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
     * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
     * 'OAUTH_USER' uses individual user tokens for external API calls.
     * 'DWD' refers to domain wide delegation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AuthConfigType> type() {
        return (Optional<AuthConfigType>) type;
    }

    /**
     * The type of grant type being used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GrantType> grantType() {
        return (Optional<GrantType>) grantType;
    }

    /**
     * Auth status of the tool.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AuthConfigStatus> status() {
        return (Optional<AuthConfigStatus>) status;
    }

    /**
     * The URL where users will be directed to start the OAuth flow.
     */
    @JsonIgnore
    public Optional<String> clientUrl() {
        return clientUrl;
    }

    /**
     * A list of strings denoting the different scopes or access levels required by the tool.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> scopes() {
        return (Optional<List<String>>) scopes;
    }

    /**
     * A list of strings denoting the different audience which can access the tool.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> audiences() {
        return (Optional<List<String>>) audiences;
    }

    /**
     * The OAuth provider's endpoint, where access tokens are requested.
     */
    @JsonIgnore
    public Optional<String> authorizationUrl() {
        return authorizationUrl;
    }

    /**
     * The time the tool was last authorized in ISO format (ISO 8601).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastAuthorizedAt() {
        return lastAuthorizedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether or not this tool is hosted on-premise.
     */
    public AuthConfig withIsOnPrem(boolean isOnPrem) {
        Utils.checkNotNull(isOnPrem, "isOnPrem");
        this.isOnPrem = Optional.ofNullable(isOnPrem);
        return this;
    }

    /**
     * Whether or not this tool is hosted on-premise.
     */
    public AuthConfig withIsOnPrem(Optional<Boolean> isOnPrem) {
        Utils.checkNotNull(isOnPrem, "isOnPrem");
        this.isOnPrem = isOnPrem;
        return this;
    }

    /**
     * Whether or not this uses central auth.
     */
    public AuthConfig withUsesCentralAuth(boolean usesCentralAuth) {
        Utils.checkNotNull(usesCentralAuth, "usesCentralAuth");
        this.usesCentralAuth = Optional.ofNullable(usesCentralAuth);
        return this;
    }

    /**
     * Whether or not this uses central auth.
     */
    public AuthConfig withUsesCentralAuth(Optional<Boolean> usesCentralAuth) {
        Utils.checkNotNull(usesCentralAuth, "usesCentralAuth");
        this.usesCentralAuth = usesCentralAuth;
        return this;
    }

    /**
     * The type of authentication being used.
     * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
     * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
     * 'OAUTH_USER' uses individual user tokens for external API calls.
     * 'DWD' refers to domain wide delegation.
     */
    public AuthConfig withType(AuthConfigType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of authentication being used.
     * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
     * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
     * 'OAUTH_USER' uses individual user tokens for external API calls.
     * 'DWD' refers to domain wide delegation.
     */
    public AuthConfig withType(Optional<? extends AuthConfigType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The type of grant type being used.
     */
    public AuthConfig withGrantType(GrantType grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = Optional.ofNullable(grantType);
        return this;
    }

    /**
     * The type of grant type being used.
     */
    public AuthConfig withGrantType(Optional<? extends GrantType> grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    /**
     * Auth status of the tool.
     */
    public AuthConfig withStatus(AuthConfigStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Auth status of the tool.
     */
    public AuthConfig withStatus(Optional<? extends AuthConfigStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The URL where users will be directed to start the OAuth flow.
     */
    public AuthConfig withClientUrl(String clientUrl) {
        Utils.checkNotNull(clientUrl, "clientUrl");
        this.clientUrl = Optional.ofNullable(clientUrl);
        return this;
    }

    /**
     * The URL where users will be directed to start the OAuth flow.
     */
    public AuthConfig withClientUrl(Optional<String> clientUrl) {
        Utils.checkNotNull(clientUrl, "clientUrl");
        this.clientUrl = clientUrl;
        return this;
    }

    /**
     * A list of strings denoting the different scopes or access levels required by the tool.
     */
    public AuthConfig withScopes(List<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }

    /**
     * A list of strings denoting the different scopes or access levels required by the tool.
     */
    public AuthConfig withScopes(Optional<? extends List<String>> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * A list of strings denoting the different audience which can access the tool.
     */
    public AuthConfig withAudiences(List<String> audiences) {
        Utils.checkNotNull(audiences, "audiences");
        this.audiences = Optional.ofNullable(audiences);
        return this;
    }

    /**
     * A list of strings denoting the different audience which can access the tool.
     */
    public AuthConfig withAudiences(Optional<? extends List<String>> audiences) {
        Utils.checkNotNull(audiences, "audiences");
        this.audiences = audiences;
        return this;
    }

    /**
     * The OAuth provider's endpoint, where access tokens are requested.
     */
    public AuthConfig withAuthorizationUrl(String authorizationUrl) {
        Utils.checkNotNull(authorizationUrl, "authorizationUrl");
        this.authorizationUrl = Optional.ofNullable(authorizationUrl);
        return this;
    }

    /**
     * The OAuth provider's endpoint, where access tokens are requested.
     */
    public AuthConfig withAuthorizationUrl(Optional<String> authorizationUrl) {
        Utils.checkNotNull(authorizationUrl, "authorizationUrl");
        this.authorizationUrl = authorizationUrl;
        return this;
    }

    /**
     * The time the tool was last authorized in ISO format (ISO 8601).
     */
    public AuthConfig withLastAuthorizedAt(OffsetDateTime lastAuthorizedAt) {
        Utils.checkNotNull(lastAuthorizedAt, "lastAuthorizedAt");
        this.lastAuthorizedAt = Optional.ofNullable(lastAuthorizedAt);
        return this;
    }

    /**
     * The time the tool was last authorized in ISO format (ISO 8601).
     */
    public AuthConfig withLastAuthorizedAt(Optional<OffsetDateTime> lastAuthorizedAt) {
        Utils.checkNotNull(lastAuthorizedAt, "lastAuthorizedAt");
        this.lastAuthorizedAt = lastAuthorizedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthConfig other = (AuthConfig) o;
        return 
            Objects.deepEquals(this.isOnPrem, other.isOnPrem) &&
            Objects.deepEquals(this.usesCentralAuth, other.usesCentralAuth) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.grantType, other.grantType) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.clientUrl, other.clientUrl) &&
            Objects.deepEquals(this.scopes, other.scopes) &&
            Objects.deepEquals(this.audiences, other.audiences) &&
            Objects.deepEquals(this.authorizationUrl, other.authorizationUrl) &&
            Objects.deepEquals(this.lastAuthorizedAt, other.lastAuthorizedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isOnPrem,
            usesCentralAuth,
            type,
            grantType,
            status,
            clientUrl,
            scopes,
            audiences,
            authorizationUrl,
            lastAuthorizedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthConfig.class,
                "isOnPrem", isOnPrem,
                "usesCentralAuth", usesCentralAuth,
                "type", type,
                "grantType", grantType,
                "status", status,
                "clientUrl", clientUrl,
                "scopes", scopes,
                "audiences", audiences,
                "authorizationUrl", authorizationUrl,
                "lastAuthorizedAt", lastAuthorizedAt);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isOnPrem = Optional.empty();
 
        private Optional<Boolean> usesCentralAuth = Optional.empty();
 
        private Optional<? extends AuthConfigType> type = Optional.empty();
 
        private Optional<? extends GrantType> grantType = Optional.empty();
 
        private Optional<? extends AuthConfigStatus> status = Optional.empty();
 
        private Optional<String> clientUrl = Optional.empty();
 
        private Optional<? extends List<String>> scopes = Optional.empty();
 
        private Optional<? extends List<String>> audiences = Optional.empty();
 
        private Optional<String> authorizationUrl = Optional.empty();
 
        private Optional<OffsetDateTime> lastAuthorizedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not this tool is hosted on-premise.
         */
        public Builder isOnPrem(boolean isOnPrem) {
            Utils.checkNotNull(isOnPrem, "isOnPrem");
            this.isOnPrem = Optional.ofNullable(isOnPrem);
            return this;
        }

        /**
         * Whether or not this tool is hosted on-premise.
         */
        public Builder isOnPrem(Optional<Boolean> isOnPrem) {
            Utils.checkNotNull(isOnPrem, "isOnPrem");
            this.isOnPrem = isOnPrem;
            return this;
        }

        /**
         * Whether or not this uses central auth.
         */
        public Builder usesCentralAuth(boolean usesCentralAuth) {
            Utils.checkNotNull(usesCentralAuth, "usesCentralAuth");
            this.usesCentralAuth = Optional.ofNullable(usesCentralAuth);
            return this;
        }

        /**
         * Whether or not this uses central auth.
         */
        public Builder usesCentralAuth(Optional<Boolean> usesCentralAuth) {
            Utils.checkNotNull(usesCentralAuth, "usesCentralAuth");
            this.usesCentralAuth = usesCentralAuth;
            return this;
        }

        /**
         * The type of authentication being used.
         * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
         * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
         * 'OAUTH_USER' uses individual user tokens for external API calls.
         * 'DWD' refers to domain wide delegation.
         */
        public Builder type(AuthConfigType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of authentication being used.
         * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
         * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
         * 'OAUTH_USER' uses individual user tokens for external API calls.
         * 'DWD' refers to domain wide delegation.
         */
        public Builder type(Optional<? extends AuthConfigType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The type of grant type being used.
         */
        public Builder grantType(GrantType grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = Optional.ofNullable(grantType);
            return this;
        }

        /**
         * The type of grant type being used.
         */
        public Builder grantType(Optional<? extends GrantType> grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }

        /**
         * Auth status of the tool.
         */
        public Builder status(AuthConfigStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Auth status of the tool.
         */
        public Builder status(Optional<? extends AuthConfigStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The URL where users will be directed to start the OAuth flow.
         */
        public Builder clientUrl(String clientUrl) {
            Utils.checkNotNull(clientUrl, "clientUrl");
            this.clientUrl = Optional.ofNullable(clientUrl);
            return this;
        }

        /**
         * The URL where users will be directed to start the OAuth flow.
         */
        public Builder clientUrl(Optional<String> clientUrl) {
            Utils.checkNotNull(clientUrl, "clientUrl");
            this.clientUrl = clientUrl;
            return this;
        }

        /**
         * A list of strings denoting the different scopes or access levels required by the tool.
         */
        public Builder scopes(List<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        /**
         * A list of strings denoting the different scopes or access levels required by the tool.
         */
        public Builder scopes(Optional<? extends List<String>> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }

        /**
         * A list of strings denoting the different audience which can access the tool.
         */
        public Builder audiences(List<String> audiences) {
            Utils.checkNotNull(audiences, "audiences");
            this.audiences = Optional.ofNullable(audiences);
            return this;
        }

        /**
         * A list of strings denoting the different audience which can access the tool.
         */
        public Builder audiences(Optional<? extends List<String>> audiences) {
            Utils.checkNotNull(audiences, "audiences");
            this.audiences = audiences;
            return this;
        }

        /**
         * The OAuth provider's endpoint, where access tokens are requested.
         */
        public Builder authorizationUrl(String authorizationUrl) {
            Utils.checkNotNull(authorizationUrl, "authorizationUrl");
            this.authorizationUrl = Optional.ofNullable(authorizationUrl);
            return this;
        }

        /**
         * The OAuth provider's endpoint, where access tokens are requested.
         */
        public Builder authorizationUrl(Optional<String> authorizationUrl) {
            Utils.checkNotNull(authorizationUrl, "authorizationUrl");
            this.authorizationUrl = authorizationUrl;
            return this;
        }

        /**
         * The time the tool was last authorized in ISO format (ISO 8601).
         */
        public Builder lastAuthorizedAt(OffsetDateTime lastAuthorizedAt) {
            Utils.checkNotNull(lastAuthorizedAt, "lastAuthorizedAt");
            this.lastAuthorizedAt = Optional.ofNullable(lastAuthorizedAt);
            return this;
        }

        /**
         * The time the tool was last authorized in ISO format (ISO 8601).
         */
        public Builder lastAuthorizedAt(Optional<OffsetDateTime> lastAuthorizedAt) {
            Utils.checkNotNull(lastAuthorizedAt, "lastAuthorizedAt");
            this.lastAuthorizedAt = lastAuthorizedAt;
            return this;
        }
        
        public AuthConfig build() {
            return new AuthConfig(
                isOnPrem,
                usesCentralAuth,
                type,
                grantType,
                status,
                clientUrl,
                scopes,
                audiences,
                authorizationUrl,
                lastAuthorizedAt);
        }
    }
}
