/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.utils.HasSecurity;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Security implements HasSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=apiKey,subtype=header,name=Authorization")
    private Optional<String> actAsBearerToken;

    @SpeakeasyMetadata("security:scheme=true,type=apiKey,subtype=header,name=Authorization")
    private Optional<String> cookieAuth;

    @JsonCreator
    public Security(
            Optional<String> actAsBearerToken,
            Optional<String> cookieAuth) {
        Utils.checkNotNull(actAsBearerToken, "actAsBearerToken");
        Utils.checkNotNull(cookieAuth, "cookieAuth");
        this.actAsBearerToken = actAsBearerToken;
        this.cookieAuth = cookieAuth;
    }
    
    public Security() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> actAsBearerToken() {
        return actAsBearerToken;
    }

    @JsonIgnore
    public Optional<String> cookieAuth() {
        return cookieAuth;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Security withActAsBearerToken(String actAsBearerToken) {
        Utils.checkNotNull(actAsBearerToken, "actAsBearerToken");
        this.actAsBearerToken = Optional.ofNullable(actAsBearerToken);
        return this;
    }

    public Security withActAsBearerToken(Optional<String> actAsBearerToken) {
        Utils.checkNotNull(actAsBearerToken, "actAsBearerToken");
        this.actAsBearerToken = actAsBearerToken;
        return this;
    }

    public Security withCookieAuth(String cookieAuth) {
        Utils.checkNotNull(cookieAuth, "cookieAuth");
        this.cookieAuth = Optional.ofNullable(cookieAuth);
        return this;
    }

    public Security withCookieAuth(Optional<String> cookieAuth) {
        Utils.checkNotNull(cookieAuth, "cookieAuth");
        this.cookieAuth = cookieAuth;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            Objects.deepEquals(this.actAsBearerToken, other.actAsBearerToken) &&
            Objects.deepEquals(this.cookieAuth, other.cookieAuth);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            actAsBearerToken,
            cookieAuth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "actAsBearerToken", actAsBearerToken,
                "cookieAuth", cookieAuth);
    }
    
    public final static class Builder {
 
        private Optional<String> actAsBearerToken = Optional.empty();
 
        private Optional<String> cookieAuth = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder actAsBearerToken(String actAsBearerToken) {
            Utils.checkNotNull(actAsBearerToken, "actAsBearerToken");
            this.actAsBearerToken = Optional.ofNullable(actAsBearerToken);
            return this;
        }

        public Builder actAsBearerToken(Optional<String> actAsBearerToken) {
            Utils.checkNotNull(actAsBearerToken, "actAsBearerToken");
            this.actAsBearerToken = actAsBearerToken;
            return this;
        }

        public Builder cookieAuth(String cookieAuth) {
            Utils.checkNotNull(cookieAuth, "cookieAuth");
            this.cookieAuth = Optional.ofNullable(cookieAuth);
            return this;
        }

        public Builder cookieAuth(Optional<String> cookieAuth) {
            Utils.checkNotNull(cookieAuth, "cookieAuth");
            this.cookieAuth = cookieAuth;
            return this;
        }
        
        public Security build() {
            return new Security(
                actAsBearerToken,
                cookieAuth);
        }
    }
}
