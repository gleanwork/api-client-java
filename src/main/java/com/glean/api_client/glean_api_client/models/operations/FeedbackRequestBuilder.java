/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.SDKConfiguration;
import com.glean.api_client.glean_api_client.models.components.Feedback;
import com.glean.api_client.glean_api_client.operations.FeedbackOperation;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class FeedbackRequestBuilder {

    private Optional<String> feedbackQueryParameter = Optional.empty();
    private Optional<? extends Feedback> feedback1 = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public FeedbackRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public FeedbackRequestBuilder feedbackQueryParameter(String feedbackQueryParameter) {
        Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
        this.feedbackQueryParameter = Optional.of(feedbackQueryParameter);
        return this;
    }

    public FeedbackRequestBuilder feedbackQueryParameter(Optional<String> feedbackQueryParameter) {
        Utils.checkNotNull(feedbackQueryParameter, "feedbackQueryParameter");
        this.feedbackQueryParameter = feedbackQueryParameter;
        return this;
    }
                
    public FeedbackRequestBuilder feedback1(Feedback feedback1) {
        Utils.checkNotNull(feedback1, "feedback1");
        this.feedback1 = Optional.of(feedback1);
        return this;
    }

    public FeedbackRequestBuilder feedback1(Optional<? extends Feedback> feedback1) {
        Utils.checkNotNull(feedback1, "feedback1");
        this.feedback1 = feedback1;
        return this;
    }


    private FeedbackRequest buildRequest() {

        FeedbackRequest request = new FeedbackRequest(feedbackQueryParameter,
            feedback1);

        return request;
    }

    public FeedbackResponse call() throws Exception {
        
        RequestOperation<FeedbackRequest, FeedbackResponse> operation
              = new FeedbackOperation( sdkConfiguration);
        FeedbackRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
