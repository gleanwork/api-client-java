/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class HotwordProximity {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windowBefore")
    private Optional<Long> windowBefore;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windowAfter")
    private Optional<Long> windowAfter;

    @JsonCreator
    public HotwordProximity(
            @JsonProperty("windowBefore") Optional<Long> windowBefore,
            @JsonProperty("windowAfter") Optional<Long> windowAfter) {
        Utils.checkNotNull(windowBefore, "windowBefore");
        Utils.checkNotNull(windowAfter, "windowAfter");
        this.windowBefore = windowBefore;
        this.windowAfter = windowAfter;
    }
    
    public HotwordProximity() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> windowBefore() {
        return windowBefore;
    }

    @JsonIgnore
    public Optional<Long> windowAfter() {
        return windowAfter;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public HotwordProximity withWindowBefore(long windowBefore) {
        Utils.checkNotNull(windowBefore, "windowBefore");
        this.windowBefore = Optional.ofNullable(windowBefore);
        return this;
    }

    public HotwordProximity withWindowBefore(Optional<Long> windowBefore) {
        Utils.checkNotNull(windowBefore, "windowBefore");
        this.windowBefore = windowBefore;
        return this;
    }

    public HotwordProximity withWindowAfter(long windowAfter) {
        Utils.checkNotNull(windowAfter, "windowAfter");
        this.windowAfter = Optional.ofNullable(windowAfter);
        return this;
    }

    public HotwordProximity withWindowAfter(Optional<Long> windowAfter) {
        Utils.checkNotNull(windowAfter, "windowAfter");
        this.windowAfter = windowAfter;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HotwordProximity other = (HotwordProximity) o;
        return 
            Utils.enhancedDeepEquals(this.windowBefore, other.windowBefore) &&
            Utils.enhancedDeepEquals(this.windowAfter, other.windowAfter);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            windowBefore,
            windowAfter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HotwordProximity.class,
                "windowBefore", windowBefore,
                "windowAfter", windowAfter);
    }
    
    public final static class Builder {
 
        private Optional<Long> windowBefore = Optional.empty();
 
        private Optional<Long> windowAfter = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder windowBefore(long windowBefore) {
            Utils.checkNotNull(windowBefore, "windowBefore");
            this.windowBefore = Optional.ofNullable(windowBefore);
            return this;
        }

        public Builder windowBefore(Optional<Long> windowBefore) {
            Utils.checkNotNull(windowBefore, "windowBefore");
            this.windowBefore = windowBefore;
            return this;
        }

        public Builder windowAfter(long windowAfter) {
            Utils.checkNotNull(windowAfter, "windowAfter");
            this.windowAfter = Optional.ofNullable(windowAfter);
            return this;
        }

        public Builder windowAfter(Optional<Long> windowAfter) {
            Utils.checkNotNull(windowAfter, "windowAfter");
            this.windowAfter = windowAfter;
            return this;
        }
        
        public HotwordProximity build() {
            return new HotwordProximity(
                windowBefore,
                windowAfter);
        }
    }
}
