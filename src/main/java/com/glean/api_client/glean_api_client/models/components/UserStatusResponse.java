/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * UserStatusResponse
 * 
 * <p>Describes the user status response body
 */
public class UserStatusResponse {

    /**
     * Whether the user is active or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isActiveUser")
    private Optional<Boolean> isActiveUser;

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadStatus")
    private Optional<? extends UploadStatusEnum> uploadStatus;

    /**
     * Time of last successful upload for the user, in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUploadedAt")
    private Optional<String> lastUploadedAt;

    @JsonCreator
    public UserStatusResponse(
            @JsonProperty("isActiveUser") Optional<Boolean> isActiveUser,
            @JsonProperty("uploadStatus") Optional<? extends UploadStatusEnum> uploadStatus,
            @JsonProperty("lastUploadedAt") Optional<String> lastUploadedAt) {
        Utils.checkNotNull(isActiveUser, "isActiveUser");
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.isActiveUser = isActiveUser;
        this.uploadStatus = uploadStatus;
        this.lastUploadedAt = lastUploadedAt;
    }
    
    public UserStatusResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether the user is active or not
     */
    @JsonIgnore
    public Optional<Boolean> isActiveUser() {
        return isActiveUser;
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UploadStatusEnum> uploadStatus() {
        return (Optional<UploadStatusEnum>) uploadStatus;
    }

    /**
     * Time of last successful upload for the user, in ISO 8601 format
     */
    @JsonIgnore
    public Optional<String> lastUploadedAt() {
        return lastUploadedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether the user is active or not
     */
    public UserStatusResponse withIsActiveUser(boolean isActiveUser) {
        Utils.checkNotNull(isActiveUser, "isActiveUser");
        this.isActiveUser = Optional.ofNullable(isActiveUser);
        return this;
    }

    /**
     * Whether the user is active or not
     */
    public UserStatusResponse withIsActiveUser(Optional<Boolean> isActiveUser) {
        Utils.checkNotNull(isActiveUser, "isActiveUser");
        this.isActiveUser = isActiveUser;
        return this;
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    public UserStatusResponse withUploadStatus(UploadStatusEnum uploadStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        this.uploadStatus = Optional.ofNullable(uploadStatus);
        return this;
    }

    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    public UserStatusResponse withUploadStatus(Optional<? extends UploadStatusEnum> uploadStatus) {
        Utils.checkNotNull(uploadStatus, "uploadStatus");
        this.uploadStatus = uploadStatus;
        return this;
    }

    /**
     * Time of last successful upload for the user, in ISO 8601 format
     */
    public UserStatusResponse withLastUploadedAt(String lastUploadedAt) {
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.lastUploadedAt = Optional.ofNullable(lastUploadedAt);
        return this;
    }

    /**
     * Time of last successful upload for the user, in ISO 8601 format
     */
    public UserStatusResponse withLastUploadedAt(Optional<String> lastUploadedAt) {
        Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
        this.lastUploadedAt = lastUploadedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserStatusResponse other = (UserStatusResponse) o;
        return 
            Objects.deepEquals(this.isActiveUser, other.isActiveUser) &&
            Objects.deepEquals(this.uploadStatus, other.uploadStatus) &&
            Objects.deepEquals(this.lastUploadedAt, other.lastUploadedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isActiveUser,
            uploadStatus,
            lastUploadedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserStatusResponse.class,
                "isActiveUser", isActiveUser,
                "uploadStatus", uploadStatus,
                "lastUploadedAt", lastUploadedAt);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isActiveUser = Optional.empty();
 
        private Optional<? extends UploadStatusEnum> uploadStatus = Optional.empty();
 
        private Optional<String> lastUploadedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the user is active or not
         */
        public Builder isActiveUser(boolean isActiveUser) {
            Utils.checkNotNull(isActiveUser, "isActiveUser");
            this.isActiveUser = Optional.ofNullable(isActiveUser);
            return this;
        }

        /**
         * Whether the user is active or not
         */
        public Builder isActiveUser(Optional<Boolean> isActiveUser) {
            Utils.checkNotNull(isActiveUser, "isActiveUser");
            this.isActiveUser = isActiveUser;
            return this;
        }

        /**
         * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
         */
        public Builder uploadStatus(UploadStatusEnum uploadStatus) {
            Utils.checkNotNull(uploadStatus, "uploadStatus");
            this.uploadStatus = Optional.ofNullable(uploadStatus);
            return this;
        }

        /**
         * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
         */
        public Builder uploadStatus(Optional<? extends UploadStatusEnum> uploadStatus) {
            Utils.checkNotNull(uploadStatus, "uploadStatus");
            this.uploadStatus = uploadStatus;
            return this;
        }

        /**
         * Time of last successful upload for the user, in ISO 8601 format
         */
        public Builder lastUploadedAt(String lastUploadedAt) {
            Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
            this.lastUploadedAt = Optional.ofNullable(lastUploadedAt);
            return this;
        }

        /**
         * Time of last successful upload for the user, in ISO 8601 format
         */
        public Builder lastUploadedAt(Optional<String> lastUploadedAt) {
            Utils.checkNotNull(lastUploadedAt, "lastUploadedAt");
            this.lastUploadedAt = lastUploadedAt;
            return this;
        }
        
        public UserStatusResponse build() {
            return new UserStatusResponse(
                isActiveUser,
                uploadStatus,
                lastUploadedAt);
        }
    }
}
