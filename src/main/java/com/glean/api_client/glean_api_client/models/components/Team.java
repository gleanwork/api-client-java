/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class Team {

    /**
     * A list of objects related to a source object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedObjects")
    private Optional<? extends Map<String, RelatedObjectEdge>> relatedObjects;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    /**
     * Unique identifier
     */
    @JsonProperty("id")
    private String id;

    /**
     * Team name
     */
    @JsonProperty("name")
    private String name;

    /**
     * A description of the team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessUnit")
    private Optional<String> businessUnit;

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<String> department;

    /**
     * A link to the team's photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    private Optional<String> photoUrl;

    /**
     * A link to the team's banner photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bannerUrl")
    private Optional<String> bannerUrl;

    /**
     * Link to a team page on the internet or your company's intranet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalLink")
    private Optional<String> externalLink;

    /**
     * The members on this team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members")
    private Optional<? extends List<PersonToTeamRelationship>> members;

    /**
     * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberCount")
    private Optional<Long> memberCount;

    /**
     * The emails for this team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<TeamEmail>> emails;

    /**
     * Customizable fields for additional team information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    private Optional<? extends List<CustomFieldData>> customFields;

    /**
     * The datasource profiles of the team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceProfiles")
    private Optional<? extends List<DatasourceProfile>> datasourceProfiles;

    /**
     * the data source of the team, e.g. GDRIVE
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * For teams created from docs, the doc title. Otherwise empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdFrom")
    private Optional<String> createdFrom;

    /**
     * when this team was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdatedAt")
    private Optional<OffsetDateTime> lastUpdatedAt;

    /**
     * whether this team is fully processed or there are still unprocessed operations that'll affect it
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TeamStatus> status;

    /**
     * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canBeDeleted")
    private Optional<Boolean> canBeDeleted;

    /**
     * The logging id of the team used in scrubbed logs, client analytics, and metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loggingId")
    private Optional<String> loggingId;

    @JsonCreator
    public Team(
            @JsonProperty("relatedObjects") Optional<? extends Map<String, RelatedObjectEdge>> relatedObjects,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("businessUnit") Optional<String> businessUnit,
            @JsonProperty("department") Optional<String> department,
            @JsonProperty("photoUrl") Optional<String> photoUrl,
            @JsonProperty("bannerUrl") Optional<String> bannerUrl,
            @JsonProperty("externalLink") Optional<String> externalLink,
            @JsonProperty("members") Optional<? extends List<PersonToTeamRelationship>> members,
            @JsonProperty("memberCount") Optional<Long> memberCount,
            @JsonProperty("emails") Optional<? extends List<TeamEmail>> emails,
            @JsonProperty("customFields") Optional<? extends List<CustomFieldData>> customFields,
            @JsonProperty("datasourceProfiles") Optional<? extends List<DatasourceProfile>> datasourceProfiles,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("createdFrom") Optional<String> createdFrom,
            @JsonProperty("lastUpdatedAt") Optional<OffsetDateTime> lastUpdatedAt,
            @JsonProperty("status") Optional<? extends TeamStatus> status,
            @JsonProperty("canBeDeleted") Optional<Boolean> canBeDeleted,
            @JsonProperty("loggingId") Optional<String> loggingId) {
        Utils.checkNotNull(relatedObjects, "relatedObjects");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(businessUnit, "businessUnit");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(bannerUrl, "bannerUrl");
        Utils.checkNotNull(externalLink, "externalLink");
        Utils.checkNotNull(members, "members");
        Utils.checkNotNull(memberCount, "memberCount");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(createdFrom, "createdFrom");
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(canBeDeleted, "canBeDeleted");
        Utils.checkNotNull(loggingId, "loggingId");
        this.relatedObjects = relatedObjects;
        this.permissions = permissions;
        this.id = id;
        this.name = name;
        this.description = description;
        this.businessUnit = businessUnit;
        this.department = department;
        this.photoUrl = photoUrl;
        this.bannerUrl = bannerUrl;
        this.externalLink = externalLink;
        this.members = members;
        this.memberCount = memberCount;
        this.emails = emails;
        this.customFields = customFields;
        this.datasourceProfiles = datasourceProfiles;
        this.datasource = datasource;
        this.createdFrom = createdFrom;
        this.lastUpdatedAt = lastUpdatedAt;
        this.status = status;
        this.canBeDeleted = canBeDeleted;
        this.loggingId = loggingId;
    }
    
    public Team(
            String id,
            String name) {
        this(Optional.empty(), Optional.empty(), id, name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A list of objects related to a source object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, RelatedObjectEdge>> relatedObjects() {
        return (Optional<Map<String, RelatedObjectEdge>>) relatedObjects;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Team name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A description of the team
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonIgnore
    public Optional<String> businessUnit() {
        return businessUnit;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonIgnore
    public Optional<String> department() {
        return department;
    }

    /**
     * A link to the team's photo.
     */
    @JsonIgnore
    public Optional<String> photoUrl() {
        return photoUrl;
    }

    /**
     * A link to the team's banner photo.
     */
    @JsonIgnore
    public Optional<String> bannerUrl() {
        return bannerUrl;
    }

    /**
     * Link to a team page on the internet or your company's intranet
     */
    @JsonIgnore
    public Optional<String> externalLink() {
        return externalLink;
    }

    /**
     * The members on this team
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PersonToTeamRelationship>> members() {
        return (Optional<List<PersonToTeamRelationship>>) members;
    }

    /**
     * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
     */
    @JsonIgnore
    public Optional<Long> memberCount() {
        return memberCount;
    }

    /**
     * The emails for this team
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TeamEmail>> emails() {
        return (Optional<List<TeamEmail>>) emails;
    }

    /**
     * Customizable fields for additional team information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomFieldData>> customFields() {
        return (Optional<List<CustomFieldData>>) customFields;
    }

    /**
     * The datasource profiles of the team
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DatasourceProfile>> datasourceProfiles() {
        return (Optional<List<DatasourceProfile>>) datasourceProfiles;
    }

    /**
     * the data source of the team, e.g. GDRIVE
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * For teams created from docs, the doc title. Otherwise empty.
     */
    @JsonIgnore
    public Optional<String> createdFrom() {
        return createdFrom;
    }

    /**
     * when this team was last updated.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastUpdatedAt() {
        return lastUpdatedAt;
    }

    /**
     * whether this team is fully processed or there are still unprocessed operations that'll affect it
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TeamStatus> status() {
        return (Optional<TeamStatus>) status;
    }

    /**
     * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
     */
    @JsonIgnore
    public Optional<Boolean> canBeDeleted() {
        return canBeDeleted;
    }

    /**
     * The logging id of the team used in scrubbed logs, client analytics, and metrics.
     */
    @JsonIgnore
    public Optional<String> loggingId() {
        return loggingId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of objects related to a source object.
     */
    public Team withRelatedObjects(Map<String, RelatedObjectEdge> relatedObjects) {
        Utils.checkNotNull(relatedObjects, "relatedObjects");
        this.relatedObjects = Optional.ofNullable(relatedObjects);
        return this;
    }

    /**
     * A list of objects related to a source object.
     */
    public Team withRelatedObjects(Optional<? extends Map<String, RelatedObjectEdge>> relatedObjects) {
        Utils.checkNotNull(relatedObjects, "relatedObjects");
        this.relatedObjects = relatedObjects;
        return this;
    }

    public Team withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public Team withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * Unique identifier
     */
    public Team withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Team name
     */
    public Team withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A description of the team
     */
    public Team withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A description of the team
     */
    public Team withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public Team withBusinessUnit(String businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = Optional.ofNullable(businessUnit);
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public Team withBusinessUnit(Optional<String> businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = businessUnit;
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public Team withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public Team withDepartment(Optional<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * A link to the team's photo.
     */
    public Team withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = Optional.ofNullable(photoUrl);
        return this;
    }

    /**
     * A link to the team's photo.
     */
    public Team withPhotoUrl(Optional<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * A link to the team's banner photo.
     */
    public Team withBannerUrl(String bannerUrl) {
        Utils.checkNotNull(bannerUrl, "bannerUrl");
        this.bannerUrl = Optional.ofNullable(bannerUrl);
        return this;
    }

    /**
     * A link to the team's banner photo.
     */
    public Team withBannerUrl(Optional<String> bannerUrl) {
        Utils.checkNotNull(bannerUrl, "bannerUrl");
        this.bannerUrl = bannerUrl;
        return this;
    }

    /**
     * Link to a team page on the internet or your company's intranet
     */
    public Team withExternalLink(String externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = Optional.ofNullable(externalLink);
        return this;
    }

    /**
     * Link to a team page on the internet or your company's intranet
     */
    public Team withExternalLink(Optional<String> externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = externalLink;
        return this;
    }

    /**
     * The members on this team
     */
    public Team withMembers(List<PersonToTeamRelationship> members) {
        Utils.checkNotNull(members, "members");
        this.members = Optional.ofNullable(members);
        return this;
    }

    /**
     * The members on this team
     */
    public Team withMembers(Optional<? extends List<PersonToTeamRelationship>> members) {
        Utils.checkNotNull(members, "members");
        this.members = members;
        return this;
    }

    /**
     * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
     */
    public Team withMemberCount(long memberCount) {
        Utils.checkNotNull(memberCount, "memberCount");
        this.memberCount = Optional.ofNullable(memberCount);
        return this;
    }

    /**
     * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
     */
    public Team withMemberCount(Optional<Long> memberCount) {
        Utils.checkNotNull(memberCount, "memberCount");
        this.memberCount = memberCount;
        return this;
    }

    /**
     * The emails for this team
     */
    public Team withEmails(List<TeamEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    /**
     * The emails for this team
     */
    public Team withEmails(Optional<? extends List<TeamEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * Customizable fields for additional team information.
     */
    public Team withCustomFields(List<CustomFieldData> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    /**
     * Customizable fields for additional team information.
     */
    public Team withCustomFields(Optional<? extends List<CustomFieldData>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * The datasource profiles of the team
     */
    public Team withDatasourceProfiles(List<DatasourceProfile> datasourceProfiles) {
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        this.datasourceProfiles = Optional.ofNullable(datasourceProfiles);
        return this;
    }

    /**
     * The datasource profiles of the team
     */
    public Team withDatasourceProfiles(Optional<? extends List<DatasourceProfile>> datasourceProfiles) {
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        this.datasourceProfiles = datasourceProfiles;
        return this;
    }

    /**
     * the data source of the team, e.g. GDRIVE
     */
    public Team withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * the data source of the team, e.g. GDRIVE
     */
    public Team withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * For teams created from docs, the doc title. Otherwise empty.
     */
    public Team withCreatedFrom(String createdFrom) {
        Utils.checkNotNull(createdFrom, "createdFrom");
        this.createdFrom = Optional.ofNullable(createdFrom);
        return this;
    }

    /**
     * For teams created from docs, the doc title. Otherwise empty.
     */
    public Team withCreatedFrom(Optional<String> createdFrom) {
        Utils.checkNotNull(createdFrom, "createdFrom");
        this.createdFrom = createdFrom;
        return this;
    }

    /**
     * when this team was last updated.
     */
    public Team withLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        this.lastUpdatedAt = Optional.ofNullable(lastUpdatedAt);
        return this;
    }

    /**
     * when this team was last updated.
     */
    public Team withLastUpdatedAt(Optional<OffsetDateTime> lastUpdatedAt) {
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        this.lastUpdatedAt = lastUpdatedAt;
        return this;
    }

    /**
     * whether this team is fully processed or there are still unprocessed operations that'll affect it
     */
    public Team withStatus(TeamStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * whether this team is fully processed or there are still unprocessed operations that'll affect it
     */
    public Team withStatus(Optional<? extends TeamStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
     */
    public Team withCanBeDeleted(boolean canBeDeleted) {
        Utils.checkNotNull(canBeDeleted, "canBeDeleted");
        this.canBeDeleted = Optional.ofNullable(canBeDeleted);
        return this;
    }

    /**
     * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
     */
    public Team withCanBeDeleted(Optional<Boolean> canBeDeleted) {
        Utils.checkNotNull(canBeDeleted, "canBeDeleted");
        this.canBeDeleted = canBeDeleted;
        return this;
    }

    /**
     * The logging id of the team used in scrubbed logs, client analytics, and metrics.
     */
    public Team withLoggingId(String loggingId) {
        Utils.checkNotNull(loggingId, "loggingId");
        this.loggingId = Optional.ofNullable(loggingId);
        return this;
    }

    /**
     * The logging id of the team used in scrubbed logs, client analytics, and metrics.
     */
    public Team withLoggingId(Optional<String> loggingId) {
        Utils.checkNotNull(loggingId, "loggingId");
        this.loggingId = loggingId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Team other = (Team) o;
        return 
            Utils.enhancedDeepEquals(this.relatedObjects, other.relatedObjects) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.businessUnit, other.businessUnit) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.bannerUrl, other.bannerUrl) &&
            Utils.enhancedDeepEquals(this.externalLink, other.externalLink) &&
            Utils.enhancedDeepEquals(this.members, other.members) &&
            Utils.enhancedDeepEquals(this.memberCount, other.memberCount) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.datasourceProfiles, other.datasourceProfiles) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.createdFrom, other.createdFrom) &&
            Utils.enhancedDeepEquals(this.lastUpdatedAt, other.lastUpdatedAt) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.canBeDeleted, other.canBeDeleted) &&
            Utils.enhancedDeepEquals(this.loggingId, other.loggingId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            relatedObjects,
            permissions,
            id,
            name,
            description,
            businessUnit,
            department,
            photoUrl,
            bannerUrl,
            externalLink,
            members,
            memberCount,
            emails,
            customFields,
            datasourceProfiles,
            datasource,
            createdFrom,
            lastUpdatedAt,
            status,
            canBeDeleted,
            loggingId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Team.class,
                "relatedObjects", relatedObjects,
                "permissions", permissions,
                "id", id,
                "name", name,
                "description", description,
                "businessUnit", businessUnit,
                "department", department,
                "photoUrl", photoUrl,
                "bannerUrl", bannerUrl,
                "externalLink", externalLink,
                "members", members,
                "memberCount", memberCount,
                "emails", emails,
                "customFields", customFields,
                "datasourceProfiles", datasourceProfiles,
                "datasource", datasource,
                "createdFrom", createdFrom,
                "lastUpdatedAt", lastUpdatedAt,
                "status", status,
                "canBeDeleted", canBeDeleted,
                "loggingId", loggingId);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, RelatedObjectEdge>> relatedObjects = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private String id;
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> businessUnit = Optional.empty();
 
        private Optional<String> department = Optional.empty();
 
        private Optional<String> photoUrl = Optional.empty();
 
        private Optional<String> bannerUrl = Optional.empty();
 
        private Optional<String> externalLink = Optional.empty();
 
        private Optional<? extends List<PersonToTeamRelationship>> members = Optional.empty();
 
        private Optional<Long> memberCount = Optional.empty();
 
        private Optional<? extends List<TeamEmail>> emails = Optional.empty();
 
        private Optional<? extends List<CustomFieldData>> customFields = Optional.empty();
 
        private Optional<? extends List<DatasourceProfile>> datasourceProfiles = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> createdFrom = Optional.empty();
 
        private Optional<OffsetDateTime> lastUpdatedAt = Optional.empty();
 
        private Optional<? extends TeamStatus> status;
 
        private Optional<Boolean> canBeDeleted;
 
        private Optional<String> loggingId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of objects related to a source object.
         */
        public Builder relatedObjects(Map<String, RelatedObjectEdge> relatedObjects) {
            Utils.checkNotNull(relatedObjects, "relatedObjects");
            this.relatedObjects = Optional.ofNullable(relatedObjects);
            return this;
        }

        /**
         * A list of objects related to a source object.
         */
        public Builder relatedObjects(Optional<? extends Map<String, RelatedObjectEdge>> relatedObjects) {
            Utils.checkNotNull(relatedObjects, "relatedObjects");
            this.relatedObjects = relatedObjects;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Team name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A description of the team
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the team
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(String businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = Optional.ofNullable(businessUnit);
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(Optional<String> businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = businessUnit;
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(Optional<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * A link to the team's photo.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = Optional.ofNullable(photoUrl);
            return this;
        }

        /**
         * A link to the team's photo.
         */
        public Builder photoUrl(Optional<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * A link to the team's banner photo.
         */
        public Builder bannerUrl(String bannerUrl) {
            Utils.checkNotNull(bannerUrl, "bannerUrl");
            this.bannerUrl = Optional.ofNullable(bannerUrl);
            return this;
        }

        /**
         * A link to the team's banner photo.
         */
        public Builder bannerUrl(Optional<String> bannerUrl) {
            Utils.checkNotNull(bannerUrl, "bannerUrl");
            this.bannerUrl = bannerUrl;
            return this;
        }

        /**
         * Link to a team page on the internet or your company's intranet
         */
        public Builder externalLink(String externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = Optional.ofNullable(externalLink);
            return this;
        }

        /**
         * Link to a team page on the internet or your company's intranet
         */
        public Builder externalLink(Optional<String> externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = externalLink;
            return this;
        }

        /**
         * The members on this team
         */
        public Builder members(List<PersonToTeamRelationship> members) {
            Utils.checkNotNull(members, "members");
            this.members = Optional.ofNullable(members);
            return this;
        }

        /**
         * The members on this team
         */
        public Builder members(Optional<? extends List<PersonToTeamRelationship>> members) {
            Utils.checkNotNull(members, "members");
            this.members = members;
            return this;
        }

        /**
         * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
         */
        public Builder memberCount(long memberCount) {
            Utils.checkNotNull(memberCount, "memberCount");
            this.memberCount = Optional.ofNullable(memberCount);
            return this;
        }

        /**
         * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
         */
        public Builder memberCount(Optional<Long> memberCount) {
            Utils.checkNotNull(memberCount, "memberCount");
            this.memberCount = memberCount;
            return this;
        }

        /**
         * The emails for this team
         */
        public Builder emails(List<TeamEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        /**
         * The emails for this team
         */
        public Builder emails(Optional<? extends List<TeamEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * Customizable fields for additional team information.
         */
        public Builder customFields(List<CustomFieldData> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        /**
         * Customizable fields for additional team information.
         */
        public Builder customFields(Optional<? extends List<CustomFieldData>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * The datasource profiles of the team
         */
        public Builder datasourceProfiles(List<DatasourceProfile> datasourceProfiles) {
            Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
            this.datasourceProfiles = Optional.ofNullable(datasourceProfiles);
            return this;
        }

        /**
         * The datasource profiles of the team
         */
        public Builder datasourceProfiles(Optional<? extends List<DatasourceProfile>> datasourceProfiles) {
            Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
            this.datasourceProfiles = datasourceProfiles;
            return this;
        }

        /**
         * the data source of the team, e.g. GDRIVE
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * the data source of the team, e.g. GDRIVE
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * For teams created from docs, the doc title. Otherwise empty.
         */
        public Builder createdFrom(String createdFrom) {
            Utils.checkNotNull(createdFrom, "createdFrom");
            this.createdFrom = Optional.ofNullable(createdFrom);
            return this;
        }

        /**
         * For teams created from docs, the doc title. Otherwise empty.
         */
        public Builder createdFrom(Optional<String> createdFrom) {
            Utils.checkNotNull(createdFrom, "createdFrom");
            this.createdFrom = createdFrom;
            return this;
        }

        /**
         * when this team was last updated.
         */
        public Builder lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
            Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
            this.lastUpdatedAt = Optional.ofNullable(lastUpdatedAt);
            return this;
        }

        /**
         * when this team was last updated.
         */
        public Builder lastUpdatedAt(Optional<OffsetDateTime> lastUpdatedAt) {
            Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
            this.lastUpdatedAt = lastUpdatedAt;
            return this;
        }

        /**
         * whether this team is fully processed or there are still unprocessed operations that'll affect it
         */
        public Builder status(TeamStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * whether this team is fully processed or there are still unprocessed operations that'll affect it
         */
        public Builder status(Optional<? extends TeamStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
         */
        public Builder canBeDeleted(boolean canBeDeleted) {
            Utils.checkNotNull(canBeDeleted, "canBeDeleted");
            this.canBeDeleted = Optional.ofNullable(canBeDeleted);
            return this;
        }

        /**
         * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
         */
        public Builder canBeDeleted(Optional<Boolean> canBeDeleted) {
            Utils.checkNotNull(canBeDeleted, "canBeDeleted");
            this.canBeDeleted = canBeDeleted;
            return this;
        }

        /**
         * The logging id of the team used in scrubbed logs, client analytics, and metrics.
         */
        public Builder loggingId(String loggingId) {
            Utils.checkNotNull(loggingId, "loggingId");
            this.loggingId = Optional.ofNullable(loggingId);
            return this;
        }

        /**
         * The logging id of the team used in scrubbed logs, client analytics, and metrics.
         */
        public Builder loggingId(Optional<String> loggingId) {
            Utils.checkNotNull(loggingId, "loggingId");
            this.loggingId = loggingId;
            return this;
        }
        
        public Team build() {
            if (status == null) {
                status = _SINGLETON_VALUE_Status.value();
            }
            if (canBeDeleted == null) {
                canBeDeleted = _SINGLETON_VALUE_CanBeDeleted.value();
            }
            return new Team(
                relatedObjects,
                permissions,
                id,
                name,
                description,
                businessUnit,
                department,
                photoUrl,
                bannerUrl,
                externalLink,
                members,
                memberCount,
                emails,
                customFields,
                datasourceProfiles,
                datasource,
                createdFrom,
                lastUpdatedAt,
                status,
                canBeDeleted,
                loggingId);
        }

        private static final LazySingletonValue<Optional<? extends TeamStatus>> _SINGLETON_VALUE_Status =
                new LazySingletonValue<>(
                        "status",
                        "\"PROCESSED\"",
                        new TypeReference<Optional<? extends TeamStatus>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_CanBeDeleted =
                new LazySingletonValue<>(
                        "canBeDeleted",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
