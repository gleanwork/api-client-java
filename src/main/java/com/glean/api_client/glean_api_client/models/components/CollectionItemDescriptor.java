/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CollectionItemDescriptor {

    /**
     * The optional name of the Collection item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<String> icon;

    /**
     * The URL of the item being added.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * The Glean Document ID of the item being added if it's an indexed document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentId")
    private Optional<String> documentId;

    /**
     * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newNextItemId")
    private Optional<String> newNextItemId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemType")
    private Optional<? extends CollectionItemDescriptorItemType> itemType;

    @JsonCreator
    public CollectionItemDescriptor(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("icon") Optional<String> icon,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("documentId") Optional<String> documentId,
            @JsonProperty("newNextItemId") Optional<String> newNextItemId,
            @JsonProperty("itemType") Optional<? extends CollectionItemDescriptorItemType> itemType) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(icon, "icon");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(newNextItemId, "newNextItemId");
        Utils.checkNotNull(itemType, "itemType");
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.url = url;
        this.documentId = documentId;
        this.newNextItemId = newNextItemId;
        this.itemType = itemType;
    }
    
    public CollectionItemDescriptor() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The optional name of the Collection item.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    @JsonIgnore
    public Optional<String> icon() {
        return icon;
    }

    /**
     * The URL of the item being added.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * The Glean Document ID of the item being added if it's an indexed document.
     */
    @JsonIgnore
    public Optional<String> documentId() {
        return documentId;
    }

    /**
     * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
     */
    @JsonIgnore
    public Optional<String> newNextItemId() {
        return newNextItemId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectionItemDescriptorItemType> itemType() {
        return (Optional<CollectionItemDescriptorItemType>) itemType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The optional name of the Collection item.
     */
    public CollectionItemDescriptor withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The optional name of the Collection item.
     */
    public CollectionItemDescriptor withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    public CollectionItemDescriptor withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    public CollectionItemDescriptor withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    public CollectionItemDescriptor withIcon(String icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    public CollectionItemDescriptor withIcon(Optional<String> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }

    /**
     * The URL of the item being added.
     */
    public CollectionItemDescriptor withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL of the item being added.
     */
    public CollectionItemDescriptor withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The Glean Document ID of the item being added if it's an indexed document.
     */
    public CollectionItemDescriptor withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = Optional.ofNullable(documentId);
        return this;
    }

    /**
     * The Glean Document ID of the item being added if it's an indexed document.
     */
    public CollectionItemDescriptor withDocumentId(Optional<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
     */
    public CollectionItemDescriptor withNewNextItemId(String newNextItemId) {
        Utils.checkNotNull(newNextItemId, "newNextItemId");
        this.newNextItemId = Optional.ofNullable(newNextItemId);
        return this;
    }

    /**
     * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
     */
    public CollectionItemDescriptor withNewNextItemId(Optional<String> newNextItemId) {
        Utils.checkNotNull(newNextItemId, "newNextItemId");
        this.newNextItemId = newNextItemId;
        return this;
    }

    public CollectionItemDescriptor withItemType(CollectionItemDescriptorItemType itemType) {
        Utils.checkNotNull(itemType, "itemType");
        this.itemType = Optional.ofNullable(itemType);
        return this;
    }

    public CollectionItemDescriptor withItemType(Optional<? extends CollectionItemDescriptorItemType> itemType) {
        Utils.checkNotNull(itemType, "itemType");
        this.itemType = itemType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollectionItemDescriptor other = (CollectionItemDescriptor) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.icon, other.icon) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.documentId, other.documentId) &&
            Objects.deepEquals(this.newNextItemId, other.newNextItemId) &&
            Objects.deepEquals(this.itemType, other.itemType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            description,
            icon,
            url,
            documentId,
            newNextItemId,
            itemType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CollectionItemDescriptor.class,
                "name", name,
                "description", description,
                "icon", icon,
                "url", url,
                "documentId", documentId,
                "newNextItemId", newNextItemId,
                "itemType", itemType);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> icon = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> documentId = Optional.empty();
 
        private Optional<String> newNextItemId = Optional.empty();
 
        private Optional<? extends CollectionItemDescriptorItemType> itemType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The optional name of the Collection item.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The optional name of the Collection item.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A helpful description of why this CollectionItem is in the Collection that it's in.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A helpful description of why this CollectionItem is in the Collection that it's in.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The emoji icon for this CollectionItem. Only used for Text type items.
         */
        public Builder icon(String icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        /**
         * The emoji icon for this CollectionItem. Only used for Text type items.
         */
        public Builder icon(Optional<String> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }

        /**
         * The URL of the item being added.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL of the item being added.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The Glean Document ID of the item being added if it's an indexed document.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = Optional.ofNullable(documentId);
            return this;
        }

        /**
         * The Glean Document ID of the item being added if it's an indexed document.
         */
        public Builder documentId(Optional<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        /**
         * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
         */
        public Builder newNextItemId(String newNextItemId) {
            Utils.checkNotNull(newNextItemId, "newNextItemId");
            this.newNextItemId = Optional.ofNullable(newNextItemId);
            return this;
        }

        /**
         * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
         */
        public Builder newNextItemId(Optional<String> newNextItemId) {
            Utils.checkNotNull(newNextItemId, "newNextItemId");
            this.newNextItemId = newNextItemId;
            return this;
        }

        public Builder itemType(CollectionItemDescriptorItemType itemType) {
            Utils.checkNotNull(itemType, "itemType");
            this.itemType = Optional.ofNullable(itemType);
            return this;
        }

        public Builder itemType(Optional<? extends CollectionItemDescriptorItemType> itemType) {
            Utils.checkNotNull(itemType, "itemType");
            this.itemType = itemType;
            return this;
        }
        
        public CollectionItemDescriptor build() {
            return new CollectionItemDescriptor(
                name,
                description,
                icon,
                url,
                documentId,
                newNextItemId,
                itemType);
        }
    }
}
