/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ChatResponse
 * 
 * <p>A single response from the /chat backend.
 */
public class ChatResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<ChatMessage>> messages;

    /**
     * The id of the associated Chat the messages belong to, if one exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatId")
    private Optional<String> chatId;

    /**
     * Follow-up prompts for the user to potentially use
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followUpPrompts")
    private Optional<? extends List<String>> followUpPrompts;

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backendTimeMillis")
    private Optional<Long> backendTimeMillis;

    /**
     * A token that is used to track the session.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatSessionTrackingToken")
    private Optional<String> chatSessionTrackingToken;

    @JsonCreator
    public ChatResponse(
            @JsonProperty("messages") Optional<? extends List<ChatMessage>> messages,
            @JsonProperty("chatId") Optional<String> chatId,
            @JsonProperty("followUpPrompts") Optional<? extends List<String>> followUpPrompts,
            @JsonProperty("backendTimeMillis") Optional<Long> backendTimeMillis,
            @JsonProperty("chatSessionTrackingToken") Optional<String> chatSessionTrackingToken) {
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(chatId, "chatId");
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        Utils.checkNotNull(chatSessionTrackingToken, "chatSessionTrackingToken");
        this.messages = messages;
        this.chatId = chatId;
        this.followUpPrompts = followUpPrompts;
        this.backendTimeMillis = backendTimeMillis;
        this.chatSessionTrackingToken = chatSessionTrackingToken;
    }
    
    public ChatResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ChatMessage>> messages() {
        return (Optional<List<ChatMessage>>) messages;
    }

    /**
     * The id of the associated Chat the messages belong to, if one exists.
     */
    @JsonIgnore
    public Optional<String> chatId() {
        return chatId;
    }

    /**
     * Follow-up prompts for the user to potentially use
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> followUpPrompts() {
        return (Optional<List<String>>) followUpPrompts;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    @JsonIgnore
    public Optional<Long> backendTimeMillis() {
        return backendTimeMillis;
    }

    /**
     * A token that is used to track the session.
     */
    @JsonIgnore
    public Optional<String> chatSessionTrackingToken() {
        return chatSessionTrackingToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ChatResponse withMessages(List<ChatMessage> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    public ChatResponse withMessages(Optional<? extends List<ChatMessage>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    /**
     * The id of the associated Chat the messages belong to, if one exists.
     */
    public ChatResponse withChatId(String chatId) {
        Utils.checkNotNull(chatId, "chatId");
        this.chatId = Optional.ofNullable(chatId);
        return this;
    }

    /**
     * The id of the associated Chat the messages belong to, if one exists.
     */
    public ChatResponse withChatId(Optional<String> chatId) {
        Utils.checkNotNull(chatId, "chatId");
        this.chatId = chatId;
        return this;
    }

    /**
     * Follow-up prompts for the user to potentially use
     */
    public ChatResponse withFollowUpPrompts(List<String> followUpPrompts) {
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.followUpPrompts = Optional.ofNullable(followUpPrompts);
        return this;
    }

    /**
     * Follow-up prompts for the user to potentially use
     */
    public ChatResponse withFollowUpPrompts(Optional<? extends List<String>> followUpPrompts) {
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.followUpPrompts = followUpPrompts;
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public ChatResponse withBackendTimeMillis(long backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
        return this;
    }

    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    public ChatResponse withBackendTimeMillis(Optional<Long> backendTimeMillis) {
        Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
        this.backendTimeMillis = backendTimeMillis;
        return this;
    }

    /**
     * A token that is used to track the session.
     */
    public ChatResponse withChatSessionTrackingToken(String chatSessionTrackingToken) {
        Utils.checkNotNull(chatSessionTrackingToken, "chatSessionTrackingToken");
        this.chatSessionTrackingToken = Optional.ofNullable(chatSessionTrackingToken);
        return this;
    }

    /**
     * A token that is used to track the session.
     */
    public ChatResponse withChatSessionTrackingToken(Optional<String> chatSessionTrackingToken) {
        Utils.checkNotNull(chatSessionTrackingToken, "chatSessionTrackingToken");
        this.chatSessionTrackingToken = chatSessionTrackingToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatResponse other = (ChatResponse) o;
        return 
            Objects.deepEquals(this.messages, other.messages) &&
            Objects.deepEquals(this.chatId, other.chatId) &&
            Objects.deepEquals(this.followUpPrompts, other.followUpPrompts) &&
            Objects.deepEquals(this.backendTimeMillis, other.backendTimeMillis) &&
            Objects.deepEquals(this.chatSessionTrackingToken, other.chatSessionTrackingToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            messages,
            chatId,
            followUpPrompts,
            backendTimeMillis,
            chatSessionTrackingToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatResponse.class,
                "messages", messages,
                "chatId", chatId,
                "followUpPrompts", followUpPrompts,
                "backendTimeMillis", backendTimeMillis,
                "chatSessionTrackingToken", chatSessionTrackingToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ChatMessage>> messages = Optional.empty();
 
        private Optional<String> chatId = Optional.empty();
 
        private Optional<? extends List<String>> followUpPrompts = Optional.empty();
 
        private Optional<Long> backendTimeMillis = Optional.empty();
 
        private Optional<String> chatSessionTrackingToken = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder messages(List<ChatMessage> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        public Builder messages(Optional<? extends List<ChatMessage>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        /**
         * The id of the associated Chat the messages belong to, if one exists.
         */
        public Builder chatId(String chatId) {
            Utils.checkNotNull(chatId, "chatId");
            this.chatId = Optional.ofNullable(chatId);
            return this;
        }

        /**
         * The id of the associated Chat the messages belong to, if one exists.
         */
        public Builder chatId(Optional<String> chatId) {
            Utils.checkNotNull(chatId, "chatId");
            this.chatId = chatId;
            return this;
        }

        /**
         * Follow-up prompts for the user to potentially use
         */
        public Builder followUpPrompts(List<String> followUpPrompts) {
            Utils.checkNotNull(followUpPrompts, "followUpPrompts");
            this.followUpPrompts = Optional.ofNullable(followUpPrompts);
            return this;
        }

        /**
         * Follow-up prompts for the user to potentially use
         */
        public Builder followUpPrompts(Optional<? extends List<String>> followUpPrompts) {
            Utils.checkNotNull(followUpPrompts, "followUpPrompts");
            this.followUpPrompts = followUpPrompts;
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(long backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = Optional.ofNullable(backendTimeMillis);
            return this;
        }

        /**
         * Time in milliseconds the backend took to respond to the request.
         */
        public Builder backendTimeMillis(Optional<Long> backendTimeMillis) {
            Utils.checkNotNull(backendTimeMillis, "backendTimeMillis");
            this.backendTimeMillis = backendTimeMillis;
            return this;
        }

        /**
         * A token that is used to track the session.
         */
        public Builder chatSessionTrackingToken(String chatSessionTrackingToken) {
            Utils.checkNotNull(chatSessionTrackingToken, "chatSessionTrackingToken");
            this.chatSessionTrackingToken = Optional.ofNullable(chatSessionTrackingToken);
            return this;
        }

        /**
         * A token that is used to track the session.
         */
        public Builder chatSessionTrackingToken(Optional<String> chatSessionTrackingToken) {
            Utils.checkNotNull(chatSessionTrackingToken, "chatSessionTrackingToken");
            this.chatSessionTrackingToken = chatSessionTrackingToken;
            return this;
        }
        
        public ChatResponse build() {
            return new ChatResponse(
                messages,
                chatId,
                followUpPrompts,
                backendTimeMillis,
                chatSessionTrackingToken);
        }
    }
}
