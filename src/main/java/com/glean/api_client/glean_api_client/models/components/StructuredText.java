/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class StructuredText {

    @JsonProperty("text")
    private String text;

    /**
     * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredList")
    private Optional<? extends List<StructuredTextItem>> structuredList;

    @JsonCreator
    public StructuredText(
            @JsonProperty("text") String text,
            @JsonProperty("structuredList") Optional<? extends List<StructuredTextItem>> structuredList) {
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(structuredList, "structuredList");
        this.text = text;
        this.structuredList = structuredList;
    }
    
    public StructuredText(
            String text) {
        this(text, Optional.empty());
    }

    @JsonIgnore
    public String text() {
        return text;
    }

    /**
     * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<StructuredTextItem>> structuredList() {
        return (Optional<List<StructuredTextItem>>) structuredList;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public StructuredText withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
     */
    public StructuredText withStructuredList(List<StructuredTextItem> structuredList) {
        Utils.checkNotNull(structuredList, "structuredList");
        this.structuredList = Optional.ofNullable(structuredList);
        return this;
    }

    /**
     * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
     */
    public StructuredText withStructuredList(Optional<? extends List<StructuredTextItem>> structuredList) {
        Utils.checkNotNull(structuredList, "structuredList");
        this.structuredList = structuredList;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StructuredText other = (StructuredText) o;
        return 
            Utils.enhancedDeepEquals(this.text, other.text) &&
            Utils.enhancedDeepEquals(this.structuredList, other.structuredList);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            text,
            structuredList);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StructuredText.class,
                "text", text,
                "structuredList", structuredList);
    }
    
    public final static class Builder {
 
        private String text;
 
        private Optional<? extends List<StructuredTextItem>> structuredList = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        /**
         * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
         */
        public Builder structuredList(List<StructuredTextItem> structuredList) {
            Utils.checkNotNull(structuredList, "structuredList");
            this.structuredList = Optional.ofNullable(structuredList);
            return this;
        }

        /**
         * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
         */
        public Builder structuredList(Optional<? extends List<StructuredTextItem>> structuredList) {
            Utils.checkNotNull(structuredList, "structuredList");
            this.structuredList = structuredList;
            return this;
        }
        
        public StructuredText build() {
            return new StructuredText(
                text,
                structuredList);
        }
    }
}
