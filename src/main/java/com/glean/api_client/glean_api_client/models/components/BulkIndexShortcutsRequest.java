/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;

/**
 * BulkIndexShortcutsRequest
 * 
 * <p>Describes the request body of the /bulkindexshortcuts API call
 */
public class BulkIndexShortcutsRequest {

    /**
     * Unique id that must be used for this bulk upload instance
     */
    @JsonProperty("uploadId")
    private String uploadId;

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstPage")
    private Optional<Boolean> isFirstPage;

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLastPage")
    private Optional<Boolean> isLastPage;

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceRestartUpload")
    private Optional<Boolean> forceRestartUpload;

    /**
     * Batch of shortcuts information
     */
    @JsonProperty("shortcuts")
    private List<ExternalShortcut> shortcuts;

    @JsonCreator
    public BulkIndexShortcutsRequest(
            @JsonProperty("uploadId") String uploadId,
            @JsonProperty("isFirstPage") Optional<Boolean> isFirstPage,
            @JsonProperty("isLastPage") Optional<Boolean> isLastPage,
            @JsonProperty("forceRestartUpload") Optional<Boolean> forceRestartUpload,
            @JsonProperty("shortcuts") List<ExternalShortcut> shortcuts) {
        Utils.checkNotNull(uploadId, "uploadId");
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        Utils.checkNotNull(isLastPage, "isLastPage");
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.uploadId = uploadId;
        this.isFirstPage = isFirstPage;
        this.isLastPage = isLastPage;
        this.forceRestartUpload = forceRestartUpload;
        this.shortcuts = shortcuts;
    }
    
    public BulkIndexShortcutsRequest(
            String uploadId,
            List<ExternalShortcut> shortcuts) {
        this(uploadId, Optional.empty(), Optional.empty(), Optional.empty(), shortcuts);
    }

    /**
     * Unique id that must be used for this bulk upload instance
     */
    @JsonIgnore
    public String uploadId() {
        return uploadId;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isFirstPage() {
        return isFirstPage;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isLastPage() {
        return isLastPage;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonIgnore
    public Optional<Boolean> forceRestartUpload() {
        return forceRestartUpload;
    }

    /**
     * Batch of shortcuts information
     */
    @JsonIgnore
    public List<ExternalShortcut> shortcuts() {
        return shortcuts;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique id that must be used for this bulk upload instance
     */
    public BulkIndexShortcutsRequest withUploadId(String uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = uploadId;
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexShortcutsRequest withIsFirstPage(boolean isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = Optional.ofNullable(isFirstPage);
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexShortcutsRequest withIsFirstPage(Optional<Boolean> isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = isFirstPage;
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexShortcutsRequest withIsLastPage(boolean isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = Optional.ofNullable(isLastPage);
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexShortcutsRequest withIsLastPage(Optional<Boolean> isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = isLastPage;
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexShortcutsRequest withForceRestartUpload(boolean forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexShortcutsRequest withForceRestartUpload(Optional<Boolean> forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = forceRestartUpload;
        return this;
    }

    /**
     * Batch of shortcuts information
     */
    public BulkIndexShortcutsRequest withShortcuts(List<ExternalShortcut> shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = shortcuts;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkIndexShortcutsRequest other = (BulkIndexShortcutsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.uploadId, other.uploadId) &&
            Utils.enhancedDeepEquals(this.isFirstPage, other.isFirstPage) &&
            Utils.enhancedDeepEquals(this.isLastPage, other.isLastPage) &&
            Utils.enhancedDeepEquals(this.forceRestartUpload, other.forceRestartUpload) &&
            Utils.enhancedDeepEquals(this.shortcuts, other.shortcuts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uploadId,
            isFirstPage,
            isLastPage,
            forceRestartUpload,
            shortcuts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkIndexShortcutsRequest.class,
                "uploadId", uploadId,
                "isFirstPage", isFirstPage,
                "isLastPage", isLastPage,
                "forceRestartUpload", forceRestartUpload,
                "shortcuts", shortcuts);
    }
    
    public final static class Builder {
 
        private String uploadId;
 
        private Optional<Boolean> isFirstPage = Optional.empty();
 
        private Optional<Boolean> isLastPage = Optional.empty();
 
        private Optional<Boolean> forceRestartUpload = Optional.empty();
 
        private List<ExternalShortcut> shortcuts;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique id that must be used for this bulk upload instance
         */
        public Builder uploadId(String uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = uploadId;
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(boolean isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = Optional.ofNullable(isFirstPage);
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(Optional<Boolean> isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = isFirstPage;
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(boolean isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = Optional.ofNullable(isLastPage);
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(Optional<Boolean> isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = isLastPage;
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(boolean forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(Optional<Boolean> forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = forceRestartUpload;
            return this;
        }

        /**
         * Batch of shortcuts information
         */
        public Builder shortcuts(List<ExternalShortcut> shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = shortcuts;
            return this;
        }
        
        public BulkIndexShortcutsRequest build() {
            return new BulkIndexShortcutsRequest(
                uploadId,
                isFirstPage,
                isLastPage,
                forceRestartUpload,
                shortcuts);
        }
    }
}
