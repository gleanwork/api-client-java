/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class DocumentContent {

    /**
     * The plaintext content of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullTextList")
    private Optional<? extends List<String>> fullTextList;

    @JsonCreator
    public DocumentContent(
            @JsonProperty("fullTextList") Optional<? extends List<String>> fullTextList) {
        Utils.checkNotNull(fullTextList, "fullTextList");
        this.fullTextList = fullTextList;
    }
    
    public DocumentContent() {
        this(Optional.empty());
    }

    /**
     * The plaintext content of the document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> fullTextList() {
        return (Optional<List<String>>) fullTextList;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The plaintext content of the document.
     */
    public DocumentContent withFullTextList(List<String> fullTextList) {
        Utils.checkNotNull(fullTextList, "fullTextList");
        this.fullTextList = Optional.ofNullable(fullTextList);
        return this;
    }

    /**
     * The plaintext content of the document.
     */
    public DocumentContent withFullTextList(Optional<? extends List<String>> fullTextList) {
        Utils.checkNotNull(fullTextList, "fullTextList");
        this.fullTextList = fullTextList;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentContent other = (DocumentContent) o;
        return 
            Utils.enhancedDeepEquals(this.fullTextList, other.fullTextList);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fullTextList);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentContent.class,
                "fullTextList", fullTextList);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> fullTextList = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The plaintext content of the document.
         */
        public Builder fullTextList(List<String> fullTextList) {
            Utils.checkNotNull(fullTextList, "fullTextList");
            this.fullTextList = Optional.ofNullable(fullTextList);
            return this;
        }

        /**
         * The plaintext content of the document.
         */
        public Builder fullTextList(Optional<? extends List<String>> fullTextList) {
            Utils.checkNotNull(fullTextList, "fullTextList");
            this.fullTextList = fullTextList;
            return this;
        }
        
        public DocumentContent build() {
            return new DocumentContent(
                fullTextList);
        }
    }
}
