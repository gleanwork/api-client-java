/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Summary {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    /**
     * Follow-up prompts based on the summarized doc
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followUpPrompts")
    private Optional<? extends List<String>> followUpPrompts;

    @JsonCreator
    public Summary(
            @JsonProperty("text") Optional<String> text,
            @JsonProperty("followUpPrompts") Optional<? extends List<String>> followUpPrompts) {
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.text = text;
        this.followUpPrompts = followUpPrompts;
    }
    
    public Summary() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    /**
     * Follow-up prompts based on the summarized doc
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> followUpPrompts() {
        return (Optional<List<String>>) followUpPrompts;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Summary withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    public Summary withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * Follow-up prompts based on the summarized doc
     */
    public Summary withFollowUpPrompts(List<String> followUpPrompts) {
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.followUpPrompts = Optional.ofNullable(followUpPrompts);
        return this;
    }

    /**
     * Follow-up prompts based on the summarized doc
     */
    public Summary withFollowUpPrompts(Optional<? extends List<String>> followUpPrompts) {
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.followUpPrompts = followUpPrompts;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Summary other = (Summary) o;
        return 
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.followUpPrompts, other.followUpPrompts);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            text,
            followUpPrompts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Summary.class,
                "text", text,
                "followUpPrompts", followUpPrompts);
    }
    
    public final static class Builder {
 
        private Optional<String> text = Optional.empty();
 
        private Optional<? extends List<String>> followUpPrompts = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        /**
         * Follow-up prompts based on the summarized doc
         */
        public Builder followUpPrompts(List<String> followUpPrompts) {
            Utils.checkNotNull(followUpPrompts, "followUpPrompts");
            this.followUpPrompts = Optional.ofNullable(followUpPrompts);
            return this;
        }

        /**
         * Follow-up prompts based on the summarized doc
         */
        public Builder followUpPrompts(Optional<? extends List<String>> followUpPrompts) {
            Utils.checkNotNull(followUpPrompts, "followUpPrompts");
            this.followUpPrompts = followUpPrompts;
            return this;
        }
        
        public Summary build() {
            return new Summary(
                text,
                followUpPrompts);
        }
    }
}
