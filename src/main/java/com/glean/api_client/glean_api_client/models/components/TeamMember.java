/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Optional;

/**
 * TeamMember
 * 
 * <p>Information about a team's member
 */
public class TeamMember {

    /**
     * The member's email
     */
    @JsonProperty("email")
    private String email;

    /**
     * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationship")
    private Optional<String> relationship;

    /**
     * The member's start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_date")
    private Optional<LocalDate> joinDate;

    @JsonCreator
    public TeamMember(
            @JsonProperty("email") String email,
            @JsonProperty("relationship") Optional<String> relationship,
            @JsonProperty("join_date") Optional<LocalDate> joinDate) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(relationship, "relationship");
        Utils.checkNotNull(joinDate, "joinDate");
        this.email = email;
        this.relationship = relationship;
        this.joinDate = joinDate;
    }
    
    public TeamMember(
            String email) {
        this(email, Optional.empty(), Optional.empty());
    }

    /**
     * The member's email
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
     */
    @JsonIgnore
    public Optional<String> relationship() {
        return relationship;
    }

    /**
     * The member's start date
     */
    @JsonIgnore
    public Optional<LocalDate> joinDate() {
        return joinDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The member's email
     */
    public TeamMember withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
     */
    public TeamMember withRelationship(String relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = Optional.ofNullable(relationship);
        return this;
    }

    /**
     * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
     */
    public TeamMember withRelationship(Optional<String> relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = relationship;
        return this;
    }

    /**
     * The member's start date
     */
    public TeamMember withJoinDate(LocalDate joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = Optional.ofNullable(joinDate);
        return this;
    }

    /**
     * The member's start date
     */
    public TeamMember withJoinDate(Optional<LocalDate> joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = joinDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeamMember other = (TeamMember) o;
        return 
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.relationship, other.relationship) &&
            Utils.enhancedDeepEquals(this.joinDate, other.joinDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            email,
            relationship,
            joinDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TeamMember.class,
                "email", email,
                "relationship", relationship,
                "joinDate", joinDate);
    }
    
    public final static class Builder {
 
        private String email;
 
        private Optional<String> relationship;
 
        private Optional<LocalDate> joinDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The member's email
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
         */
        public Builder relationship(String relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = Optional.ofNullable(relationship);
            return this;
        }

        /**
         * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
         */
        public Builder relationship(Optional<String> relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = relationship;
            return this;
        }

        /**
         * The member's start date
         */
        public Builder joinDate(LocalDate joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = Optional.ofNullable(joinDate);
            return this;
        }

        /**
         * The member's start date
         */
        public Builder joinDate(Optional<LocalDate> joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = joinDate;
            return this;
        }
        
        public TeamMember build() {
            if (relationship == null) {
                relationship = _SINGLETON_VALUE_Relationship.value();
            }
            return new TeamMember(
                email,
                relationship,
                joinDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Relationship =
                new LazySingletonValue<>(
                        "relationship",
                        "\"MEMBER\"",
                        new TypeReference<Optional<String>>() {});
    }
}
