/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class PropertyDefinition {

    /**
     * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The user friendly label for the property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayLabel")
    private Optional<String> displayLabel;

    /**
     * The user friendly label for the property that will be used if a plural context.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayLabelPlural")
    private Optional<String> displayLabelPlural;

    /**
     * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyType")
    private Optional<? extends PropertyType> propertyType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uiOptions")
    private Optional<? extends UiOptions> uiOptions;

    /**
     * If true then the property will not show up as a facet in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideUiFacet")
    private Optional<Boolean> hideUiFacet;

    /**
     * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uiFacetOrder")
    private Optional<Long> uiFacetOrder;

    /**
     * If true then the property will not be indexed for retrieval and ranking.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipIndexing")
    private Optional<Boolean> skipIndexing;

    /**
     * The unique identifier of the `PropertyGroup` to which this property belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    private Optional<String> group;

    @JsonCreator
    public PropertyDefinition(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("displayLabel") Optional<String> displayLabel,
            @JsonProperty("displayLabelPlural") Optional<String> displayLabelPlural,
            @JsonProperty("propertyType") Optional<? extends PropertyType> propertyType,
            @JsonProperty("uiOptions") Optional<? extends UiOptions> uiOptions,
            @JsonProperty("hideUiFacet") Optional<Boolean> hideUiFacet,
            @JsonProperty("uiFacetOrder") Optional<Long> uiFacetOrder,
            @JsonProperty("skipIndexing") Optional<Boolean> skipIndexing,
            @JsonProperty("group") Optional<String> group) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayLabel, "displayLabel");
        Utils.checkNotNull(displayLabelPlural, "displayLabelPlural");
        Utils.checkNotNull(propertyType, "propertyType");
        Utils.checkNotNull(uiOptions, "uiOptions");
        Utils.checkNotNull(hideUiFacet, "hideUiFacet");
        Utils.checkNotNull(uiFacetOrder, "uiFacetOrder");
        Utils.checkNotNull(skipIndexing, "skipIndexing");
        Utils.checkNotNull(group, "group");
        this.name = name;
        this.displayLabel = displayLabel;
        this.displayLabelPlural = displayLabelPlural;
        this.propertyType = propertyType;
        this.uiOptions = uiOptions;
        this.hideUiFacet = hideUiFacet;
        this.uiFacetOrder = uiFacetOrder;
        this.skipIndexing = skipIndexing;
        this.group = group;
    }
    
    public PropertyDefinition() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The user friendly label for the property.
     */
    @JsonIgnore
    public Optional<String> displayLabel() {
        return displayLabel;
    }

    /**
     * The user friendly label for the property that will be used if a plural context.
     */
    @JsonIgnore
    public Optional<String> displayLabelPlural() {
        return displayLabelPlural;
    }

    /**
     * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyType> propertyType() {
        return (Optional<PropertyType>) propertyType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UiOptions> uiOptions() {
        return (Optional<UiOptions>) uiOptions;
    }

    /**
     * If true then the property will not show up as a facet in the UI.
     */
    @JsonIgnore
    public Optional<Boolean> hideUiFacet() {
        return hideUiFacet;
    }

    /**
     * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
     */
    @JsonIgnore
    public Optional<Long> uiFacetOrder() {
        return uiFacetOrder;
    }

    /**
     * If true then the property will not be indexed for retrieval and ranking.
     */
    @JsonIgnore
    public Optional<Boolean> skipIndexing() {
        return skipIndexing;
    }

    /**
     * The unique identifier of the `PropertyGroup` to which this property belongs.
     */
    @JsonIgnore
    public Optional<String> group() {
        return group;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
     */
    public PropertyDefinition withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
     */
    public PropertyDefinition withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The user friendly label for the property.
     */
    public PropertyDefinition withDisplayLabel(String displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = Optional.ofNullable(displayLabel);
        return this;
    }

    /**
     * The user friendly label for the property.
     */
    public PropertyDefinition withDisplayLabel(Optional<String> displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = displayLabel;
        return this;
    }

    /**
     * The user friendly label for the property that will be used if a plural context.
     */
    public PropertyDefinition withDisplayLabelPlural(String displayLabelPlural) {
        Utils.checkNotNull(displayLabelPlural, "displayLabelPlural");
        this.displayLabelPlural = Optional.ofNullable(displayLabelPlural);
        return this;
    }

    /**
     * The user friendly label for the property that will be used if a plural context.
     */
    public PropertyDefinition withDisplayLabelPlural(Optional<String> displayLabelPlural) {
        Utils.checkNotNull(displayLabelPlural, "displayLabelPlural");
        this.displayLabelPlural = displayLabelPlural;
        return this;
    }

    /**
     * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
     */
    public PropertyDefinition withPropertyType(PropertyType propertyType) {
        Utils.checkNotNull(propertyType, "propertyType");
        this.propertyType = Optional.ofNullable(propertyType);
        return this;
    }

    /**
     * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
     */
    public PropertyDefinition withPropertyType(Optional<? extends PropertyType> propertyType) {
        Utils.checkNotNull(propertyType, "propertyType");
        this.propertyType = propertyType;
        return this;
    }

    public PropertyDefinition withUiOptions(UiOptions uiOptions) {
        Utils.checkNotNull(uiOptions, "uiOptions");
        this.uiOptions = Optional.ofNullable(uiOptions);
        return this;
    }

    public PropertyDefinition withUiOptions(Optional<? extends UiOptions> uiOptions) {
        Utils.checkNotNull(uiOptions, "uiOptions");
        this.uiOptions = uiOptions;
        return this;
    }

    /**
     * If true then the property will not show up as a facet in the UI.
     */
    public PropertyDefinition withHideUiFacet(boolean hideUiFacet) {
        Utils.checkNotNull(hideUiFacet, "hideUiFacet");
        this.hideUiFacet = Optional.ofNullable(hideUiFacet);
        return this;
    }

    /**
     * If true then the property will not show up as a facet in the UI.
     */
    public PropertyDefinition withHideUiFacet(Optional<Boolean> hideUiFacet) {
        Utils.checkNotNull(hideUiFacet, "hideUiFacet");
        this.hideUiFacet = hideUiFacet;
        return this;
    }

    /**
     * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
     */
    public PropertyDefinition withUiFacetOrder(long uiFacetOrder) {
        Utils.checkNotNull(uiFacetOrder, "uiFacetOrder");
        this.uiFacetOrder = Optional.ofNullable(uiFacetOrder);
        return this;
    }

    /**
     * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
     */
    public PropertyDefinition withUiFacetOrder(Optional<Long> uiFacetOrder) {
        Utils.checkNotNull(uiFacetOrder, "uiFacetOrder");
        this.uiFacetOrder = uiFacetOrder;
        return this;
    }

    /**
     * If true then the property will not be indexed for retrieval and ranking.
     */
    public PropertyDefinition withSkipIndexing(boolean skipIndexing) {
        Utils.checkNotNull(skipIndexing, "skipIndexing");
        this.skipIndexing = Optional.ofNullable(skipIndexing);
        return this;
    }

    /**
     * If true then the property will not be indexed for retrieval and ranking.
     */
    public PropertyDefinition withSkipIndexing(Optional<Boolean> skipIndexing) {
        Utils.checkNotNull(skipIndexing, "skipIndexing");
        this.skipIndexing = skipIndexing;
        return this;
    }

    /**
     * The unique identifier of the `PropertyGroup` to which this property belongs.
     */
    public PropertyDefinition withGroup(String group) {
        Utils.checkNotNull(group, "group");
        this.group = Optional.ofNullable(group);
        return this;
    }

    /**
     * The unique identifier of the `PropertyGroup` to which this property belongs.
     */
    public PropertyDefinition withGroup(Optional<String> group) {
        Utils.checkNotNull(group, "group");
        this.group = group;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyDefinition other = (PropertyDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.displayLabel, other.displayLabel) &&
            Utils.enhancedDeepEquals(this.displayLabelPlural, other.displayLabelPlural) &&
            Utils.enhancedDeepEquals(this.propertyType, other.propertyType) &&
            Utils.enhancedDeepEquals(this.uiOptions, other.uiOptions) &&
            Utils.enhancedDeepEquals(this.hideUiFacet, other.hideUiFacet) &&
            Utils.enhancedDeepEquals(this.uiFacetOrder, other.uiFacetOrder) &&
            Utils.enhancedDeepEquals(this.skipIndexing, other.skipIndexing) &&
            Utils.enhancedDeepEquals(this.group, other.group);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            displayLabel,
            displayLabelPlural,
            propertyType,
            uiOptions,
            hideUiFacet,
            uiFacetOrder,
            skipIndexing,
            group);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyDefinition.class,
                "name", name,
                "displayLabel", displayLabel,
                "displayLabelPlural", displayLabelPlural,
                "propertyType", propertyType,
                "uiOptions", uiOptions,
                "hideUiFacet", hideUiFacet,
                "uiFacetOrder", uiFacetOrder,
                "skipIndexing", skipIndexing,
                "group", group);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> displayLabel = Optional.empty();
 
        private Optional<String> displayLabelPlural = Optional.empty();
 
        private Optional<? extends PropertyType> propertyType = Optional.empty();
 
        private Optional<? extends UiOptions> uiOptions = Optional.empty();
 
        private Optional<Boolean> hideUiFacet = Optional.empty();
 
        private Optional<Long> uiFacetOrder = Optional.empty();
 
        private Optional<Boolean> skipIndexing = Optional.empty();
 
        private Optional<String> group = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The user friendly label for the property.
         */
        public Builder displayLabel(String displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = Optional.ofNullable(displayLabel);
            return this;
        }

        /**
         * The user friendly label for the property.
         */
        public Builder displayLabel(Optional<String> displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = displayLabel;
            return this;
        }

        /**
         * The user friendly label for the property that will be used if a plural context.
         */
        public Builder displayLabelPlural(String displayLabelPlural) {
            Utils.checkNotNull(displayLabelPlural, "displayLabelPlural");
            this.displayLabelPlural = Optional.ofNullable(displayLabelPlural);
            return this;
        }

        /**
         * The user friendly label for the property that will be used if a plural context.
         */
        public Builder displayLabelPlural(Optional<String> displayLabelPlural) {
            Utils.checkNotNull(displayLabelPlural, "displayLabelPlural");
            this.displayLabelPlural = displayLabelPlural;
            return this;
        }

        /**
         * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
         */
        public Builder propertyType(PropertyType propertyType) {
            Utils.checkNotNull(propertyType, "propertyType");
            this.propertyType = Optional.ofNullable(propertyType);
            return this;
        }

        /**
         * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
         */
        public Builder propertyType(Optional<? extends PropertyType> propertyType) {
            Utils.checkNotNull(propertyType, "propertyType");
            this.propertyType = propertyType;
            return this;
        }

        public Builder uiOptions(UiOptions uiOptions) {
            Utils.checkNotNull(uiOptions, "uiOptions");
            this.uiOptions = Optional.ofNullable(uiOptions);
            return this;
        }

        public Builder uiOptions(Optional<? extends UiOptions> uiOptions) {
            Utils.checkNotNull(uiOptions, "uiOptions");
            this.uiOptions = uiOptions;
            return this;
        }

        /**
         * If true then the property will not show up as a facet in the UI.
         */
        public Builder hideUiFacet(boolean hideUiFacet) {
            Utils.checkNotNull(hideUiFacet, "hideUiFacet");
            this.hideUiFacet = Optional.ofNullable(hideUiFacet);
            return this;
        }

        /**
         * If true then the property will not show up as a facet in the UI.
         */
        public Builder hideUiFacet(Optional<Boolean> hideUiFacet) {
            Utils.checkNotNull(hideUiFacet, "hideUiFacet");
            this.hideUiFacet = hideUiFacet;
            return this;
        }

        /**
         * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
         */
        public Builder uiFacetOrder(long uiFacetOrder) {
            Utils.checkNotNull(uiFacetOrder, "uiFacetOrder");
            this.uiFacetOrder = Optional.ofNullable(uiFacetOrder);
            return this;
        }

        /**
         * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
         */
        public Builder uiFacetOrder(Optional<Long> uiFacetOrder) {
            Utils.checkNotNull(uiFacetOrder, "uiFacetOrder");
            this.uiFacetOrder = uiFacetOrder;
            return this;
        }

        /**
         * If true then the property will not be indexed for retrieval and ranking.
         */
        public Builder skipIndexing(boolean skipIndexing) {
            Utils.checkNotNull(skipIndexing, "skipIndexing");
            this.skipIndexing = Optional.ofNullable(skipIndexing);
            return this;
        }

        /**
         * If true then the property will not be indexed for retrieval and ranking.
         */
        public Builder skipIndexing(Optional<Boolean> skipIndexing) {
            Utils.checkNotNull(skipIndexing, "skipIndexing");
            this.skipIndexing = skipIndexing;
            return this;
        }

        /**
         * The unique identifier of the `PropertyGroup` to which this property belongs.
         */
        public Builder group(String group) {
            Utils.checkNotNull(group, "group");
            this.group = Optional.ofNullable(group);
            return this;
        }

        /**
         * The unique identifier of the `PropertyGroup` to which this property belongs.
         */
        public Builder group(Optional<String> group) {
            Utils.checkNotNull(group, "group");
            this.group = group;
            return this;
        }
        
        public PropertyDefinition build() {
            return new PropertyDefinition(
                name,
                displayLabel,
                displayLabelPlural,
                propertyType,
                uiOptions,
                hideUiFacet,
                uiFacetOrder,
                skipIndexing,
                group);
        }
    }
}
