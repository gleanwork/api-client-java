/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class FacetBucketFilter {

    /**
     * The facet whose buckets should be filtered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facet")
    private Optional<String> facet;

    /**
     * The per-term prefix that facet buckets should be filtered on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private Optional<String> prefix;

    @JsonCreator
    public FacetBucketFilter(
            @JsonProperty("facet") Optional<String> facet,
            @JsonProperty("prefix") Optional<String> prefix) {
        Utils.checkNotNull(facet, "facet");
        Utils.checkNotNull(prefix, "prefix");
        this.facet = facet;
        this.prefix = prefix;
    }
    
    public FacetBucketFilter() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The facet whose buckets should be filtered.
     */
    @JsonIgnore
    public Optional<String> facet() {
        return facet;
    }

    /**
     * The per-term prefix that facet buckets should be filtered on.
     */
    @JsonIgnore
    public Optional<String> prefix() {
        return prefix;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The facet whose buckets should be filtered.
     */
    public FacetBucketFilter withFacet(String facet) {
        Utils.checkNotNull(facet, "facet");
        this.facet = Optional.ofNullable(facet);
        return this;
    }

    /**
     * The facet whose buckets should be filtered.
     */
    public FacetBucketFilter withFacet(Optional<String> facet) {
        Utils.checkNotNull(facet, "facet");
        this.facet = facet;
        return this;
    }

    /**
     * The per-term prefix that facet buckets should be filtered on.
     */
    public FacetBucketFilter withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = Optional.ofNullable(prefix);
        return this;
    }

    /**
     * The per-term prefix that facet buckets should be filtered on.
     */
    public FacetBucketFilter withPrefix(Optional<String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetBucketFilter other = (FacetBucketFilter) o;
        return 
            Objects.deepEquals(this.facet, other.facet) &&
            Objects.deepEquals(this.prefix, other.prefix);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            facet,
            prefix);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetBucketFilter.class,
                "facet", facet,
                "prefix", prefix);
    }
    
    public final static class Builder {
 
        private Optional<String> facet = Optional.empty();
 
        private Optional<String> prefix = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The facet whose buckets should be filtered.
         */
        public Builder facet(String facet) {
            Utils.checkNotNull(facet, "facet");
            this.facet = Optional.ofNullable(facet);
            return this;
        }

        /**
         * The facet whose buckets should be filtered.
         */
        public Builder facet(Optional<String> facet) {
            Utils.checkNotNull(facet, "facet");
            this.facet = facet;
            return this;
        }

        /**
         * The per-term prefix that facet buckets should be filtered on.
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = Optional.ofNullable(prefix);
            return this;
        }

        /**
         * The per-term prefix that facet buckets should be filtered on.
         */
        public Builder prefix(Optional<String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }
        
        public FacetBucketFilter build() {
            return new FacetBucketFilter(
                facet,
                prefix);
        }
    }
}
