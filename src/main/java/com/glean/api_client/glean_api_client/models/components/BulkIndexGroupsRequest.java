/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;

/**
 * BulkIndexGroupsRequest
 * 
 * <p>Describes the request body for the /bulkindexgroups API call
 */
public class BulkIndexGroupsRequest {

    /**
     * Unique id that must be used for this instance of datasource groups upload
     */
    @JsonProperty("uploadId")
    private String uploadId;

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstPage")
    private Optional<Boolean> isFirstPage;

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLastPage")
    private Optional<Boolean> isLastPage;

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceRestartUpload")
    private Optional<Boolean> forceRestartUpload;

    /**
     * datasource of the groups
     */
    @JsonProperty("datasource")
    private String datasource;

    /**
     * batch of groups for the datasource
     */
    @JsonProperty("groups")
    private List<DatasourceGroupDefinition> groups;

    /**
     * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableStaleDataDeletionCheck")
    private Optional<Boolean> disableStaleDataDeletionCheck;

    @JsonCreator
    public BulkIndexGroupsRequest(
            @JsonProperty("uploadId") String uploadId,
            @JsonProperty("isFirstPage") Optional<Boolean> isFirstPage,
            @JsonProperty("isLastPage") Optional<Boolean> isLastPage,
            @JsonProperty("forceRestartUpload") Optional<Boolean> forceRestartUpload,
            @JsonProperty("datasource") String datasource,
            @JsonProperty("groups") List<DatasourceGroupDefinition> groups,
            @JsonProperty("disableStaleDataDeletionCheck") Optional<Boolean> disableStaleDataDeletionCheck) {
        Utils.checkNotNull(uploadId, "uploadId");
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        Utils.checkNotNull(isLastPage, "isLastPage");
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
        this.uploadId = uploadId;
        this.isFirstPage = isFirstPage;
        this.isLastPage = isLastPage;
        this.forceRestartUpload = forceRestartUpload;
        this.datasource = datasource;
        this.groups = groups;
        this.disableStaleDataDeletionCheck = disableStaleDataDeletionCheck;
    }
    
    public BulkIndexGroupsRequest(
            String uploadId,
            String datasource,
            List<DatasourceGroupDefinition> groups) {
        this(uploadId, Optional.empty(), Optional.empty(), Optional.empty(), datasource, groups, Optional.empty());
    }

    /**
     * Unique id that must be used for this instance of datasource groups upload
     */
    @JsonIgnore
    public String uploadId() {
        return uploadId;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isFirstPage() {
        return isFirstPage;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    @JsonIgnore
    public Optional<Boolean> isLastPage() {
        return isLastPage;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    @JsonIgnore
    public Optional<Boolean> forceRestartUpload() {
        return forceRestartUpload;
    }

    /**
     * datasource of the groups
     */
    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * batch of groups for the datasource
     */
    @JsonIgnore
    public List<DatasourceGroupDefinition> groups() {
        return groups;
    }

    /**
     * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
     */
    @JsonIgnore
    public Optional<Boolean> disableStaleDataDeletionCheck() {
        return disableStaleDataDeletionCheck;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique id that must be used for this instance of datasource groups upload
     */
    public BulkIndexGroupsRequest withUploadId(String uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = uploadId;
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexGroupsRequest withIsFirstPage(boolean isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = Optional.ofNullable(isFirstPage);
        return this;
    }

    /**
     * true if this is the first page of the upload. Defaults to false
     */
    public BulkIndexGroupsRequest withIsFirstPage(Optional<Boolean> isFirstPage) {
        Utils.checkNotNull(isFirstPage, "isFirstPage");
        this.isFirstPage = isFirstPage;
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexGroupsRequest withIsLastPage(boolean isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = Optional.ofNullable(isLastPage);
        return this;
    }

    /**
     * true if this is the last page of the upload. Defaults to false
     */
    public BulkIndexGroupsRequest withIsLastPage(Optional<Boolean> isLastPage) {
        Utils.checkNotNull(isLastPage, "isLastPage");
        this.isLastPage = isLastPage;
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexGroupsRequest withForceRestartUpload(boolean forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
        return this;
    }

    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    public BulkIndexGroupsRequest withForceRestartUpload(Optional<Boolean> forceRestartUpload) {
        Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
        this.forceRestartUpload = forceRestartUpload;
        return this;
    }

    /**
     * datasource of the groups
     */
    public BulkIndexGroupsRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * batch of groups for the datasource
     */
    public BulkIndexGroupsRequest withGroups(List<DatasourceGroupDefinition> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    /**
     * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
     */
    public BulkIndexGroupsRequest withDisableStaleDataDeletionCheck(boolean disableStaleDataDeletionCheck) {
        Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
        this.disableStaleDataDeletionCheck = Optional.ofNullable(disableStaleDataDeletionCheck);
        return this;
    }

    /**
     * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
     */
    public BulkIndexGroupsRequest withDisableStaleDataDeletionCheck(Optional<Boolean> disableStaleDataDeletionCheck) {
        Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
        this.disableStaleDataDeletionCheck = disableStaleDataDeletionCheck;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkIndexGroupsRequest other = (BulkIndexGroupsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.uploadId, other.uploadId) &&
            Utils.enhancedDeepEquals(this.isFirstPage, other.isFirstPage) &&
            Utils.enhancedDeepEquals(this.isLastPage, other.isLastPage) &&
            Utils.enhancedDeepEquals(this.forceRestartUpload, other.forceRestartUpload) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.groups, other.groups) &&
            Utils.enhancedDeepEquals(this.disableStaleDataDeletionCheck, other.disableStaleDataDeletionCheck);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uploadId,
            isFirstPage,
            isLastPage,
            forceRestartUpload,
            datasource,
            groups,
            disableStaleDataDeletionCheck);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkIndexGroupsRequest.class,
                "uploadId", uploadId,
                "isFirstPage", isFirstPage,
                "isLastPage", isLastPage,
                "forceRestartUpload", forceRestartUpload,
                "datasource", datasource,
                "groups", groups,
                "disableStaleDataDeletionCheck", disableStaleDataDeletionCheck);
    }
    
    public final static class Builder {
 
        private String uploadId;
 
        private Optional<Boolean> isFirstPage = Optional.empty();
 
        private Optional<Boolean> isLastPage = Optional.empty();
 
        private Optional<Boolean> forceRestartUpload = Optional.empty();
 
        private String datasource;
 
        private List<DatasourceGroupDefinition> groups;
 
        private Optional<Boolean> disableStaleDataDeletionCheck = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique id that must be used for this instance of datasource groups upload
         */
        public Builder uploadId(String uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = uploadId;
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(boolean isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = Optional.ofNullable(isFirstPage);
            return this;
        }

        /**
         * true if this is the first page of the upload. Defaults to false
         */
        public Builder isFirstPage(Optional<Boolean> isFirstPage) {
            Utils.checkNotNull(isFirstPage, "isFirstPage");
            this.isFirstPage = isFirstPage;
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(boolean isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = Optional.ofNullable(isLastPage);
            return this;
        }

        /**
         * true if this is the last page of the upload. Defaults to false
         */
        public Builder isLastPage(Optional<Boolean> isLastPage) {
            Utils.checkNotNull(isLastPage, "isLastPage");
            this.isLastPage = isLastPage;
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(boolean forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = Optional.ofNullable(forceRestartUpload);
            return this;
        }

        /**
         * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
         */
        public Builder forceRestartUpload(Optional<Boolean> forceRestartUpload) {
            Utils.checkNotNull(forceRestartUpload, "forceRestartUpload");
            this.forceRestartUpload = forceRestartUpload;
            return this;
        }

        /**
         * datasource of the groups
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * batch of groups for the datasource
         */
        public Builder groups(List<DatasourceGroupDefinition> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }

        /**
         * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
         */
        public Builder disableStaleDataDeletionCheck(boolean disableStaleDataDeletionCheck) {
            Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
            this.disableStaleDataDeletionCheck = Optional.ofNullable(disableStaleDataDeletionCheck);
            return this;
        }

        /**
         * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
         */
        public Builder disableStaleDataDeletionCheck(Optional<Boolean> disableStaleDataDeletionCheck) {
            Utils.checkNotNull(disableStaleDataDeletionCheck, "disableStaleDataDeletionCheck");
            this.disableStaleDataDeletionCheck = disableStaleDataDeletionCheck;
            return this;
        }
        
        public BulkIndexGroupsRequest build() {
            return new BulkIndexGroupsRequest(
                uploadId,
                isFirstPage,
                isLastPage,
                forceRestartUpload,
                datasource,
                groups,
                disableStaleDataDeletionCheck);
        }
    }
}
