/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * AgentSchemas
 * 
 * <p>Defines the structure and properties of an agent.
 */
public class AgentSchemas {

    /**
     * The ID of the agent.
     */
    @JsonProperty("agent_id")
    private String agentId;

    /**
     * The schema for the agent input. In JSON Schema format.
     */
    @JsonProperty("input_schema")
    private InputSchema inputSchema;

    /**
     * The schema for the agent output. In JSON Schema format.
     */
    @JsonProperty("output_schema")
    private OutputSchema outputSchema;

    @JsonCreator
    public AgentSchemas(
            @JsonProperty("agent_id") String agentId,
            @JsonProperty("input_schema") InputSchema inputSchema,
            @JsonProperty("output_schema") OutputSchema outputSchema) {
        Utils.checkNotNull(agentId, "agentId");
        Utils.checkNotNull(inputSchema, "inputSchema");
        Utils.checkNotNull(outputSchema, "outputSchema");
        this.agentId = agentId;
        this.inputSchema = inputSchema;
        this.outputSchema = outputSchema;
    }

    /**
     * The ID of the agent.
     */
    @JsonIgnore
    public String agentId() {
        return agentId;
    }

    /**
     * The schema for the agent input. In JSON Schema format.
     */
    @JsonIgnore
    public InputSchema inputSchema() {
        return inputSchema;
    }

    /**
     * The schema for the agent output. In JSON Schema format.
     */
    @JsonIgnore
    public OutputSchema outputSchema() {
        return outputSchema;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the agent.
     */
    public AgentSchemas withAgentId(String agentId) {
        Utils.checkNotNull(agentId, "agentId");
        this.agentId = agentId;
        return this;
    }

    /**
     * The schema for the agent input. In JSON Schema format.
     */
    public AgentSchemas withInputSchema(InputSchema inputSchema) {
        Utils.checkNotNull(inputSchema, "inputSchema");
        this.inputSchema = inputSchema;
        return this;
    }

    /**
     * The schema for the agent output. In JSON Schema format.
     */
    public AgentSchemas withOutputSchema(OutputSchema outputSchema) {
        Utils.checkNotNull(outputSchema, "outputSchema");
        this.outputSchema = outputSchema;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgentSchemas other = (AgentSchemas) o;
        return 
            Utils.enhancedDeepEquals(this.agentId, other.agentId) &&
            Utils.enhancedDeepEquals(this.inputSchema, other.inputSchema) &&
            Utils.enhancedDeepEquals(this.outputSchema, other.outputSchema);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            agentId,
            inputSchema,
            outputSchema);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgentSchemas.class,
                "agentId", agentId,
                "inputSchema", inputSchema,
                "outputSchema", outputSchema);
    }
    
    public final static class Builder {
 
        private String agentId;
 
        private InputSchema inputSchema;
 
        private OutputSchema outputSchema;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the agent.
         */
        public Builder agentId(String agentId) {
            Utils.checkNotNull(agentId, "agentId");
            this.agentId = agentId;
            return this;
        }

        /**
         * The schema for the agent input. In JSON Schema format.
         */
        public Builder inputSchema(InputSchema inputSchema) {
            Utils.checkNotNull(inputSchema, "inputSchema");
            this.inputSchema = inputSchema;
            return this;
        }

        /**
         * The schema for the agent output. In JSON Schema format.
         */
        public Builder outputSchema(OutputSchema outputSchema) {
            Utils.checkNotNull(outputSchema, "outputSchema");
            this.outputSchema = outputSchema;
            return this;
        }
        
        public AgentSchemas build() {
            return new AgentSchemas(
                agentId,
                inputSchema,
                outputSchema);
        }
    }
}
