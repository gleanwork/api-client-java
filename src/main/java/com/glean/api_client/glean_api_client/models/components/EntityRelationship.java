/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * EntityRelationship
 * 
 * <p>Describes a relationship edge between a source and destination entity
 */
public class EntityRelationship {

    /**
     * The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
     */
    @JsonProperty("name")
    private String name;

    /**
     * Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
     */
    @JsonProperty("email")
    private String email;

    @JsonCreator
    public EntityRelationship(
            @JsonProperty("name") String name,
            @JsonProperty("email") String email) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(email, "email");
        this.name = name;
        this.email = email;
    }

    /**
     * The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
     */
    public EntityRelationship withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
     */
    public EntityRelationship withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityRelationship other = (EntityRelationship) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.email, other.email);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            email);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityRelationship.class,
                "name", name,
                "email", email);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String email;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }
        
        public EntityRelationship build() {
            return new EntityRelationship(
                name,
                email);
        }
    }
}
