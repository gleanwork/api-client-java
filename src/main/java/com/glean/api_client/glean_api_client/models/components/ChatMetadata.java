/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * ChatMetadata
 * 
 * <p>Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
 */
public class ChatMetadata {

    /**
     * The opaque id of the Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<Long> createTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    private Optional<? extends Person> createdBy;

    /**
     * Server Unix timestamp of the update time (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    private Optional<Long> updateTime;

    /**
     * The name of the Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The ID of the AI App that this Chat is associated to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationId")
    private Optional<String> applicationId;

    /**
     * The display name of the AI App that this Chat is associated to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationName")
    private Optional<String> applicationName;

    /**
     * Defines how to render an icon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<? extends IconConfig> icon;

    @JsonCreator
    public ChatMetadata(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("createTime") Optional<Long> createTime,
            @JsonProperty("createdBy") Optional<? extends Person> createdBy,
            @JsonProperty("updateTime") Optional<Long> updateTime,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("applicationId") Optional<String> applicationId,
            @JsonProperty("applicationName") Optional<String> applicationName,
            @JsonProperty("icon") Optional<? extends IconConfig> icon) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updateTime, "updateTime");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(applicationName, "applicationName");
        Utils.checkNotNull(icon, "icon");
        this.id = id;
        this.createTime = createTime;
        this.createdBy = createdBy;
        this.updateTime = updateTime;
        this.name = name;
        this.applicationId = applicationId;
        this.applicationName = applicationName;
        this.icon = icon;
    }
    
    public ChatMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The opaque id of the Chat.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> createTime() {
        return createTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> createdBy() {
        return (Optional<Person>) createdBy;
    }

    /**
     * Server Unix timestamp of the update time (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> updateTime() {
        return updateTime;
    }

    /**
     * The name of the Chat.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The ID of the AI App that this Chat is associated to.
     */
    @JsonIgnore
    public Optional<String> applicationId() {
        return applicationId;
    }

    /**
     * The display name of the AI App that this Chat is associated to.
     */
    @JsonIgnore
    public Optional<String> applicationName() {
        return applicationName;
    }

    /**
     * Defines how to render an icon
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IconConfig> icon() {
        return (Optional<IconConfig>) icon;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The opaque id of the Chat.
     */
    public ChatMetadata withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The opaque id of the Chat.
     */
    public ChatMetadata withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    public ChatMetadata withCreateTime(long createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    public ChatMetadata withCreateTime(Optional<Long> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    public ChatMetadata withCreatedBy(Person createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }

    public ChatMetadata withCreatedBy(Optional<? extends Person> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Server Unix timestamp of the update time (in seconds since epoch UTC).
     */
    public ChatMetadata withUpdateTime(long updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = Optional.ofNullable(updateTime);
        return this;
    }

    /**
     * Server Unix timestamp of the update time (in seconds since epoch UTC).
     */
    public ChatMetadata withUpdateTime(Optional<Long> updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = updateTime;
        return this;
    }

    /**
     * The name of the Chat.
     */
    public ChatMetadata withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the Chat.
     */
    public ChatMetadata withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the AI App that this Chat is associated to.
     */
    public ChatMetadata withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }

    /**
     * The ID of the AI App that this Chat is associated to.
     */
    public ChatMetadata withApplicationId(Optional<String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    /**
     * The display name of the AI App that this Chat is associated to.
     */
    public ChatMetadata withApplicationName(String applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = Optional.ofNullable(applicationName);
        return this;
    }

    /**
     * The display name of the AI App that this Chat is associated to.
     */
    public ChatMetadata withApplicationName(Optional<String> applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public ChatMetadata withIcon(IconConfig icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    /**
     * Defines how to render an icon
     */
    public ChatMetadata withIcon(Optional<? extends IconConfig> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatMetadata other = (ChatMetadata) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.createTime, other.createTime) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updateTime, other.updateTime) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.applicationId, other.applicationId) &&
            Utils.enhancedDeepEquals(this.applicationName, other.applicationName) &&
            Utils.enhancedDeepEquals(this.icon, other.icon);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            createTime,
            createdBy,
            updateTime,
            name,
            applicationId,
            applicationName,
            icon);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatMetadata.class,
                "id", id,
                "createTime", createTime,
                "createdBy", createdBy,
                "updateTime", updateTime,
                "name", name,
                "applicationId", applicationId,
                "applicationName", applicationName,
                "icon", icon);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Long> createTime = Optional.empty();
 
        private Optional<? extends Person> createdBy = Optional.empty();
 
        private Optional<Long> updateTime = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> applicationId = Optional.empty();
 
        private Optional<String> applicationName = Optional.empty();
 
        private Optional<? extends IconConfig> icon = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The opaque id of the Chat.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The opaque id of the Chat.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Server Unix timestamp of the creation time (in seconds since epoch UTC).
         */
        public Builder createTime(long createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        /**
         * Server Unix timestamp of the creation time (in seconds since epoch UTC).
         */
        public Builder createTime(Optional<Long> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        public Builder createdBy(Person createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        public Builder createdBy(Optional<? extends Person> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * Server Unix timestamp of the update time (in seconds since epoch UTC).
         */
        public Builder updateTime(long updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        /**
         * Server Unix timestamp of the update time (in seconds since epoch UTC).
         */
        public Builder updateTime(Optional<Long> updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = updateTime;
            return this;
        }

        /**
         * The name of the Chat.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the Chat.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the AI App that this Chat is associated to.
         */
        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        /**
         * The ID of the AI App that this Chat is associated to.
         */
        public Builder applicationId(Optional<String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        /**
         * The display name of the AI App that this Chat is associated to.
         */
        public Builder applicationName(String applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = Optional.ofNullable(applicationName);
            return this;
        }

        /**
         * The display name of the AI App that this Chat is associated to.
         */
        public Builder applicationName(Optional<String> applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = applicationName;
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder icon(IconConfig icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        /**
         * Defines how to render an icon
         */
        public Builder icon(Optional<? extends IconConfig> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }
        
        public ChatMetadata build() {
            return new ChatMetadata(
                id,
                createTime,
                createdBy,
                updateTime,
                name,
                applicationId,
                applicationName,
                icon);
        }
    }
}
