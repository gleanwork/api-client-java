/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * DatasourceUserDefinition
 * 
 * <p>describes a user in the datasource
 */
public class DatasourceUserDefinition {

    @JsonProperty("email")
    private String email;

    /**
     * To be supplied if the user id in the datasource is not the email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    private Optional<String> userId;

    @JsonProperty("name")
    private String name;

    /**
     * set to false if the user is a former employee or a bot
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isActive")
    private Optional<Boolean> isActive;

    @JsonCreator
    public DatasourceUserDefinition(
            @JsonProperty("email") String email,
            @JsonProperty("userId") Optional<String> userId,
            @JsonProperty("name") String name,
            @JsonProperty("isActive") Optional<Boolean> isActive) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(isActive, "isActive");
        this.email = email;
        this.userId = userId;
        this.name = name;
        this.isActive = isActive;
    }
    
    public DatasourceUserDefinition(
            String email,
            String name) {
        this(email, Optional.empty(), name, Optional.empty());
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * To be supplied if the user id in the datasource is not the email
     */
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * set to false if the user is a former employee or a bot
     */
    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DatasourceUserDefinition withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * To be supplied if the user id in the datasource is not the email
     */
    public DatasourceUserDefinition withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * To be supplied if the user id in the datasource is not the email
     */
    public DatasourceUserDefinition withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public DatasourceUserDefinition withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * set to false if the user is a former employee or a bot
     */
    public DatasourceUserDefinition withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    /**
     * set to false if the user is a former employee or a bot
     */
    public DatasourceUserDefinition withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DatasourceUserDefinition other = (DatasourceUserDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.isActive, other.isActive);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            email,
            userId,
            name,
            isActive);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DatasourceUserDefinition.class,
                "email", email,
                "userId", userId,
                "name", name,
                "isActive", isActive);
    }
    
    public final static class Builder {
 
        private String email;
 
        private Optional<String> userId = Optional.empty();
 
        private String name;
 
        private Optional<Boolean> isActive = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * To be supplied if the user id in the datasource is not the email
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * To be supplied if the user id in the datasource is not the email
         */
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * set to false if the user is a former employee or a bot
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        /**
         * set to false if the user is a former employee or a bot
         */
        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }
        
        public DatasourceUserDefinition build() {
            return new DatasourceUserDefinition(
                email,
                userId,
                name,
                isActive);
        }
    }
}
