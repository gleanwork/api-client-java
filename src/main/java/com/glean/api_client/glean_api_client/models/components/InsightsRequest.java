/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class InsightsRequest {

    /**
     * Categories of data requested. Request can include single or multiple types.
     */
    @JsonProperty("categories")
    private List<InsightsRequestCategory> categories;

    /**
     * Departments that the data is requested for. If this is empty, corresponds to whole company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dayRange")
    private Optional<? extends Period> dayRange;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aiAppRequestOptions")
    private Optional<? extends InsightsAiAppRequestOptions> aiAppRequestOptions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentsRequestOptions")
    private Optional<? extends InsightsAgentsRequestOptions> agentsRequestOptions;

    /**
     * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assistantActivityTypes")
    private Optional<? extends List<AssistantActivityType>> assistantActivityTypes;

    /**
     * If true, suppresses the generation of per-user Insights in the response. Default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disablePerUserInsights")
    private Optional<Boolean> disablePerUserInsights;

    @JsonCreator
    public InsightsRequest(
            @JsonProperty("categories") List<InsightsRequestCategory> categories,
            @JsonProperty("departments") Optional<? extends List<String>> departments,
            @JsonProperty("dayRange") Optional<? extends Period> dayRange,
            @JsonProperty("aiAppRequestOptions") Optional<? extends InsightsAiAppRequestOptions> aiAppRequestOptions,
            @JsonProperty("agentsRequestOptions") Optional<? extends InsightsAgentsRequestOptions> agentsRequestOptions,
            @JsonProperty("assistantActivityTypes") Optional<? extends List<AssistantActivityType>> assistantActivityTypes,
            @JsonProperty("disablePerUserInsights") Optional<Boolean> disablePerUserInsights) {
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(departments, "departments");
        Utils.checkNotNull(dayRange, "dayRange");
        Utils.checkNotNull(aiAppRequestOptions, "aiAppRequestOptions");
        Utils.checkNotNull(agentsRequestOptions, "agentsRequestOptions");
        Utils.checkNotNull(assistantActivityTypes, "assistantActivityTypes");
        Utils.checkNotNull(disablePerUserInsights, "disablePerUserInsights");
        this.categories = categories;
        this.departments = departments;
        this.dayRange = dayRange;
        this.aiAppRequestOptions = aiAppRequestOptions;
        this.agentsRequestOptions = agentsRequestOptions;
        this.assistantActivityTypes = assistantActivityTypes;
        this.disablePerUserInsights = disablePerUserInsights;
    }
    
    public InsightsRequest(
            List<InsightsRequestCategory> categories) {
        this(categories, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Categories of data requested. Request can include single or multiple types.
     */
    @JsonIgnore
    public List<InsightsRequestCategory> categories() {
        return categories;
    }

    /**
     * Departments that the data is requested for. If this is empty, corresponds to whole company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Period> dayRange() {
        return (Optional<Period>) dayRange;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InsightsAiAppRequestOptions> aiAppRequestOptions() {
        return (Optional<InsightsAiAppRequestOptions>) aiAppRequestOptions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InsightsAgentsRequestOptions> agentsRequestOptions() {
        return (Optional<InsightsAgentsRequestOptions>) agentsRequestOptions;
    }

    /**
     * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AssistantActivityType>> assistantActivityTypes() {
        return (Optional<List<AssistantActivityType>>) assistantActivityTypes;
    }

    /**
     * If true, suppresses the generation of per-user Insights in the response. Default is false.
     */
    @JsonIgnore
    public Optional<Boolean> disablePerUserInsights() {
        return disablePerUserInsights;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Categories of data requested. Request can include single or multiple types.
     */
    public InsightsRequest withCategories(List<InsightsRequestCategory> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * Departments that the data is requested for. If this is empty, corresponds to whole company.
     */
    public InsightsRequest withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * Departments that the data is requested for. If this is empty, corresponds to whole company.
     */
    public InsightsRequest withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    public InsightsRequest withDayRange(Period dayRange) {
        Utils.checkNotNull(dayRange, "dayRange");
        this.dayRange = Optional.ofNullable(dayRange);
        return this;
    }

    public InsightsRequest withDayRange(Optional<? extends Period> dayRange) {
        Utils.checkNotNull(dayRange, "dayRange");
        this.dayRange = dayRange;
        return this;
    }

    public InsightsRequest withAiAppRequestOptions(InsightsAiAppRequestOptions aiAppRequestOptions) {
        Utils.checkNotNull(aiAppRequestOptions, "aiAppRequestOptions");
        this.aiAppRequestOptions = Optional.ofNullable(aiAppRequestOptions);
        return this;
    }

    public InsightsRequest withAiAppRequestOptions(Optional<? extends InsightsAiAppRequestOptions> aiAppRequestOptions) {
        Utils.checkNotNull(aiAppRequestOptions, "aiAppRequestOptions");
        this.aiAppRequestOptions = aiAppRequestOptions;
        return this;
    }

    public InsightsRequest withAgentsRequestOptions(InsightsAgentsRequestOptions agentsRequestOptions) {
        Utils.checkNotNull(agentsRequestOptions, "agentsRequestOptions");
        this.agentsRequestOptions = Optional.ofNullable(agentsRequestOptions);
        return this;
    }

    public InsightsRequest withAgentsRequestOptions(Optional<? extends InsightsAgentsRequestOptions> agentsRequestOptions) {
        Utils.checkNotNull(agentsRequestOptions, "agentsRequestOptions");
        this.agentsRequestOptions = agentsRequestOptions;
        return this;
    }

    /**
     * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
     */
    public InsightsRequest withAssistantActivityTypes(List<AssistantActivityType> assistantActivityTypes) {
        Utils.checkNotNull(assistantActivityTypes, "assistantActivityTypes");
        this.assistantActivityTypes = Optional.ofNullable(assistantActivityTypes);
        return this;
    }

    /**
     * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
     */
    public InsightsRequest withAssistantActivityTypes(Optional<? extends List<AssistantActivityType>> assistantActivityTypes) {
        Utils.checkNotNull(assistantActivityTypes, "assistantActivityTypes");
        this.assistantActivityTypes = assistantActivityTypes;
        return this;
    }

    /**
     * If true, suppresses the generation of per-user Insights in the response. Default is false.
     */
    public InsightsRequest withDisablePerUserInsights(boolean disablePerUserInsights) {
        Utils.checkNotNull(disablePerUserInsights, "disablePerUserInsights");
        this.disablePerUserInsights = Optional.ofNullable(disablePerUserInsights);
        return this;
    }

    /**
     * If true, suppresses the generation of per-user Insights in the response. Default is false.
     */
    public InsightsRequest withDisablePerUserInsights(Optional<Boolean> disablePerUserInsights) {
        Utils.checkNotNull(disablePerUserInsights, "disablePerUserInsights");
        this.disablePerUserInsights = disablePerUserInsights;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InsightsRequest other = (InsightsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.departments, other.departments) &&
            Utils.enhancedDeepEquals(this.dayRange, other.dayRange) &&
            Utils.enhancedDeepEquals(this.aiAppRequestOptions, other.aiAppRequestOptions) &&
            Utils.enhancedDeepEquals(this.agentsRequestOptions, other.agentsRequestOptions) &&
            Utils.enhancedDeepEquals(this.assistantActivityTypes, other.assistantActivityTypes) &&
            Utils.enhancedDeepEquals(this.disablePerUserInsights, other.disablePerUserInsights);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            categories,
            departments,
            dayRange,
            aiAppRequestOptions,
            agentsRequestOptions,
            assistantActivityTypes,
            disablePerUserInsights);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InsightsRequest.class,
                "categories", categories,
                "departments", departments,
                "dayRange", dayRange,
                "aiAppRequestOptions", aiAppRequestOptions,
                "agentsRequestOptions", agentsRequestOptions,
                "assistantActivityTypes", assistantActivityTypes,
                "disablePerUserInsights", disablePerUserInsights);
    }
    
    public final static class Builder {
 
        private List<InsightsRequestCategory> categories;
 
        private Optional<? extends List<String>> departments = Optional.empty();
 
        private Optional<? extends Period> dayRange = Optional.empty();
 
        private Optional<? extends InsightsAiAppRequestOptions> aiAppRequestOptions = Optional.empty();
 
        private Optional<? extends InsightsAgentsRequestOptions> agentsRequestOptions = Optional.empty();
 
        private Optional<? extends List<AssistantActivityType>> assistantActivityTypes = Optional.empty();
 
        private Optional<Boolean> disablePerUserInsights = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Categories of data requested. Request can include single or multiple types.
         */
        public Builder categories(List<InsightsRequestCategory> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * Departments that the data is requested for. If this is empty, corresponds to whole company.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * Departments that the data is requested for. If this is empty, corresponds to whole company.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }

        public Builder dayRange(Period dayRange) {
            Utils.checkNotNull(dayRange, "dayRange");
            this.dayRange = Optional.ofNullable(dayRange);
            return this;
        }

        public Builder dayRange(Optional<? extends Period> dayRange) {
            Utils.checkNotNull(dayRange, "dayRange");
            this.dayRange = dayRange;
            return this;
        }

        public Builder aiAppRequestOptions(InsightsAiAppRequestOptions aiAppRequestOptions) {
            Utils.checkNotNull(aiAppRequestOptions, "aiAppRequestOptions");
            this.aiAppRequestOptions = Optional.ofNullable(aiAppRequestOptions);
            return this;
        }

        public Builder aiAppRequestOptions(Optional<? extends InsightsAiAppRequestOptions> aiAppRequestOptions) {
            Utils.checkNotNull(aiAppRequestOptions, "aiAppRequestOptions");
            this.aiAppRequestOptions = aiAppRequestOptions;
            return this;
        }

        public Builder agentsRequestOptions(InsightsAgentsRequestOptions agentsRequestOptions) {
            Utils.checkNotNull(agentsRequestOptions, "agentsRequestOptions");
            this.agentsRequestOptions = Optional.ofNullable(agentsRequestOptions);
            return this;
        }

        public Builder agentsRequestOptions(Optional<? extends InsightsAgentsRequestOptions> agentsRequestOptions) {
            Utils.checkNotNull(agentsRequestOptions, "agentsRequestOptions");
            this.agentsRequestOptions = agentsRequestOptions;
            return this;
        }

        /**
         * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
         */
        public Builder assistantActivityTypes(List<AssistantActivityType> assistantActivityTypes) {
            Utils.checkNotNull(assistantActivityTypes, "assistantActivityTypes");
            this.assistantActivityTypes = Optional.ofNullable(assistantActivityTypes);
            return this;
        }

        /**
         * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
         */
        public Builder assistantActivityTypes(Optional<? extends List<AssistantActivityType>> assistantActivityTypes) {
            Utils.checkNotNull(assistantActivityTypes, "assistantActivityTypes");
            this.assistantActivityTypes = assistantActivityTypes;
            return this;
        }

        /**
         * If true, suppresses the generation of per-user Insights in the response. Default is false.
         */
        public Builder disablePerUserInsights(boolean disablePerUserInsights) {
            Utils.checkNotNull(disablePerUserInsights, "disablePerUserInsights");
            this.disablePerUserInsights = Optional.ofNullable(disablePerUserInsights);
            return this;
        }

        /**
         * If true, suppresses the generation of per-user Insights in the response. Default is false.
         */
        public Builder disablePerUserInsights(Optional<Boolean> disablePerUserInsights) {
            Utils.checkNotNull(disablePerUserInsights, "disablePerUserInsights");
            this.disablePerUserInsights = disablePerUserInsights;
            return this;
        }
        
        public InsightsRequest build() {
            return new InsightsRequest(
                categories,
                departments,
                dayRange,
                aiAppRequestOptions,
                agentsRequestOptions,
                assistantActivityTypes,
                disablePerUserInsights);
        }
    }
}
