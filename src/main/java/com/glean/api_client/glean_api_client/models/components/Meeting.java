/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;

public class Meeting {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<OffsetDateTime> startTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<OffsetDateTime> endTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendees")
    private Optional<? extends CalendarAttendees> attendees;

    @JsonCreator
    public Meeting(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("startTime") Optional<OffsetDateTime> startTime,
            @JsonProperty("endTime") Optional<OffsetDateTime> endTime,
            @JsonProperty("attendees") Optional<? extends CalendarAttendees> attendees) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(attendees, "attendees");
        this.id = id;
        this.title = title;
        this.description = description;
        this.url = url;
        this.startTime = startTime;
        this.endTime = endTime;
        this.attendees = attendees;
    }
    
    public Meeting() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startTime() {
        return startTime;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endTime() {
        return endTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CalendarAttendees> attendees() {
        return (Optional<CalendarAttendees>) attendees;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Meeting withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Meeting withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Meeting withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public Meeting withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Meeting withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public Meeting withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public Meeting withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public Meeting withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public Meeting withStartTime(OffsetDateTime startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    public Meeting withStartTime(Optional<OffsetDateTime> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    public Meeting withEndTime(OffsetDateTime endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    public Meeting withEndTime(Optional<OffsetDateTime> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    public Meeting withAttendees(CalendarAttendees attendees) {
        Utils.checkNotNull(attendees, "attendees");
        this.attendees = Optional.ofNullable(attendees);
        return this;
    }

    public Meeting withAttendees(Optional<? extends CalendarAttendees> attendees) {
        Utils.checkNotNull(attendees, "attendees");
        this.attendees = attendees;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Meeting other = (Meeting) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.startTime, other.startTime) &&
            Utils.enhancedDeepEquals(this.endTime, other.endTime) &&
            Utils.enhancedDeepEquals(this.attendees, other.attendees);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            title,
            description,
            url,
            startTime,
            endTime,
            attendees);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Meeting.class,
                "id", id,
                "title", title,
                "description", description,
                "url", url,
                "startTime", startTime,
                "endTime", endTime,
                "attendees", attendees);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<OffsetDateTime> startTime = Optional.empty();
 
        private Optional<OffsetDateTime> endTime = Optional.empty();
 
        private Optional<? extends CalendarAttendees> attendees = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder startTime(OffsetDateTime startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        public Builder startTime(Optional<OffsetDateTime> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        public Builder endTime(OffsetDateTime endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        public Builder endTime(Optional<OffsetDateTime> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        public Builder attendees(CalendarAttendees attendees) {
            Utils.checkNotNull(attendees, "attendees");
            this.attendees = Optional.ofNullable(attendees);
            return this;
        }

        public Builder attendees(Optional<? extends CalendarAttendees> attendees) {
            Utils.checkNotNull(attendees, "attendees");
            this.attendees = attendees;
            return this;
        }
        
        public Meeting build() {
            return new Meeting(
                id,
                title,
                description,
                url,
                startTime,
                endTime,
                attendees);
        }
    }
}
