/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * GetDocumentCountResponse
 * 
 * <p>Describes the response body of the /getdocumentcount API call
 */
public class GetDocumentCountResponse {

    /**
     * Number of documents corresponding to the specified custom datasource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentCount")
    private Optional<Long> documentCount;

    @JsonCreator
    public GetDocumentCountResponse(
            @JsonProperty("documentCount") Optional<Long> documentCount) {
        Utils.checkNotNull(documentCount, "documentCount");
        this.documentCount = documentCount;
    }
    
    public GetDocumentCountResponse() {
        this(Optional.empty());
    }

    /**
     * Number of documents corresponding to the specified custom datasource.
     */
    @JsonIgnore
    public Optional<Long> documentCount() {
        return documentCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Number of documents corresponding to the specified custom datasource.
     */
    public GetDocumentCountResponse withDocumentCount(long documentCount) {
        Utils.checkNotNull(documentCount, "documentCount");
        this.documentCount = Optional.ofNullable(documentCount);
        return this;
    }

    /**
     * Number of documents corresponding to the specified custom datasource.
     */
    public GetDocumentCountResponse withDocumentCount(Optional<Long> documentCount) {
        Utils.checkNotNull(documentCount, "documentCount");
        this.documentCount = documentCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentCountResponse other = (GetDocumentCountResponse) o;
        return 
            Utils.enhancedDeepEquals(this.documentCount, other.documentCount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            documentCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentCountResponse.class,
                "documentCount", documentCount);
    }
    
    public final static class Builder {
 
        private Optional<Long> documentCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of documents corresponding to the specified custom datasource.
         */
        public Builder documentCount(long documentCount) {
            Utils.checkNotNull(documentCount, "documentCount");
            this.documentCount = Optional.ofNullable(documentCount);
            return this;
        }

        /**
         * Number of documents corresponding to the specified custom datasource.
         */
        public Builder documentCount(Optional<Long> documentCount) {
            Utils.checkNotNull(documentCount, "documentCount");
            this.documentCount = documentCount;
            return this;
        }
        
        public GetDocumentCountResponse build() {
            return new GetDocumentCountResponse(
                documentCount);
        }
    }
}
