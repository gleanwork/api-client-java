/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * SensitiveContentOptions
 * 
 * <p>Options for defining sensitive content within scanned documents.
 */
public class SensitiveContentOptions {

    /**
     * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitiveInfoTypes")
    private Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes;

    /**
     * list of words and phrases to consider as sensitive content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitiveTerms")
    private Optional<? extends List<SensitiveExpression>> sensitiveTerms;

    /**
     * list of regular expressions to consider as sensitive content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitiveRegexes")
    private Optional<? extends List<SensitiveExpression>> sensitiveRegexes;

    @JsonCreator
    public SensitiveContentOptions(
            @JsonProperty("sensitiveInfoTypes") Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes,
            @JsonProperty("sensitiveTerms") Optional<? extends List<SensitiveExpression>> sensitiveTerms,
            @JsonProperty("sensitiveRegexes") Optional<? extends List<SensitiveExpression>> sensitiveRegexes) {
        Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
        Utils.checkNotNull(sensitiveTerms, "sensitiveTerms");
        Utils.checkNotNull(sensitiveRegexes, "sensitiveRegexes");
        this.sensitiveInfoTypes = sensitiveInfoTypes;
        this.sensitiveTerms = sensitiveTerms;
        this.sensitiveRegexes = sensitiveRegexes;
    }
    
    public SensitiveContentOptions() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SensitiveInfoType>> sensitiveInfoTypes() {
        return (Optional<List<SensitiveInfoType>>) sensitiveInfoTypes;
    }

    /**
     * list of words and phrases to consider as sensitive content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SensitiveExpression>> sensitiveTerms() {
        return (Optional<List<SensitiveExpression>>) sensitiveTerms;
    }

    /**
     * list of regular expressions to consider as sensitive content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SensitiveExpression>> sensitiveRegexes() {
        return (Optional<List<SensitiveExpression>>) sensitiveRegexes;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
     */
    public SensitiveContentOptions withSensitiveInfoTypes(List<SensitiveInfoType> sensitiveInfoTypes) {
        Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
        this.sensitiveInfoTypes = Optional.ofNullable(sensitiveInfoTypes);
        return this;
    }

    /**
     * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
     */
    public SensitiveContentOptions withSensitiveInfoTypes(Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes) {
        Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
        this.sensitiveInfoTypes = sensitiveInfoTypes;
        return this;
    }

    /**
     * list of words and phrases to consider as sensitive content
     */
    public SensitiveContentOptions withSensitiveTerms(List<SensitiveExpression> sensitiveTerms) {
        Utils.checkNotNull(sensitiveTerms, "sensitiveTerms");
        this.sensitiveTerms = Optional.ofNullable(sensitiveTerms);
        return this;
    }

    /**
     * list of words and phrases to consider as sensitive content
     */
    public SensitiveContentOptions withSensitiveTerms(Optional<? extends List<SensitiveExpression>> sensitiveTerms) {
        Utils.checkNotNull(sensitiveTerms, "sensitiveTerms");
        this.sensitiveTerms = sensitiveTerms;
        return this;
    }

    /**
     * list of regular expressions to consider as sensitive content
     */
    public SensitiveContentOptions withSensitiveRegexes(List<SensitiveExpression> sensitiveRegexes) {
        Utils.checkNotNull(sensitiveRegexes, "sensitiveRegexes");
        this.sensitiveRegexes = Optional.ofNullable(sensitiveRegexes);
        return this;
    }

    /**
     * list of regular expressions to consider as sensitive content
     */
    public SensitiveContentOptions withSensitiveRegexes(Optional<? extends List<SensitiveExpression>> sensitiveRegexes) {
        Utils.checkNotNull(sensitiveRegexes, "sensitiveRegexes");
        this.sensitiveRegexes = sensitiveRegexes;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SensitiveContentOptions other = (SensitiveContentOptions) o;
        return 
            Objects.deepEquals(this.sensitiveInfoTypes, other.sensitiveInfoTypes) &&
            Objects.deepEquals(this.sensitiveTerms, other.sensitiveTerms) &&
            Objects.deepEquals(this.sensitiveRegexes, other.sensitiveRegexes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sensitiveInfoTypes,
            sensitiveTerms,
            sensitiveRegexes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SensitiveContentOptions.class,
                "sensitiveInfoTypes", sensitiveInfoTypes,
                "sensitiveTerms", sensitiveTerms,
                "sensitiveRegexes", sensitiveRegexes);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes = Optional.empty();
 
        private Optional<? extends List<SensitiveExpression>> sensitiveTerms = Optional.empty();
 
        private Optional<? extends List<SensitiveExpression>> sensitiveRegexes = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
         */
        public Builder sensitiveInfoTypes(List<SensitiveInfoType> sensitiveInfoTypes) {
            Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
            this.sensitiveInfoTypes = Optional.ofNullable(sensitiveInfoTypes);
            return this;
        }

        /**
         * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
         */
        public Builder sensitiveInfoTypes(Optional<? extends List<SensitiveInfoType>> sensitiveInfoTypes) {
            Utils.checkNotNull(sensitiveInfoTypes, "sensitiveInfoTypes");
            this.sensitiveInfoTypes = sensitiveInfoTypes;
            return this;
        }

        /**
         * list of words and phrases to consider as sensitive content
         */
        public Builder sensitiveTerms(List<SensitiveExpression> sensitiveTerms) {
            Utils.checkNotNull(sensitiveTerms, "sensitiveTerms");
            this.sensitiveTerms = Optional.ofNullable(sensitiveTerms);
            return this;
        }

        /**
         * list of words and phrases to consider as sensitive content
         */
        public Builder sensitiveTerms(Optional<? extends List<SensitiveExpression>> sensitiveTerms) {
            Utils.checkNotNull(sensitiveTerms, "sensitiveTerms");
            this.sensitiveTerms = sensitiveTerms;
            return this;
        }

        /**
         * list of regular expressions to consider as sensitive content
         */
        public Builder sensitiveRegexes(List<SensitiveExpression> sensitiveRegexes) {
            Utils.checkNotNull(sensitiveRegexes, "sensitiveRegexes");
            this.sensitiveRegexes = Optional.ofNullable(sensitiveRegexes);
            return this;
        }

        /**
         * list of regular expressions to consider as sensitive content
         */
        public Builder sensitiveRegexes(Optional<? extends List<SensitiveExpression>> sensitiveRegexes) {
            Utils.checkNotNull(sensitiveRegexes, "sensitiveRegexes");
            this.sensitiveRegexes = sensitiveRegexes;
            return this;
        }
        
        public SensitiveContentOptions build() {
            return new SensitiveContentOptions(
                sensitiveInfoTypes,
                sensitiveTerms,
                sensitiveRegexes);
        }
    }
}
