/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class DocumentInsight {

    @JsonProperty("document")
    private Document document;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewCount")
    private Optional<? extends CountInfo> viewCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitorCount")
    private Optional<? extends CountInfo> visitorCount;

    @JsonCreator
    public DocumentInsight(
            @JsonProperty("document") Document document,
            @JsonProperty("viewCount") Optional<? extends CountInfo> viewCount,
            @JsonProperty("visitorCount") Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.document = document;
        this.viewCount = viewCount;
        this.visitorCount = visitorCount;
    }
    
    public DocumentInsight(
            Document document) {
        this(document, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Document document() {
        return document;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> viewCount() {
        return (Optional<CountInfo>) viewCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> visitorCount() {
        return (Optional<CountInfo>) visitorCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DocumentInsight withDocument(Document document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    public DocumentInsight withViewCount(CountInfo viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = Optional.ofNullable(viewCount);
        return this;
    }

    public DocumentInsight withViewCount(Optional<? extends CountInfo> viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    public DocumentInsight withVisitorCount(CountInfo visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = Optional.ofNullable(visitorCount);
        return this;
    }

    public DocumentInsight withVisitorCount(Optional<? extends CountInfo> visitorCount) {
        Utils.checkNotNull(visitorCount, "visitorCount");
        this.visitorCount = visitorCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentInsight other = (DocumentInsight) o;
        return 
            Objects.deepEquals(this.document, other.document) &&
            Objects.deepEquals(this.viewCount, other.viewCount) &&
            Objects.deepEquals(this.visitorCount, other.visitorCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            document,
            viewCount,
            visitorCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentInsight.class,
                "document", document,
                "viewCount", viewCount,
                "visitorCount", visitorCount);
    }
    
    public final static class Builder {
 
        private Document document;
 
        private Optional<? extends CountInfo> viewCount = Optional.empty();
 
        private Optional<? extends CountInfo> visitorCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder document(Document document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        public Builder viewCount(CountInfo viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = Optional.ofNullable(viewCount);
            return this;
        }

        public Builder viewCount(Optional<? extends CountInfo> viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }

        public Builder visitorCount(CountInfo visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = Optional.ofNullable(visitorCount);
            return this;
        }

        public Builder visitorCount(Optional<? extends CountInfo> visitorCount) {
            Utils.checkNotNull(visitorCount, "visitorCount");
            this.visitorCount = visitorCount;
            return this;
        }
        
        public DocumentInsight build() {
            return new DocumentInsight(
                document,
                viewCount,
                visitorCount);
        }
    }
}
