/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ProcessAllDocumentsRequest
 * 
 * <p>Describes the request body of the /processalldocuments API call
 */
public class ProcessAllDocumentsRequest {

    /**
     * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    @JsonCreator
    public ProcessAllDocumentsRequest(
            @JsonProperty("datasource") Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
    }
    
    public ProcessAllDocumentsRequest() {
        this(Optional.empty());
    }

    /**
     * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
     */
    public ProcessAllDocumentsRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
     */
    public ProcessAllDocumentsRequest withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProcessAllDocumentsRequest other = (ProcessAllDocumentsRequest) o;
        return 
            Objects.deepEquals(this.datasource, other.datasource);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProcessAllDocumentsRequest.class,
                "datasource", datasource);
    }
    
    public final static class Builder {
 
        private Optional<String> datasource = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }
        
        public ProcessAllDocumentsRequest build() {
            return new ProcessAllDocumentsRequest(
                datasource);
        }
    }
}
