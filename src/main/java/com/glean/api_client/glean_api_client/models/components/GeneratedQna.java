/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class GeneratedQna {

    /**
     * Search query rephrased into a question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question")
    private Optional<String> question;

    /**
     * Answer generated for the given query or the generated question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answer")
    private Optional<String> answer;

    /**
     * List of all follow-up prompts generated for the given query or the generated question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followUpPrompts")
    private Optional<? extends List<String>> followUpPrompts;

    /**
     * List of follow-up actions generated for the given query or the generated question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followupActions")
    private Optional<? extends List<FollowupAction>> followupActions;

    /**
     * Answer subsections to mark with special formatting (citations, bolding etc)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ranges")
    private Optional<? extends List<TextRange>> ranges;

    /**
     * Status of backend generating the answer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends GeneratedQnaStatus> status;

    /**
     * An opaque cursor representing the search request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonCreator
    public GeneratedQna(
            @JsonProperty("question") Optional<String> question,
            @JsonProperty("answer") Optional<String> answer,
            @JsonProperty("followUpPrompts") Optional<? extends List<String>> followUpPrompts,
            @JsonProperty("followupActions") Optional<? extends List<FollowupAction>> followupActions,
            @JsonProperty("ranges") Optional<? extends List<TextRange>> ranges,
            @JsonProperty("status") Optional<? extends GeneratedQnaStatus> status,
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("trackingToken") Optional<String> trackingToken) {
        Utils.checkNotNull(question, "question");
        Utils.checkNotNull(answer, "answer");
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        Utils.checkNotNull(followupActions, "followupActions");
        Utils.checkNotNull(ranges, "ranges");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.question = question;
        this.answer = answer;
        this.followUpPrompts = followUpPrompts;
        this.followupActions = followupActions;
        this.ranges = ranges;
        this.status = status;
        this.cursor = cursor;
        this.trackingToken = trackingToken;
    }
    
    public GeneratedQna() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Search query rephrased into a question.
     */
    @JsonIgnore
    public Optional<String> question() {
        return question;
    }

    /**
     * Answer generated for the given query or the generated question.
     */
    @JsonIgnore
    public Optional<String> answer() {
        return answer;
    }

    /**
     * List of all follow-up prompts generated for the given query or the generated question.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> followUpPrompts() {
        return (Optional<List<String>>) followUpPrompts;
    }

    /**
     * List of follow-up actions generated for the given query or the generated question.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FollowupAction>> followupActions() {
        return (Optional<List<FollowupAction>>) followupActions;
    }

    /**
     * Answer subsections to mark with special formatting (citations, bolding etc)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> ranges() {
        return (Optional<List<TextRange>>) ranges;
    }

    /**
     * Status of backend generating the answer
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GeneratedQnaStatus> status() {
        return (Optional<GeneratedQnaStatus>) status;
    }

    /**
     * An opaque cursor representing the search request
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Search query rephrased into a question.
     */
    public GeneratedQna withQuestion(String question) {
        Utils.checkNotNull(question, "question");
        this.question = Optional.ofNullable(question);
        return this;
    }

    /**
     * Search query rephrased into a question.
     */
    public GeneratedQna withQuestion(Optional<String> question) {
        Utils.checkNotNull(question, "question");
        this.question = question;
        return this;
    }

    /**
     * Answer generated for the given query or the generated question.
     */
    public GeneratedQna withAnswer(String answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = Optional.ofNullable(answer);
        return this;
    }

    /**
     * Answer generated for the given query or the generated question.
     */
    public GeneratedQna withAnswer(Optional<String> answer) {
        Utils.checkNotNull(answer, "answer");
        this.answer = answer;
        return this;
    }

    /**
     * List of all follow-up prompts generated for the given query or the generated question.
     */
    public GeneratedQna withFollowUpPrompts(List<String> followUpPrompts) {
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.followUpPrompts = Optional.ofNullable(followUpPrompts);
        return this;
    }

    /**
     * List of all follow-up prompts generated for the given query or the generated question.
     */
    public GeneratedQna withFollowUpPrompts(Optional<? extends List<String>> followUpPrompts) {
        Utils.checkNotNull(followUpPrompts, "followUpPrompts");
        this.followUpPrompts = followUpPrompts;
        return this;
    }

    /**
     * List of follow-up actions generated for the given query or the generated question.
     */
    public GeneratedQna withFollowupActions(List<FollowupAction> followupActions) {
        Utils.checkNotNull(followupActions, "followupActions");
        this.followupActions = Optional.ofNullable(followupActions);
        return this;
    }

    /**
     * List of follow-up actions generated for the given query or the generated question.
     */
    public GeneratedQna withFollowupActions(Optional<? extends List<FollowupAction>> followupActions) {
        Utils.checkNotNull(followupActions, "followupActions");
        this.followupActions = followupActions;
        return this;
    }

    /**
     * Answer subsections to mark with special formatting (citations, bolding etc)
     */
    public GeneratedQna withRanges(List<TextRange> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = Optional.ofNullable(ranges);
        return this;
    }

    /**
     * Answer subsections to mark with special formatting (citations, bolding etc)
     */
    public GeneratedQna withRanges(Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = ranges;
        return this;
    }

    /**
     * Status of backend generating the answer
     */
    public GeneratedQna withStatus(GeneratedQnaStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of backend generating the answer
     */
    public GeneratedQna withStatus(Optional<? extends GeneratedQnaStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * An opaque cursor representing the search request
     */
    public GeneratedQna withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * An opaque cursor representing the search request
     */
    public GeneratedQna withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    public GeneratedQna withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    public GeneratedQna withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneratedQna other = (GeneratedQna) o;
        return 
            Utils.enhancedDeepEquals(this.question, other.question) &&
            Utils.enhancedDeepEquals(this.answer, other.answer) &&
            Utils.enhancedDeepEquals(this.followUpPrompts, other.followUpPrompts) &&
            Utils.enhancedDeepEquals(this.followupActions, other.followupActions) &&
            Utils.enhancedDeepEquals(this.ranges, other.ranges) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.trackingToken, other.trackingToken);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            question,
            answer,
            followUpPrompts,
            followupActions,
            ranges,
            status,
            cursor,
            trackingToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneratedQna.class,
                "question", question,
                "answer", answer,
                "followUpPrompts", followUpPrompts,
                "followupActions", followupActions,
                "ranges", ranges,
                "status", status,
                "cursor", cursor,
                "trackingToken", trackingToken);
    }
    
    public final static class Builder {
 
        private Optional<String> question = Optional.empty();
 
        private Optional<String> answer = Optional.empty();
 
        private Optional<? extends List<String>> followUpPrompts = Optional.empty();
 
        private Optional<? extends List<FollowupAction>> followupActions = Optional.empty();
 
        private Optional<? extends List<TextRange>> ranges = Optional.empty();
 
        private Optional<? extends GeneratedQnaStatus> status = Optional.empty();
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Search query rephrased into a question.
         */
        public Builder question(String question) {
            Utils.checkNotNull(question, "question");
            this.question = Optional.ofNullable(question);
            return this;
        }

        /**
         * Search query rephrased into a question.
         */
        public Builder question(Optional<String> question) {
            Utils.checkNotNull(question, "question");
            this.question = question;
            return this;
        }

        /**
         * Answer generated for the given query or the generated question.
         */
        public Builder answer(String answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = Optional.ofNullable(answer);
            return this;
        }

        /**
         * Answer generated for the given query or the generated question.
         */
        public Builder answer(Optional<String> answer) {
            Utils.checkNotNull(answer, "answer");
            this.answer = answer;
            return this;
        }

        /**
         * List of all follow-up prompts generated for the given query or the generated question.
         */
        public Builder followUpPrompts(List<String> followUpPrompts) {
            Utils.checkNotNull(followUpPrompts, "followUpPrompts");
            this.followUpPrompts = Optional.ofNullable(followUpPrompts);
            return this;
        }

        /**
         * List of all follow-up prompts generated for the given query or the generated question.
         */
        public Builder followUpPrompts(Optional<? extends List<String>> followUpPrompts) {
            Utils.checkNotNull(followUpPrompts, "followUpPrompts");
            this.followUpPrompts = followUpPrompts;
            return this;
        }

        /**
         * List of follow-up actions generated for the given query or the generated question.
         */
        public Builder followupActions(List<FollowupAction> followupActions) {
            Utils.checkNotNull(followupActions, "followupActions");
            this.followupActions = Optional.ofNullable(followupActions);
            return this;
        }

        /**
         * List of follow-up actions generated for the given query or the generated question.
         */
        public Builder followupActions(Optional<? extends List<FollowupAction>> followupActions) {
            Utils.checkNotNull(followupActions, "followupActions");
            this.followupActions = followupActions;
            return this;
        }

        /**
         * Answer subsections to mark with special formatting (citations, bolding etc)
         */
        public Builder ranges(List<TextRange> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * Answer subsections to mark with special formatting (citations, bolding etc)
         */
        public Builder ranges(Optional<? extends List<TextRange>> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = ranges;
            return this;
        }

        /**
         * Status of backend generating the answer
         */
        public Builder status(GeneratedQnaStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of backend generating the answer
         */
        public Builder status(Optional<? extends GeneratedQnaStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * An opaque cursor representing the search request
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * An opaque cursor representing the search request
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }
        
        public GeneratedQna build() {
            return new GeneratedQna(
                question,
                answer,
                followUpPrompts,
                followupActions,
                ranges,
                status,
                cursor,
                trackingToken);
        }
    }
}
