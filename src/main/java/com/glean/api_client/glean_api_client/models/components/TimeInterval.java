/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class TimeInterval {

    /**
     * The RFC3339 timestamp formatted start time of this event.
     */
    @JsonProperty("start")
    private String start;

    /**
     * The RFC3339 timestamp formatted end time of this event.
     */
    @JsonProperty("end")
    private String end;

    @JsonCreator
    public TimeInterval(
            @JsonProperty("start") String start,
            @JsonProperty("end") String end) {
        Utils.checkNotNull(start, "start");
        Utils.checkNotNull(end, "end");
        this.start = start;
        this.end = end;
    }

    /**
     * The RFC3339 timestamp formatted start time of this event.
     */
    @JsonIgnore
    public String start() {
        return start;
    }

    /**
     * The RFC3339 timestamp formatted end time of this event.
     */
    @JsonIgnore
    public String end() {
        return end;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The RFC3339 timestamp formatted start time of this event.
     */
    public TimeInterval withStart(String start) {
        Utils.checkNotNull(start, "start");
        this.start = start;
        return this;
    }

    /**
     * The RFC3339 timestamp formatted end time of this event.
     */
    public TimeInterval withEnd(String end) {
        Utils.checkNotNull(end, "end");
        this.end = end;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeInterval other = (TimeInterval) o;
        return 
            Objects.deepEquals(this.start, other.start) &&
            Objects.deepEquals(this.end, other.end);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            start,
            end);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimeInterval.class,
                "start", start,
                "end", end);
    }
    
    public final static class Builder {
 
        private String start;
 
        private String end;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The RFC3339 timestamp formatted start time of this event.
         */
        public Builder start(String start) {
            Utils.checkNotNull(start, "start");
            this.start = start;
            return this;
        }

        /**
         * The RFC3339 timestamp formatted end time of this event.
         */
        public Builder end(String end) {
            Utils.checkNotNull(end, "end");
            this.end = end;
            return this;
        }
        
        public TimeInterval build() {
            return new TimeInterval(
                start,
                end);
        }
    }
}
