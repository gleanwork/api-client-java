/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class Activity {

    @JsonProperty("events")
    private List<ActivityEvent> events;

    @JsonCreator
    public Activity(
            @JsonProperty("events") List<ActivityEvent> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
    }

    @JsonIgnore
    public List<ActivityEvent> events() {
        return events;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Activity withEvents(List<ActivityEvent> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Activity other = (Activity) o;
        return 
            Utils.enhancedDeepEquals(this.events, other.events);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            events);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Activity.class,
                "events", events);
    }
    
    public final static class Builder {
 
        private List<ActivityEvent> events;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder events(List<ActivityEvent> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }
        
        public Activity build() {
            return new Activity(
                events);
        }
    }
}
