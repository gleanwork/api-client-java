/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class ReportStatusResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ReportStatusResponseStatus> status;

    /**
     * The timestamp at which the report's run/scan began.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<String> startTime;

    @JsonCreator
    public ReportStatusResponse(
            @JsonProperty("status") Optional<? extends ReportStatusResponseStatus> status,
            @JsonProperty("startTime") Optional<String> startTime) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(startTime, "startTime");
        this.status = status;
        this.startTime = startTime;
    }
    
    public ReportStatusResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ReportStatusResponseStatus> status() {
        return (Optional<ReportStatusResponseStatus>) status;
    }

    /**
     * The timestamp at which the report's run/scan began.
     */
    @JsonIgnore
    public Optional<String> startTime() {
        return startTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ReportStatusResponse withStatus(ReportStatusResponseStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public ReportStatusResponse withStatus(Optional<? extends ReportStatusResponseStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The timestamp at which the report's run/scan began.
     */
    public ReportStatusResponse withStartTime(String startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * The timestamp at which the report's run/scan began.
     */
    public ReportStatusResponse withStartTime(Optional<String> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportStatusResponse other = (ReportStatusResponse) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.startTime, other.startTime);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status,
            startTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportStatusResponse.class,
                "status", status,
                "startTime", startTime);
    }
    
    public final static class Builder {
 
        private Optional<? extends ReportStatusResponseStatus> status = Optional.empty();
 
        private Optional<String> startTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder status(ReportStatusResponseStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends ReportStatusResponseStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The timestamp at which the report's run/scan began.
         */
        public Builder startTime(String startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * The timestamp at which the report's run/scan began.
         */
        public Builder startTime(Optional<String> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }
        
        public ReportStatusResponse build() {
            return new ReportStatusResponse(
                status,
                startTime);
        }
    }
}
