/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

public class Announcement {

    /**
     * The date and time at which the announcement becomes active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<OffsetDateTime> startTime;

    /**
     * The date and time at which the announcement expires.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<OffsetDateTime> endTime;

    /**
     * The headline of the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<? extends StructuredText> body;

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emoji")
    private Optional<String> emoji;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    private Optional<? extends Thumbnail> thumbnail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banner")
    private Optional<? extends Thumbnail> banner;

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocumentId")
    private Optional<String> sourceDocumentId;

    /**
     * Whether or not to hide an author attribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideAttribution")
    private Optional<Boolean> hideAttribution;

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private Optional<? extends AnnouncementChannel> channel;

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postType")
    private Optional<? extends AnnouncementPostType> postType;

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPrioritized")
    private Optional<Boolean> isPrioritized;

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewUrl")
    private Optional<String> viewUrl;

    /**
     * The opaque id of the associated draft.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("draftId")
    private Optional<Long> draftId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    /**
     * The opaque id of the announcement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<? extends Person> author;

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTimestamp")
    private Optional<Long> createTimestamp;

    /**
     * Server Unix timestamp of the last update time (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdateTimestamp")
    private Optional<Long> lastUpdateTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends Person> updatedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewerInfo")
    private Optional<? extends AnnouncementViewerInfo> viewerInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocument")
    private Optional<? extends Document> sourceDocument;

    /**
     * Whether or not the announcement is published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPublished")
    private Optional<Boolean> isPublished;

    @JsonCreator
    public Announcement(
            @JsonProperty("startTime") Optional<OffsetDateTime> startTime,
            @JsonProperty("endTime") Optional<OffsetDateTime> endTime,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("body") Optional<? extends StructuredText> body,
            @JsonProperty("emoji") Optional<String> emoji,
            @JsonProperty("thumbnail") Optional<? extends Thumbnail> thumbnail,
            @JsonProperty("banner") Optional<? extends Thumbnail> banner,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("sourceDocumentId") Optional<String> sourceDocumentId,
            @JsonProperty("hideAttribution") Optional<Boolean> hideAttribution,
            @JsonProperty("channel") Optional<? extends AnnouncementChannel> channel,
            @JsonProperty("postType") Optional<? extends AnnouncementPostType> postType,
            @JsonProperty("isPrioritized") Optional<Boolean> isPrioritized,
            @JsonProperty("viewUrl") Optional<String> viewUrl,
            @JsonProperty("draftId") Optional<Long> draftId,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("author") Optional<? extends Person> author,
            @JsonProperty("createTimestamp") Optional<Long> createTimestamp,
            @JsonProperty("lastUpdateTimestamp") Optional<Long> lastUpdateTimestamp,
            @JsonProperty("updatedBy") Optional<? extends Person> updatedBy,
            @JsonProperty("viewerInfo") Optional<? extends AnnouncementViewerInfo> viewerInfo,
            @JsonProperty("sourceDocument") Optional<? extends Document> sourceDocument,
            @JsonProperty("isPublished") Optional<Boolean> isPublished) {
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(emoji, "emoji");
        Utils.checkNotNull(thumbnail, "thumbnail");
        Utils.checkNotNull(banner, "banner");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
        Utils.checkNotNull(hideAttribution, "hideAttribution");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(postType, "postType");
        Utils.checkNotNull(isPrioritized, "isPrioritized");
        Utils.checkNotNull(viewUrl, "viewUrl");
        Utils.checkNotNull(draftId, "draftId");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(viewerInfo, "viewerInfo");
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        Utils.checkNotNull(isPublished, "isPublished");
        this.startTime = startTime;
        this.endTime = endTime;
        this.title = title;
        this.body = body;
        this.emoji = emoji;
        this.thumbnail = thumbnail;
        this.banner = banner;
        this.audienceFilters = audienceFilters;
        this.sourceDocumentId = sourceDocumentId;
        this.hideAttribution = hideAttribution;
        this.channel = channel;
        this.postType = postType;
        this.isPrioritized = isPrioritized;
        this.viewUrl = viewUrl;
        this.draftId = draftId;
        this.permissions = permissions;
        this.id = id;
        this.author = author;
        this.createTimestamp = createTimestamp;
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        this.updatedBy = updatedBy;
        this.viewerInfo = viewerInfo;
        this.sourceDocument = sourceDocument;
        this.isPublished = isPublished;
    }
    
    public Announcement() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The date and time at which the announcement becomes active.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startTime() {
        return startTime;
    }

    /**
     * The date and time at which the announcement expires.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> endTime() {
        return endTime;
    }

    /**
     * The headline of the announcement.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredText> body() {
        return (Optional<StructuredText>) body;
    }

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    @JsonIgnore
    public Optional<String> emoji() {
        return emoji;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Thumbnail> thumbnail() {
        return (Optional<Thumbnail>) thumbnail;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Thumbnail> banner() {
        return (Optional<Thumbnail>) banner;
    }

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    @JsonIgnore
    public Optional<String> sourceDocumentId() {
        return sourceDocumentId;
    }

    /**
     * Whether or not to hide an author attribution.
     */
    @JsonIgnore
    public Optional<Boolean> hideAttribution() {
        return hideAttribution;
    }

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnnouncementChannel> channel() {
        return (Optional<AnnouncementChannel>) channel;
    }

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnnouncementPostType> postType() {
        return (Optional<AnnouncementPostType>) postType;
    }

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    @JsonIgnore
    public Optional<Boolean> isPrioritized() {
        return isPrioritized;
    }

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    @JsonIgnore
    public Optional<String> viewUrl() {
        return viewUrl;
    }

    /**
     * The opaque id of the associated draft.
     */
    @JsonIgnore
    public Optional<Long> draftId() {
        return draftId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    /**
     * The opaque id of the announcement.
     */
    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> author() {
        return (Optional<Person>) author;
    }

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> createTimestamp() {
        return createTimestamp;
    }

    /**
     * Server Unix timestamp of the last update time (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastUpdateTimestamp() {
        return lastUpdateTimestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> updatedBy() {
        return (Optional<Person>) updatedBy;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnnouncementViewerInfo> viewerInfo() {
        return (Optional<AnnouncementViewerInfo>) viewerInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> sourceDocument() {
        return (Optional<Document>) sourceDocument;
    }

    /**
     * Whether or not the announcement is published.
     */
    @JsonIgnore
    public Optional<Boolean> isPublished() {
        return isPublished;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The date and time at which the announcement becomes active.
     */
    public Announcement withStartTime(OffsetDateTime startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * The date and time at which the announcement becomes active.
     */
    public Announcement withStartTime(Optional<OffsetDateTime> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * The date and time at which the announcement expires.
     */
    public Announcement withEndTime(OffsetDateTime endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * The date and time at which the announcement expires.
     */
    public Announcement withEndTime(Optional<OffsetDateTime> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * The headline of the announcement.
     */
    public Announcement withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The headline of the announcement.
     */
    public Announcement withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Announcement withBody(StructuredText body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    public Announcement withBody(Optional<? extends StructuredText> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    public Announcement withEmoji(String emoji) {
        Utils.checkNotNull(emoji, "emoji");
        this.emoji = Optional.ofNullable(emoji);
        return this;
    }

    /**
     * An emoji used to indicate the nature of the announcement.
     */
    public Announcement withEmoji(Optional<String> emoji) {
        Utils.checkNotNull(emoji, "emoji");
        this.emoji = emoji;
        return this;
    }

    public Announcement withThumbnail(Thumbnail thumbnail) {
        Utils.checkNotNull(thumbnail, "thumbnail");
        this.thumbnail = Optional.ofNullable(thumbnail);
        return this;
    }

    public Announcement withThumbnail(Optional<? extends Thumbnail> thumbnail) {
        Utils.checkNotNull(thumbnail, "thumbnail");
        this.thumbnail = thumbnail;
        return this;
    }

    public Announcement withBanner(Thumbnail banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = Optional.ofNullable(banner);
        return this;
    }

    public Announcement withBanner(Optional<? extends Thumbnail> banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = banner;
        return this;
    }

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    public Announcement withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    public Announcement withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    public Announcement withSourceDocumentId(String sourceDocumentId) {
        Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
        this.sourceDocumentId = Optional.ofNullable(sourceDocumentId);
        return this;
    }

    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    public Announcement withSourceDocumentId(Optional<String> sourceDocumentId) {
        Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
        this.sourceDocumentId = sourceDocumentId;
        return this;
    }

    /**
     * Whether or not to hide an author attribution.
     */
    public Announcement withHideAttribution(boolean hideAttribution) {
        Utils.checkNotNull(hideAttribution, "hideAttribution");
        this.hideAttribution = Optional.ofNullable(hideAttribution);
        return this;
    }

    /**
     * Whether or not to hide an author attribution.
     */
    public Announcement withHideAttribution(Optional<Boolean> hideAttribution) {
        Utils.checkNotNull(hideAttribution, "hideAttribution");
        this.hideAttribution = hideAttribution;
        return this;
    }

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    public Announcement withChannel(AnnouncementChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    public Announcement withChannel(Optional<? extends AnnouncementChannel> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    public Announcement withPostType(AnnouncementPostType postType) {
        Utils.checkNotNull(postType, "postType");
        this.postType = Optional.ofNullable(postType);
        return this;
    }

    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    public Announcement withPostType(Optional<? extends AnnouncementPostType> postType) {
        Utils.checkNotNull(postType, "postType");
        this.postType = postType;
        return this;
    }

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    public Announcement withIsPrioritized(boolean isPrioritized) {
        Utils.checkNotNull(isPrioritized, "isPrioritized");
        this.isPrioritized = Optional.ofNullable(isPrioritized);
        return this;
    }

    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    public Announcement withIsPrioritized(Optional<Boolean> isPrioritized) {
        Utils.checkNotNull(isPrioritized, "isPrioritized");
        this.isPrioritized = isPrioritized;
        return this;
    }

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    public Announcement withViewUrl(String viewUrl) {
        Utils.checkNotNull(viewUrl, "viewUrl");
        this.viewUrl = Optional.ofNullable(viewUrl);
        return this;
    }

    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    public Announcement withViewUrl(Optional<String> viewUrl) {
        Utils.checkNotNull(viewUrl, "viewUrl");
        this.viewUrl = viewUrl;
        return this;
    }

    /**
     * The opaque id of the associated draft.
     */
    public Announcement withDraftId(long draftId) {
        Utils.checkNotNull(draftId, "draftId");
        this.draftId = Optional.ofNullable(draftId);
        return this;
    }

    /**
     * The opaque id of the associated draft.
     */
    public Announcement withDraftId(Optional<Long> draftId) {
        Utils.checkNotNull(draftId, "draftId");
        this.draftId = draftId;
        return this;
    }

    public Announcement withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public Announcement withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * The opaque id of the announcement.
     */
    public Announcement withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The opaque id of the announcement.
     */
    public Announcement withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Announcement withAuthor(Person author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    public Announcement withAuthor(Optional<? extends Person> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    public Announcement withCreateTimestamp(long createTimestamp) {
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        this.createTimestamp = Optional.ofNullable(createTimestamp);
        return this;
    }

    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    public Announcement withCreateTimestamp(Optional<Long> createTimestamp) {
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        this.createTimestamp = createTimestamp;
        return this;
    }

    /**
     * Server Unix timestamp of the last update time (in seconds since epoch UTC).
     */
    public Announcement withLastUpdateTimestamp(long lastUpdateTimestamp) {
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        this.lastUpdateTimestamp = Optional.ofNullable(lastUpdateTimestamp);
        return this;
    }

    /**
     * Server Unix timestamp of the last update time (in seconds since epoch UTC).
     */
    public Announcement withLastUpdateTimestamp(Optional<Long> lastUpdateTimestamp) {
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        return this;
    }

    public Announcement withUpdatedBy(Person updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    public Announcement withUpdatedBy(Optional<? extends Person> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    public Announcement withViewerInfo(AnnouncementViewerInfo viewerInfo) {
        Utils.checkNotNull(viewerInfo, "viewerInfo");
        this.viewerInfo = Optional.ofNullable(viewerInfo);
        return this;
    }

    public Announcement withViewerInfo(Optional<? extends AnnouncementViewerInfo> viewerInfo) {
        Utils.checkNotNull(viewerInfo, "viewerInfo");
        this.viewerInfo = viewerInfo;
        return this;
    }

    public Announcement withSourceDocument(Document sourceDocument) {
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        this.sourceDocument = Optional.ofNullable(sourceDocument);
        return this;
    }

    public Announcement withSourceDocument(Optional<? extends Document> sourceDocument) {
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        this.sourceDocument = sourceDocument;
        return this;
    }

    /**
     * Whether or not the announcement is published.
     */
    public Announcement withIsPublished(boolean isPublished) {
        Utils.checkNotNull(isPublished, "isPublished");
        this.isPublished = Optional.ofNullable(isPublished);
        return this;
    }

    /**
     * Whether or not the announcement is published.
     */
    public Announcement withIsPublished(Optional<Boolean> isPublished) {
        Utils.checkNotNull(isPublished, "isPublished");
        this.isPublished = isPublished;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Announcement other = (Announcement) o;
        return 
            Utils.enhancedDeepEquals(this.startTime, other.startTime) &&
            Utils.enhancedDeepEquals(this.endTime, other.endTime) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.body, other.body) &&
            Utils.enhancedDeepEquals(this.emoji, other.emoji) &&
            Utils.enhancedDeepEquals(this.thumbnail, other.thumbnail) &&
            Utils.enhancedDeepEquals(this.banner, other.banner) &&
            Utils.enhancedDeepEquals(this.audienceFilters, other.audienceFilters) &&
            Utils.enhancedDeepEquals(this.sourceDocumentId, other.sourceDocumentId) &&
            Utils.enhancedDeepEquals(this.hideAttribution, other.hideAttribution) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.postType, other.postType) &&
            Utils.enhancedDeepEquals(this.isPrioritized, other.isPrioritized) &&
            Utils.enhancedDeepEquals(this.viewUrl, other.viewUrl) &&
            Utils.enhancedDeepEquals(this.draftId, other.draftId) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.author, other.author) &&
            Utils.enhancedDeepEquals(this.createTimestamp, other.createTimestamp) &&
            Utils.enhancedDeepEquals(this.lastUpdateTimestamp, other.lastUpdateTimestamp) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.viewerInfo, other.viewerInfo) &&
            Utils.enhancedDeepEquals(this.sourceDocument, other.sourceDocument) &&
            Utils.enhancedDeepEquals(this.isPublished, other.isPublished);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            startTime,
            endTime,
            title,
            body,
            emoji,
            thumbnail,
            banner,
            audienceFilters,
            sourceDocumentId,
            hideAttribution,
            channel,
            postType,
            isPrioritized,
            viewUrl,
            draftId,
            permissions,
            id,
            author,
            createTimestamp,
            lastUpdateTimestamp,
            updatedBy,
            viewerInfo,
            sourceDocument,
            isPublished);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Announcement.class,
                "startTime", startTime,
                "endTime", endTime,
                "title", title,
                "body", body,
                "emoji", emoji,
                "thumbnail", thumbnail,
                "banner", banner,
                "audienceFilters", audienceFilters,
                "sourceDocumentId", sourceDocumentId,
                "hideAttribution", hideAttribution,
                "channel", channel,
                "postType", postType,
                "isPrioritized", isPrioritized,
                "viewUrl", viewUrl,
                "draftId", draftId,
                "permissions", permissions,
                "id", id,
                "author", author,
                "createTimestamp", createTimestamp,
                "lastUpdateTimestamp", lastUpdateTimestamp,
                "updatedBy", updatedBy,
                "viewerInfo", viewerInfo,
                "sourceDocument", sourceDocument,
                "isPublished", isPublished);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> startTime = Optional.empty();
 
        private Optional<OffsetDateTime> endTime = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends StructuredText> body = Optional.empty();
 
        private Optional<String> emoji = Optional.empty();
 
        private Optional<? extends Thumbnail> thumbnail = Optional.empty();
 
        private Optional<? extends Thumbnail> banner = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<String> sourceDocumentId = Optional.empty();
 
        private Optional<Boolean> hideAttribution = Optional.empty();
 
        private Optional<? extends AnnouncementChannel> channel = Optional.empty();
 
        private Optional<? extends AnnouncementPostType> postType = Optional.empty();
 
        private Optional<Boolean> isPrioritized = Optional.empty();
 
        private Optional<String> viewUrl = Optional.empty();
 
        private Optional<Long> draftId = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private Optional<Long> id = Optional.empty();
 
        private Optional<? extends Person> author = Optional.empty();
 
        private Optional<Long> createTimestamp = Optional.empty();
 
        private Optional<Long> lastUpdateTimestamp = Optional.empty();
 
        private Optional<? extends Person> updatedBy = Optional.empty();
 
        private Optional<? extends AnnouncementViewerInfo> viewerInfo = Optional.empty();
 
        private Optional<? extends Document> sourceDocument = Optional.empty();
 
        private Optional<Boolean> isPublished = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The date and time at which the announcement becomes active.
         */
        public Builder startTime(OffsetDateTime startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * The date and time at which the announcement becomes active.
         */
        public Builder startTime(Optional<OffsetDateTime> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * The date and time at which the announcement expires.
         */
        public Builder endTime(OffsetDateTime endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * The date and time at which the announcement expires.
         */
        public Builder endTime(Optional<OffsetDateTime> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        /**
         * The headline of the announcement.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The headline of the announcement.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder body(StructuredText body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        public Builder body(Optional<? extends StructuredText> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * An emoji used to indicate the nature of the announcement.
         */
        public Builder emoji(String emoji) {
            Utils.checkNotNull(emoji, "emoji");
            this.emoji = Optional.ofNullable(emoji);
            return this;
        }

        /**
         * An emoji used to indicate the nature of the announcement.
         */
        public Builder emoji(Optional<String> emoji) {
            Utils.checkNotNull(emoji, "emoji");
            this.emoji = emoji;
            return this;
        }

        public Builder thumbnail(Thumbnail thumbnail) {
            Utils.checkNotNull(thumbnail, "thumbnail");
            this.thumbnail = Optional.ofNullable(thumbnail);
            return this;
        }

        public Builder thumbnail(Optional<? extends Thumbnail> thumbnail) {
            Utils.checkNotNull(thumbnail, "thumbnail");
            this.thumbnail = thumbnail;
            return this;
        }

        public Builder banner(Thumbnail banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = Optional.ofNullable(banner);
            return this;
        }

        public Builder banner(Optional<? extends Thumbnail> banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = banner;
            return this;
        }

        /**
         * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
         */
        public Builder sourceDocumentId(String sourceDocumentId) {
            Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
            this.sourceDocumentId = Optional.ofNullable(sourceDocumentId);
            return this;
        }

        /**
         * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
         */
        public Builder sourceDocumentId(Optional<String> sourceDocumentId) {
            Utils.checkNotNull(sourceDocumentId, "sourceDocumentId");
            this.sourceDocumentId = sourceDocumentId;
            return this;
        }

        /**
         * Whether or not to hide an author attribution.
         */
        public Builder hideAttribution(boolean hideAttribution) {
            Utils.checkNotNull(hideAttribution, "hideAttribution");
            this.hideAttribution = Optional.ofNullable(hideAttribution);
            return this;
        }

        /**
         * Whether or not to hide an author attribution.
         */
        public Builder hideAttribution(Optional<Boolean> hideAttribution) {
            Utils.checkNotNull(hideAttribution, "hideAttribution");
            this.hideAttribution = hideAttribution;
            return this;
        }

        /**
         * This determines whether this is a Social Feed post or a regular announcement.
         */
        public Builder channel(AnnouncementChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * This determines whether this is a Social Feed post or a regular announcement.
         */
        public Builder channel(Optional<? extends AnnouncementChannel> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
         */
        public Builder postType(AnnouncementPostType postType) {
            Utils.checkNotNull(postType, "postType");
            this.postType = Optional.ofNullable(postType);
            return this;
        }

        /**
         * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
         */
        public Builder postType(Optional<? extends AnnouncementPostType> postType) {
            Utils.checkNotNull(postType, "postType");
            this.postType = postType;
            return this;
        }

        /**
         * Used by the Social Feed to pin posts to the front of the feed.
         */
        public Builder isPrioritized(boolean isPrioritized) {
            Utils.checkNotNull(isPrioritized, "isPrioritized");
            this.isPrioritized = Optional.ofNullable(isPrioritized);
            return this;
        }

        /**
         * Used by the Social Feed to pin posts to the front of the feed.
         */
        public Builder isPrioritized(Optional<Boolean> isPrioritized) {
            Utils.checkNotNull(isPrioritized, "isPrioritized");
            this.isPrioritized = isPrioritized;
            return this;
        }

        /**
         * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
         */
        public Builder viewUrl(String viewUrl) {
            Utils.checkNotNull(viewUrl, "viewUrl");
            this.viewUrl = Optional.ofNullable(viewUrl);
            return this;
        }

        /**
         * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
         */
        public Builder viewUrl(Optional<String> viewUrl) {
            Utils.checkNotNull(viewUrl, "viewUrl");
            this.viewUrl = viewUrl;
            return this;
        }

        /**
         * The opaque id of the associated draft.
         */
        public Builder draftId(long draftId) {
            Utils.checkNotNull(draftId, "draftId");
            this.draftId = Optional.ofNullable(draftId);
            return this;
        }

        /**
         * The opaque id of the associated draft.
         */
        public Builder draftId(Optional<Long> draftId) {
            Utils.checkNotNull(draftId, "draftId");
            this.draftId = draftId;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * The opaque id of the announcement.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The opaque id of the announcement.
         */
        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder author(Person author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        public Builder author(Optional<? extends Person> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        /**
         * Server Unix timestamp of the creation time (in seconds since epoch UTC).
         */
        public Builder createTimestamp(long createTimestamp) {
            Utils.checkNotNull(createTimestamp, "createTimestamp");
            this.createTimestamp = Optional.ofNullable(createTimestamp);
            return this;
        }

        /**
         * Server Unix timestamp of the creation time (in seconds since epoch UTC).
         */
        public Builder createTimestamp(Optional<Long> createTimestamp) {
            Utils.checkNotNull(createTimestamp, "createTimestamp");
            this.createTimestamp = createTimestamp;
            return this;
        }

        /**
         * Server Unix timestamp of the last update time (in seconds since epoch UTC).
         */
        public Builder lastUpdateTimestamp(long lastUpdateTimestamp) {
            Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
            this.lastUpdateTimestamp = Optional.ofNullable(lastUpdateTimestamp);
            return this;
        }

        /**
         * Server Unix timestamp of the last update time (in seconds since epoch UTC).
         */
        public Builder lastUpdateTimestamp(Optional<Long> lastUpdateTimestamp) {
            Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
            this.lastUpdateTimestamp = lastUpdateTimestamp;
            return this;
        }

        public Builder updatedBy(Person updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        public Builder updatedBy(Optional<? extends Person> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        public Builder viewerInfo(AnnouncementViewerInfo viewerInfo) {
            Utils.checkNotNull(viewerInfo, "viewerInfo");
            this.viewerInfo = Optional.ofNullable(viewerInfo);
            return this;
        }

        public Builder viewerInfo(Optional<? extends AnnouncementViewerInfo> viewerInfo) {
            Utils.checkNotNull(viewerInfo, "viewerInfo");
            this.viewerInfo = viewerInfo;
            return this;
        }

        public Builder sourceDocument(Document sourceDocument) {
            Utils.checkNotNull(sourceDocument, "sourceDocument");
            this.sourceDocument = Optional.ofNullable(sourceDocument);
            return this;
        }

        public Builder sourceDocument(Optional<? extends Document> sourceDocument) {
            Utils.checkNotNull(sourceDocument, "sourceDocument");
            this.sourceDocument = sourceDocument;
            return this;
        }

        /**
         * Whether or not the announcement is published.
         */
        public Builder isPublished(boolean isPublished) {
            Utils.checkNotNull(isPublished, "isPublished");
            this.isPublished = Optional.ofNullable(isPublished);
            return this;
        }

        /**
         * Whether or not the announcement is published.
         */
        public Builder isPublished(Optional<Boolean> isPublished) {
            Utils.checkNotNull(isPublished, "isPublished");
            this.isPublished = isPublished;
            return this;
        }
        
        public Announcement build() {
            return new Announcement(
                startTime,
                endTime,
                title,
                body,
                emoji,
                thumbnail,
                banner,
                audienceFilters,
                sourceDocumentId,
                hideAttribution,
                channel,
                postType,
                isPrioritized,
                viewUrl,
                draftId,
                permissions,
                id,
                author,
                createTimestamp,
                lastUpdateTimestamp,
                updatedBy,
                viewerInfo,
                sourceDocument,
                isPublished);
        }
    }
}
