/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * AutocompleteResultGroup
 * 
 * <p>A subsection of the results list from which distinct sections should be created.
 */
public class AutocompleteResultGroup {

    /**
     * The inclusive start index of the range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startIndex")
    private Optional<Long> startIndex;

    /**
     * The exclusive end index of the range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endIndex")
    private Optional<Long> endIndex;

    /**
     * The title of the result group to be displayed. Empty means no title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonCreator
    public AutocompleteResultGroup(
            @JsonProperty("startIndex") Optional<Long> startIndex,
            @JsonProperty("endIndex") Optional<Long> endIndex,
            @JsonProperty("title") Optional<String> title) {
        Utils.checkNotNull(startIndex, "startIndex");
        Utils.checkNotNull(endIndex, "endIndex");
        Utils.checkNotNull(title, "title");
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.title = title;
    }
    
    public AutocompleteResultGroup() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The inclusive start index of the range.
     */
    @JsonIgnore
    public Optional<Long> startIndex() {
        return startIndex;
    }

    /**
     * The exclusive end index of the range.
     */
    @JsonIgnore
    public Optional<Long> endIndex() {
        return endIndex;
    }

    /**
     * The title of the result group to be displayed. Empty means no title.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The inclusive start index of the range.
     */
    public AutocompleteResultGroup withStartIndex(long startIndex) {
        Utils.checkNotNull(startIndex, "startIndex");
        this.startIndex = Optional.ofNullable(startIndex);
        return this;
    }

    /**
     * The inclusive start index of the range.
     */
    public AutocompleteResultGroup withStartIndex(Optional<Long> startIndex) {
        Utils.checkNotNull(startIndex, "startIndex");
        this.startIndex = startIndex;
        return this;
    }

    /**
     * The exclusive end index of the range.
     */
    public AutocompleteResultGroup withEndIndex(long endIndex) {
        Utils.checkNotNull(endIndex, "endIndex");
        this.endIndex = Optional.ofNullable(endIndex);
        return this;
    }

    /**
     * The exclusive end index of the range.
     */
    public AutocompleteResultGroup withEndIndex(Optional<Long> endIndex) {
        Utils.checkNotNull(endIndex, "endIndex");
        this.endIndex = endIndex;
        return this;
    }

    /**
     * The title of the result group to be displayed. Empty means no title.
     */
    public AutocompleteResultGroup withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The title of the result group to be displayed. Empty means no title.
     */
    public AutocompleteResultGroup withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AutocompleteResultGroup other = (AutocompleteResultGroup) o;
        return 
            Objects.deepEquals(this.startIndex, other.startIndex) &&
            Objects.deepEquals(this.endIndex, other.endIndex) &&
            Objects.deepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startIndex,
            endIndex,
            title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AutocompleteResultGroup.class,
                "startIndex", startIndex,
                "endIndex", endIndex,
                "title", title);
    }
    
    public final static class Builder {
 
        private Optional<Long> startIndex = Optional.empty();
 
        private Optional<Long> endIndex = Optional.empty();
 
        private Optional<String> title = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The inclusive start index of the range.
         */
        public Builder startIndex(long startIndex) {
            Utils.checkNotNull(startIndex, "startIndex");
            this.startIndex = Optional.ofNullable(startIndex);
            return this;
        }

        /**
         * The inclusive start index of the range.
         */
        public Builder startIndex(Optional<Long> startIndex) {
            Utils.checkNotNull(startIndex, "startIndex");
            this.startIndex = startIndex;
            return this;
        }

        /**
         * The exclusive end index of the range.
         */
        public Builder endIndex(long endIndex) {
            Utils.checkNotNull(endIndex, "endIndex");
            this.endIndex = Optional.ofNullable(endIndex);
            return this;
        }

        /**
         * The exclusive end index of the range.
         */
        public Builder endIndex(Optional<Long> endIndex) {
            Utils.checkNotNull(endIndex, "endIndex");
            this.endIndex = endIndex;
            return this;
        }

        /**
         * The title of the result group to be displayed. Empty means no title.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The title of the result group to be displayed. Empty means no title.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }
        
        public AutocompleteResultGroup build() {
            return new AutocompleteResultGroup(
                startIndex,
                endIndex,
                title);
        }
    }
}
