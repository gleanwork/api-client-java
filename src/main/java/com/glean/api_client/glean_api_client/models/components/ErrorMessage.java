/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class ErrorMessage {

    /**
     * The datasource this message relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<String> source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    private Optional<String> errorMessage;

    @JsonCreator
    public ErrorMessage(
            @JsonProperty("source") Optional<String> source,
            @JsonProperty("errorMessage") Optional<String> errorMessage) {
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.source = source;
        this.errorMessage = errorMessage;
    }
    
    public ErrorMessage() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The datasource this message relates to.
     */
    @JsonIgnore
    public Optional<String> source() {
        return source;
    }

    @JsonIgnore
    public Optional<String> errorMessage() {
        return errorMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The datasource this message relates to.
     */
    public ErrorMessage withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * The datasource this message relates to.
     */
    public ErrorMessage withSource(Optional<String> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public ErrorMessage withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = Optional.ofNullable(errorMessage);
        return this;
    }

    public ErrorMessage withErrorMessage(Optional<String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorMessage other = (ErrorMessage) o;
        return 
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.errorMessage, other.errorMessage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            source,
            errorMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorMessage.class,
                "source", source,
                "errorMessage", errorMessage);
    }
    
    public final static class Builder {
 
        private Optional<String> source = Optional.empty();
 
        private Optional<String> errorMessage = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The datasource this message relates to.
         */
        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * The datasource this message relates to.
         */
        public Builder source(Optional<String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = Optional.ofNullable(errorMessage);
            return this;
        }

        public Builder errorMessage(Optional<String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }
        
        public ErrorMessage build() {
            return new ErrorMessage(
                source,
                errorMessage);
        }
    }
}
