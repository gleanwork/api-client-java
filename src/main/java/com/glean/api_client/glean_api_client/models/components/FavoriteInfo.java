/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class FavoriteInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ugcType")
    private Optional<? extends UgcType> ugcType;

    /**
     * Opaque id of the UGC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Number of users this object has been favorited by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * If the requesting user has favorited this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("favoritedByUser")
    private Optional<Boolean> favoritedByUser;

    @JsonCreator
    public FavoriteInfo(
            @JsonProperty("ugcType") Optional<? extends UgcType> ugcType,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("favoritedByUser") Optional<Boolean> favoritedByUser) {
        Utils.checkNotNull(ugcType, "ugcType");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(favoritedByUser, "favoritedByUser");
        this.ugcType = ugcType;
        this.id = id;
        this.count = count;
        this.favoritedByUser = favoritedByUser;
    }
    
    public FavoriteInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UgcType> ugcType() {
        return (Optional<UgcType>) ugcType;
    }

    /**
     * Opaque id of the UGC.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Number of users this object has been favorited by.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * If the requesting user has favorited this object.
     */
    @JsonIgnore
    public Optional<Boolean> favoritedByUser() {
        return favoritedByUser;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public FavoriteInfo withUgcType(UgcType ugcType) {
        Utils.checkNotNull(ugcType, "ugcType");
        this.ugcType = Optional.ofNullable(ugcType);
        return this;
    }

    public FavoriteInfo withUgcType(Optional<? extends UgcType> ugcType) {
        Utils.checkNotNull(ugcType, "ugcType");
        this.ugcType = ugcType;
        return this;
    }

    /**
     * Opaque id of the UGC.
     */
    public FavoriteInfo withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Opaque id of the UGC.
     */
    public FavoriteInfo withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Number of users this object has been favorited by.
     */
    public FavoriteInfo withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * Number of users this object has been favorited by.
     */
    public FavoriteInfo withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * If the requesting user has favorited this object.
     */
    public FavoriteInfo withFavoritedByUser(boolean favoritedByUser) {
        Utils.checkNotNull(favoritedByUser, "favoritedByUser");
        this.favoritedByUser = Optional.ofNullable(favoritedByUser);
        return this;
    }

    /**
     * If the requesting user has favorited this object.
     */
    public FavoriteInfo withFavoritedByUser(Optional<Boolean> favoritedByUser) {
        Utils.checkNotNull(favoritedByUser, "favoritedByUser");
        this.favoritedByUser = favoritedByUser;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FavoriteInfo other = (FavoriteInfo) o;
        return 
            Objects.deepEquals(this.ugcType, other.ugcType) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.favoritedByUser, other.favoritedByUser);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ugcType,
            id,
            count,
            favoritedByUser);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FavoriteInfo.class,
                "ugcType", ugcType,
                "id", id,
                "count", count,
                "favoritedByUser", favoritedByUser);
    }
    
    public final static class Builder {
 
        private Optional<? extends UgcType> ugcType = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<Boolean> favoritedByUser = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ugcType(UgcType ugcType) {
            Utils.checkNotNull(ugcType, "ugcType");
            this.ugcType = Optional.ofNullable(ugcType);
            return this;
        }

        public Builder ugcType(Optional<? extends UgcType> ugcType) {
            Utils.checkNotNull(ugcType, "ugcType");
            this.ugcType = ugcType;
            return this;
        }

        /**
         * Opaque id of the UGC.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Opaque id of the UGC.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Number of users this object has been favorited by.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Number of users this object has been favorited by.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        /**
         * If the requesting user has favorited this object.
         */
        public Builder favoritedByUser(boolean favoritedByUser) {
            Utils.checkNotNull(favoritedByUser, "favoritedByUser");
            this.favoritedByUser = Optional.ofNullable(favoritedByUser);
            return this;
        }

        /**
         * If the requesting user has favorited this object.
         */
        public Builder favoritedByUser(Optional<Boolean> favoritedByUser) {
            Utils.checkNotNull(favoritedByUser, "favoritedByUser");
            this.favoritedByUser = favoritedByUser;
            return this;
        }
        
        public FavoriteInfo build() {
            return new FavoriteInfo(
                ugcType,
                id,
                count,
                favoritedByUser);
        }
    }
}
