/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class GetDocumentsRequest {

    /**
     * The specification for the documents to be retrieved.
     */
    @JsonProperty("documentSpecs")
    private List<DocumentSpecUnion> documentSpecs;

    /**
     * List of Document fields to return (that aren't returned by default)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeFields")
    private Optional<? extends List<GetDocumentsRequestIncludeField>> includeFields;

    @JsonCreator
    public GetDocumentsRequest(
            @JsonProperty("documentSpecs") List<DocumentSpecUnion> documentSpecs,
            @JsonProperty("includeFields") Optional<? extends List<GetDocumentsRequestIncludeField>> includeFields) {
        Utils.checkNotNull(documentSpecs, "documentSpecs");
        Utils.checkNotNull(includeFields, "includeFields");
        this.documentSpecs = documentSpecs;
        this.includeFields = includeFields;
    }
    
    public GetDocumentsRequest(
            List<DocumentSpecUnion> documentSpecs) {
        this(documentSpecs, Optional.empty());
    }

    /**
     * The specification for the documents to be retrieved.
     */
    @JsonIgnore
    public List<DocumentSpecUnion> documentSpecs() {
        return documentSpecs;
    }

    /**
     * List of Document fields to return (that aren't returned by default)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetDocumentsRequestIncludeField>> includeFields() {
        return (Optional<List<GetDocumentsRequestIncludeField>>) includeFields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The specification for the documents to be retrieved.
     */
    public GetDocumentsRequest withDocumentSpecs(List<DocumentSpecUnion> documentSpecs) {
        Utils.checkNotNull(documentSpecs, "documentSpecs");
        this.documentSpecs = documentSpecs;
        return this;
    }

    /**
     * List of Document fields to return (that aren't returned by default)
     */
    public GetDocumentsRequest withIncludeFields(List<GetDocumentsRequestIncludeField> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = Optional.ofNullable(includeFields);
        return this;
    }

    /**
     * List of Document fields to return (that aren't returned by default)
     */
    public GetDocumentsRequest withIncludeFields(Optional<? extends List<GetDocumentsRequestIncludeField>> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = includeFields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentsRequest other = (GetDocumentsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.documentSpecs, other.documentSpecs) &&
            Utils.enhancedDeepEquals(this.includeFields, other.includeFields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            documentSpecs,
            includeFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentsRequest.class,
                "documentSpecs", documentSpecs,
                "includeFields", includeFields);
    }
    
    public final static class Builder {
 
        private List<DocumentSpecUnion> documentSpecs;
 
        private Optional<? extends List<GetDocumentsRequestIncludeField>> includeFields = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The specification for the documents to be retrieved.
         */
        public Builder documentSpecs(List<DocumentSpecUnion> documentSpecs) {
            Utils.checkNotNull(documentSpecs, "documentSpecs");
            this.documentSpecs = documentSpecs;
            return this;
        }

        /**
         * List of Document fields to return (that aren't returned by default)
         */
        public Builder includeFields(List<GetDocumentsRequestIncludeField> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * List of Document fields to return (that aren't returned by default)
         */
        public Builder includeFields(Optional<? extends List<GetDocumentsRequestIncludeField>> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = includeFields;
            return this;
        }
        
        public GetDocumentsRequest build() {
            return new GetDocumentsRequest(
                documentSpecs,
                includeFields);
        }
    }
}
