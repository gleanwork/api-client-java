/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PromptTemplate {

    /**
     * The user-given identifier for this prompt template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The actual template string.
     */
    @JsonProperty("template")
    private String template;

    /**
     * The Application Id the prompt template should be created under. Empty for default assistant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationId")
    private Optional<String> applicationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inclusions")
    private Optional<? extends ChatRestrictionFilters> inclusions;

    /**
     * A list of added user roles for the Workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedRoles")
    private Optional<? extends List<UserRoleSpecification>> addedRoles;

    /**
     * A list of removed user roles for the Workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedRoles")
    private Optional<? extends List<UserRoleSpecification>> removedRoles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    /**
     * Opaque id for this prompt template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<? extends Person> author;

    /**
     * Server Unix timestamp of the creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTimestamp")
    private Optional<Long> createTimestamp;

    /**
     * Server Unix timestamp of the last update time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdateTimestamp")
    private Optional<Long> lastUpdateTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdatedBy")
    private Optional<? extends Person> lastUpdatedBy;

    /**
     * A list of roles for this prompt template explicitly granted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonCreator
    public PromptTemplate(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("template") String template,
            @JsonProperty("applicationId") Optional<String> applicationId,
            @JsonProperty("inclusions") Optional<? extends ChatRestrictionFilters> inclusions,
            @JsonProperty("addedRoles") Optional<? extends List<UserRoleSpecification>> addedRoles,
            @JsonProperty("removedRoles") Optional<? extends List<UserRoleSpecification>> removedRoles,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("author") Optional<? extends Person> author,
            @JsonProperty("createTimestamp") Optional<Long> createTimestamp,
            @JsonProperty("lastUpdateTimestamp") Optional<Long> lastUpdateTimestamp,
            @JsonProperty("lastUpdatedBy") Optional<? extends Person> lastUpdatedBy,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(inclusions, "inclusions");
        Utils.checkNotNull(addedRoles, "addedRoles");
        Utils.checkNotNull(removedRoles, "removedRoles");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
        Utils.checkNotNull(roles, "roles");
        this.name = name;
        this.template = template;
        this.applicationId = applicationId;
        this.inclusions = inclusions;
        this.addedRoles = addedRoles;
        this.removedRoles = removedRoles;
        this.permissions = permissions;
        this.id = id;
        this.author = author;
        this.createTimestamp = createTimestamp;
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        this.lastUpdatedBy = lastUpdatedBy;
        this.roles = roles;
    }
    
    public PromptTemplate(
            String template) {
        this(Optional.empty(), template, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The user-given identifier for this prompt template.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The actual template string.
     */
    @JsonIgnore
    public String template() {
        return template;
    }

    /**
     * The Application Id the prompt template should be created under. Empty for default assistant.
     */
    @JsonIgnore
    public Optional<String> applicationId() {
        return applicationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatRestrictionFilters> inclusions() {
        return (Optional<ChatRestrictionFilters>) inclusions;
    }

    /**
     * A list of added user roles for the Workflow.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> addedRoles() {
        return (Optional<List<UserRoleSpecification>>) addedRoles;
    }

    /**
     * A list of removed user roles for the Workflow.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> removedRoles() {
        return (Optional<List<UserRoleSpecification>>) removedRoles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    /**
     * Opaque id for this prompt template
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> author() {
        return (Optional<Person>) author;
    }

    /**
     * Server Unix timestamp of the creation time.
     */
    @JsonIgnore
    public Optional<Long> createTimestamp() {
        return createTimestamp;
    }

    /**
     * Server Unix timestamp of the last update time.
     */
    @JsonIgnore
    public Optional<Long> lastUpdateTimestamp() {
        return lastUpdateTimestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> lastUpdatedBy() {
        return (Optional<Person>) lastUpdatedBy;
    }

    /**
     * A list of roles for this prompt template explicitly granted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The user-given identifier for this prompt template.
     */
    public PromptTemplate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The user-given identifier for this prompt template.
     */
    public PromptTemplate withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The actual template string.
     */
    public PromptTemplate withTemplate(String template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * The Application Id the prompt template should be created under. Empty for default assistant.
     */
    public PromptTemplate withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }

    /**
     * The Application Id the prompt template should be created under. Empty for default assistant.
     */
    public PromptTemplate withApplicationId(Optional<String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    public PromptTemplate withInclusions(ChatRestrictionFilters inclusions) {
        Utils.checkNotNull(inclusions, "inclusions");
        this.inclusions = Optional.ofNullable(inclusions);
        return this;
    }

    public PromptTemplate withInclusions(Optional<? extends ChatRestrictionFilters> inclusions) {
        Utils.checkNotNull(inclusions, "inclusions");
        this.inclusions = inclusions;
        return this;
    }

    /**
     * A list of added user roles for the Workflow.
     */
    public PromptTemplate withAddedRoles(List<UserRoleSpecification> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = Optional.ofNullable(addedRoles);
        return this;
    }

    /**
     * A list of added user roles for the Workflow.
     */
    public PromptTemplate withAddedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = addedRoles;
        return this;
    }

    /**
     * A list of removed user roles for the Workflow.
     */
    public PromptTemplate withRemovedRoles(List<UserRoleSpecification> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = Optional.ofNullable(removedRoles);
        return this;
    }

    /**
     * A list of removed user roles for the Workflow.
     */
    public PromptTemplate withRemovedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = removedRoles;
        return this;
    }

    public PromptTemplate withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public PromptTemplate withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * Opaque id for this prompt template
     */
    public PromptTemplate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Opaque id for this prompt template
     */
    public PromptTemplate withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public PromptTemplate withAuthor(Person author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    public PromptTemplate withAuthor(Optional<? extends Person> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    /**
     * Server Unix timestamp of the creation time.
     */
    public PromptTemplate withCreateTimestamp(long createTimestamp) {
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        this.createTimestamp = Optional.ofNullable(createTimestamp);
        return this;
    }

    /**
     * Server Unix timestamp of the creation time.
     */
    public PromptTemplate withCreateTimestamp(Optional<Long> createTimestamp) {
        Utils.checkNotNull(createTimestamp, "createTimestamp");
        this.createTimestamp = createTimestamp;
        return this;
    }

    /**
     * Server Unix timestamp of the last update time.
     */
    public PromptTemplate withLastUpdateTimestamp(long lastUpdateTimestamp) {
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        this.lastUpdateTimestamp = Optional.ofNullable(lastUpdateTimestamp);
        return this;
    }

    /**
     * Server Unix timestamp of the last update time.
     */
    public PromptTemplate withLastUpdateTimestamp(Optional<Long> lastUpdateTimestamp) {
        Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        return this;
    }

    public PromptTemplate withLastUpdatedBy(Person lastUpdatedBy) {
        Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
        this.lastUpdatedBy = Optional.ofNullable(lastUpdatedBy);
        return this;
    }

    public PromptTemplate withLastUpdatedBy(Optional<? extends Person> lastUpdatedBy) {
        Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    /**
     * A list of roles for this prompt template explicitly granted.
     */
    public PromptTemplate withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of roles for this prompt template explicitly granted.
     */
    public PromptTemplate withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PromptTemplate other = (PromptTemplate) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.template, other.template) &&
            Objects.deepEquals(this.applicationId, other.applicationId) &&
            Objects.deepEquals(this.inclusions, other.inclusions) &&
            Objects.deepEquals(this.addedRoles, other.addedRoles) &&
            Objects.deepEquals(this.removedRoles, other.removedRoles) &&
            Objects.deepEquals(this.permissions, other.permissions) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.author, other.author) &&
            Objects.deepEquals(this.createTimestamp, other.createTimestamp) &&
            Objects.deepEquals(this.lastUpdateTimestamp, other.lastUpdateTimestamp) &&
            Objects.deepEquals(this.lastUpdatedBy, other.lastUpdatedBy) &&
            Objects.deepEquals(this.roles, other.roles);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            template,
            applicationId,
            inclusions,
            addedRoles,
            removedRoles,
            permissions,
            id,
            author,
            createTimestamp,
            lastUpdateTimestamp,
            lastUpdatedBy,
            roles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PromptTemplate.class,
                "name", name,
                "template", template,
                "applicationId", applicationId,
                "inclusions", inclusions,
                "addedRoles", addedRoles,
                "removedRoles", removedRoles,
                "permissions", permissions,
                "id", id,
                "author", author,
                "createTimestamp", createTimestamp,
                "lastUpdateTimestamp", lastUpdateTimestamp,
                "lastUpdatedBy", lastUpdatedBy,
                "roles", roles);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private String template;
 
        private Optional<String> applicationId = Optional.empty();
 
        private Optional<? extends ChatRestrictionFilters> inclusions = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> addedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> removedRoles = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends Person> author = Optional.empty();
 
        private Optional<Long> createTimestamp = Optional.empty();
 
        private Optional<Long> lastUpdateTimestamp = Optional.empty();
 
        private Optional<? extends Person> lastUpdatedBy = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The user-given identifier for this prompt template.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The user-given identifier for this prompt template.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The actual template string.
         */
        public Builder template(String template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * The Application Id the prompt template should be created under. Empty for default assistant.
         */
        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        /**
         * The Application Id the prompt template should be created under. Empty for default assistant.
         */
        public Builder applicationId(Optional<String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        public Builder inclusions(ChatRestrictionFilters inclusions) {
            Utils.checkNotNull(inclusions, "inclusions");
            this.inclusions = Optional.ofNullable(inclusions);
            return this;
        }

        public Builder inclusions(Optional<? extends ChatRestrictionFilters> inclusions) {
            Utils.checkNotNull(inclusions, "inclusions");
            this.inclusions = inclusions;
            return this;
        }

        /**
         * A list of added user roles for the Workflow.
         */
        public Builder addedRoles(List<UserRoleSpecification> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = Optional.ofNullable(addedRoles);
            return this;
        }

        /**
         * A list of added user roles for the Workflow.
         */
        public Builder addedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = addedRoles;
            return this;
        }

        /**
         * A list of removed user roles for the Workflow.
         */
        public Builder removedRoles(List<UserRoleSpecification> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = Optional.ofNullable(removedRoles);
            return this;
        }

        /**
         * A list of removed user roles for the Workflow.
         */
        public Builder removedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = removedRoles;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * Opaque id for this prompt template
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Opaque id for this prompt template
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder author(Person author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        public Builder author(Optional<? extends Person> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        /**
         * Server Unix timestamp of the creation time.
         */
        public Builder createTimestamp(long createTimestamp) {
            Utils.checkNotNull(createTimestamp, "createTimestamp");
            this.createTimestamp = Optional.ofNullable(createTimestamp);
            return this;
        }

        /**
         * Server Unix timestamp of the creation time.
         */
        public Builder createTimestamp(Optional<Long> createTimestamp) {
            Utils.checkNotNull(createTimestamp, "createTimestamp");
            this.createTimestamp = createTimestamp;
            return this;
        }

        /**
         * Server Unix timestamp of the last update time.
         */
        public Builder lastUpdateTimestamp(long lastUpdateTimestamp) {
            Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
            this.lastUpdateTimestamp = Optional.ofNullable(lastUpdateTimestamp);
            return this;
        }

        /**
         * Server Unix timestamp of the last update time.
         */
        public Builder lastUpdateTimestamp(Optional<Long> lastUpdateTimestamp) {
            Utils.checkNotNull(lastUpdateTimestamp, "lastUpdateTimestamp");
            this.lastUpdateTimestamp = lastUpdateTimestamp;
            return this;
        }

        public Builder lastUpdatedBy(Person lastUpdatedBy) {
            Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
            this.lastUpdatedBy = Optional.ofNullable(lastUpdatedBy);
            return this;
        }

        public Builder lastUpdatedBy(Optional<? extends Person> lastUpdatedBy) {
            Utils.checkNotNull(lastUpdatedBy, "lastUpdatedBy");
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * A list of roles for this prompt template explicitly granted.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of roles for this prompt template explicitly granted.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }
        
        public PromptTemplate build() {
            return new PromptTemplate(
                name,
                template,
                applicationId,
                inclusions,
                addedRoles,
                removedRoles,
                permissions,
                id,
                author,
                createTimestamp,
                lastUpdateTimestamp,
                lastUpdatedBy,
                roles);
        }
    }
}
