/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

public class SearchRequest {

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<OffsetDateTime> timestamp;

    /**
     * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    private Optional<? extends SessionInfo> sessionInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDocument")
    private Optional<? extends Document> sourceDocument;

    /**
     * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageSize")
    private Optional<Long> pageSize;

    /**
     * Hint to the server about how many characters long a snippet may be. Server may return less or more.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSnippetSize")
    private Optional<Long> maxSnippetSize;

    /**
     * The search terms.
     */
    @JsonProperty("query")
    private String query;

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    /**
     * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultTabIds")
    private Optional<? extends List<String>> resultTabIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputDetails")
    private Optional<? extends SearchRequestInputDetails> inputDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestOptions")
    private Optional<? extends SearchRequestOptions> requestOptions;

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutMillis")
    private Optional<Long> timeoutMillis;

    /**
     * People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people")
    private Optional<? extends List<Person>> people;

    /**
     * Whether or not to disable spellcheck.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableSpellcheck")
    private Optional<Boolean> disableSpellcheck;

    @JsonCreator
    public SearchRequest(
            @JsonProperty("timestamp") Optional<OffsetDateTime> timestamp,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("sessionInfo") Optional<? extends SessionInfo> sessionInfo,
            @JsonProperty("sourceDocument") Optional<? extends Document> sourceDocument,
            @JsonProperty("pageSize") Optional<Long> pageSize,
            @JsonProperty("maxSnippetSize") Optional<Long> maxSnippetSize,
            @JsonProperty("query") String query,
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("resultTabIds") Optional<? extends List<String>> resultTabIds,
            @JsonProperty("inputDetails") Optional<? extends SearchRequestInputDetails> inputDetails,
            @JsonProperty("requestOptions") Optional<? extends SearchRequestOptions> requestOptions,
            @JsonProperty("timeoutMillis") Optional<Long> timeoutMillis,
            @JsonProperty("people") Optional<? extends List<Person>> people,
            @JsonProperty("disableSpellcheck") Optional<Boolean> disableSpellcheck) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(maxSnippetSize, "maxSnippetSize");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(resultTabIds, "resultTabIds");
        Utils.checkNotNull(inputDetails, "inputDetails");
        Utils.checkNotNull(requestOptions, "requestOptions");
        Utils.checkNotNull(timeoutMillis, "timeoutMillis");
        Utils.checkNotNull(people, "people");
        Utils.checkNotNull(disableSpellcheck, "disableSpellcheck");
        this.timestamp = timestamp;
        this.trackingToken = trackingToken;
        this.sessionInfo = sessionInfo;
        this.sourceDocument = sourceDocument;
        this.pageSize = pageSize;
        this.maxSnippetSize = maxSnippetSize;
        this.query = query;
        this.cursor = cursor;
        this.resultTabIds = resultTabIds;
        this.inputDetails = inputDetails;
        this.requestOptions = requestOptions;
        this.timeoutMillis = timeoutMillis;
        this.people = people;
        this.disableSpellcheck = disableSpellcheck;
    }
    
    public SearchRequest(
            String query) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), query, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> timestamp() {
        return timestamp;
    }

    /**
     * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SessionInfo> sessionInfo() {
        return (Optional<SessionInfo>) sessionInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> sourceDocument() {
        return (Optional<Document>) sourceDocument;
    }

    /**
     * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Hint to the server about how many characters long a snippet may be. Server may return less or more.
     */
    @JsonIgnore
    public Optional<Long> maxSnippetSize() {
        return maxSnippetSize;
    }

    /**
     * The search terms.
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> resultTabIds() {
        return (Optional<List<String>>) resultTabIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchRequestInputDetails> inputDetails() {
        return (Optional<SearchRequestInputDetails>) inputDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchRequestOptions> requestOptions() {
        return (Optional<SearchRequestOptions>) requestOptions;
    }

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    @JsonIgnore
    public Optional<Long> timeoutMillis() {
        return timeoutMillis;
    }

    /**
     * People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> people() {
        return (Optional<List<Person>>) people;
    }

    /**
     * Whether or not to disable spellcheck.
     */
    @JsonIgnore
    public Optional<Boolean> disableSpellcheck() {
        return disableSpellcheck;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    public SearchRequest withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    public SearchRequest withTimestamp(Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
     */
    public SearchRequest withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
     */
    public SearchRequest withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public SearchRequest withSessionInfo(SessionInfo sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = Optional.ofNullable(sessionInfo);
        return this;
    }

    public SearchRequest withSessionInfo(Optional<? extends SessionInfo> sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = sessionInfo;
        return this;
    }

    public SearchRequest withSourceDocument(Document sourceDocument) {
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        this.sourceDocument = Optional.ofNullable(sourceDocument);
        return this;
    }

    public SearchRequest withSourceDocument(Optional<? extends Document> sourceDocument) {
        Utils.checkNotNull(sourceDocument, "sourceDocument");
        this.sourceDocument = sourceDocument;
        return this;
    }

    /**
     * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
     */
    public SearchRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
     */
    public SearchRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Hint to the server about how many characters long a snippet may be. Server may return less or more.
     */
    public SearchRequest withMaxSnippetSize(long maxSnippetSize) {
        Utils.checkNotNull(maxSnippetSize, "maxSnippetSize");
        this.maxSnippetSize = Optional.ofNullable(maxSnippetSize);
        return this;
    }

    /**
     * Hint to the server about how many characters long a snippet may be. Server may return less or more.
     */
    public SearchRequest withMaxSnippetSize(Optional<Long> maxSnippetSize) {
        Utils.checkNotNull(maxSnippetSize, "maxSnippetSize");
        this.maxSnippetSize = maxSnippetSize;
        return this;
    }

    /**
     * The search terms.
     */
    public SearchRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public SearchRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public SearchRequest withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
     */
    public SearchRequest withResultTabIds(List<String> resultTabIds) {
        Utils.checkNotNull(resultTabIds, "resultTabIds");
        this.resultTabIds = Optional.ofNullable(resultTabIds);
        return this;
    }

    /**
     * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
     */
    public SearchRequest withResultTabIds(Optional<? extends List<String>> resultTabIds) {
        Utils.checkNotNull(resultTabIds, "resultTabIds");
        this.resultTabIds = resultTabIds;
        return this;
    }

    public SearchRequest withInputDetails(SearchRequestInputDetails inputDetails) {
        Utils.checkNotNull(inputDetails, "inputDetails");
        this.inputDetails = Optional.ofNullable(inputDetails);
        return this;
    }

    public SearchRequest withInputDetails(Optional<? extends SearchRequestInputDetails> inputDetails) {
        Utils.checkNotNull(inputDetails, "inputDetails");
        this.inputDetails = inputDetails;
        return this;
    }

    public SearchRequest withRequestOptions(SearchRequestOptions requestOptions) {
        Utils.checkNotNull(requestOptions, "requestOptions");
        this.requestOptions = Optional.ofNullable(requestOptions);
        return this;
    }

    public SearchRequest withRequestOptions(Optional<? extends SearchRequestOptions> requestOptions) {
        Utils.checkNotNull(requestOptions, "requestOptions");
        this.requestOptions = requestOptions;
        return this;
    }

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    public SearchRequest withTimeoutMillis(long timeoutMillis) {
        Utils.checkNotNull(timeoutMillis, "timeoutMillis");
        this.timeoutMillis = Optional.ofNullable(timeoutMillis);
        return this;
    }

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    public SearchRequest withTimeoutMillis(Optional<Long> timeoutMillis) {
        Utils.checkNotNull(timeoutMillis, "timeoutMillis");
        this.timeoutMillis = timeoutMillis;
        return this;
    }

    /**
     * People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
     */
    public SearchRequest withPeople(List<Person> people) {
        Utils.checkNotNull(people, "people");
        this.people = Optional.ofNullable(people);
        return this;
    }

    /**
     * People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
     */
    public SearchRequest withPeople(Optional<? extends List<Person>> people) {
        Utils.checkNotNull(people, "people");
        this.people = people;
        return this;
    }

    /**
     * Whether or not to disable spellcheck.
     */
    public SearchRequest withDisableSpellcheck(boolean disableSpellcheck) {
        Utils.checkNotNull(disableSpellcheck, "disableSpellcheck");
        this.disableSpellcheck = Optional.ofNullable(disableSpellcheck);
        return this;
    }

    /**
     * Whether or not to disable spellcheck.
     */
    public SearchRequest withDisableSpellcheck(Optional<Boolean> disableSpellcheck) {
        Utils.checkNotNull(disableSpellcheck, "disableSpellcheck");
        this.disableSpellcheck = disableSpellcheck;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchRequest other = (SearchRequest) o;
        return 
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp) &&
            Utils.enhancedDeepEquals(this.trackingToken, other.trackingToken) &&
            Utils.enhancedDeepEquals(this.sessionInfo, other.sessionInfo) &&
            Utils.enhancedDeepEquals(this.sourceDocument, other.sourceDocument) &&
            Utils.enhancedDeepEquals(this.pageSize, other.pageSize) &&
            Utils.enhancedDeepEquals(this.maxSnippetSize, other.maxSnippetSize) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.resultTabIds, other.resultTabIds) &&
            Utils.enhancedDeepEquals(this.inputDetails, other.inputDetails) &&
            Utils.enhancedDeepEquals(this.requestOptions, other.requestOptions) &&
            Utils.enhancedDeepEquals(this.timeoutMillis, other.timeoutMillis) &&
            Utils.enhancedDeepEquals(this.people, other.people) &&
            Utils.enhancedDeepEquals(this.disableSpellcheck, other.disableSpellcheck);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            timestamp,
            trackingToken,
            sessionInfo,
            sourceDocument,
            pageSize,
            maxSnippetSize,
            query,
            cursor,
            resultTabIds,
            inputDetails,
            requestOptions,
            timeoutMillis,
            people,
            disableSpellcheck);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchRequest.class,
                "timestamp", timestamp,
                "trackingToken", trackingToken,
                "sessionInfo", sessionInfo,
                "sourceDocument", sourceDocument,
                "pageSize", pageSize,
                "maxSnippetSize", maxSnippetSize,
                "query", query,
                "cursor", cursor,
                "resultTabIds", resultTabIds,
                "inputDetails", inputDetails,
                "requestOptions", requestOptions,
                "timeoutMillis", timeoutMillis,
                "people", people,
                "disableSpellcheck", disableSpellcheck);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> timestamp = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends SessionInfo> sessionInfo = Optional.empty();
 
        private Optional<? extends Document> sourceDocument = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<Long> maxSnippetSize = Optional.empty();
 
        private String query;
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<? extends List<String>> resultTabIds = Optional.empty();
 
        private Optional<? extends SearchRequestInputDetails> inputDetails = Optional.empty();
 
        private Optional<? extends SearchRequestOptions> requestOptions = Optional.empty();
 
        private Optional<Long> timeoutMillis = Optional.empty();
 
        private Optional<? extends List<Person>> people = Optional.empty();
 
        private Optional<Boolean> disableSpellcheck = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ISO 8601 timestamp associated with the client request.
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * The ISO 8601 timestamp associated with the client request.
         */
        public Builder timestamp(Optional<OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder sessionInfo(SessionInfo sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = Optional.ofNullable(sessionInfo);
            return this;
        }

        public Builder sessionInfo(Optional<? extends SessionInfo> sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = sessionInfo;
            return this;
        }

        public Builder sourceDocument(Document sourceDocument) {
            Utils.checkNotNull(sourceDocument, "sourceDocument");
            this.sourceDocument = Optional.ofNullable(sourceDocument);
            return this;
        }

        public Builder sourceDocument(Optional<? extends Document> sourceDocument) {
            Utils.checkNotNull(sourceDocument, "sourceDocument");
            this.sourceDocument = sourceDocument;
            return this;
        }

        /**
         * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Hint to the server about how many characters long a snippet may be. Server may return less or more.
         */
        public Builder maxSnippetSize(long maxSnippetSize) {
            Utils.checkNotNull(maxSnippetSize, "maxSnippetSize");
            this.maxSnippetSize = Optional.ofNullable(maxSnippetSize);
            return this;
        }

        /**
         * Hint to the server about how many characters long a snippet may be. Server may return less or more.
         */
        public Builder maxSnippetSize(Optional<Long> maxSnippetSize) {
            Utils.checkNotNull(maxSnippetSize, "maxSnippetSize");
            this.maxSnippetSize = maxSnippetSize;
            return this;
        }

        /**
         * The search terms.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
         */
        public Builder resultTabIds(List<String> resultTabIds) {
            Utils.checkNotNull(resultTabIds, "resultTabIds");
            this.resultTabIds = Optional.ofNullable(resultTabIds);
            return this;
        }

        /**
         * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
         */
        public Builder resultTabIds(Optional<? extends List<String>> resultTabIds) {
            Utils.checkNotNull(resultTabIds, "resultTabIds");
            this.resultTabIds = resultTabIds;
            return this;
        }

        public Builder inputDetails(SearchRequestInputDetails inputDetails) {
            Utils.checkNotNull(inputDetails, "inputDetails");
            this.inputDetails = Optional.ofNullable(inputDetails);
            return this;
        }

        public Builder inputDetails(Optional<? extends SearchRequestInputDetails> inputDetails) {
            Utils.checkNotNull(inputDetails, "inputDetails");
            this.inputDetails = inputDetails;
            return this;
        }

        public Builder requestOptions(SearchRequestOptions requestOptions) {
            Utils.checkNotNull(requestOptions, "requestOptions");
            this.requestOptions = Optional.ofNullable(requestOptions);
            return this;
        }

        public Builder requestOptions(Optional<? extends SearchRequestOptions> requestOptions) {
            Utils.checkNotNull(requestOptions, "requestOptions");
            this.requestOptions = requestOptions;
            return this;
        }

        /**
         * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
         */
        public Builder timeoutMillis(long timeoutMillis) {
            Utils.checkNotNull(timeoutMillis, "timeoutMillis");
            this.timeoutMillis = Optional.ofNullable(timeoutMillis);
            return this;
        }

        /**
         * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
         */
        public Builder timeoutMillis(Optional<Long> timeoutMillis) {
            Utils.checkNotNull(timeoutMillis, "timeoutMillis");
            this.timeoutMillis = timeoutMillis;
            return this;
        }

        /**
         * People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
         */
        public Builder people(List<Person> people) {
            Utils.checkNotNull(people, "people");
            this.people = Optional.ofNullable(people);
            return this;
        }

        /**
         * People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
         */
        public Builder people(Optional<? extends List<Person>> people) {
            Utils.checkNotNull(people, "people");
            this.people = people;
            return this;
        }

        /**
         * Whether or not to disable spellcheck.
         */
        public Builder disableSpellcheck(boolean disableSpellcheck) {
            Utils.checkNotNull(disableSpellcheck, "disableSpellcheck");
            this.disableSpellcheck = Optional.ofNullable(disableSpellcheck);
            return this;
        }

        /**
         * Whether or not to disable spellcheck.
         */
        public Builder disableSpellcheck(Optional<Boolean> disableSpellcheck) {
            Utils.checkNotNull(disableSpellcheck, "disableSpellcheck");
            this.disableSpellcheck = disableSpellcheck;
            return this;
        }
        
        public SearchRequest build() {
            return new SearchRequest(
                timestamp,
                trackingToken,
                sessionInfo,
                sourceDocument,
                pageSize,
                maxSnippetSize,
                query,
                cursor,
                resultTabIds,
                inputDetails,
                requestOptions,
                timeoutMillis,
                people,
                disableSpellcheck);
        }
    }
}
