/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class RelatedDocuments {

    /**
     * How this document relates to the including entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relation")
    private Optional<? extends Relation> relation;

    /**
     * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("associatedEntityId")
    private Optional<String> associatedEntityId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("querySuggestion")
    private Optional<? extends QuerySuggestion> querySuggestion;

    /**
     * A truncated list of documents with this relation. TO BE DEPRECATED.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    @Deprecated
    private Optional<? extends List<Document>> documents;

    /**
     * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<SearchResult>> results;

    @JsonCreator
    public RelatedDocuments(
            @JsonProperty("relation") Optional<? extends Relation> relation,
            @JsonProperty("associatedEntityId") Optional<String> associatedEntityId,
            @JsonProperty("querySuggestion") Optional<? extends QuerySuggestion> querySuggestion,
            @JsonProperty("documents") Optional<? extends List<Document>> documents,
            @JsonProperty("results") Optional<? extends List<SearchResult>> results) {
        Utils.checkNotNull(relation, "relation");
        Utils.checkNotNull(associatedEntityId, "associatedEntityId");
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(results, "results");
        this.relation = relation;
        this.associatedEntityId = associatedEntityId;
        this.querySuggestion = querySuggestion;
        this.documents = documents;
        this.results = results;
    }
    
    public RelatedDocuments() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * How this document relates to the including entity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Relation> relation() {
        return (Optional<Relation>) relation;
    }

    /**
     * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
     */
    @JsonIgnore
    public Optional<String> associatedEntityId() {
        return associatedEntityId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuerySuggestion> querySuggestion() {
        return (Optional<QuerySuggestion>) querySuggestion;
    }

    /**
     * A truncated list of documents with this relation. TO BE DEPRECATED.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Document>> documents() {
        return (Optional<List<Document>>) documents;
    }

    /**
     * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SearchResult>> results() {
        return (Optional<List<SearchResult>>) results;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * How this document relates to the including entity.
     */
    public RelatedDocuments withRelation(Relation relation) {
        Utils.checkNotNull(relation, "relation");
        this.relation = Optional.ofNullable(relation);
        return this;
    }

    /**
     * How this document relates to the including entity.
     */
    public RelatedDocuments withRelation(Optional<? extends Relation> relation) {
        Utils.checkNotNull(relation, "relation");
        this.relation = relation;
        return this;
    }

    /**
     * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
     */
    public RelatedDocuments withAssociatedEntityId(String associatedEntityId) {
        Utils.checkNotNull(associatedEntityId, "associatedEntityId");
        this.associatedEntityId = Optional.ofNullable(associatedEntityId);
        return this;
    }

    /**
     * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
     */
    public RelatedDocuments withAssociatedEntityId(Optional<String> associatedEntityId) {
        Utils.checkNotNull(associatedEntityId, "associatedEntityId");
        this.associatedEntityId = associatedEntityId;
        return this;
    }

    public RelatedDocuments withQuerySuggestion(QuerySuggestion querySuggestion) {
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        this.querySuggestion = Optional.ofNullable(querySuggestion);
        return this;
    }

    public RelatedDocuments withQuerySuggestion(Optional<? extends QuerySuggestion> querySuggestion) {
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        this.querySuggestion = querySuggestion;
        return this;
    }

    /**
     * A truncated list of documents with this relation. TO BE DEPRECATED.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public RelatedDocuments withDocuments(List<Document> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    /**
     * A truncated list of documents with this relation. TO BE DEPRECATED.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public RelatedDocuments withDocuments(Optional<? extends List<Document>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
     */
    public RelatedDocuments withResults(List<SearchResult> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    /**
     * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
     */
    public RelatedDocuments withResults(Optional<? extends List<SearchResult>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RelatedDocuments other = (RelatedDocuments) o;
        return 
            Objects.deepEquals(this.relation, other.relation) &&
            Objects.deepEquals(this.associatedEntityId, other.associatedEntityId) &&
            Objects.deepEquals(this.querySuggestion, other.querySuggestion) &&
            Objects.deepEquals(this.documents, other.documents) &&
            Objects.deepEquals(this.results, other.results);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            relation,
            associatedEntityId,
            querySuggestion,
            documents,
            results);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RelatedDocuments.class,
                "relation", relation,
                "associatedEntityId", associatedEntityId,
                "querySuggestion", querySuggestion,
                "documents", documents,
                "results", results);
    }
    
    public final static class Builder {
 
        private Optional<? extends Relation> relation = Optional.empty();
 
        private Optional<String> associatedEntityId = Optional.empty();
 
        private Optional<? extends QuerySuggestion> querySuggestion = Optional.empty();
 
        @Deprecated
        private Optional<? extends List<Document>> documents = Optional.empty();
 
        private Optional<? extends List<SearchResult>> results = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * How this document relates to the including entity.
         */
        public Builder relation(Relation relation) {
            Utils.checkNotNull(relation, "relation");
            this.relation = Optional.ofNullable(relation);
            return this;
        }

        /**
         * How this document relates to the including entity.
         */
        public Builder relation(Optional<? extends Relation> relation) {
            Utils.checkNotNull(relation, "relation");
            this.relation = relation;
            return this;
        }

        /**
         * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
         */
        public Builder associatedEntityId(String associatedEntityId) {
            Utils.checkNotNull(associatedEntityId, "associatedEntityId");
            this.associatedEntityId = Optional.ofNullable(associatedEntityId);
            return this;
        }

        /**
         * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
         */
        public Builder associatedEntityId(Optional<String> associatedEntityId) {
            Utils.checkNotNull(associatedEntityId, "associatedEntityId");
            this.associatedEntityId = associatedEntityId;
            return this;
        }

        public Builder querySuggestion(QuerySuggestion querySuggestion) {
            Utils.checkNotNull(querySuggestion, "querySuggestion");
            this.querySuggestion = Optional.ofNullable(querySuggestion);
            return this;
        }

        public Builder querySuggestion(Optional<? extends QuerySuggestion> querySuggestion) {
            Utils.checkNotNull(querySuggestion, "querySuggestion");
            this.querySuggestion = querySuggestion;
            return this;
        }

        /**
         * A truncated list of documents with this relation. TO BE DEPRECATED.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder documents(List<Document> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * A truncated list of documents with this relation. TO BE DEPRECATED.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder documents(Optional<? extends List<Document>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        /**
         * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
         */
        public Builder results(List<SearchResult> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        /**
         * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
         */
        public Builder results(Optional<? extends List<SearchResult>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }
        
        public RelatedDocuments build() {
            return new RelatedDocuments(
                relation,
                associatedEntityId,
                querySuggestion,
                documents,
                results);
        }
    }
}
