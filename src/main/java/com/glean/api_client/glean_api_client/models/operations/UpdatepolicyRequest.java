/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.models.components.UpdateDlpReportRequest;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class UpdatepolicyRequest {

    /**
     * The id of the policy to fetch.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private UpdateDlpReportRequest updateDlpReportRequest;

    @JsonCreator
    public UpdatepolicyRequest(
            String id,
            UpdateDlpReportRequest updateDlpReportRequest) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(updateDlpReportRequest, "updateDlpReportRequest");
        this.id = id;
        this.updateDlpReportRequest = updateDlpReportRequest;
    }

    /**
     * The id of the policy to fetch.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public UpdateDlpReportRequest updateDlpReportRequest() {
        return updateDlpReportRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The id of the policy to fetch.
     */
    public UpdatepolicyRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public UpdatepolicyRequest withUpdateDlpReportRequest(UpdateDlpReportRequest updateDlpReportRequest) {
        Utils.checkNotNull(updateDlpReportRequest, "updateDlpReportRequest");
        this.updateDlpReportRequest = updateDlpReportRequest;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatepolicyRequest other = (UpdatepolicyRequest) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.updateDlpReportRequest, other.updateDlpReportRequest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            updateDlpReportRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatepolicyRequest.class,
                "id", id,
                "updateDlpReportRequest", updateDlpReportRequest);
    }
    
    public final static class Builder {
 
        private String id;
 
        private UpdateDlpReportRequest updateDlpReportRequest;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The id of the policy to fetch.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder updateDlpReportRequest(UpdateDlpReportRequest updateDlpReportRequest) {
            Utils.checkNotNull(updateDlpReportRequest, "updateDlpReportRequest");
            this.updateDlpReportRequest = updateDlpReportRequest;
            return this;
        }
        
        public UpdatepolicyRequest build() {
            return new UpdatepolicyRequest(
                id,
                updateDlpReportRequest);
        }
    }
}
