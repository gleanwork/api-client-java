/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class GleanAssistInsightsResponse {

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastLogTimestamp")
    private Optional<Long> lastLogTimestamp;

    /**
     * Insights for all active users with respect to set of actions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activityInsights")
    private Optional<? extends List<UserActivityInsight>> activityInsights;

    /**
     * Total number of active users in the requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalActiveUsers")
    private Optional<Long> totalActiveUsers;

    /**
     * List of datasource instances for which glean assist is enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstances")
    private Optional<? extends List<String>> datasourceInstances;

    /**
     * List of departments applicable for users tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonCreator
    public GleanAssistInsightsResponse(
            @JsonProperty("lastLogTimestamp") Optional<Long> lastLogTimestamp,
            @JsonProperty("activityInsights") Optional<? extends List<UserActivityInsight>> activityInsights,
            @JsonProperty("totalActiveUsers") Optional<Long> totalActiveUsers,
            @JsonProperty("datasourceInstances") Optional<? extends List<String>> datasourceInstances,
            @JsonProperty("departments") Optional<? extends List<String>> departments) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        Utils.checkNotNull(activityInsights, "activityInsights");
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        Utils.checkNotNull(datasourceInstances, "datasourceInstances");
        Utils.checkNotNull(departments, "departments");
        this.lastLogTimestamp = lastLogTimestamp;
        this.activityInsights = activityInsights;
        this.totalActiveUsers = totalActiveUsers;
        this.datasourceInstances = datasourceInstances;
        this.departments = departments;
    }
    
    public GleanAssistInsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastLogTimestamp() {
        return lastLogTimestamp;
    }

    /**
     * Insights for all active users with respect to set of actions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserActivityInsight>> activityInsights() {
        return (Optional<List<UserActivityInsight>>) activityInsights;
    }

    /**
     * Total number of active users in the requested period.
     */
    @JsonIgnore
    public Optional<Long> totalActiveUsers() {
        return totalActiveUsers;
    }

    /**
     * List of datasource instances for which glean assist is enabled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> datasourceInstances() {
        return (Optional<List<String>>) datasourceInstances;
    }

    /**
     * List of departments applicable for users tab.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public GleanAssistInsightsResponse withLastLogTimestamp(long lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
        return this;
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public GleanAssistInsightsResponse withLastLogTimestamp(Optional<Long> lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = lastLogTimestamp;
        return this;
    }

    /**
     * Insights for all active users with respect to set of actions.
     */
    public GleanAssistInsightsResponse withActivityInsights(List<UserActivityInsight> activityInsights) {
        Utils.checkNotNull(activityInsights, "activityInsights");
        this.activityInsights = Optional.ofNullable(activityInsights);
        return this;
    }

    /**
     * Insights for all active users with respect to set of actions.
     */
    public GleanAssistInsightsResponse withActivityInsights(Optional<? extends List<UserActivityInsight>> activityInsights) {
        Utils.checkNotNull(activityInsights, "activityInsights");
        this.activityInsights = activityInsights;
        return this;
    }

    /**
     * Total number of active users in the requested period.
     */
    public GleanAssistInsightsResponse withTotalActiveUsers(long totalActiveUsers) {
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        this.totalActiveUsers = Optional.ofNullable(totalActiveUsers);
        return this;
    }

    /**
     * Total number of active users in the requested period.
     */
    public GleanAssistInsightsResponse withTotalActiveUsers(Optional<Long> totalActiveUsers) {
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        this.totalActiveUsers = totalActiveUsers;
        return this;
    }

    /**
     * List of datasource instances for which glean assist is enabled.
     */
    public GleanAssistInsightsResponse withDatasourceInstances(List<String> datasourceInstances) {
        Utils.checkNotNull(datasourceInstances, "datasourceInstances");
        this.datasourceInstances = Optional.ofNullable(datasourceInstances);
        return this;
    }

    /**
     * List of datasource instances for which glean assist is enabled.
     */
    public GleanAssistInsightsResponse withDatasourceInstances(Optional<? extends List<String>> datasourceInstances) {
        Utils.checkNotNull(datasourceInstances, "datasourceInstances");
        this.datasourceInstances = datasourceInstances;
        return this;
    }

    /**
     * List of departments applicable for users tab.
     */
    public GleanAssistInsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * List of departments applicable for users tab.
     */
    public GleanAssistInsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GleanAssistInsightsResponse other = (GleanAssistInsightsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.lastLogTimestamp, other.lastLogTimestamp) &&
            Utils.enhancedDeepEquals(this.activityInsights, other.activityInsights) &&
            Utils.enhancedDeepEquals(this.totalActiveUsers, other.totalActiveUsers) &&
            Utils.enhancedDeepEquals(this.datasourceInstances, other.datasourceInstances) &&
            Utils.enhancedDeepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            lastLogTimestamp,
            activityInsights,
            totalActiveUsers,
            datasourceInstances,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GleanAssistInsightsResponse.class,
                "lastLogTimestamp", lastLogTimestamp,
                "activityInsights", activityInsights,
                "totalActiveUsers", totalActiveUsers,
                "datasourceInstances", datasourceInstances,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private Optional<Long> lastLogTimestamp = Optional.empty();
 
        private Optional<? extends List<UserActivityInsight>> activityInsights = Optional.empty();
 
        private Optional<Long> totalActiveUsers = Optional.empty();
 
        private Optional<? extends List<String>> datasourceInstances = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(long lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
            return this;
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(Optional<Long> lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = lastLogTimestamp;
            return this;
        }

        /**
         * Insights for all active users with respect to set of actions.
         */
        public Builder activityInsights(List<UserActivityInsight> activityInsights) {
            Utils.checkNotNull(activityInsights, "activityInsights");
            this.activityInsights = Optional.ofNullable(activityInsights);
            return this;
        }

        /**
         * Insights for all active users with respect to set of actions.
         */
        public Builder activityInsights(Optional<? extends List<UserActivityInsight>> activityInsights) {
            Utils.checkNotNull(activityInsights, "activityInsights");
            this.activityInsights = activityInsights;
            return this;
        }

        /**
         * Total number of active users in the requested period.
         */
        public Builder totalActiveUsers(long totalActiveUsers) {
            Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
            this.totalActiveUsers = Optional.ofNullable(totalActiveUsers);
            return this;
        }

        /**
         * Total number of active users in the requested period.
         */
        public Builder totalActiveUsers(Optional<Long> totalActiveUsers) {
            Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
            this.totalActiveUsers = totalActiveUsers;
            return this;
        }

        /**
         * List of datasource instances for which glean assist is enabled.
         */
        public Builder datasourceInstances(List<String> datasourceInstances) {
            Utils.checkNotNull(datasourceInstances, "datasourceInstances");
            this.datasourceInstances = Optional.ofNullable(datasourceInstances);
            return this;
        }

        /**
         * List of datasource instances for which glean assist is enabled.
         */
        public Builder datasourceInstances(Optional<? extends List<String>> datasourceInstances) {
            Utils.checkNotNull(datasourceInstances, "datasourceInstances");
            this.datasourceInstances = datasourceInstances;
            return this;
        }

        /**
         * List of departments applicable for users tab.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * List of departments applicable for users tab.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public GleanAssistInsightsResponse build() {
            return new GleanAssistInsightsResponse(
                lastLogTimestamp,
                activityInsights,
                totalActiveUsers,
                datasourceInstances,
                departments);
        }
    }
}
