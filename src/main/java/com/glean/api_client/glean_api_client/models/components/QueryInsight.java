/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class QueryInsight {

    /**
     * The query string the information is about.
     */
    @JsonProperty("query")
    private String query;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchCount")
    private Optional<? extends CountInfo> searchCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchorCount")
    private Optional<? extends CountInfo> searchorCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchWithClickCount")
    private Optional<? extends CountInfo> searchWithClickCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickCount")
    private Optional<? extends CountInfo> clickCount;

    /**
     * list of similar queries to current one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("similarQueries")
    private Optional<? extends List<QueryInsight>> similarQueries;

    @JsonCreator
    public QueryInsight(
            @JsonProperty("query") String query,
            @JsonProperty("searchCount") Optional<? extends CountInfo> searchCount,
            @JsonProperty("searchorCount") Optional<? extends CountInfo> searchorCount,
            @JsonProperty("searchWithClickCount") Optional<? extends CountInfo> searchWithClickCount,
            @JsonProperty("clickCount") Optional<? extends CountInfo> clickCount,
            @JsonProperty("similarQueries") Optional<? extends List<QueryInsight>> similarQueries) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(searchCount, "searchCount");
        Utils.checkNotNull(searchorCount, "searchorCount");
        Utils.checkNotNull(searchWithClickCount, "searchWithClickCount");
        Utils.checkNotNull(clickCount, "clickCount");
        Utils.checkNotNull(similarQueries, "similarQueries");
        this.query = query;
        this.searchCount = searchCount;
        this.searchorCount = searchorCount;
        this.searchWithClickCount = searchWithClickCount;
        this.clickCount = clickCount;
        this.similarQueries = similarQueries;
    }
    
    public QueryInsight(
            String query) {
        this(query, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The query string the information is about.
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> searchCount() {
        return (Optional<CountInfo>) searchCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> searchorCount() {
        return (Optional<CountInfo>) searchorCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> searchWithClickCount() {
        return (Optional<CountInfo>) searchWithClickCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> clickCount() {
        return (Optional<CountInfo>) clickCount;
    }

    /**
     * list of similar queries to current one.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<QueryInsight>> similarQueries() {
        return (Optional<List<QueryInsight>>) similarQueries;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The query string the information is about.
     */
    public QueryInsight withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    public QueryInsight withSearchCount(CountInfo searchCount) {
        Utils.checkNotNull(searchCount, "searchCount");
        this.searchCount = Optional.ofNullable(searchCount);
        return this;
    }

    public QueryInsight withSearchCount(Optional<? extends CountInfo> searchCount) {
        Utils.checkNotNull(searchCount, "searchCount");
        this.searchCount = searchCount;
        return this;
    }

    public QueryInsight withSearchorCount(CountInfo searchorCount) {
        Utils.checkNotNull(searchorCount, "searchorCount");
        this.searchorCount = Optional.ofNullable(searchorCount);
        return this;
    }

    public QueryInsight withSearchorCount(Optional<? extends CountInfo> searchorCount) {
        Utils.checkNotNull(searchorCount, "searchorCount");
        this.searchorCount = searchorCount;
        return this;
    }

    public QueryInsight withSearchWithClickCount(CountInfo searchWithClickCount) {
        Utils.checkNotNull(searchWithClickCount, "searchWithClickCount");
        this.searchWithClickCount = Optional.ofNullable(searchWithClickCount);
        return this;
    }

    public QueryInsight withSearchWithClickCount(Optional<? extends CountInfo> searchWithClickCount) {
        Utils.checkNotNull(searchWithClickCount, "searchWithClickCount");
        this.searchWithClickCount = searchWithClickCount;
        return this;
    }

    public QueryInsight withClickCount(CountInfo clickCount) {
        Utils.checkNotNull(clickCount, "clickCount");
        this.clickCount = Optional.ofNullable(clickCount);
        return this;
    }

    public QueryInsight withClickCount(Optional<? extends CountInfo> clickCount) {
        Utils.checkNotNull(clickCount, "clickCount");
        this.clickCount = clickCount;
        return this;
    }

    /**
     * list of similar queries to current one.
     */
    public QueryInsight withSimilarQueries(List<QueryInsight> similarQueries) {
        Utils.checkNotNull(similarQueries, "similarQueries");
        this.similarQueries = Optional.ofNullable(similarQueries);
        return this;
    }

    /**
     * list of similar queries to current one.
     */
    public QueryInsight withSimilarQueries(Optional<? extends List<QueryInsight>> similarQueries) {
        Utils.checkNotNull(similarQueries, "similarQueries");
        this.similarQueries = similarQueries;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryInsight other = (QueryInsight) o;
        return 
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.searchCount, other.searchCount) &&
            Objects.deepEquals(this.searchorCount, other.searchorCount) &&
            Objects.deepEquals(this.searchWithClickCount, other.searchWithClickCount) &&
            Objects.deepEquals(this.clickCount, other.clickCount) &&
            Objects.deepEquals(this.similarQueries, other.similarQueries);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            query,
            searchCount,
            searchorCount,
            searchWithClickCount,
            clickCount,
            similarQueries);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QueryInsight.class,
                "query", query,
                "searchCount", searchCount,
                "searchorCount", searchorCount,
                "searchWithClickCount", searchWithClickCount,
                "clickCount", clickCount,
                "similarQueries", similarQueries);
    }
    
    public final static class Builder {
 
        private String query;
 
        private Optional<? extends CountInfo> searchCount = Optional.empty();
 
        private Optional<? extends CountInfo> searchorCount = Optional.empty();
 
        private Optional<? extends CountInfo> searchWithClickCount = Optional.empty();
 
        private Optional<? extends CountInfo> clickCount = Optional.empty();
 
        private Optional<? extends List<QueryInsight>> similarQueries = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The query string the information is about.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        public Builder searchCount(CountInfo searchCount) {
            Utils.checkNotNull(searchCount, "searchCount");
            this.searchCount = Optional.ofNullable(searchCount);
            return this;
        }

        public Builder searchCount(Optional<? extends CountInfo> searchCount) {
            Utils.checkNotNull(searchCount, "searchCount");
            this.searchCount = searchCount;
            return this;
        }

        public Builder searchorCount(CountInfo searchorCount) {
            Utils.checkNotNull(searchorCount, "searchorCount");
            this.searchorCount = Optional.ofNullable(searchorCount);
            return this;
        }

        public Builder searchorCount(Optional<? extends CountInfo> searchorCount) {
            Utils.checkNotNull(searchorCount, "searchorCount");
            this.searchorCount = searchorCount;
            return this;
        }

        public Builder searchWithClickCount(CountInfo searchWithClickCount) {
            Utils.checkNotNull(searchWithClickCount, "searchWithClickCount");
            this.searchWithClickCount = Optional.ofNullable(searchWithClickCount);
            return this;
        }

        public Builder searchWithClickCount(Optional<? extends CountInfo> searchWithClickCount) {
            Utils.checkNotNull(searchWithClickCount, "searchWithClickCount");
            this.searchWithClickCount = searchWithClickCount;
            return this;
        }

        public Builder clickCount(CountInfo clickCount) {
            Utils.checkNotNull(clickCount, "clickCount");
            this.clickCount = Optional.ofNullable(clickCount);
            return this;
        }

        public Builder clickCount(Optional<? extends CountInfo> clickCount) {
            Utils.checkNotNull(clickCount, "clickCount");
            this.clickCount = clickCount;
            return this;
        }

        /**
         * list of similar queries to current one.
         */
        public Builder similarQueries(List<QueryInsight> similarQueries) {
            Utils.checkNotNull(similarQueries, "similarQueries");
            this.similarQueries = Optional.ofNullable(similarQueries);
            return this;
        }

        /**
         * list of similar queries to current one.
         */
        public Builder similarQueries(Optional<? extends List<QueryInsight>> similarQueries) {
            Utils.checkNotNull(similarQueries, "similarQueries");
            this.similarQueries = similarQueries;
            return this;
        }
        
        public QueryInsight build() {
            return new QueryInsight(
                query,
                searchCount,
                searchorCount,
                searchWithClickCount,
                clickCount,
                similarQueries);
        }
    }
}
