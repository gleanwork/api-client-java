/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class ResultTab {

    /**
     * The unique ID of the tab. Can be passed in a search request to get results for that tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The number of results in this tab for the current query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * The datasource associated with the tab, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * The datasource instance associated with the tab, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstance")
    private Optional<String> datasourceInstance;

    @JsonCreator
    public ResultTab(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("datasourceInstance") Optional<String> datasourceInstance) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.id = id;
        this.count = count;
        this.datasource = datasource;
        this.datasourceInstance = datasourceInstance;
    }
    
    public ResultTab() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The unique ID of the tab. Can be passed in a search request to get results for that tab.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The number of results in this tab for the current query.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * The datasource associated with the tab, if any.
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * The datasource instance associated with the tab, if any.
     */
    @JsonIgnore
    public Optional<String> datasourceInstance() {
        return datasourceInstance;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique ID of the tab. Can be passed in a search request to get results for that tab.
     */
    public ResultTab withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The unique ID of the tab. Can be passed in a search request to get results for that tab.
     */
    public ResultTab withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The number of results in this tab for the current query.
     */
    public ResultTab withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * The number of results in this tab for the current query.
     */
    public ResultTab withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The datasource associated with the tab, if any.
     */
    public ResultTab withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The datasource associated with the tab, if any.
     */
    public ResultTab withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The datasource instance associated with the tab, if any.
     */
    public ResultTab withDatasourceInstance(String datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = Optional.ofNullable(datasourceInstance);
        return this;
    }

    /**
     * The datasource instance associated with the tab, if any.
     */
    public ResultTab withDatasourceInstance(Optional<String> datasourceInstance) {
        Utils.checkNotNull(datasourceInstance, "datasourceInstance");
        this.datasourceInstance = datasourceInstance;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResultTab other = (ResultTab) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.datasourceInstance, other.datasourceInstance);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            count,
            datasource,
            datasourceInstance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResultTab.class,
                "id", id,
                "count", count,
                "datasource", datasource,
                "datasourceInstance", datasourceInstance);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> datasourceInstance = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique ID of the tab. Can be passed in a search request to get results for that tab.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique ID of the tab. Can be passed in a search request to get results for that tab.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The number of results in this tab for the current query.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of results in this tab for the current query.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        /**
         * The datasource associated with the tab, if any.
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The datasource associated with the tab, if any.
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The datasource instance associated with the tab, if any.
         */
        public Builder datasourceInstance(String datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = Optional.ofNullable(datasourceInstance);
            return this;
        }

        /**
         * The datasource instance associated with the tab, if any.
         */
        public Builder datasourceInstance(Optional<String> datasourceInstance) {
            Utils.checkNotNull(datasourceInstance, "datasourceInstance");
            this.datasourceInstance = datasourceInstance;
            return this;
        }
        
        public ResultTab build() {
            return new ResultTab(
                id,
                count,
                datasource,
                datasourceInstance);
        }
    }
}
