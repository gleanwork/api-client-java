/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FeedbackChatExchange {

    /**
     * Unix timestamp in millis for the chat request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<Long> timestamp;

    /**
     * Either DEFAULT (company knowledge) or GPT (world knowledge).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agent")
    private Optional<String> agent;

    /**
     * Initial query entered by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userQuery")
    private Optional<String> userQuery;

    /**
     * Search query performed by the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchQuery")
    private Optional<String> searchQuery;

    /**
     * List of documents read by the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultDocuments")
    private Optional<? extends List<ResultDocument>> resultDocuments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response")
    private Optional<String> response;

    @JsonCreator
    public FeedbackChatExchange(
            @JsonProperty("timestamp") Optional<Long> timestamp,
            @JsonProperty("agent") Optional<String> agent,
            @JsonProperty("userQuery") Optional<String> userQuery,
            @JsonProperty("searchQuery") Optional<String> searchQuery,
            @JsonProperty("resultDocuments") Optional<? extends List<ResultDocument>> resultDocuments,
            @JsonProperty("response") Optional<String> response) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(agent, "agent");
        Utils.checkNotNull(userQuery, "userQuery");
        Utils.checkNotNull(searchQuery, "searchQuery");
        Utils.checkNotNull(resultDocuments, "resultDocuments");
        Utils.checkNotNull(response, "response");
        this.timestamp = timestamp;
        this.agent = agent;
        this.userQuery = userQuery;
        this.searchQuery = searchQuery;
        this.resultDocuments = resultDocuments;
        this.response = response;
    }
    
    public FeedbackChatExchange() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp in millis for the chat request.
     */
    @JsonIgnore
    public Optional<Long> timestamp() {
        return timestamp;
    }

    /**
     * Either DEFAULT (company knowledge) or GPT (world knowledge).
     */
    @JsonIgnore
    public Optional<String> agent() {
        return agent;
    }

    /**
     * Initial query entered by the user.
     */
    @JsonIgnore
    public Optional<String> userQuery() {
        return userQuery;
    }

    /**
     * Search query performed by the agent.
     */
    @JsonIgnore
    public Optional<String> searchQuery() {
        return searchQuery;
    }

    /**
     * List of documents read by the agent.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ResultDocument>> resultDocuments() {
        return (Optional<List<ResultDocument>>) resultDocuments;
    }

    @JsonIgnore
    public Optional<String> response() {
        return response;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp in millis for the chat request.
     */
    public FeedbackChatExchange withTimestamp(long timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * Unix timestamp in millis for the chat request.
     */
    public FeedbackChatExchange withTimestamp(Optional<Long> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Either DEFAULT (company knowledge) or GPT (world knowledge).
     */
    public FeedbackChatExchange withAgent(String agent) {
        Utils.checkNotNull(agent, "agent");
        this.agent = Optional.ofNullable(agent);
        return this;
    }

    /**
     * Either DEFAULT (company knowledge) or GPT (world knowledge).
     */
    public FeedbackChatExchange withAgent(Optional<String> agent) {
        Utils.checkNotNull(agent, "agent");
        this.agent = agent;
        return this;
    }

    /**
     * Initial query entered by the user.
     */
    public FeedbackChatExchange withUserQuery(String userQuery) {
        Utils.checkNotNull(userQuery, "userQuery");
        this.userQuery = Optional.ofNullable(userQuery);
        return this;
    }

    /**
     * Initial query entered by the user.
     */
    public FeedbackChatExchange withUserQuery(Optional<String> userQuery) {
        Utils.checkNotNull(userQuery, "userQuery");
        this.userQuery = userQuery;
        return this;
    }

    /**
     * Search query performed by the agent.
     */
    public FeedbackChatExchange withSearchQuery(String searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = Optional.ofNullable(searchQuery);
        return this;
    }

    /**
     * Search query performed by the agent.
     */
    public FeedbackChatExchange withSearchQuery(Optional<String> searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = searchQuery;
        return this;
    }

    /**
     * List of documents read by the agent.
     */
    public FeedbackChatExchange withResultDocuments(List<ResultDocument> resultDocuments) {
        Utils.checkNotNull(resultDocuments, "resultDocuments");
        this.resultDocuments = Optional.ofNullable(resultDocuments);
        return this;
    }

    /**
     * List of documents read by the agent.
     */
    public FeedbackChatExchange withResultDocuments(Optional<? extends List<ResultDocument>> resultDocuments) {
        Utils.checkNotNull(resultDocuments, "resultDocuments");
        this.resultDocuments = resultDocuments;
        return this;
    }

    public FeedbackChatExchange withResponse(String response) {
        Utils.checkNotNull(response, "response");
        this.response = Optional.ofNullable(response);
        return this;
    }

    public FeedbackChatExchange withResponse(Optional<String> response) {
        Utils.checkNotNull(response, "response");
        this.response = response;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedbackChatExchange other = (FeedbackChatExchange) o;
        return 
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.agent, other.agent) &&
            Objects.deepEquals(this.userQuery, other.userQuery) &&
            Objects.deepEquals(this.searchQuery, other.searchQuery) &&
            Objects.deepEquals(this.resultDocuments, other.resultDocuments) &&
            Objects.deepEquals(this.response, other.response);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timestamp,
            agent,
            userQuery,
            searchQuery,
            resultDocuments,
            response);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedbackChatExchange.class,
                "timestamp", timestamp,
                "agent", agent,
                "userQuery", userQuery,
                "searchQuery", searchQuery,
                "resultDocuments", resultDocuments,
                "response", response);
    }
    
    public final static class Builder {
 
        private Optional<Long> timestamp = Optional.empty();
 
        private Optional<String> agent = Optional.empty();
 
        private Optional<String> userQuery = Optional.empty();
 
        private Optional<String> searchQuery = Optional.empty();
 
        private Optional<? extends List<ResultDocument>> resultDocuments = Optional.empty();
 
        private Optional<String> response = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp in millis for the chat request.
         */
        public Builder timestamp(long timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * Unix timestamp in millis for the chat request.
         */
        public Builder timestamp(Optional<Long> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Either DEFAULT (company knowledge) or GPT (world knowledge).
         */
        public Builder agent(String agent) {
            Utils.checkNotNull(agent, "agent");
            this.agent = Optional.ofNullable(agent);
            return this;
        }

        /**
         * Either DEFAULT (company knowledge) or GPT (world knowledge).
         */
        public Builder agent(Optional<String> agent) {
            Utils.checkNotNull(agent, "agent");
            this.agent = agent;
            return this;
        }

        /**
         * Initial query entered by the user.
         */
        public Builder userQuery(String userQuery) {
            Utils.checkNotNull(userQuery, "userQuery");
            this.userQuery = Optional.ofNullable(userQuery);
            return this;
        }

        /**
         * Initial query entered by the user.
         */
        public Builder userQuery(Optional<String> userQuery) {
            Utils.checkNotNull(userQuery, "userQuery");
            this.userQuery = userQuery;
            return this;
        }

        /**
         * Search query performed by the agent.
         */
        public Builder searchQuery(String searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = Optional.ofNullable(searchQuery);
            return this;
        }

        /**
         * Search query performed by the agent.
         */
        public Builder searchQuery(Optional<String> searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = searchQuery;
            return this;
        }

        /**
         * List of documents read by the agent.
         */
        public Builder resultDocuments(List<ResultDocument> resultDocuments) {
            Utils.checkNotNull(resultDocuments, "resultDocuments");
            this.resultDocuments = Optional.ofNullable(resultDocuments);
            return this;
        }

        /**
         * List of documents read by the agent.
         */
        public Builder resultDocuments(Optional<? extends List<ResultDocument>> resultDocuments) {
            Utils.checkNotNull(resultDocuments, "resultDocuments");
            this.resultDocuments = resultDocuments;
            return this;
        }

        public Builder response(String response) {
            Utils.checkNotNull(response, "response");
            this.response = Optional.ofNullable(response);
            return this;
        }

        public Builder response(Optional<String> response) {
            Utils.checkNotNull(response, "response");
            this.response = response;
            return this;
        }
        
        public FeedbackChatExchange build() {
            return new FeedbackChatExchange(
                timestamp,
                agent,
                userQuery,
                searchQuery,
                resultDocuments,
                response);
        }
    }
}
