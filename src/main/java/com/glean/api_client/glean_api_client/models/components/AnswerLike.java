/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class AnswerLike {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    private Optional<? extends Person> user;

    /**
     * The time the user liked the answer in ISO format (ISO 8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<OffsetDateTime> createTime;

    @JsonCreator
    public AnswerLike(
            @JsonProperty("user") Optional<? extends Person> user,
            @JsonProperty("createTime") Optional<OffsetDateTime> createTime) {
        Utils.checkNotNull(user, "user");
        Utils.checkNotNull(createTime, "createTime");
        this.user = user;
        this.createTime = createTime;
    }
    
    public AnswerLike() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> user() {
        return (Optional<Person>) user;
    }

    /**
     * The time the user liked the answer in ISO format (ISO 8601).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> createTime() {
        return createTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AnswerLike withUser(Person user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    public AnswerLike withUser(Optional<? extends Person> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    /**
     * The time the user liked the answer in ISO format (ISO 8601).
     */
    public AnswerLike withCreateTime(OffsetDateTime createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    /**
     * The time the user liked the answer in ISO format (ISO 8601).
     */
    public AnswerLike withCreateTime(Optional<OffsetDateTime> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnswerLike other = (AnswerLike) o;
        return 
            Objects.deepEquals(this.user, other.user) &&
            Objects.deepEquals(this.createTime, other.createTime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            user,
            createTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnswerLike.class,
                "user", user,
                "createTime", createTime);
    }
    
    public final static class Builder {
 
        private Optional<? extends Person> user = Optional.empty();
 
        private Optional<OffsetDateTime> createTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder user(Person user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        public Builder user(Optional<? extends Person> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }

        /**
         * The time the user liked the answer in ISO format (ISO 8601).
         */
        public Builder createTime(OffsetDateTime createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        /**
         * The time the user liked the answer in ISO format (ISO 8601).
         */
        public Builder createTime(Optional<OffsetDateTime> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }
        
        public AnswerLike build() {
            return new AnswerLike(
                user,
                createTime);
        }
    }
}
