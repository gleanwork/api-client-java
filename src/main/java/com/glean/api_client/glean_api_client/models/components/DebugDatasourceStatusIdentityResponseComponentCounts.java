/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DebugDatasourceStatusIdentityResponseComponentCounts {

    /**
     * The number of users/groups/memberships uploaded
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploaded")
    private Optional<Long> uploaded;

    @JsonCreator
    public DebugDatasourceStatusIdentityResponseComponentCounts(
            @JsonProperty("uploaded") Optional<Long> uploaded) {
        Utils.checkNotNull(uploaded, "uploaded");
        this.uploaded = uploaded;
    }
    
    public DebugDatasourceStatusIdentityResponseComponentCounts() {
        this(Optional.empty());
    }

    /**
     * The number of users/groups/memberships uploaded
     */
    @JsonIgnore
    public Optional<Long> uploaded() {
        return uploaded;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The number of users/groups/memberships uploaded
     */
    public DebugDatasourceStatusIdentityResponseComponentCounts withUploaded(long uploaded) {
        Utils.checkNotNull(uploaded, "uploaded");
        this.uploaded = Optional.ofNullable(uploaded);
        return this;
    }

    /**
     * The number of users/groups/memberships uploaded
     */
    public DebugDatasourceStatusIdentityResponseComponentCounts withUploaded(Optional<Long> uploaded) {
        Utils.checkNotNull(uploaded, "uploaded");
        this.uploaded = uploaded;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugDatasourceStatusIdentityResponseComponentCounts other = (DebugDatasourceStatusIdentityResponseComponentCounts) o;
        return 
            Objects.deepEquals(this.uploaded, other.uploaded);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uploaded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugDatasourceStatusIdentityResponseComponentCounts.class,
                "uploaded", uploaded);
    }
    
    public final static class Builder {
 
        private Optional<Long> uploaded = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of users/groups/memberships uploaded
         */
        public Builder uploaded(long uploaded) {
            Utils.checkNotNull(uploaded, "uploaded");
            this.uploaded = Optional.ofNullable(uploaded);
            return this;
        }

        /**
         * The number of users/groups/memberships uploaded
         */
        public Builder uploaded(Optional<Long> uploaded) {
            Utils.checkNotNull(uploaded, "uploaded");
            this.uploaded = uploaded;
            return this;
        }
        
        public DebugDatasourceStatusIdentityResponseComponentCounts build() {
            return new DebugDatasourceStatusIdentityResponseComponentCounts(
                uploaded);
        }
    }
}
