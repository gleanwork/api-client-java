/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class GetpolicyRequest {

    /**
     * The id of the policy to fetch.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=version")
    private Optional<Long> version;

    @JsonCreator
    public GetpolicyRequest(
            String id,
            Optional<Long> version) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(version, "version");
        this.id = id;
        this.version = version;
    }
    
    public GetpolicyRequest(
            String id) {
        this(id, Optional.empty());
    }

    /**
     * The id of the policy to fetch.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
     */
    @JsonIgnore
    public Optional<Long> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The id of the policy to fetch.
     */
    public GetpolicyRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
     */
    public GetpolicyRequest withVersion(long version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
     */
    public GetpolicyRequest withVersion(Optional<Long> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetpolicyRequest other = (GetpolicyRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetpolicyRequest.class,
                "id", id,
                "version", version);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<Long> version = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The id of the policy to fetch.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
         */
        public Builder version(long version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
         */
        public Builder version(Optional<Long> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public GetpolicyRequest build() {
            return new GetpolicyRequest(
                id,
                version);
        }
    }
}
