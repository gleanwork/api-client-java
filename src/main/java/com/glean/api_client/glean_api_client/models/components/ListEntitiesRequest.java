/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListEntitiesRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    private Optional<? extends List<FacetFilter>> filter;

    /**
     * Use EntitiesSortOrder enum for SortOptions.sortBy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    private Optional<? extends List<SortOptions>> sort;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityType")
    private Optional<? extends ListEntitiesRequestEntityType> entityType;

    /**
     * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasource")
    private Optional<String> datasource;

    /**
     * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * List of entity fields to return (that aren't returned by default)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeFields")
    private Optional<? extends List<ListEntitiesRequestIncludeField>> includeFields;

    /**
     * Hint to the server about how many results to send back. Server may return less.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageSize")
    private Optional<Long> pageSize;

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<String> source;

    @JsonCreator
    public ListEntitiesRequest(
            @JsonProperty("filter") Optional<? extends List<FacetFilter>> filter,
            @JsonProperty("sort") Optional<? extends List<SortOptions>> sort,
            @JsonProperty("entityType") Optional<? extends ListEntitiesRequestEntityType> entityType,
            @JsonProperty("datasource") Optional<String> datasource,
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("includeFields") Optional<? extends List<ListEntitiesRequestIncludeField>> includeFields,
            @JsonProperty("pageSize") Optional<Long> pageSize,
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("source") Optional<String> source) {
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(entityType, "entityType");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(includeFields, "includeFields");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(source, "source");
        this.filter = filter;
        this.sort = sort;
        this.entityType = entityType;
        this.datasource = datasource;
        this.query = query;
        this.includeFields = includeFields;
        this.pageSize = pageSize;
        this.cursor = cursor;
        this.source = source;
    }
    
    public ListEntitiesRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> filter() {
        return (Optional<List<FacetFilter>>) filter;
    }

    /**
     * Use EntitiesSortOrder enum for SortOptions.sortBy
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SortOptions>> sort() {
        return (Optional<List<SortOptions>>) sort;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListEntitiesRequestEntityType> entityType() {
        return (Optional<ListEntitiesRequestEntityType>) entityType;
    }

    /**
     * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
     */
    @JsonIgnore
    public Optional<String> datasource() {
        return datasource;
    }

    /**
     * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * List of entity fields to return (that aren't returned by default)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListEntitiesRequestIncludeField>> includeFields() {
        return (Optional<List<ListEntitiesRequestIncludeField>>) includeFields;
    }

    /**
     * Hint to the server about how many results to send back. Server may return less.
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    @JsonIgnore
    public Optional<String> source() {
        return source;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListEntitiesRequest withFilter(List<FacetFilter> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.ofNullable(filter);
        return this;
    }

    public ListEntitiesRequest withFilter(Optional<? extends List<FacetFilter>> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    /**
     * Use EntitiesSortOrder enum for SortOptions.sortBy
     */
    public ListEntitiesRequest withSort(List<SortOptions> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    /**
     * Use EntitiesSortOrder enum for SortOptions.sortBy
     */
    public ListEntitiesRequest withSort(Optional<? extends List<SortOptions>> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    public ListEntitiesRequest withEntityType(ListEntitiesRequestEntityType entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = Optional.ofNullable(entityType);
        return this;
    }

    public ListEntitiesRequest withEntityType(Optional<? extends ListEntitiesRequestEntityType> entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = entityType;
        return this;
    }

    /**
     * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
     */
    public ListEntitiesRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = Optional.ofNullable(datasource);
        return this;
    }

    /**
     * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
     */
    public ListEntitiesRequest withDatasource(Optional<String> datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
     */
    public ListEntitiesRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
     */
    public ListEntitiesRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * List of entity fields to return (that aren't returned by default)
     */
    public ListEntitiesRequest withIncludeFields(List<ListEntitiesRequestIncludeField> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = Optional.ofNullable(includeFields);
        return this;
    }

    /**
     * List of entity fields to return (that aren't returned by default)
     */
    public ListEntitiesRequest withIncludeFields(Optional<? extends List<ListEntitiesRequestIncludeField>> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = includeFields;
        return this;
    }

    /**
     * Hint to the server about how many results to send back. Server may return less.
     */
    public ListEntitiesRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Hint to the server about how many results to send back. Server may return less.
     */
    public ListEntitiesRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public ListEntitiesRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    public ListEntitiesRequest withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    public ListEntitiesRequest withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    public ListEntitiesRequest withSource(Optional<String> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListEntitiesRequest other = (ListEntitiesRequest) o;
        return 
            Objects.deepEquals(this.filter, other.filter) &&
            Objects.deepEquals(this.sort, other.sort) &&
            Objects.deepEquals(this.entityType, other.entityType) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.includeFields, other.includeFields) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            filter,
            sort,
            entityType,
            datasource,
            query,
            includeFields,
            pageSize,
            cursor,
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListEntitiesRequest.class,
                "filter", filter,
                "sort", sort,
                "entityType", entityType,
                "datasource", datasource,
                "query", query,
                "includeFields", includeFields,
                "pageSize", pageSize,
                "cursor", cursor,
                "source", source);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<FacetFilter>> filter = Optional.empty();
 
        private Optional<? extends List<SortOptions>> sort = Optional.empty();
 
        private Optional<? extends ListEntitiesRequestEntityType> entityType;
 
        private Optional<String> datasource = Optional.empty();
 
        private Optional<String> query = Optional.empty();
 
        private Optional<? extends List<ListEntitiesRequestIncludeField>> includeFields = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<String> source = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder filter(List<FacetFilter> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        public Builder filter(Optional<? extends List<FacetFilter>> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }

        /**
         * Use EntitiesSortOrder enum for SortOptions.sortBy
         */
        public Builder sort(List<SortOptions> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * Use EntitiesSortOrder enum for SortOptions.sortBy
         */
        public Builder sort(Optional<? extends List<SortOptions>> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        public Builder entityType(ListEntitiesRequestEntityType entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        public Builder entityType(Optional<? extends ListEntitiesRequestEntityType> entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = entityType;
            return this;
        }

        /**
         * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = Optional.ofNullable(datasource);
            return this;
        }

        /**
         * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
         */
        public Builder datasource(Optional<String> datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * List of entity fields to return (that aren't returned by default)
         */
        public Builder includeFields(List<ListEntitiesRequestIncludeField> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * List of entity fields to return (that aren't returned by default)
         */
        public Builder includeFields(Optional<? extends List<ListEntitiesRequestIncludeField>> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = includeFields;
            return this;
        }

        /**
         * Hint to the server about how many results to send back. Server may return less.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Hint to the server about how many results to send back. Server may return less.
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * A string denoting the search surface from which the endpoint is called.
         */
        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * A string denoting the search surface from which the endpoint is called.
         */
        public Builder source(Optional<String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public ListEntitiesRequest build() {
            if (entityType == null) {
                entityType = _SINGLETON_VALUE_EntityType.value();
            }
            return new ListEntitiesRequest(
                filter,
                sort,
                entityType,
                datasource,
                query,
                includeFields,
                pageSize,
                cursor,
                source);
        }

        private static final LazySingletonValue<Optional<? extends ListEntitiesRequestEntityType>> _SINGLETON_VALUE_EntityType =
                new LazySingletonValue<>(
                        "entityType",
                        "\"PEOPLE\"",
                        new TypeReference<Optional<? extends ListEntitiesRequestEntityType>>() {});
    }
}
