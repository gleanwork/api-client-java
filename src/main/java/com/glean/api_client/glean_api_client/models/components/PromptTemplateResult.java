/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class PromptTemplateResult {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promptTemplate")
    private Optional<? extends PromptTemplate> promptTemplate;

    /**
     * An opaque token that represents this prompt template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("favoriteInfo")
    private Optional<? extends FavoriteInfo> favoriteInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runCount")
    private Optional<? extends CountInfo> runCount;

    @JsonCreator
    public PromptTemplateResult(
            @JsonProperty("promptTemplate") Optional<? extends PromptTemplate> promptTemplate,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("favoriteInfo") Optional<? extends FavoriteInfo> favoriteInfo,
            @JsonProperty("runCount") Optional<? extends CountInfo> runCount) {
        Utils.checkNotNull(promptTemplate, "promptTemplate");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(favoriteInfo, "favoriteInfo");
        Utils.checkNotNull(runCount, "runCount");
        this.promptTemplate = promptTemplate;
        this.trackingToken = trackingToken;
        this.favoriteInfo = favoriteInfo;
        this.runCount = runCount;
    }
    
    public PromptTemplateResult() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PromptTemplate> promptTemplate() {
        return (Optional<PromptTemplate>) promptTemplate;
    }

    /**
     * An opaque token that represents this prompt template
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FavoriteInfo> favoriteInfo() {
        return (Optional<FavoriteInfo>) favoriteInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountInfo> runCount() {
        return (Optional<CountInfo>) runCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PromptTemplateResult withPromptTemplate(PromptTemplate promptTemplate) {
        Utils.checkNotNull(promptTemplate, "promptTemplate");
        this.promptTemplate = Optional.ofNullable(promptTemplate);
        return this;
    }

    public PromptTemplateResult withPromptTemplate(Optional<? extends PromptTemplate> promptTemplate) {
        Utils.checkNotNull(promptTemplate, "promptTemplate");
        this.promptTemplate = promptTemplate;
        return this;
    }

    /**
     * An opaque token that represents this prompt template
     */
    public PromptTemplateResult withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this prompt template
     */
    public PromptTemplateResult withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public PromptTemplateResult withFavoriteInfo(FavoriteInfo favoriteInfo) {
        Utils.checkNotNull(favoriteInfo, "favoriteInfo");
        this.favoriteInfo = Optional.ofNullable(favoriteInfo);
        return this;
    }

    public PromptTemplateResult withFavoriteInfo(Optional<? extends FavoriteInfo> favoriteInfo) {
        Utils.checkNotNull(favoriteInfo, "favoriteInfo");
        this.favoriteInfo = favoriteInfo;
        return this;
    }

    public PromptTemplateResult withRunCount(CountInfo runCount) {
        Utils.checkNotNull(runCount, "runCount");
        this.runCount = Optional.ofNullable(runCount);
        return this;
    }

    public PromptTemplateResult withRunCount(Optional<? extends CountInfo> runCount) {
        Utils.checkNotNull(runCount, "runCount");
        this.runCount = runCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PromptTemplateResult other = (PromptTemplateResult) o;
        return 
            Utils.enhancedDeepEquals(this.promptTemplate, other.promptTemplate) &&
            Utils.enhancedDeepEquals(this.trackingToken, other.trackingToken) &&
            Utils.enhancedDeepEquals(this.favoriteInfo, other.favoriteInfo) &&
            Utils.enhancedDeepEquals(this.runCount, other.runCount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            promptTemplate,
            trackingToken,
            favoriteInfo,
            runCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PromptTemplateResult.class,
                "promptTemplate", promptTemplate,
                "trackingToken", trackingToken,
                "favoriteInfo", favoriteInfo,
                "runCount", runCount);
    }
    
    public final static class Builder {
 
        private Optional<? extends PromptTemplate> promptTemplate = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<? extends FavoriteInfo> favoriteInfo = Optional.empty();
 
        private Optional<? extends CountInfo> runCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder promptTemplate(PromptTemplate promptTemplate) {
            Utils.checkNotNull(promptTemplate, "promptTemplate");
            this.promptTemplate = Optional.ofNullable(promptTemplate);
            return this;
        }

        public Builder promptTemplate(Optional<? extends PromptTemplate> promptTemplate) {
            Utils.checkNotNull(promptTemplate, "promptTemplate");
            this.promptTemplate = promptTemplate;
            return this;
        }

        /**
         * An opaque token that represents this prompt template
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this prompt template
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder favoriteInfo(FavoriteInfo favoriteInfo) {
            Utils.checkNotNull(favoriteInfo, "favoriteInfo");
            this.favoriteInfo = Optional.ofNullable(favoriteInfo);
            return this;
        }

        public Builder favoriteInfo(Optional<? extends FavoriteInfo> favoriteInfo) {
            Utils.checkNotNull(favoriteInfo, "favoriteInfo");
            this.favoriteInfo = favoriteInfo;
            return this;
        }

        public Builder runCount(CountInfo runCount) {
            Utils.checkNotNull(runCount, "runCount");
            this.runCount = Optional.ofNullable(runCount);
            return this;
        }

        public Builder runCount(Optional<? extends CountInfo> runCount) {
            Utils.checkNotNull(runCount, "runCount");
            this.runCount = runCount;
            return this;
        }
        
        public PromptTemplateResult build() {
            return new PromptTemplateResult(
                promptTemplate,
                trackingToken,
                favoriteInfo,
                runCount);
        }
    }
}
