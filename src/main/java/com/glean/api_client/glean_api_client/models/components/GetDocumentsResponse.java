/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;

public class GetDocumentsResponse {

    /**
     * The document details or the error if document is not found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    private Optional<? extends Map<String, DocumentOrErrorUnion>> documents;

    @JsonCreator
    public GetDocumentsResponse(
            @JsonProperty("documents") Optional<? extends Map<String, DocumentOrErrorUnion>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
    }
    
    public GetDocumentsResponse() {
        this(Optional.empty());
    }

    /**
     * The document details or the error if document is not found.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, DocumentOrErrorUnion>> documents() {
        return (Optional<Map<String, DocumentOrErrorUnion>>) documents;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The document details or the error if document is not found.
     */
    public GetDocumentsResponse withDocuments(Map<String, DocumentOrErrorUnion> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    /**
     * The document details or the error if document is not found.
     */
    public GetDocumentsResponse withDocuments(Optional<? extends Map<String, DocumentOrErrorUnion>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentsResponse other = (GetDocumentsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.documents, other.documents);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            documents);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentsResponse.class,
                "documents", documents);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, DocumentOrErrorUnion>> documents = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The document details or the error if document is not found.
         */
        public Builder documents(Map<String, DocumentOrErrorUnion> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * The document details or the error if document is not found.
         */
        public Builder documents(Optional<? extends Map<String, DocumentOrErrorUnion>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }
        
        public GetDocumentsResponse build() {
            return new GetDocumentsResponse(
                documents);
        }
    }
}
