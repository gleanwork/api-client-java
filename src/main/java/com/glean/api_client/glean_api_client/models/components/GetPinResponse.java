/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetPinResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pin")
    private Optional<? extends PinDocument> pin;

    @JsonCreator
    public GetPinResponse(
            @JsonProperty("pin") Optional<? extends PinDocument> pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
    }
    
    public GetPinResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PinDocument> pin() {
        return (Optional<PinDocument>) pin;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetPinResponse withPin(PinDocument pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = Optional.ofNullable(pin);
        return this;
    }

    public GetPinResponse withPin(Optional<? extends PinDocument> pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPinResponse other = (GetPinResponse) o;
        return 
            Objects.deepEquals(this.pin, other.pin);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPinResponse.class,
                "pin", pin);
    }
    
    public final static class Builder {
 
        private Optional<? extends PinDocument> pin = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pin(PinDocument pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = Optional.ofNullable(pin);
            return this;
        }

        public Builder pin(Optional<? extends PinDocument> pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = pin;
            return this;
        }
        
        public GetPinResponse build() {
            return new GetPinResponse(
                pin);
        }
    }
}
