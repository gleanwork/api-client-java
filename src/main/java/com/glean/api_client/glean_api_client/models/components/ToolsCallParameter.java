/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class ToolsCallParameter {

    /**
     * The name of the parameter
     */
    @JsonProperty("name")
    private String name;

    /**
     * The value of the parameter (for primitive types)
     */
    @JsonProperty("value")
    private String value;

    /**
     * The value of the parameter (for array types)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends List<ToolsCallParameter>> items;

    /**
     * The value of the parameter (for object types)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private Optional<? extends Map<String, ToolsCallParameter>> properties;

    @JsonCreator
    public ToolsCallParameter(
            @JsonProperty("name") String name,
            @JsonProperty("value") String value,
            @JsonProperty("items") Optional<? extends List<ToolsCallParameter>> items,
            @JsonProperty("properties") Optional<? extends Map<String, ToolsCallParameter>> properties) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(properties, "properties");
        this.name = name;
        this.value = value;
        this.items = items;
        this.properties = properties;
    }
    
    public ToolsCallParameter(
            String name,
            String value) {
        this(name, value, Optional.empty(), Optional.empty());
    }

    /**
     * The name of the parameter
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The value of the parameter (for primitive types)
     */
    @JsonIgnore
    public String value() {
        return value;
    }

    /**
     * The value of the parameter (for array types)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ToolsCallParameter>> items() {
        return (Optional<List<ToolsCallParameter>>) items;
    }

    /**
     * The value of the parameter (for object types)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, ToolsCallParameter>> properties() {
        return (Optional<Map<String, ToolsCallParameter>>) properties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the parameter
     */
    public ToolsCallParameter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The value of the parameter (for primitive types)
     */
    public ToolsCallParameter withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * The value of the parameter (for array types)
     */
    public ToolsCallParameter withItems(List<ToolsCallParameter> items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }

    /**
     * The value of the parameter (for array types)
     */
    public ToolsCallParameter withItems(Optional<? extends List<ToolsCallParameter>> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * The value of the parameter (for object types)
     */
    public ToolsCallParameter withProperties(Map<String, ToolsCallParameter> properties) {
        Utils.checkNotNull(properties, "properties");
        this.properties = Optional.ofNullable(properties);
        return this;
    }

    /**
     * The value of the parameter (for object types)
     */
    public ToolsCallParameter withProperties(Optional<? extends Map<String, ToolsCallParameter>> properties) {
        Utils.checkNotNull(properties, "properties");
        this.properties = properties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolsCallParameter other = (ToolsCallParameter) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.items, other.items) &&
            Objects.deepEquals(this.properties, other.properties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            value,
            items,
            properties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ToolsCallParameter.class,
                "name", name,
                "value", value,
                "items", items,
                "properties", properties);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String value;
 
        private Optional<? extends List<ToolsCallParameter>> items = Optional.empty();
 
        private Optional<? extends Map<String, ToolsCallParameter>> properties = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the parameter
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The value of the parameter (for primitive types)
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * The value of the parameter (for array types)
         */
        public Builder items(List<ToolsCallParameter> items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }

        /**
         * The value of the parameter (for array types)
         */
        public Builder items(Optional<? extends List<ToolsCallParameter>> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        /**
         * The value of the parameter (for object types)
         */
        public Builder properties(Map<String, ToolsCallParameter> properties) {
            Utils.checkNotNull(properties, "properties");
            this.properties = Optional.ofNullable(properties);
            return this;
        }

        /**
         * The value of the parameter (for object types)
         */
        public Builder properties(Optional<? extends Map<String, ToolsCallParameter>> properties) {
            Utils.checkNotNull(properties, "properties");
            this.properties = properties;
            return this;
        }
        
        public ToolsCallParameter build() {
            return new ToolsCallParameter(
                name,
                value,
                items,
                properties);
        }
    }
}
