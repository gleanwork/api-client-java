/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * BulkUploadHistoryEvent
 * 
 * <p>Information about a successful bulk upload
 */
public class BulkUploadHistoryEvent {

    /**
     * The unique ID of the upload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadId")
    private Optional<String> uploadId;

    /**
     * The start time of the upload in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<String> startTime;

    /**
     * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<String> endTime;

    /**
     * The status of the upload, an enum of ACTIVE, SUCCESSFUL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends BulkUploadHistoryEventStatus> status;

    /**
     * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processingState")
    private Optional<? extends ProcessingState> processingState;

    @JsonCreator
    public BulkUploadHistoryEvent(
            @JsonProperty("uploadId") Optional<String> uploadId,
            @JsonProperty("startTime") Optional<String> startTime,
            @JsonProperty("endTime") Optional<String> endTime,
            @JsonProperty("status") Optional<? extends BulkUploadHistoryEventStatus> status,
            @JsonProperty("processingState") Optional<? extends ProcessingState> processingState) {
        Utils.checkNotNull(uploadId, "uploadId");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(processingState, "processingState");
        this.uploadId = uploadId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.status = status;
        this.processingState = processingState;
    }
    
    public BulkUploadHistoryEvent() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The unique ID of the upload
     */
    @JsonIgnore
    public Optional<String> uploadId() {
        return uploadId;
    }

    /**
     * The start time of the upload in ISO 8601 format
     */
    @JsonIgnore
    public Optional<String> startTime() {
        return startTime;
    }

    /**
     * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
     */
    @JsonIgnore
    public Optional<String> endTime() {
        return endTime;
    }

    /**
     * The status of the upload, an enum of ACTIVE, SUCCESSFUL
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BulkUploadHistoryEventStatus> status() {
        return (Optional<BulkUploadHistoryEventStatus>) status;
    }

    /**
     * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProcessingState> processingState() {
        return (Optional<ProcessingState>) processingState;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique ID of the upload
     */
    public BulkUploadHistoryEvent withUploadId(String uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = Optional.ofNullable(uploadId);
        return this;
    }

    /**
     * The unique ID of the upload
     */
    public BulkUploadHistoryEvent withUploadId(Optional<String> uploadId) {
        Utils.checkNotNull(uploadId, "uploadId");
        this.uploadId = uploadId;
        return this;
    }

    /**
     * The start time of the upload in ISO 8601 format
     */
    public BulkUploadHistoryEvent withStartTime(String startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * The start time of the upload in ISO 8601 format
     */
    public BulkUploadHistoryEvent withStartTime(Optional<String> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
     */
    public BulkUploadHistoryEvent withEndTime(String endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
     */
    public BulkUploadHistoryEvent withEndTime(Optional<String> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * The status of the upload, an enum of ACTIVE, SUCCESSFUL
     */
    public BulkUploadHistoryEvent withStatus(BulkUploadHistoryEventStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the upload, an enum of ACTIVE, SUCCESSFUL
     */
    public BulkUploadHistoryEvent withStatus(Optional<? extends BulkUploadHistoryEventStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
     */
    public BulkUploadHistoryEvent withProcessingState(ProcessingState processingState) {
        Utils.checkNotNull(processingState, "processingState");
        this.processingState = Optional.ofNullable(processingState);
        return this;
    }

    /**
     * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
     */
    public BulkUploadHistoryEvent withProcessingState(Optional<? extends ProcessingState> processingState) {
        Utils.checkNotNull(processingState, "processingState");
        this.processingState = processingState;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkUploadHistoryEvent other = (BulkUploadHistoryEvent) o;
        return 
            Utils.enhancedDeepEquals(this.uploadId, other.uploadId) &&
            Utils.enhancedDeepEquals(this.startTime, other.startTime) &&
            Utils.enhancedDeepEquals(this.endTime, other.endTime) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.processingState, other.processingState);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uploadId,
            startTime,
            endTime,
            status,
            processingState);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkUploadHistoryEvent.class,
                "uploadId", uploadId,
                "startTime", startTime,
                "endTime", endTime,
                "status", status,
                "processingState", processingState);
    }
    
    public final static class Builder {
 
        private Optional<String> uploadId = Optional.empty();
 
        private Optional<String> startTime = Optional.empty();
 
        private Optional<String> endTime = Optional.empty();
 
        private Optional<? extends BulkUploadHistoryEventStatus> status = Optional.empty();
 
        private Optional<? extends ProcessingState> processingState = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique ID of the upload
         */
        public Builder uploadId(String uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = Optional.ofNullable(uploadId);
            return this;
        }

        /**
         * The unique ID of the upload
         */
        public Builder uploadId(Optional<String> uploadId) {
            Utils.checkNotNull(uploadId, "uploadId");
            this.uploadId = uploadId;
            return this;
        }

        /**
         * The start time of the upload in ISO 8601 format
         */
        public Builder startTime(String startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * The start time of the upload in ISO 8601 format
         */
        public Builder startTime(Optional<String> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
         */
        public Builder endTime(String endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
         */
        public Builder endTime(Optional<String> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        /**
         * The status of the upload, an enum of ACTIVE, SUCCESSFUL
         */
        public Builder status(BulkUploadHistoryEventStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the upload, an enum of ACTIVE, SUCCESSFUL
         */
        public Builder status(Optional<? extends BulkUploadHistoryEventStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
         */
        public Builder processingState(ProcessingState processingState) {
            Utils.checkNotNull(processingState, "processingState");
            this.processingState = Optional.ofNullable(processingState);
            return this;
        }

        /**
         * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
         */
        public Builder processingState(Optional<? extends ProcessingState> processingState) {
            Utils.checkNotNull(processingState, "processingState");
            this.processingState = processingState;
            return this;
        }
        
        public BulkUploadHistoryEvent build() {
            return new BulkUploadHistoryEvent(
                uploadId,
                startTime,
                endTime,
                status,
                processingState);
        }
    }
}
