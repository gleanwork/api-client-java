/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SensitiveExpression {

    /**
     * Sensitive word, phrase, or regular expression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expression")
    private Optional<String> expression;

    /**
     * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hotwords")
    private Optional<? extends List<Hotword>> hotwords;

    @JsonCreator
    public SensitiveExpression(
            @JsonProperty("expression") Optional<String> expression,
            @JsonProperty("hotwords") Optional<? extends List<Hotword>> hotwords) {
        Utils.checkNotNull(expression, "expression");
        Utils.checkNotNull(hotwords, "hotwords");
        this.expression = expression;
        this.hotwords = hotwords;
    }
    
    public SensitiveExpression() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Sensitive word, phrase, or regular expression.
     */
    @JsonIgnore
    public Optional<String> expression() {
        return expression;
    }

    /**
     * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Hotword>> hotwords() {
        return (Optional<List<Hotword>>) hotwords;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Sensitive word, phrase, or regular expression.
     */
    public SensitiveExpression withExpression(String expression) {
        Utils.checkNotNull(expression, "expression");
        this.expression = Optional.ofNullable(expression);
        return this;
    }

    /**
     * Sensitive word, phrase, or regular expression.
     */
    public SensitiveExpression withExpression(Optional<String> expression) {
        Utils.checkNotNull(expression, "expression");
        this.expression = expression;
        return this;
    }

    /**
     * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
     */
    public SensitiveExpression withHotwords(List<Hotword> hotwords) {
        Utils.checkNotNull(hotwords, "hotwords");
        this.hotwords = Optional.ofNullable(hotwords);
        return this;
    }

    /**
     * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
     */
    public SensitiveExpression withHotwords(Optional<? extends List<Hotword>> hotwords) {
        Utils.checkNotNull(hotwords, "hotwords");
        this.hotwords = hotwords;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SensitiveExpression other = (SensitiveExpression) o;
        return 
            Objects.deepEquals(this.expression, other.expression) &&
            Objects.deepEquals(this.hotwords, other.hotwords);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            expression,
            hotwords);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SensitiveExpression.class,
                "expression", expression,
                "hotwords", hotwords);
    }
    
    public final static class Builder {
 
        private Optional<String> expression = Optional.empty();
 
        private Optional<? extends List<Hotword>> hotwords = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Sensitive word, phrase, or regular expression.
         */
        public Builder expression(String expression) {
            Utils.checkNotNull(expression, "expression");
            this.expression = Optional.ofNullable(expression);
            return this;
        }

        /**
         * Sensitive word, phrase, or regular expression.
         */
        public Builder expression(Optional<String> expression) {
            Utils.checkNotNull(expression, "expression");
            this.expression = expression;
            return this;
        }

        /**
         * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
         */
        public Builder hotwords(List<Hotword> hotwords) {
            Utils.checkNotNull(hotwords, "hotwords");
            this.hotwords = Optional.ofNullable(hotwords);
            return this;
        }

        /**
         * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
         */
        public Builder hotwords(Optional<? extends List<Hotword>> hotwords) {
            Utils.checkNotNull(hotwords, "hotwords");
            this.hotwords = hotwords;
            return this;
        }
        
        public SensitiveExpression build() {
            return new SensitiveExpression(
                expression,
                hotwords);
        }
    }
}
