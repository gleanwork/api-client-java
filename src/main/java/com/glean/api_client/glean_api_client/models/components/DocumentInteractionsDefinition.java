/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * DocumentInteractionsDefinition
 * 
 * <p>describes the interactions on the document
 */
public class DocumentInteractionsDefinition {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numViews")
    private Optional<Long> numViews;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numLikes")
    private Optional<Long> numLikes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numComments")
    private Optional<Long> numComments;

    @JsonCreator
    public DocumentInteractionsDefinition(
            @JsonProperty("numViews") Optional<Long> numViews,
            @JsonProperty("numLikes") Optional<Long> numLikes,
            @JsonProperty("numComments") Optional<Long> numComments) {
        Utils.checkNotNull(numViews, "numViews");
        Utils.checkNotNull(numLikes, "numLikes");
        Utils.checkNotNull(numComments, "numComments");
        this.numViews = numViews;
        this.numLikes = numLikes;
        this.numComments = numComments;
    }
    
    public DocumentInteractionsDefinition() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> numViews() {
        return numViews;
    }

    @JsonIgnore
    public Optional<Long> numLikes() {
        return numLikes;
    }

    @JsonIgnore
    public Optional<Long> numComments() {
        return numComments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DocumentInteractionsDefinition withNumViews(long numViews) {
        Utils.checkNotNull(numViews, "numViews");
        this.numViews = Optional.ofNullable(numViews);
        return this;
    }

    public DocumentInteractionsDefinition withNumViews(Optional<Long> numViews) {
        Utils.checkNotNull(numViews, "numViews");
        this.numViews = numViews;
        return this;
    }

    public DocumentInteractionsDefinition withNumLikes(long numLikes) {
        Utils.checkNotNull(numLikes, "numLikes");
        this.numLikes = Optional.ofNullable(numLikes);
        return this;
    }

    public DocumentInteractionsDefinition withNumLikes(Optional<Long> numLikes) {
        Utils.checkNotNull(numLikes, "numLikes");
        this.numLikes = numLikes;
        return this;
    }

    public DocumentInteractionsDefinition withNumComments(long numComments) {
        Utils.checkNotNull(numComments, "numComments");
        this.numComments = Optional.ofNullable(numComments);
        return this;
    }

    public DocumentInteractionsDefinition withNumComments(Optional<Long> numComments) {
        Utils.checkNotNull(numComments, "numComments");
        this.numComments = numComments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentInteractionsDefinition other = (DocumentInteractionsDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.numViews, other.numViews) &&
            Utils.enhancedDeepEquals(this.numLikes, other.numLikes) &&
            Utils.enhancedDeepEquals(this.numComments, other.numComments);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            numViews,
            numLikes,
            numComments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentInteractionsDefinition.class,
                "numViews", numViews,
                "numLikes", numLikes,
                "numComments", numComments);
    }
    
    public final static class Builder {
 
        private Optional<Long> numViews = Optional.empty();
 
        private Optional<Long> numLikes = Optional.empty();
 
        private Optional<Long> numComments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder numViews(long numViews) {
            Utils.checkNotNull(numViews, "numViews");
            this.numViews = Optional.ofNullable(numViews);
            return this;
        }

        public Builder numViews(Optional<Long> numViews) {
            Utils.checkNotNull(numViews, "numViews");
            this.numViews = numViews;
            return this;
        }

        public Builder numLikes(long numLikes) {
            Utils.checkNotNull(numLikes, "numLikes");
            this.numLikes = Optional.ofNullable(numLikes);
            return this;
        }

        public Builder numLikes(Optional<Long> numLikes) {
            Utils.checkNotNull(numLikes, "numLikes");
            this.numLikes = numLikes;
            return this;
        }

        public Builder numComments(long numComments) {
            Utils.checkNotNull(numComments, "numComments");
            this.numComments = Optional.ofNullable(numComments);
            return this;
        }

        public Builder numComments(Optional<Long> numComments) {
            Utils.checkNotNull(numComments, "numComments");
            this.numComments = numComments;
            return this;
        }
        
        public DocumentInteractionsDefinition build() {
            return new DocumentInteractionsDefinition(
                numViews,
                numLikes,
                numComments);
        }
    }
}
