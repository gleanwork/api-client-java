/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class SeenFeedbackInfo {

    /**
     * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isExplicit")
    private Optional<Boolean> isExplicit;

    @JsonCreator
    public SeenFeedbackInfo(
            @JsonProperty("isExplicit") Optional<Boolean> isExplicit) {
        Utils.checkNotNull(isExplicit, "isExplicit");
        this.isExplicit = isExplicit;
    }
    
    public SeenFeedbackInfo() {
        this(Optional.empty());
    }

    /**
     * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
     */
    @JsonIgnore
    public Optional<Boolean> isExplicit() {
        return isExplicit;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
     */
    public SeenFeedbackInfo withIsExplicit(boolean isExplicit) {
        Utils.checkNotNull(isExplicit, "isExplicit");
        this.isExplicit = Optional.ofNullable(isExplicit);
        return this;
    }

    /**
     * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
     */
    public SeenFeedbackInfo withIsExplicit(Optional<Boolean> isExplicit) {
        Utils.checkNotNull(isExplicit, "isExplicit");
        this.isExplicit = isExplicit;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SeenFeedbackInfo other = (SeenFeedbackInfo) o;
        return 
            Utils.enhancedDeepEquals(this.isExplicit, other.isExplicit);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            isExplicit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SeenFeedbackInfo.class,
                "isExplicit", isExplicit);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isExplicit = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
         */
        public Builder isExplicit(boolean isExplicit) {
            Utils.checkNotNull(isExplicit, "isExplicit");
            this.isExplicit = Optional.ofNullable(isExplicit);
            return this;
        }

        /**
         * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
         */
        public Builder isExplicit(Optional<Boolean> isExplicit) {
            Utils.checkNotNull(isExplicit, "isExplicit");
            this.isExplicit = isExplicit;
            return this;
        }
        
        public SeenFeedbackInfo build() {
            return new SeenFeedbackInfo(
                isExplicit);
        }
    }
}
