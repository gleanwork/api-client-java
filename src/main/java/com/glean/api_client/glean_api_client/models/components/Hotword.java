/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class Hotword {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regex")
    private Optional<String> regex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proximity")
    private Optional<? extends HotwordProximity> proximity;

    @JsonCreator
    public Hotword(
            @JsonProperty("regex") Optional<String> regex,
            @JsonProperty("proximity") Optional<? extends HotwordProximity> proximity) {
        Utils.checkNotNull(regex, "regex");
        Utils.checkNotNull(proximity, "proximity");
        this.regex = regex;
        this.proximity = proximity;
    }
    
    public Hotword() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> regex() {
        return regex;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HotwordProximity> proximity() {
        return (Optional<HotwordProximity>) proximity;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Hotword withRegex(String regex) {
        Utils.checkNotNull(regex, "regex");
        this.regex = Optional.ofNullable(regex);
        return this;
    }

    public Hotword withRegex(Optional<String> regex) {
        Utils.checkNotNull(regex, "regex");
        this.regex = regex;
        return this;
    }

    public Hotword withProximity(HotwordProximity proximity) {
        Utils.checkNotNull(proximity, "proximity");
        this.proximity = Optional.ofNullable(proximity);
        return this;
    }

    public Hotword withProximity(Optional<? extends HotwordProximity> proximity) {
        Utils.checkNotNull(proximity, "proximity");
        this.proximity = proximity;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Hotword other = (Hotword) o;
        return 
            Utils.enhancedDeepEquals(this.regex, other.regex) &&
            Utils.enhancedDeepEquals(this.proximity, other.proximity);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            regex,
            proximity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Hotword.class,
                "regex", regex,
                "proximity", proximity);
    }
    
    public final static class Builder {
 
        private Optional<String> regex = Optional.empty();
 
        private Optional<? extends HotwordProximity> proximity = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder regex(String regex) {
            Utils.checkNotNull(regex, "regex");
            this.regex = Optional.ofNullable(regex);
            return this;
        }

        public Builder regex(Optional<String> regex) {
            Utils.checkNotNull(regex, "regex");
            this.regex = regex;
            return this;
        }

        public Builder proximity(HotwordProximity proximity) {
            Utils.checkNotNull(proximity, "proximity");
            this.proximity = Optional.ofNullable(proximity);
            return this;
        }

        public Builder proximity(Optional<? extends HotwordProximity> proximity) {
            Utils.checkNotNull(proximity, "proximity");
            this.proximity = proximity;
            return this;
        }
        
        public Hotword build() {
            return new Hotword(
                regex,
                proximity);
        }
    }
}
