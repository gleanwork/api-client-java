/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class GetDocPermissionsResponse {

    /**
     * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedUserEmails")
    private Optional<? extends List<String>> allowedUserEmails;

    @JsonCreator
    public GetDocPermissionsResponse(
            @JsonProperty("allowedUserEmails") Optional<? extends List<String>> allowedUserEmails) {
        Utils.checkNotNull(allowedUserEmails, "allowedUserEmails");
        this.allowedUserEmails = allowedUserEmails;
    }
    
    public GetDocPermissionsResponse() {
        this(Optional.empty());
    }

    /**
     * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> allowedUserEmails() {
        return (Optional<List<String>>) allowedUserEmails;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
     */
    public GetDocPermissionsResponse withAllowedUserEmails(List<String> allowedUserEmails) {
        Utils.checkNotNull(allowedUserEmails, "allowedUserEmails");
        this.allowedUserEmails = Optional.ofNullable(allowedUserEmails);
        return this;
    }

    /**
     * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
     */
    public GetDocPermissionsResponse withAllowedUserEmails(Optional<? extends List<String>> allowedUserEmails) {
        Utils.checkNotNull(allowedUserEmails, "allowedUserEmails");
        this.allowedUserEmails = allowedUserEmails;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocPermissionsResponse other = (GetDocPermissionsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.allowedUserEmails, other.allowedUserEmails);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            allowedUserEmails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocPermissionsResponse.class,
                "allowedUserEmails", allowedUserEmails);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> allowedUserEmails = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
         */
        public Builder allowedUserEmails(List<String> allowedUserEmails) {
            Utils.checkNotNull(allowedUserEmails, "allowedUserEmails");
            this.allowedUserEmails = Optional.ofNullable(allowedUserEmails);
            return this;
        }

        /**
         * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
         */
        public Builder allowedUserEmails(Optional<? extends List<String>> allowedUserEmails) {
            Utils.checkNotNull(allowedUserEmails, "allowedUserEmails");
            this.allowedUserEmails = allowedUserEmails;
            return this;
        }
        
        public GetDocPermissionsResponse build() {
            return new GetDocPermissionsResponse(
                allowedUserEmails);
        }
    }
}
