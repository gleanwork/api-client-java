/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CollectionPinMetadata {

    /**
     * The ID of the Collection.
     */
    @JsonProperty("id")
    private long id;

    @JsonProperty("target")
    private CollectionPinTarget target;

    @JsonCreator
    public CollectionPinMetadata(
            @JsonProperty("id") long id,
            @JsonProperty("target") CollectionPinTarget target) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(target, "target");
        this.id = id;
        this.target = target;
    }

    /**
     * The ID of the Collection.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public CollectionPinTarget target() {
        return target;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the Collection.
     */
    public CollectionPinMetadata withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CollectionPinMetadata withTarget(CollectionPinTarget target) {
        Utils.checkNotNull(target, "target");
        this.target = target;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollectionPinMetadata other = (CollectionPinMetadata) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.target, other.target);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            target);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CollectionPinMetadata.class,
                "id", id,
                "target", target);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private CollectionPinTarget target;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the Collection.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder target(CollectionPinTarget target) {
            Utils.checkNotNull(target, "target");
            this.target = target;
            return this;
        }
        
        public CollectionPinMetadata build() {
            return new CollectionPinMetadata(
                id,
                target);
        }
    }
}
