/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * FacetFilterSet
 * 
 * <p>Within a single FacetFilterSet, the filters are treated as AND. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
 */
public class FacetFilterSet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filters")
    private Optional<? extends List<FacetFilter>> filters;

    @JsonCreator
    public FacetFilterSet(
            @JsonProperty("filters") Optional<? extends List<FacetFilter>> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
    }
    
    public FacetFilterSet() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> filters() {
        return (Optional<List<FacetFilter>>) filters;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public FacetFilterSet withFilters(List<FacetFilter> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = Optional.ofNullable(filters);
        return this;
    }

    public FacetFilterSet withFilters(Optional<? extends List<FacetFilter>> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetFilterSet other = (FacetFilterSet) o;
        return 
            Objects.deepEquals(this.filters, other.filters);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            filters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetFilterSet.class,
                "filters", filters);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<FacetFilter>> filters = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder filters(List<FacetFilter> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        public Builder filters(Optional<? extends List<FacetFilter>> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }
        
        public FacetFilterSet build() {
            return new FacetFilterSet(
                filters);
        }
    }
}
