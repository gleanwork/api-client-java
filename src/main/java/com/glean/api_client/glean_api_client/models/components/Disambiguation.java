/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Disambiguation
 * 
 * <p>A disambiguation between multiple entities with the same name
 */
public class Disambiguation {

    /**
     * Name of the ambiguous entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The unique id of the entity in the knowledge graph
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The type of entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends EntityType> type;

    @JsonCreator
    public Disambiguation(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<? extends EntityType> type) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        this.name = name;
        this.id = id;
        this.type = type;
    }
    
    public Disambiguation() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the ambiguous entity
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The unique id of the entity in the knowledge graph
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The type of entity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityType> type() {
        return (Optional<EntityType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the ambiguous entity
     */
    public Disambiguation withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the ambiguous entity
     */
    public Disambiguation withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The unique id of the entity in the knowledge graph
     */
    public Disambiguation withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The unique id of the entity in the knowledge graph
     */
    public Disambiguation withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of entity.
     */
    public Disambiguation withType(EntityType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of entity.
     */
    public Disambiguation withType(Optional<? extends EntityType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Disambiguation other = (Disambiguation) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            id,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Disambiguation.class,
                "name", name,
                "id", id,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends EntityType> type = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the ambiguous entity
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the ambiguous entity
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The unique id of the entity in the knowledge graph
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique id of the entity in the knowledge graph
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The type of entity.
         */
        public Builder type(EntityType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of entity.
         */
        public Builder type(Optional<? extends EntityType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Disambiguation build() {
            return new Disambiguation(
                name,
                id,
                type);
        }
    }
}
