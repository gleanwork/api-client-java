/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class MessageTextBlock {

    @JsonProperty("text")
    private String text;

    @JsonProperty("type")
    private ContentType type;

    @JsonCreator
    public MessageTextBlock(
            @JsonProperty("text") String text,
            @JsonProperty("type") ContentType type) {
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(type, "type");
        this.text = text;
        this.type = type;
    }

    @JsonIgnore
    public String text() {
        return text;
    }

    @JsonIgnore
    public ContentType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public MessageTextBlock withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public MessageTextBlock withType(ContentType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageTextBlock other = (MessageTextBlock) o;
        return 
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            text,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageTextBlock.class,
                "text", text,
                "type", type);
    }
    
    public final static class Builder {
 
        private String text;
 
        private ContentType type;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public Builder type(ContentType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public MessageTextBlock build() {
            return new MessageTextBlock(
                text,
                type);
        }
    }
}
