/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CustomDataValue {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayLabel")
    private Optional<String> displayLabel;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringValue")
    private Optional<String> stringValue;

    /**
     * list of strings for multi-value properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringListValue")
    private Optional<? extends List<String>> stringListValue;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberValue")
    private Optional<Double> numberValue;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booleanValue")
    private Optional<Boolean> booleanValue;

    @JsonCreator
    public CustomDataValue(
            @JsonProperty("displayLabel") Optional<String> displayLabel,
            @JsonProperty("stringValue") Optional<String> stringValue,
            @JsonProperty("stringListValue") Optional<? extends List<String>> stringListValue,
            @JsonProperty("numberValue") Optional<Double> numberValue,
            @JsonProperty("booleanValue") Optional<Boolean> booleanValue) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        Utils.checkNotNull(stringValue, "stringValue");
        Utils.checkNotNull(stringListValue, "stringListValue");
        Utils.checkNotNull(numberValue, "numberValue");
        Utils.checkNotNull(booleanValue, "booleanValue");
        this.displayLabel = displayLabel;
        this.stringValue = stringValue;
        this.stringListValue = stringListValue;
        this.numberValue = numberValue;
        this.booleanValue = booleanValue;
    }
    
    public CustomDataValue() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> displayLabel() {
        return displayLabel;
    }

    @JsonIgnore
    public Optional<String> stringValue() {
        return stringValue;
    }

    /**
     * list of strings for multi-value properties
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> stringListValue() {
        return (Optional<List<String>>) stringListValue;
    }

    @JsonIgnore
    public Optional<Double> numberValue() {
        return numberValue;
    }

    @JsonIgnore
    public Optional<Boolean> booleanValue() {
        return booleanValue;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CustomDataValue withDisplayLabel(String displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = Optional.ofNullable(displayLabel);
        return this;
    }

    public CustomDataValue withDisplayLabel(Optional<String> displayLabel) {
        Utils.checkNotNull(displayLabel, "displayLabel");
        this.displayLabel = displayLabel;
        return this;
    }

    public CustomDataValue withStringValue(String stringValue) {
        Utils.checkNotNull(stringValue, "stringValue");
        this.stringValue = Optional.ofNullable(stringValue);
        return this;
    }

    public CustomDataValue withStringValue(Optional<String> stringValue) {
        Utils.checkNotNull(stringValue, "stringValue");
        this.stringValue = stringValue;
        return this;
    }

    /**
     * list of strings for multi-value properties
     */
    public CustomDataValue withStringListValue(List<String> stringListValue) {
        Utils.checkNotNull(stringListValue, "stringListValue");
        this.stringListValue = Optional.ofNullable(stringListValue);
        return this;
    }

    /**
     * list of strings for multi-value properties
     */
    public CustomDataValue withStringListValue(Optional<? extends List<String>> stringListValue) {
        Utils.checkNotNull(stringListValue, "stringListValue");
        this.stringListValue = stringListValue;
        return this;
    }

    public CustomDataValue withNumberValue(double numberValue) {
        Utils.checkNotNull(numberValue, "numberValue");
        this.numberValue = Optional.ofNullable(numberValue);
        return this;
    }

    public CustomDataValue withNumberValue(Optional<Double> numberValue) {
        Utils.checkNotNull(numberValue, "numberValue");
        this.numberValue = numberValue;
        return this;
    }

    public CustomDataValue withBooleanValue(boolean booleanValue) {
        Utils.checkNotNull(booleanValue, "booleanValue");
        this.booleanValue = Optional.ofNullable(booleanValue);
        return this;
    }

    public CustomDataValue withBooleanValue(Optional<Boolean> booleanValue) {
        Utils.checkNotNull(booleanValue, "booleanValue");
        this.booleanValue = booleanValue;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomDataValue other = (CustomDataValue) o;
        return 
            Objects.deepEquals(this.displayLabel, other.displayLabel) &&
            Objects.deepEquals(this.stringValue, other.stringValue) &&
            Objects.deepEquals(this.stringListValue, other.stringListValue) &&
            Objects.deepEquals(this.numberValue, other.numberValue) &&
            Objects.deepEquals(this.booleanValue, other.booleanValue);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            displayLabel,
            stringValue,
            stringListValue,
            numberValue,
            booleanValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomDataValue.class,
                "displayLabel", displayLabel,
                "stringValue", stringValue,
                "stringListValue", stringListValue,
                "numberValue", numberValue,
                "booleanValue", booleanValue);
    }
    
    public final static class Builder {
 
        private Optional<String> displayLabel = Optional.empty();
 
        private Optional<String> stringValue = Optional.empty();
 
        private Optional<? extends List<String>> stringListValue = Optional.empty();
 
        private Optional<Double> numberValue = Optional.empty();
 
        private Optional<Boolean> booleanValue = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder displayLabel(String displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = Optional.ofNullable(displayLabel);
            return this;
        }

        public Builder displayLabel(Optional<String> displayLabel) {
            Utils.checkNotNull(displayLabel, "displayLabel");
            this.displayLabel = displayLabel;
            return this;
        }

        public Builder stringValue(String stringValue) {
            Utils.checkNotNull(stringValue, "stringValue");
            this.stringValue = Optional.ofNullable(stringValue);
            return this;
        }

        public Builder stringValue(Optional<String> stringValue) {
            Utils.checkNotNull(stringValue, "stringValue");
            this.stringValue = stringValue;
            return this;
        }

        /**
         * list of strings for multi-value properties
         */
        public Builder stringListValue(List<String> stringListValue) {
            Utils.checkNotNull(stringListValue, "stringListValue");
            this.stringListValue = Optional.ofNullable(stringListValue);
            return this;
        }

        /**
         * list of strings for multi-value properties
         */
        public Builder stringListValue(Optional<? extends List<String>> stringListValue) {
            Utils.checkNotNull(stringListValue, "stringListValue");
            this.stringListValue = stringListValue;
            return this;
        }

        public Builder numberValue(double numberValue) {
            Utils.checkNotNull(numberValue, "numberValue");
            this.numberValue = Optional.ofNullable(numberValue);
            return this;
        }

        public Builder numberValue(Optional<Double> numberValue) {
            Utils.checkNotNull(numberValue, "numberValue");
            this.numberValue = numberValue;
            return this;
        }

        public Builder booleanValue(boolean booleanValue) {
            Utils.checkNotNull(booleanValue, "booleanValue");
            this.booleanValue = Optional.ofNullable(booleanValue);
            return this;
        }

        public Builder booleanValue(Optional<Boolean> booleanValue) {
            Utils.checkNotNull(booleanValue, "booleanValue");
            this.booleanValue = booleanValue;
            return this;
        }
        
        public CustomDataValue build() {
            return new CustomDataValue(
                displayLabel,
                stringValue,
                stringListValue,
                numberValue,
                booleanValue);
        }
    }
}
