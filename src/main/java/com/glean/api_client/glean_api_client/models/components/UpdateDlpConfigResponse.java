/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UpdateDlpConfigResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    private Optional<? extends DlpSimpleResult> result;

    /**
     * The id of the report that was just created and run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportId")
    private Optional<String> reportId;

    @JsonCreator
    public UpdateDlpConfigResponse(
            @JsonProperty("result") Optional<? extends DlpSimpleResult> result,
            @JsonProperty("reportId") Optional<String> reportId) {
        Utils.checkNotNull(result, "result");
        Utils.checkNotNull(reportId, "reportId");
        this.result = result;
        this.reportId = reportId;
    }
    
    public UpdateDlpConfigResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpSimpleResult> result() {
        return (Optional<DlpSimpleResult>) result;
    }

    /**
     * The id of the report that was just created and run.
     */
    @JsonIgnore
    public Optional<String> reportId() {
        return reportId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UpdateDlpConfigResponse withResult(DlpSimpleResult result) {
        Utils.checkNotNull(result, "result");
        this.result = Optional.ofNullable(result);
        return this;
    }

    public UpdateDlpConfigResponse withResult(Optional<? extends DlpSimpleResult> result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
        return this;
    }

    /**
     * The id of the report that was just created and run.
     */
    public UpdateDlpConfigResponse withReportId(String reportId) {
        Utils.checkNotNull(reportId, "reportId");
        this.reportId = Optional.ofNullable(reportId);
        return this;
    }

    /**
     * The id of the report that was just created and run.
     */
    public UpdateDlpConfigResponse withReportId(Optional<String> reportId) {
        Utils.checkNotNull(reportId, "reportId");
        this.reportId = reportId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDlpConfigResponse other = (UpdateDlpConfigResponse) o;
        return 
            Objects.deepEquals(this.result, other.result) &&
            Objects.deepEquals(this.reportId, other.reportId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            result,
            reportId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDlpConfigResponse.class,
                "result", result,
                "reportId", reportId);
    }
    
    public final static class Builder {
 
        private Optional<? extends DlpSimpleResult> result = Optional.empty();
 
        private Optional<String> reportId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder result(DlpSimpleResult result) {
            Utils.checkNotNull(result, "result");
            this.result = Optional.ofNullable(result);
            return this;
        }

        public Builder result(Optional<? extends DlpSimpleResult> result) {
            Utils.checkNotNull(result, "result");
            this.result = result;
            return this;
        }

        /**
         * The id of the report that was just created and run.
         */
        public Builder reportId(String reportId) {
            Utils.checkNotNull(reportId, "reportId");
            this.reportId = Optional.ofNullable(reportId);
            return this;
        }

        /**
         * The id of the report that was just created and run.
         */
        public Builder reportId(Optional<String> reportId) {
            Utils.checkNotNull(reportId, "reportId");
            this.reportId = reportId;
            return this;
        }
        
        public UpdateDlpConfigResponse build() {
            return new UpdateDlpConfigResponse(
                result,
                reportId);
        }
    }
}
