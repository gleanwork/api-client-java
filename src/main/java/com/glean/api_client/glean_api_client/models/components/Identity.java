/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Identity {

    /**
     * Information about processing history for the datasource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processingHistory")
    private Optional<? extends List<ProcessingHistoryEvent>> processingHistory;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    private Optional<? extends DebugDatasourceStatusIdentityResponseComponent> users;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private Optional<? extends DebugDatasourceStatusIdentityResponseComponent> groups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberships")
    private Optional<? extends DebugDatasourceStatusIdentityResponseComponent> memberships;

    @JsonCreator
    public Identity(
            @JsonProperty("processingHistory") Optional<? extends List<ProcessingHistoryEvent>> processingHistory,
            @JsonProperty("users") Optional<? extends DebugDatasourceStatusIdentityResponseComponent> users,
            @JsonProperty("groups") Optional<? extends DebugDatasourceStatusIdentityResponseComponent> groups,
            @JsonProperty("memberships") Optional<? extends DebugDatasourceStatusIdentityResponseComponent> memberships) {
        Utils.checkNotNull(processingHistory, "processingHistory");
        Utils.checkNotNull(users, "users");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(memberships, "memberships");
        this.processingHistory = processingHistory;
        this.users = users;
        this.groups = groups;
        this.memberships = memberships;
    }
    
    public Identity() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Information about processing history for the datasource
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProcessingHistoryEvent>> processingHistory() {
        return (Optional<List<ProcessingHistoryEvent>>) processingHistory;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DebugDatasourceStatusIdentityResponseComponent> users() {
        return (Optional<DebugDatasourceStatusIdentityResponseComponent>) users;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DebugDatasourceStatusIdentityResponseComponent> groups() {
        return (Optional<DebugDatasourceStatusIdentityResponseComponent>) groups;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DebugDatasourceStatusIdentityResponseComponent> memberships() {
        return (Optional<DebugDatasourceStatusIdentityResponseComponent>) memberships;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Information about processing history for the datasource
     */
    public Identity withProcessingHistory(List<ProcessingHistoryEvent> processingHistory) {
        Utils.checkNotNull(processingHistory, "processingHistory");
        this.processingHistory = Optional.ofNullable(processingHistory);
        return this;
    }

    /**
     * Information about processing history for the datasource
     */
    public Identity withProcessingHistory(Optional<? extends List<ProcessingHistoryEvent>> processingHistory) {
        Utils.checkNotNull(processingHistory, "processingHistory");
        this.processingHistory = processingHistory;
        return this;
    }

    public Identity withUsers(DebugDatasourceStatusIdentityResponseComponent users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }

    public Identity withUsers(Optional<? extends DebugDatasourceStatusIdentityResponseComponent> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }

    public Identity withGroups(DebugDatasourceStatusIdentityResponseComponent groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = Optional.ofNullable(groups);
        return this;
    }

    public Identity withGroups(Optional<? extends DebugDatasourceStatusIdentityResponseComponent> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    public Identity withMemberships(DebugDatasourceStatusIdentityResponseComponent memberships) {
        Utils.checkNotNull(memberships, "memberships");
        this.memberships = Optional.ofNullable(memberships);
        return this;
    }

    public Identity withMemberships(Optional<? extends DebugDatasourceStatusIdentityResponseComponent> memberships) {
        Utils.checkNotNull(memberships, "memberships");
        this.memberships = memberships;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Identity other = (Identity) o;
        return 
            Objects.deepEquals(this.processingHistory, other.processingHistory) &&
            Objects.deepEquals(this.users, other.users) &&
            Objects.deepEquals(this.groups, other.groups) &&
            Objects.deepEquals(this.memberships, other.memberships);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            processingHistory,
            users,
            groups,
            memberships);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Identity.class,
                "processingHistory", processingHistory,
                "users", users,
                "groups", groups,
                "memberships", memberships);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ProcessingHistoryEvent>> processingHistory = Optional.empty();
 
        private Optional<? extends DebugDatasourceStatusIdentityResponseComponent> users = Optional.empty();
 
        private Optional<? extends DebugDatasourceStatusIdentityResponseComponent> groups = Optional.empty();
 
        private Optional<? extends DebugDatasourceStatusIdentityResponseComponent> memberships = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Information about processing history for the datasource
         */
        public Builder processingHistory(List<ProcessingHistoryEvent> processingHistory) {
            Utils.checkNotNull(processingHistory, "processingHistory");
            this.processingHistory = Optional.ofNullable(processingHistory);
            return this;
        }

        /**
         * Information about processing history for the datasource
         */
        public Builder processingHistory(Optional<? extends List<ProcessingHistoryEvent>> processingHistory) {
            Utils.checkNotNull(processingHistory, "processingHistory");
            this.processingHistory = processingHistory;
            return this;
        }

        public Builder users(DebugDatasourceStatusIdentityResponseComponent users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        public Builder users(Optional<? extends DebugDatasourceStatusIdentityResponseComponent> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }

        public Builder groups(DebugDatasourceStatusIdentityResponseComponent groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = Optional.ofNullable(groups);
            return this;
        }

        public Builder groups(Optional<? extends DebugDatasourceStatusIdentityResponseComponent> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }

        public Builder memberships(DebugDatasourceStatusIdentityResponseComponent memberships) {
            Utils.checkNotNull(memberships, "memberships");
            this.memberships = Optional.ofNullable(memberships);
            return this;
        }

        public Builder memberships(Optional<? extends DebugDatasourceStatusIdentityResponseComponent> memberships) {
            Utils.checkNotNull(memberships, "memberships");
            this.memberships = memberships;
            return this;
        }
        
        public Identity build() {
            return new Identity(
                processingHistory,
                users,
                groups,
                memberships);
        }
    }
}
