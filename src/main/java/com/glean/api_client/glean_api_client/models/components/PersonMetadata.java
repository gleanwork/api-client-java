/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class PersonMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends PersonMetadataType> type;

    /**
     * The first name of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<String> firstName;

    /**
     * The last name of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<String> lastName;

    /**
     * Job title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessUnit")
    private Optional<String> businessUnit;

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<String> department;

    /**
     * Info about the employee's team(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teams")
    private Optional<? extends List<PersonTeam>> teams;

    /**
     * The number of people in this person's department.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departmentCount")
    private Optional<Long> departmentCount;

    /**
     * The user's primary email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * Additional email addresses of this user beyond the primary, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aliasEmails")
    private Optional<? extends List<String>> aliasEmails;

    /**
     * User facing string representing the person's location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;

    /**
     * Detailed location with information about country, state, city etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredLocation")
    private Optional<? extends StructuredLocation> structuredLocation;

    /**
     * Link to a customer's internal profile page. This is set to '#' when no link is desired.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalProfileLink")
    private Optional<String> externalProfileLink;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Optional<? extends Person> manager;

    /**
     * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managementChain")
    private Optional<? extends List<Person>> managementChain;

    /**
     * Phone number as a number string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * The timezone of the person. E.g. "Pacific Daylight Time".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    /**
     * The offset of the person's timezone in seconds from UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezoneOffset")
    private Optional<Long> timezoneOffset;

    /**
     * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    private Optional<String> photoUrl;

    /**
     * The original photo URL of the person's avatar before any edits they made are applied
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uneditedPhotoUrl")
    private Optional<String> uneditedPhotoUrl;

    /**
     * The URL of the person's banner photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bannerUrl")
    private Optional<String> bannerUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reports")
    private Optional<? extends List<Person>> reports;

    /**
     * The date when the employee started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<LocalDate> startDate;

    /**
     * If a former employee, the last date of employment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    private Optional<LocalDate> endDate;

    /**
     * Short biography or mission statement of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bio")
    private Optional<String> bio;

    /**
     * She/her, He/his or other pronoun.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pronoun")
    private Optional<String> pronoun;

    /**
     * The total recursive size of the people reporting to this person, or 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orgSizeCount")
    private Optional<Long> orgSizeCount;

    /**
     * The total number of people who directly report to this person, or 0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directReportsCount")
    private Optional<Long> directReportsCount;

    /**
     * The preferred name of the person, or a nickname.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredName")
    private Optional<String> preferredName;

    /**
     * List of social network profiles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("socialNetwork")
    private Optional<? extends List<SocialNetwork>> socialNetwork;

    /**
     * List of profiles this user has in different datasources / tools that they use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceProfile")
    private Optional<? extends List<DatasourceProfile>> datasourceProfile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("querySuggestions")
    private Optional<? extends QuerySuggestionList> querySuggestions;

    /**
     * List of people and distances to those people from this person. Optionally with metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peopleDistance")
    private Optional<? extends List<PersonDistance>> peopleDistance;

    /**
     * Information regarding the invite status of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inviteInfo")
    private Optional<? extends InviteInfo> inviteInfo;

    /**
     * Whether the user has signed into Glean at least once.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSignedUp")
    private Optional<Boolean> isSignedUp;

    /**
     * The last time the user has used the Glean extension in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastExtensionUse")
    private Optional<OffsetDateTime> lastExtensionUse;

    /**
     * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
     * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends Permissions> permissions;

    /**
     * User customizable fields for additional people information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    private Optional<? extends List<CustomFieldData>> customFields;

    /**
     * The logging id of the person used in scrubbed logs, tracking GA metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loggingId")
    private Optional<String> loggingId;

    /**
     * Percentage of the company that started strictly after this person. Between [0,100).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDatePercentile")
    private Optional<Float> startDatePercentile;

    /**
     * Intervals of busy time for this person, along with the type of event they're busy with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("busyEvents")
    private Optional<? extends List<AnonymousEvent>> busyEvents;

    /**
     * flag settings to indicate user profile settings for certain items
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileBoolSettings")
    private Optional<? extends Map<String, Boolean>> profileBoolSettings;

    /**
     * The badges that a user has earned over their lifetime.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badges")
    private Optional<? extends List<Badge>> badges;

    /**
     * Whether this person is a "root" node in their organization's hierarchy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOrgRoot")
    private Optional<Boolean> isOrgRoot;

    @JsonCreator
    public PersonMetadata(
            @JsonProperty("type") Optional<? extends PersonMetadataType> type,
            @JsonProperty("firstName") Optional<String> firstName,
            @JsonProperty("lastName") Optional<String> lastName,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("businessUnit") Optional<String> businessUnit,
            @JsonProperty("department") Optional<String> department,
            @JsonProperty("teams") Optional<? extends List<PersonTeam>> teams,
            @JsonProperty("departmentCount") Optional<Long> departmentCount,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("aliasEmails") Optional<? extends List<String>> aliasEmails,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("structuredLocation") Optional<? extends StructuredLocation> structuredLocation,
            @JsonProperty("externalProfileLink") Optional<String> externalProfileLink,
            @JsonProperty("manager") Optional<? extends Person> manager,
            @JsonProperty("managementChain") Optional<? extends List<Person>> managementChain,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("timezoneOffset") Optional<Long> timezoneOffset,
            @JsonProperty("photoUrl") Optional<String> photoUrl,
            @JsonProperty("uneditedPhotoUrl") Optional<String> uneditedPhotoUrl,
            @JsonProperty("bannerUrl") Optional<String> bannerUrl,
            @JsonProperty("reports") Optional<? extends List<Person>> reports,
            @JsonProperty("startDate") Optional<LocalDate> startDate,
            @JsonProperty("endDate") Optional<LocalDate> endDate,
            @JsonProperty("bio") Optional<String> bio,
            @JsonProperty("pronoun") Optional<String> pronoun,
            @JsonProperty("orgSizeCount") Optional<Long> orgSizeCount,
            @JsonProperty("directReportsCount") Optional<Long> directReportsCount,
            @JsonProperty("preferredName") Optional<String> preferredName,
            @JsonProperty("socialNetwork") Optional<? extends List<SocialNetwork>> socialNetwork,
            @JsonProperty("datasourceProfile") Optional<? extends List<DatasourceProfile>> datasourceProfile,
            @JsonProperty("querySuggestions") Optional<? extends QuerySuggestionList> querySuggestions,
            @JsonProperty("peopleDistance") Optional<? extends List<PersonDistance>> peopleDistance,
            @JsonProperty("inviteInfo") Optional<? extends InviteInfo> inviteInfo,
            @JsonProperty("isSignedUp") Optional<Boolean> isSignedUp,
            @JsonProperty("lastExtensionUse") Optional<OffsetDateTime> lastExtensionUse,
            @JsonProperty("permissions") Optional<? extends Permissions> permissions,
            @JsonProperty("customFields") Optional<? extends List<CustomFieldData>> customFields,
            @JsonProperty("loggingId") Optional<String> loggingId,
            @JsonProperty("startDatePercentile") Optional<Float> startDatePercentile,
            @JsonProperty("busyEvents") Optional<? extends List<AnonymousEvent>> busyEvents,
            @JsonProperty("profileBoolSettings") Optional<? extends Map<String, Boolean>> profileBoolSettings,
            @JsonProperty("badges") Optional<? extends List<Badge>> badges,
            @JsonProperty("isOrgRoot") Optional<Boolean> isOrgRoot) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(businessUnit, "businessUnit");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(teams, "teams");
        Utils.checkNotNull(departmentCount, "departmentCount");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(aliasEmails, "aliasEmails");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(structuredLocation, "structuredLocation");
        Utils.checkNotNull(externalProfileLink, "externalProfileLink");
        Utils.checkNotNull(manager, "manager");
        Utils.checkNotNull(managementChain, "managementChain");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(uneditedPhotoUrl, "uneditedPhotoUrl");
        Utils.checkNotNull(bannerUrl, "bannerUrl");
        Utils.checkNotNull(reports, "reports");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(bio, "bio");
        Utils.checkNotNull(pronoun, "pronoun");
        Utils.checkNotNull(orgSizeCount, "orgSizeCount");
        Utils.checkNotNull(directReportsCount, "directReportsCount");
        Utils.checkNotNull(preferredName, "preferredName");
        Utils.checkNotNull(socialNetwork, "socialNetwork");
        Utils.checkNotNull(datasourceProfile, "datasourceProfile");
        Utils.checkNotNull(querySuggestions, "querySuggestions");
        Utils.checkNotNull(peopleDistance, "peopleDistance");
        Utils.checkNotNull(inviteInfo, "inviteInfo");
        Utils.checkNotNull(isSignedUp, "isSignedUp");
        Utils.checkNotNull(lastExtensionUse, "lastExtensionUse");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(loggingId, "loggingId");
        Utils.checkNotNull(startDatePercentile, "startDatePercentile");
        Utils.checkNotNull(busyEvents, "busyEvents");
        Utils.checkNotNull(profileBoolSettings, "profileBoolSettings");
        Utils.checkNotNull(badges, "badges");
        Utils.checkNotNull(isOrgRoot, "isOrgRoot");
        this.type = type;
        this.firstName = firstName;
        this.lastName = lastName;
        this.title = title;
        this.businessUnit = businessUnit;
        this.department = department;
        this.teams = teams;
        this.departmentCount = departmentCount;
        this.email = email;
        this.aliasEmails = aliasEmails;
        this.location = location;
        this.structuredLocation = structuredLocation;
        this.externalProfileLink = externalProfileLink;
        this.manager = manager;
        this.managementChain = managementChain;
        this.phone = phone;
        this.timezone = timezone;
        this.timezoneOffset = timezoneOffset;
        this.photoUrl = photoUrl;
        this.uneditedPhotoUrl = uneditedPhotoUrl;
        this.bannerUrl = bannerUrl;
        this.reports = reports;
        this.startDate = startDate;
        this.endDate = endDate;
        this.bio = bio;
        this.pronoun = pronoun;
        this.orgSizeCount = orgSizeCount;
        this.directReportsCount = directReportsCount;
        this.preferredName = preferredName;
        this.socialNetwork = socialNetwork;
        this.datasourceProfile = datasourceProfile;
        this.querySuggestions = querySuggestions;
        this.peopleDistance = peopleDistance;
        this.inviteInfo = inviteInfo;
        this.isSignedUp = isSignedUp;
        this.lastExtensionUse = lastExtensionUse;
        this.permissions = permissions;
        this.customFields = customFields;
        this.loggingId = loggingId;
        this.startDatePercentile = startDatePercentile;
        this.busyEvents = busyEvents;
        this.profileBoolSettings = profileBoolSettings;
        this.badges = badges;
        this.isOrgRoot = isOrgRoot;
    }
    
    public PersonMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PersonMetadataType> type() {
        return (Optional<PersonMetadataType>) type;
    }

    /**
     * The first name of the person
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the person
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * Job title.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonIgnore
    public Optional<String> businessUnit() {
        return businessUnit;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonIgnore
    public Optional<String> department() {
        return department;
    }

    /**
     * Info about the employee's team(s).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PersonTeam>> teams() {
        return (Optional<List<PersonTeam>>) teams;
    }

    /**
     * The number of people in this person's department.
     */
    @JsonIgnore
    public Optional<Long> departmentCount() {
        return departmentCount;
    }

    /**
     * The user's primary email address
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * Additional email addresses of this user beyond the primary, if any.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> aliasEmails() {
        return (Optional<List<String>>) aliasEmails;
    }

    /**
     * User facing string representing the person's location.
     */
    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    /**
     * Detailed location with information about country, state, city etc.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StructuredLocation> structuredLocation() {
        return (Optional<StructuredLocation>) structuredLocation;
    }

    /**
     * Link to a customer's internal profile page. This is set to '#' when no link is desired.
     */
    @JsonIgnore
    public Optional<String> externalProfileLink() {
        return externalProfileLink;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> manager() {
        return (Optional<Person>) manager;
    }

    /**
     * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> managementChain() {
        return (Optional<List<Person>>) managementChain;
    }

    /**
     * Phone number as a number string.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * The timezone of the person. E.g. "Pacific Daylight Time".
     */
    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    /**
     * The offset of the person's timezone in seconds from UTC.
     */
    @JsonIgnore
    public Optional<Long> timezoneOffset() {
        return timezoneOffset;
    }

    /**
     * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    @JsonIgnore
    public Optional<String> photoUrl() {
        return photoUrl;
    }

    /**
     * The original photo URL of the person's avatar before any edits they made are applied
     */
    @JsonIgnore
    public Optional<String> uneditedPhotoUrl() {
        return uneditedPhotoUrl;
    }

    /**
     * The URL of the person's banner photo.
     */
    @JsonIgnore
    public Optional<String> bannerUrl() {
        return bannerUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Person>> reports() {
        return (Optional<List<Person>>) reports;
    }

    /**
     * The date when the employee started.
     */
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return startDate;
    }

    /**
     * If a former employee, the last date of employment.
     */
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return endDate;
    }

    /**
     * Short biography or mission statement of the employee.
     */
    @JsonIgnore
    public Optional<String> bio() {
        return bio;
    }

    /**
     * She/her, He/his or other pronoun.
     */
    @JsonIgnore
    public Optional<String> pronoun() {
        return pronoun;
    }

    /**
     * The total recursive size of the people reporting to this person, or 1
     */
    @JsonIgnore
    public Optional<Long> orgSizeCount() {
        return orgSizeCount;
    }

    /**
     * The total number of people who directly report to this person, or 0
     */
    @JsonIgnore
    public Optional<Long> directReportsCount() {
        return directReportsCount;
    }

    /**
     * The preferred name of the person, or a nickname.
     */
    @JsonIgnore
    public Optional<String> preferredName() {
        return preferredName;
    }

    /**
     * List of social network profiles.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialNetwork>> socialNetwork() {
        return (Optional<List<SocialNetwork>>) socialNetwork;
    }

    /**
     * List of profiles this user has in different datasources / tools that they use.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DatasourceProfile>> datasourceProfile() {
        return (Optional<List<DatasourceProfile>>) datasourceProfile;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuerySuggestionList> querySuggestions() {
        return (Optional<QuerySuggestionList>) querySuggestions;
    }

    /**
     * List of people and distances to those people from this person. Optionally with metadata.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PersonDistance>> peopleDistance() {
        return (Optional<List<PersonDistance>>) peopleDistance;
    }

    /**
     * Information regarding the invite status of a person.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InviteInfo> inviteInfo() {
        return (Optional<InviteInfo>) inviteInfo;
    }

    /**
     * Whether the user has signed into Glean at least once.
     */
    @JsonIgnore
    public Optional<Boolean> isSignedUp() {
        return isSignedUp;
    }

    /**
     * The last time the user has used the Glean extension in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastExtensionUse() {
        return lastExtensionUse;
    }

    /**
     * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
     * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Permissions> permissions() {
        return (Optional<Permissions>) permissions;
    }

    /**
     * User customizable fields for additional people information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomFieldData>> customFields() {
        return (Optional<List<CustomFieldData>>) customFields;
    }

    /**
     * The logging id of the person used in scrubbed logs, tracking GA metrics.
     */
    @JsonIgnore
    public Optional<String> loggingId() {
        return loggingId;
    }

    /**
     * Percentage of the company that started strictly after this person. Between [0,100).
     */
    @JsonIgnore
    public Optional<Float> startDatePercentile() {
        return startDatePercentile;
    }

    /**
     * Intervals of busy time for this person, along with the type of event they're busy with.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AnonymousEvent>> busyEvents() {
        return (Optional<List<AnonymousEvent>>) busyEvents;
    }

    /**
     * flag settings to indicate user profile settings for certain items
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Boolean>> profileBoolSettings() {
        return (Optional<Map<String, Boolean>>) profileBoolSettings;
    }

    /**
     * The badges that a user has earned over their lifetime.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Badge>> badges() {
        return (Optional<List<Badge>>) badges;
    }

    /**
     * Whether this person is a "root" node in their organization's hierarchy.
     */
    @JsonIgnore
    public Optional<Boolean> isOrgRoot() {
        return isOrgRoot;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PersonMetadata withType(PersonMetadataType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public PersonMetadata withType(Optional<? extends PersonMetadataType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The first name of the person
     */
    public PersonMetadata withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The first name of the person
     */
    public PersonMetadata withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the person
     */
    public PersonMetadata withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The last name of the person
     */
    public PersonMetadata withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Job title.
     */
    public PersonMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Job title.
     */
    public PersonMetadata withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public PersonMetadata withBusinessUnit(String businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = Optional.ofNullable(businessUnit);
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public PersonMetadata withBusinessUnit(Optional<String> businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = businessUnit;
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public PersonMetadata withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public PersonMetadata withDepartment(Optional<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * Info about the employee's team(s).
     */
    public PersonMetadata withTeams(List<PersonTeam> teams) {
        Utils.checkNotNull(teams, "teams");
        this.teams = Optional.ofNullable(teams);
        return this;
    }

    /**
     * Info about the employee's team(s).
     */
    public PersonMetadata withTeams(Optional<? extends List<PersonTeam>> teams) {
        Utils.checkNotNull(teams, "teams");
        this.teams = teams;
        return this;
    }

    /**
     * The number of people in this person's department.
     */
    public PersonMetadata withDepartmentCount(long departmentCount) {
        Utils.checkNotNull(departmentCount, "departmentCount");
        this.departmentCount = Optional.ofNullable(departmentCount);
        return this;
    }

    /**
     * The number of people in this person's department.
     */
    public PersonMetadata withDepartmentCount(Optional<Long> departmentCount) {
        Utils.checkNotNull(departmentCount, "departmentCount");
        this.departmentCount = departmentCount;
        return this;
    }

    /**
     * The user's primary email address
     */
    public PersonMetadata withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The user's primary email address
     */
    public PersonMetadata withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Additional email addresses of this user beyond the primary, if any.
     */
    public PersonMetadata withAliasEmails(List<String> aliasEmails) {
        Utils.checkNotNull(aliasEmails, "aliasEmails");
        this.aliasEmails = Optional.ofNullable(aliasEmails);
        return this;
    }

    /**
     * Additional email addresses of this user beyond the primary, if any.
     */
    public PersonMetadata withAliasEmails(Optional<? extends List<String>> aliasEmails) {
        Utils.checkNotNull(aliasEmails, "aliasEmails");
        this.aliasEmails = aliasEmails;
        return this;
    }

    /**
     * User facing string representing the person's location.
     */
    public PersonMetadata withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    /**
     * User facing string representing the person's location.
     */
    public PersonMetadata withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * Detailed location with information about country, state, city etc.
     */
    public PersonMetadata withStructuredLocation(StructuredLocation structuredLocation) {
        Utils.checkNotNull(structuredLocation, "structuredLocation");
        this.structuredLocation = Optional.ofNullable(structuredLocation);
        return this;
    }

    /**
     * Detailed location with information about country, state, city etc.
     */
    public PersonMetadata withStructuredLocation(Optional<? extends StructuredLocation> structuredLocation) {
        Utils.checkNotNull(structuredLocation, "structuredLocation");
        this.structuredLocation = structuredLocation;
        return this;
    }

    /**
     * Link to a customer's internal profile page. This is set to '#' when no link is desired.
     */
    public PersonMetadata withExternalProfileLink(String externalProfileLink) {
        Utils.checkNotNull(externalProfileLink, "externalProfileLink");
        this.externalProfileLink = Optional.ofNullable(externalProfileLink);
        return this;
    }

    /**
     * Link to a customer's internal profile page. This is set to '#' when no link is desired.
     */
    public PersonMetadata withExternalProfileLink(Optional<String> externalProfileLink) {
        Utils.checkNotNull(externalProfileLink, "externalProfileLink");
        this.externalProfileLink = externalProfileLink;
        return this;
    }

    public PersonMetadata withManager(Person manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = Optional.ofNullable(manager);
        return this;
    }

    public PersonMetadata withManager(Optional<? extends Person> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }

    /**
     * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
     */
    public PersonMetadata withManagementChain(List<Person> managementChain) {
        Utils.checkNotNull(managementChain, "managementChain");
        this.managementChain = Optional.ofNullable(managementChain);
        return this;
    }

    /**
     * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
     */
    public PersonMetadata withManagementChain(Optional<? extends List<Person>> managementChain) {
        Utils.checkNotNull(managementChain, "managementChain");
        this.managementChain = managementChain;
        return this;
    }

    /**
     * Phone number as a number string.
     */
    public PersonMetadata withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Phone number as a number string.
     */
    public PersonMetadata withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * The timezone of the person. E.g. "Pacific Daylight Time".
     */
    public PersonMetadata withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    /**
     * The timezone of the person. E.g. "Pacific Daylight Time".
     */
    public PersonMetadata withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    /**
     * The offset of the person's timezone in seconds from UTC.
     */
    public PersonMetadata withTimezoneOffset(long timezoneOffset) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        this.timezoneOffset = Optional.ofNullable(timezoneOffset);
        return this;
    }

    /**
     * The offset of the person's timezone in seconds from UTC.
     */
    public PersonMetadata withTimezoneOffset(Optional<Long> timezoneOffset) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        this.timezoneOffset = timezoneOffset;
        return this;
    }

    /**
     * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public PersonMetadata withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = Optional.ofNullable(photoUrl);
        return this;
    }

    /**
     * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    public PersonMetadata withPhotoUrl(Optional<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * The original photo URL of the person's avatar before any edits they made are applied
     */
    public PersonMetadata withUneditedPhotoUrl(String uneditedPhotoUrl) {
        Utils.checkNotNull(uneditedPhotoUrl, "uneditedPhotoUrl");
        this.uneditedPhotoUrl = Optional.ofNullable(uneditedPhotoUrl);
        return this;
    }

    /**
     * The original photo URL of the person's avatar before any edits they made are applied
     */
    public PersonMetadata withUneditedPhotoUrl(Optional<String> uneditedPhotoUrl) {
        Utils.checkNotNull(uneditedPhotoUrl, "uneditedPhotoUrl");
        this.uneditedPhotoUrl = uneditedPhotoUrl;
        return this;
    }

    /**
     * The URL of the person's banner photo.
     */
    public PersonMetadata withBannerUrl(String bannerUrl) {
        Utils.checkNotNull(bannerUrl, "bannerUrl");
        this.bannerUrl = Optional.ofNullable(bannerUrl);
        return this;
    }

    /**
     * The URL of the person's banner photo.
     */
    public PersonMetadata withBannerUrl(Optional<String> bannerUrl) {
        Utils.checkNotNull(bannerUrl, "bannerUrl");
        this.bannerUrl = bannerUrl;
        return this;
    }

    public PersonMetadata withReports(List<Person> reports) {
        Utils.checkNotNull(reports, "reports");
        this.reports = Optional.ofNullable(reports);
        return this;
    }

    public PersonMetadata withReports(Optional<? extends List<Person>> reports) {
        Utils.checkNotNull(reports, "reports");
        this.reports = reports;
        return this;
    }

    /**
     * The date when the employee started.
     */
    public PersonMetadata withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date when the employee started.
     */
    public PersonMetadata withStartDate(Optional<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * If a former employee, the last date of employment.
     */
    public PersonMetadata withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * If a former employee, the last date of employment.
     */
    public PersonMetadata withEndDate(Optional<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Short biography or mission statement of the employee.
     */
    public PersonMetadata withBio(String bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = Optional.ofNullable(bio);
        return this;
    }

    /**
     * Short biography or mission statement of the employee.
     */
    public PersonMetadata withBio(Optional<String> bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = bio;
        return this;
    }

    /**
     * She/her, He/his or other pronoun.
     */
    public PersonMetadata withPronoun(String pronoun) {
        Utils.checkNotNull(pronoun, "pronoun");
        this.pronoun = Optional.ofNullable(pronoun);
        return this;
    }

    /**
     * She/her, He/his or other pronoun.
     */
    public PersonMetadata withPronoun(Optional<String> pronoun) {
        Utils.checkNotNull(pronoun, "pronoun");
        this.pronoun = pronoun;
        return this;
    }

    /**
     * The total recursive size of the people reporting to this person, or 1
     */
    public PersonMetadata withOrgSizeCount(long orgSizeCount) {
        Utils.checkNotNull(orgSizeCount, "orgSizeCount");
        this.orgSizeCount = Optional.ofNullable(orgSizeCount);
        return this;
    }

    /**
     * The total recursive size of the people reporting to this person, or 1
     */
    public PersonMetadata withOrgSizeCount(Optional<Long> orgSizeCount) {
        Utils.checkNotNull(orgSizeCount, "orgSizeCount");
        this.orgSizeCount = orgSizeCount;
        return this;
    }

    /**
     * The total number of people who directly report to this person, or 0
     */
    public PersonMetadata withDirectReportsCount(long directReportsCount) {
        Utils.checkNotNull(directReportsCount, "directReportsCount");
        this.directReportsCount = Optional.ofNullable(directReportsCount);
        return this;
    }

    /**
     * The total number of people who directly report to this person, or 0
     */
    public PersonMetadata withDirectReportsCount(Optional<Long> directReportsCount) {
        Utils.checkNotNull(directReportsCount, "directReportsCount");
        this.directReportsCount = directReportsCount;
        return this;
    }

    /**
     * The preferred name of the person, or a nickname.
     */
    public PersonMetadata withPreferredName(String preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = Optional.ofNullable(preferredName);
        return this;
    }

    /**
     * The preferred name of the person, or a nickname.
     */
    public PersonMetadata withPreferredName(Optional<String> preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = preferredName;
        return this;
    }

    /**
     * List of social network profiles.
     */
    public PersonMetadata withSocialNetwork(List<SocialNetwork> socialNetwork) {
        Utils.checkNotNull(socialNetwork, "socialNetwork");
        this.socialNetwork = Optional.ofNullable(socialNetwork);
        return this;
    }

    /**
     * List of social network profiles.
     */
    public PersonMetadata withSocialNetwork(Optional<? extends List<SocialNetwork>> socialNetwork) {
        Utils.checkNotNull(socialNetwork, "socialNetwork");
        this.socialNetwork = socialNetwork;
        return this;
    }

    /**
     * List of profiles this user has in different datasources / tools that they use.
     */
    public PersonMetadata withDatasourceProfile(List<DatasourceProfile> datasourceProfile) {
        Utils.checkNotNull(datasourceProfile, "datasourceProfile");
        this.datasourceProfile = Optional.ofNullable(datasourceProfile);
        return this;
    }

    /**
     * List of profiles this user has in different datasources / tools that they use.
     */
    public PersonMetadata withDatasourceProfile(Optional<? extends List<DatasourceProfile>> datasourceProfile) {
        Utils.checkNotNull(datasourceProfile, "datasourceProfile");
        this.datasourceProfile = datasourceProfile;
        return this;
    }

    public PersonMetadata withQuerySuggestions(QuerySuggestionList querySuggestions) {
        Utils.checkNotNull(querySuggestions, "querySuggestions");
        this.querySuggestions = Optional.ofNullable(querySuggestions);
        return this;
    }

    public PersonMetadata withQuerySuggestions(Optional<? extends QuerySuggestionList> querySuggestions) {
        Utils.checkNotNull(querySuggestions, "querySuggestions");
        this.querySuggestions = querySuggestions;
        return this;
    }

    /**
     * List of people and distances to those people from this person. Optionally with metadata.
     */
    public PersonMetadata withPeopleDistance(List<PersonDistance> peopleDistance) {
        Utils.checkNotNull(peopleDistance, "peopleDistance");
        this.peopleDistance = Optional.ofNullable(peopleDistance);
        return this;
    }

    /**
     * List of people and distances to those people from this person. Optionally with metadata.
     */
    public PersonMetadata withPeopleDistance(Optional<? extends List<PersonDistance>> peopleDistance) {
        Utils.checkNotNull(peopleDistance, "peopleDistance");
        this.peopleDistance = peopleDistance;
        return this;
    }

    /**
     * Information regarding the invite status of a person.
     */
    public PersonMetadata withInviteInfo(InviteInfo inviteInfo) {
        Utils.checkNotNull(inviteInfo, "inviteInfo");
        this.inviteInfo = Optional.ofNullable(inviteInfo);
        return this;
    }

    /**
     * Information regarding the invite status of a person.
     */
    public PersonMetadata withInviteInfo(Optional<? extends InviteInfo> inviteInfo) {
        Utils.checkNotNull(inviteInfo, "inviteInfo");
        this.inviteInfo = inviteInfo;
        return this;
    }

    /**
     * Whether the user has signed into Glean at least once.
     */
    public PersonMetadata withIsSignedUp(boolean isSignedUp) {
        Utils.checkNotNull(isSignedUp, "isSignedUp");
        this.isSignedUp = Optional.ofNullable(isSignedUp);
        return this;
    }

    /**
     * Whether the user has signed into Glean at least once.
     */
    public PersonMetadata withIsSignedUp(Optional<Boolean> isSignedUp) {
        Utils.checkNotNull(isSignedUp, "isSignedUp");
        this.isSignedUp = isSignedUp;
        return this;
    }

    /**
     * The last time the user has used the Glean extension in ISO 8601 format.
     */
    public PersonMetadata withLastExtensionUse(OffsetDateTime lastExtensionUse) {
        Utils.checkNotNull(lastExtensionUse, "lastExtensionUse");
        this.lastExtensionUse = Optional.ofNullable(lastExtensionUse);
        return this;
    }

    /**
     * The last time the user has used the Glean extension in ISO 8601 format.
     */
    public PersonMetadata withLastExtensionUse(Optional<OffsetDateTime> lastExtensionUse) {
        Utils.checkNotNull(lastExtensionUse, "lastExtensionUse");
        this.lastExtensionUse = lastExtensionUse;
        return this;
    }

    /**
     * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
     * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
     */
    public PersonMetadata withPermissions(Permissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    /**
     * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
     * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
     */
    public PersonMetadata withPermissions(Optional<? extends Permissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * User customizable fields for additional people information.
     */
    public PersonMetadata withCustomFields(List<CustomFieldData> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    /**
     * User customizable fields for additional people information.
     */
    public PersonMetadata withCustomFields(Optional<? extends List<CustomFieldData>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * The logging id of the person used in scrubbed logs, tracking GA metrics.
     */
    public PersonMetadata withLoggingId(String loggingId) {
        Utils.checkNotNull(loggingId, "loggingId");
        this.loggingId = Optional.ofNullable(loggingId);
        return this;
    }

    /**
     * The logging id of the person used in scrubbed logs, tracking GA metrics.
     */
    public PersonMetadata withLoggingId(Optional<String> loggingId) {
        Utils.checkNotNull(loggingId, "loggingId");
        this.loggingId = loggingId;
        return this;
    }

    /**
     * Percentage of the company that started strictly after this person. Between [0,100).
     */
    public PersonMetadata withStartDatePercentile(float startDatePercentile) {
        Utils.checkNotNull(startDatePercentile, "startDatePercentile");
        this.startDatePercentile = Optional.ofNullable(startDatePercentile);
        return this;
    }

    /**
     * Percentage of the company that started strictly after this person. Between [0,100).
     */
    public PersonMetadata withStartDatePercentile(Optional<Float> startDatePercentile) {
        Utils.checkNotNull(startDatePercentile, "startDatePercentile");
        this.startDatePercentile = startDatePercentile;
        return this;
    }

    /**
     * Intervals of busy time for this person, along with the type of event they're busy with.
     */
    public PersonMetadata withBusyEvents(List<AnonymousEvent> busyEvents) {
        Utils.checkNotNull(busyEvents, "busyEvents");
        this.busyEvents = Optional.ofNullable(busyEvents);
        return this;
    }

    /**
     * Intervals of busy time for this person, along with the type of event they're busy with.
     */
    public PersonMetadata withBusyEvents(Optional<? extends List<AnonymousEvent>> busyEvents) {
        Utils.checkNotNull(busyEvents, "busyEvents");
        this.busyEvents = busyEvents;
        return this;
    }

    /**
     * flag settings to indicate user profile settings for certain items
     */
    public PersonMetadata withProfileBoolSettings(Map<String, Boolean> profileBoolSettings) {
        Utils.checkNotNull(profileBoolSettings, "profileBoolSettings");
        this.profileBoolSettings = Optional.ofNullable(profileBoolSettings);
        return this;
    }

    /**
     * flag settings to indicate user profile settings for certain items
     */
    public PersonMetadata withProfileBoolSettings(Optional<? extends Map<String, Boolean>> profileBoolSettings) {
        Utils.checkNotNull(profileBoolSettings, "profileBoolSettings");
        this.profileBoolSettings = profileBoolSettings;
        return this;
    }

    /**
     * The badges that a user has earned over their lifetime.
     */
    public PersonMetadata withBadges(List<Badge> badges) {
        Utils.checkNotNull(badges, "badges");
        this.badges = Optional.ofNullable(badges);
        return this;
    }

    /**
     * The badges that a user has earned over their lifetime.
     */
    public PersonMetadata withBadges(Optional<? extends List<Badge>> badges) {
        Utils.checkNotNull(badges, "badges");
        this.badges = badges;
        return this;
    }

    /**
     * Whether this person is a "root" node in their organization's hierarchy.
     */
    public PersonMetadata withIsOrgRoot(boolean isOrgRoot) {
        Utils.checkNotNull(isOrgRoot, "isOrgRoot");
        this.isOrgRoot = Optional.ofNullable(isOrgRoot);
        return this;
    }

    /**
     * Whether this person is a "root" node in their organization's hierarchy.
     */
    public PersonMetadata withIsOrgRoot(Optional<Boolean> isOrgRoot) {
        Utils.checkNotNull(isOrgRoot, "isOrgRoot");
        this.isOrgRoot = isOrgRoot;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonMetadata other = (PersonMetadata) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.businessUnit, other.businessUnit) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.teams, other.teams) &&
            Utils.enhancedDeepEquals(this.departmentCount, other.departmentCount) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.aliasEmails, other.aliasEmails) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.structuredLocation, other.structuredLocation) &&
            Utils.enhancedDeepEquals(this.externalProfileLink, other.externalProfileLink) &&
            Utils.enhancedDeepEquals(this.manager, other.manager) &&
            Utils.enhancedDeepEquals(this.managementChain, other.managementChain) &&
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.timezone, other.timezone) &&
            Utils.enhancedDeepEquals(this.timezoneOffset, other.timezoneOffset) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.uneditedPhotoUrl, other.uneditedPhotoUrl) &&
            Utils.enhancedDeepEquals(this.bannerUrl, other.bannerUrl) &&
            Utils.enhancedDeepEquals(this.reports, other.reports) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.bio, other.bio) &&
            Utils.enhancedDeepEquals(this.pronoun, other.pronoun) &&
            Utils.enhancedDeepEquals(this.orgSizeCount, other.orgSizeCount) &&
            Utils.enhancedDeepEquals(this.directReportsCount, other.directReportsCount) &&
            Utils.enhancedDeepEquals(this.preferredName, other.preferredName) &&
            Utils.enhancedDeepEquals(this.socialNetwork, other.socialNetwork) &&
            Utils.enhancedDeepEquals(this.datasourceProfile, other.datasourceProfile) &&
            Utils.enhancedDeepEquals(this.querySuggestions, other.querySuggestions) &&
            Utils.enhancedDeepEquals(this.peopleDistance, other.peopleDistance) &&
            Utils.enhancedDeepEquals(this.inviteInfo, other.inviteInfo) &&
            Utils.enhancedDeepEquals(this.isSignedUp, other.isSignedUp) &&
            Utils.enhancedDeepEquals(this.lastExtensionUse, other.lastExtensionUse) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.loggingId, other.loggingId) &&
            Utils.enhancedDeepEquals(this.startDatePercentile, other.startDatePercentile) &&
            Utils.enhancedDeepEquals(this.busyEvents, other.busyEvents) &&
            Utils.enhancedDeepEquals(this.profileBoolSettings, other.profileBoolSettings) &&
            Utils.enhancedDeepEquals(this.badges, other.badges) &&
            Utils.enhancedDeepEquals(this.isOrgRoot, other.isOrgRoot);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            firstName,
            lastName,
            title,
            businessUnit,
            department,
            teams,
            departmentCount,
            email,
            aliasEmails,
            location,
            structuredLocation,
            externalProfileLink,
            manager,
            managementChain,
            phone,
            timezone,
            timezoneOffset,
            photoUrl,
            uneditedPhotoUrl,
            bannerUrl,
            reports,
            startDate,
            endDate,
            bio,
            pronoun,
            orgSizeCount,
            directReportsCount,
            preferredName,
            socialNetwork,
            datasourceProfile,
            querySuggestions,
            peopleDistance,
            inviteInfo,
            isSignedUp,
            lastExtensionUse,
            permissions,
            customFields,
            loggingId,
            startDatePercentile,
            busyEvents,
            profileBoolSettings,
            badges,
            isOrgRoot);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PersonMetadata.class,
                "type", type,
                "firstName", firstName,
                "lastName", lastName,
                "title", title,
                "businessUnit", businessUnit,
                "department", department,
                "teams", teams,
                "departmentCount", departmentCount,
                "email", email,
                "aliasEmails", aliasEmails,
                "location", location,
                "structuredLocation", structuredLocation,
                "externalProfileLink", externalProfileLink,
                "manager", manager,
                "managementChain", managementChain,
                "phone", phone,
                "timezone", timezone,
                "timezoneOffset", timezoneOffset,
                "photoUrl", photoUrl,
                "uneditedPhotoUrl", uneditedPhotoUrl,
                "bannerUrl", bannerUrl,
                "reports", reports,
                "startDate", startDate,
                "endDate", endDate,
                "bio", bio,
                "pronoun", pronoun,
                "orgSizeCount", orgSizeCount,
                "directReportsCount", directReportsCount,
                "preferredName", preferredName,
                "socialNetwork", socialNetwork,
                "datasourceProfile", datasourceProfile,
                "querySuggestions", querySuggestions,
                "peopleDistance", peopleDistance,
                "inviteInfo", inviteInfo,
                "isSignedUp", isSignedUp,
                "lastExtensionUse", lastExtensionUse,
                "permissions", permissions,
                "customFields", customFields,
                "loggingId", loggingId,
                "startDatePercentile", startDatePercentile,
                "busyEvents", busyEvents,
                "profileBoolSettings", profileBoolSettings,
                "badges", badges,
                "isOrgRoot", isOrgRoot);
    }
    
    public final static class Builder {
 
        private Optional<? extends PersonMetadataType> type = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> businessUnit = Optional.empty();
 
        private Optional<String> department = Optional.empty();
 
        private Optional<? extends List<PersonTeam>> teams = Optional.empty();
 
        private Optional<Long> departmentCount = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<? extends List<String>> aliasEmails = Optional.empty();
 
        private Optional<String> location = Optional.empty();
 
        private Optional<? extends StructuredLocation> structuredLocation = Optional.empty();
 
        private Optional<String> externalProfileLink = Optional.empty();
 
        private Optional<? extends Person> manager = Optional.empty();
 
        private Optional<? extends List<Person>> managementChain = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<Long> timezoneOffset = Optional.empty();
 
        private Optional<String> photoUrl = Optional.empty();
 
        private Optional<String> uneditedPhotoUrl = Optional.empty();
 
        private Optional<String> bannerUrl = Optional.empty();
 
        private Optional<? extends List<Person>> reports = Optional.empty();
 
        private Optional<LocalDate> startDate = Optional.empty();
 
        private Optional<LocalDate> endDate = Optional.empty();
 
        private Optional<String> bio = Optional.empty();
 
        private Optional<String> pronoun = Optional.empty();
 
        private Optional<Long> orgSizeCount = Optional.empty();
 
        private Optional<Long> directReportsCount = Optional.empty();
 
        private Optional<String> preferredName = Optional.empty();
 
        private Optional<? extends List<SocialNetwork>> socialNetwork = Optional.empty();
 
        private Optional<? extends List<DatasourceProfile>> datasourceProfile = Optional.empty();
 
        private Optional<? extends QuerySuggestionList> querySuggestions = Optional.empty();
 
        private Optional<? extends List<PersonDistance>> peopleDistance = Optional.empty();
 
        private Optional<? extends InviteInfo> inviteInfo = Optional.empty();
 
        private Optional<Boolean> isSignedUp = Optional.empty();
 
        private Optional<OffsetDateTime> lastExtensionUse = Optional.empty();
 
        private Optional<? extends Permissions> permissions = Optional.empty();
 
        private Optional<? extends List<CustomFieldData>> customFields = Optional.empty();
 
        private Optional<String> loggingId = Optional.empty();
 
        private Optional<Float> startDatePercentile = Optional.empty();
 
        private Optional<? extends List<AnonymousEvent>> busyEvents = Optional.empty();
 
        private Optional<? extends Map<String, Boolean>> profileBoolSettings = Optional.empty();
 
        private Optional<? extends List<Badge>> badges = Optional.empty();
 
        private Optional<Boolean> isOrgRoot = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(PersonMetadataType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends PersonMetadataType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The first name of the person
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The first name of the person
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the person
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The last name of the person
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Job title.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Job title.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(String businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = Optional.ofNullable(businessUnit);
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(Optional<String> businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = businessUnit;
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(Optional<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * Info about the employee's team(s).
         */
        public Builder teams(List<PersonTeam> teams) {
            Utils.checkNotNull(teams, "teams");
            this.teams = Optional.ofNullable(teams);
            return this;
        }

        /**
         * Info about the employee's team(s).
         */
        public Builder teams(Optional<? extends List<PersonTeam>> teams) {
            Utils.checkNotNull(teams, "teams");
            this.teams = teams;
            return this;
        }

        /**
         * The number of people in this person's department.
         */
        public Builder departmentCount(long departmentCount) {
            Utils.checkNotNull(departmentCount, "departmentCount");
            this.departmentCount = Optional.ofNullable(departmentCount);
            return this;
        }

        /**
         * The number of people in this person's department.
         */
        public Builder departmentCount(Optional<Long> departmentCount) {
            Utils.checkNotNull(departmentCount, "departmentCount");
            this.departmentCount = departmentCount;
            return this;
        }

        /**
         * The user's primary email address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The user's primary email address
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Additional email addresses of this user beyond the primary, if any.
         */
        public Builder aliasEmails(List<String> aliasEmails) {
            Utils.checkNotNull(aliasEmails, "aliasEmails");
            this.aliasEmails = Optional.ofNullable(aliasEmails);
            return this;
        }

        /**
         * Additional email addresses of this user beyond the primary, if any.
         */
        public Builder aliasEmails(Optional<? extends List<String>> aliasEmails) {
            Utils.checkNotNull(aliasEmails, "aliasEmails");
            this.aliasEmails = aliasEmails;
            return this;
        }

        /**
         * User facing string representing the person's location.
         */
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        /**
         * User facing string representing the person's location.
         */
        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        /**
         * Detailed location with information about country, state, city etc.
         */
        public Builder structuredLocation(StructuredLocation structuredLocation) {
            Utils.checkNotNull(structuredLocation, "structuredLocation");
            this.structuredLocation = Optional.ofNullable(structuredLocation);
            return this;
        }

        /**
         * Detailed location with information about country, state, city etc.
         */
        public Builder structuredLocation(Optional<? extends StructuredLocation> structuredLocation) {
            Utils.checkNotNull(structuredLocation, "structuredLocation");
            this.structuredLocation = structuredLocation;
            return this;
        }

        /**
         * Link to a customer's internal profile page. This is set to '#' when no link is desired.
         */
        public Builder externalProfileLink(String externalProfileLink) {
            Utils.checkNotNull(externalProfileLink, "externalProfileLink");
            this.externalProfileLink = Optional.ofNullable(externalProfileLink);
            return this;
        }

        /**
         * Link to a customer's internal profile page. This is set to '#' when no link is desired.
         */
        public Builder externalProfileLink(Optional<String> externalProfileLink) {
            Utils.checkNotNull(externalProfileLink, "externalProfileLink");
            this.externalProfileLink = externalProfileLink;
            return this;
        }

        public Builder manager(Person manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = Optional.ofNullable(manager);
            return this;
        }

        public Builder manager(Optional<? extends Person> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }

        /**
         * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
         */
        public Builder managementChain(List<Person> managementChain) {
            Utils.checkNotNull(managementChain, "managementChain");
            this.managementChain = Optional.ofNullable(managementChain);
            return this;
        }

        /**
         * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
         */
        public Builder managementChain(Optional<? extends List<Person>> managementChain) {
            Utils.checkNotNull(managementChain, "managementChain");
            this.managementChain = managementChain;
            return this;
        }

        /**
         * Phone number as a number string.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Phone number as a number string.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * The timezone of the person. E.g. "Pacific Daylight Time".
         */
        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        /**
         * The timezone of the person. E.g. "Pacific Daylight Time".
         */
        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        /**
         * The offset of the person's timezone in seconds from UTC.
         */
        public Builder timezoneOffset(long timezoneOffset) {
            Utils.checkNotNull(timezoneOffset, "timezoneOffset");
            this.timezoneOffset = Optional.ofNullable(timezoneOffset);
            return this;
        }

        /**
         * The offset of the person's timezone in seconds from UTC.
         */
        public Builder timezoneOffset(Optional<Long> timezoneOffset) {
            Utils.checkNotNull(timezoneOffset, "timezoneOffset");
            this.timezoneOffset = timezoneOffset;
            return this;
        }

        /**
         * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = Optional.ofNullable(photoUrl);
            return this;
        }

        /**
         * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
         */
        public Builder photoUrl(Optional<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * The original photo URL of the person's avatar before any edits they made are applied
         */
        public Builder uneditedPhotoUrl(String uneditedPhotoUrl) {
            Utils.checkNotNull(uneditedPhotoUrl, "uneditedPhotoUrl");
            this.uneditedPhotoUrl = Optional.ofNullable(uneditedPhotoUrl);
            return this;
        }

        /**
         * The original photo URL of the person's avatar before any edits they made are applied
         */
        public Builder uneditedPhotoUrl(Optional<String> uneditedPhotoUrl) {
            Utils.checkNotNull(uneditedPhotoUrl, "uneditedPhotoUrl");
            this.uneditedPhotoUrl = uneditedPhotoUrl;
            return this;
        }

        /**
         * The URL of the person's banner photo.
         */
        public Builder bannerUrl(String bannerUrl) {
            Utils.checkNotNull(bannerUrl, "bannerUrl");
            this.bannerUrl = Optional.ofNullable(bannerUrl);
            return this;
        }

        /**
         * The URL of the person's banner photo.
         */
        public Builder bannerUrl(Optional<String> bannerUrl) {
            Utils.checkNotNull(bannerUrl, "bannerUrl");
            this.bannerUrl = bannerUrl;
            return this;
        }

        public Builder reports(List<Person> reports) {
            Utils.checkNotNull(reports, "reports");
            this.reports = Optional.ofNullable(reports);
            return this;
        }

        public Builder reports(Optional<? extends List<Person>> reports) {
            Utils.checkNotNull(reports, "reports");
            this.reports = reports;
            return this;
        }

        /**
         * The date when the employee started.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date when the employee started.
         */
        public Builder startDate(Optional<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * If a former employee, the last date of employment.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * If a former employee, the last date of employment.
         */
        public Builder endDate(Optional<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Short biography or mission statement of the employee.
         */
        public Builder bio(String bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = Optional.ofNullable(bio);
            return this;
        }

        /**
         * Short biography or mission statement of the employee.
         */
        public Builder bio(Optional<String> bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = bio;
            return this;
        }

        /**
         * She/her, He/his or other pronoun.
         */
        public Builder pronoun(String pronoun) {
            Utils.checkNotNull(pronoun, "pronoun");
            this.pronoun = Optional.ofNullable(pronoun);
            return this;
        }

        /**
         * She/her, He/his or other pronoun.
         */
        public Builder pronoun(Optional<String> pronoun) {
            Utils.checkNotNull(pronoun, "pronoun");
            this.pronoun = pronoun;
            return this;
        }

        /**
         * The total recursive size of the people reporting to this person, or 1
         */
        public Builder orgSizeCount(long orgSizeCount) {
            Utils.checkNotNull(orgSizeCount, "orgSizeCount");
            this.orgSizeCount = Optional.ofNullable(orgSizeCount);
            return this;
        }

        /**
         * The total recursive size of the people reporting to this person, or 1
         */
        public Builder orgSizeCount(Optional<Long> orgSizeCount) {
            Utils.checkNotNull(orgSizeCount, "orgSizeCount");
            this.orgSizeCount = orgSizeCount;
            return this;
        }

        /**
         * The total number of people who directly report to this person, or 0
         */
        public Builder directReportsCount(long directReportsCount) {
            Utils.checkNotNull(directReportsCount, "directReportsCount");
            this.directReportsCount = Optional.ofNullable(directReportsCount);
            return this;
        }

        /**
         * The total number of people who directly report to this person, or 0
         */
        public Builder directReportsCount(Optional<Long> directReportsCount) {
            Utils.checkNotNull(directReportsCount, "directReportsCount");
            this.directReportsCount = directReportsCount;
            return this;
        }

        /**
         * The preferred name of the person, or a nickname.
         */
        public Builder preferredName(String preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = Optional.ofNullable(preferredName);
            return this;
        }

        /**
         * The preferred name of the person, or a nickname.
         */
        public Builder preferredName(Optional<String> preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = preferredName;
            return this;
        }

        /**
         * List of social network profiles.
         */
        public Builder socialNetwork(List<SocialNetwork> socialNetwork) {
            Utils.checkNotNull(socialNetwork, "socialNetwork");
            this.socialNetwork = Optional.ofNullable(socialNetwork);
            return this;
        }

        /**
         * List of social network profiles.
         */
        public Builder socialNetwork(Optional<? extends List<SocialNetwork>> socialNetwork) {
            Utils.checkNotNull(socialNetwork, "socialNetwork");
            this.socialNetwork = socialNetwork;
            return this;
        }

        /**
         * List of profiles this user has in different datasources / tools that they use.
         */
        public Builder datasourceProfile(List<DatasourceProfile> datasourceProfile) {
            Utils.checkNotNull(datasourceProfile, "datasourceProfile");
            this.datasourceProfile = Optional.ofNullable(datasourceProfile);
            return this;
        }

        /**
         * List of profiles this user has in different datasources / tools that they use.
         */
        public Builder datasourceProfile(Optional<? extends List<DatasourceProfile>> datasourceProfile) {
            Utils.checkNotNull(datasourceProfile, "datasourceProfile");
            this.datasourceProfile = datasourceProfile;
            return this;
        }

        public Builder querySuggestions(QuerySuggestionList querySuggestions) {
            Utils.checkNotNull(querySuggestions, "querySuggestions");
            this.querySuggestions = Optional.ofNullable(querySuggestions);
            return this;
        }

        public Builder querySuggestions(Optional<? extends QuerySuggestionList> querySuggestions) {
            Utils.checkNotNull(querySuggestions, "querySuggestions");
            this.querySuggestions = querySuggestions;
            return this;
        }

        /**
         * List of people and distances to those people from this person. Optionally with metadata.
         */
        public Builder peopleDistance(List<PersonDistance> peopleDistance) {
            Utils.checkNotNull(peopleDistance, "peopleDistance");
            this.peopleDistance = Optional.ofNullable(peopleDistance);
            return this;
        }

        /**
         * List of people and distances to those people from this person. Optionally with metadata.
         */
        public Builder peopleDistance(Optional<? extends List<PersonDistance>> peopleDistance) {
            Utils.checkNotNull(peopleDistance, "peopleDistance");
            this.peopleDistance = peopleDistance;
            return this;
        }

        /**
         * Information regarding the invite status of a person.
         */
        public Builder inviteInfo(InviteInfo inviteInfo) {
            Utils.checkNotNull(inviteInfo, "inviteInfo");
            this.inviteInfo = Optional.ofNullable(inviteInfo);
            return this;
        }

        /**
         * Information regarding the invite status of a person.
         */
        public Builder inviteInfo(Optional<? extends InviteInfo> inviteInfo) {
            Utils.checkNotNull(inviteInfo, "inviteInfo");
            this.inviteInfo = inviteInfo;
            return this;
        }

        /**
         * Whether the user has signed into Glean at least once.
         */
        public Builder isSignedUp(boolean isSignedUp) {
            Utils.checkNotNull(isSignedUp, "isSignedUp");
            this.isSignedUp = Optional.ofNullable(isSignedUp);
            return this;
        }

        /**
         * Whether the user has signed into Glean at least once.
         */
        public Builder isSignedUp(Optional<Boolean> isSignedUp) {
            Utils.checkNotNull(isSignedUp, "isSignedUp");
            this.isSignedUp = isSignedUp;
            return this;
        }

        /**
         * The last time the user has used the Glean extension in ISO 8601 format.
         */
        public Builder lastExtensionUse(OffsetDateTime lastExtensionUse) {
            Utils.checkNotNull(lastExtensionUse, "lastExtensionUse");
            this.lastExtensionUse = Optional.ofNullable(lastExtensionUse);
            return this;
        }

        /**
         * The last time the user has used the Glean extension in ISO 8601 format.
         */
        public Builder lastExtensionUse(Optional<OffsetDateTime> lastExtensionUse) {
            Utils.checkNotNull(lastExtensionUse, "lastExtensionUse");
            this.lastExtensionUse = lastExtensionUse;
            return this;
        }

        /**
         * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
         * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
         */
        public Builder permissions(Permissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        /**
         * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
         * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
         */
        public Builder permissions(Optional<? extends Permissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * User customizable fields for additional people information.
         */
        public Builder customFields(List<CustomFieldData> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        /**
         * User customizable fields for additional people information.
         */
        public Builder customFields(Optional<? extends List<CustomFieldData>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * The logging id of the person used in scrubbed logs, tracking GA metrics.
         */
        public Builder loggingId(String loggingId) {
            Utils.checkNotNull(loggingId, "loggingId");
            this.loggingId = Optional.ofNullable(loggingId);
            return this;
        }

        /**
         * The logging id of the person used in scrubbed logs, tracking GA metrics.
         */
        public Builder loggingId(Optional<String> loggingId) {
            Utils.checkNotNull(loggingId, "loggingId");
            this.loggingId = loggingId;
            return this;
        }

        /**
         * Percentage of the company that started strictly after this person. Between [0,100).
         */
        public Builder startDatePercentile(float startDatePercentile) {
            Utils.checkNotNull(startDatePercentile, "startDatePercentile");
            this.startDatePercentile = Optional.ofNullable(startDatePercentile);
            return this;
        }

        /**
         * Percentage of the company that started strictly after this person. Between [0,100).
         */
        public Builder startDatePercentile(Optional<Float> startDatePercentile) {
            Utils.checkNotNull(startDatePercentile, "startDatePercentile");
            this.startDatePercentile = startDatePercentile;
            return this;
        }

        /**
         * Intervals of busy time for this person, along with the type of event they're busy with.
         */
        public Builder busyEvents(List<AnonymousEvent> busyEvents) {
            Utils.checkNotNull(busyEvents, "busyEvents");
            this.busyEvents = Optional.ofNullable(busyEvents);
            return this;
        }

        /**
         * Intervals of busy time for this person, along with the type of event they're busy with.
         */
        public Builder busyEvents(Optional<? extends List<AnonymousEvent>> busyEvents) {
            Utils.checkNotNull(busyEvents, "busyEvents");
            this.busyEvents = busyEvents;
            return this;
        }

        /**
         * flag settings to indicate user profile settings for certain items
         */
        public Builder profileBoolSettings(Map<String, Boolean> profileBoolSettings) {
            Utils.checkNotNull(profileBoolSettings, "profileBoolSettings");
            this.profileBoolSettings = Optional.ofNullable(profileBoolSettings);
            return this;
        }

        /**
         * flag settings to indicate user profile settings for certain items
         */
        public Builder profileBoolSettings(Optional<? extends Map<String, Boolean>> profileBoolSettings) {
            Utils.checkNotNull(profileBoolSettings, "profileBoolSettings");
            this.profileBoolSettings = profileBoolSettings;
            return this;
        }

        /**
         * The badges that a user has earned over their lifetime.
         */
        public Builder badges(List<Badge> badges) {
            Utils.checkNotNull(badges, "badges");
            this.badges = Optional.ofNullable(badges);
            return this;
        }

        /**
         * The badges that a user has earned over their lifetime.
         */
        public Builder badges(Optional<? extends List<Badge>> badges) {
            Utils.checkNotNull(badges, "badges");
            this.badges = badges;
            return this;
        }

        /**
         * Whether this person is a "root" node in their organization's hierarchy.
         */
        public Builder isOrgRoot(boolean isOrgRoot) {
            Utils.checkNotNull(isOrgRoot, "isOrgRoot");
            this.isOrgRoot = Optional.ofNullable(isOrgRoot);
            return this;
        }

        /**
         * Whether this person is a "root" node in their organization's hierarchy.
         */
        public Builder isOrgRoot(Optional<Boolean> isOrgRoot) {
            Utils.checkNotNull(isOrgRoot, "isOrgRoot");
            this.isOrgRoot = isOrgRoot;
            return this;
        }
        
        public PersonMetadata build() {
            return new PersonMetadata(
                type,
                firstName,
                lastName,
                title,
                businessUnit,
                department,
                teams,
                departmentCount,
                email,
                aliasEmails,
                location,
                structuredLocation,
                externalProfileLink,
                manager,
                managementChain,
                phone,
                timezone,
                timezoneOffset,
                photoUrl,
                uneditedPhotoUrl,
                bannerUrl,
                reports,
                startDate,
                endDate,
                bio,
                pronoun,
                orgSizeCount,
                directReportsCount,
                preferredName,
                socialNetwork,
                datasourceProfile,
                querySuggestions,
                peopleDistance,
                inviteInfo,
                isSignedUp,
                lastExtensionUse,
                permissions,
                customFields,
                loggingId,
                startDatePercentile,
                busyEvents,
                profileBoolSettings,
                badges,
                isOrgRoot);
        }
    }
}
