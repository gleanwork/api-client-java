/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DlpPersonMetadata {

    /**
     * The first name of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<String> firstName;

    /**
     * The user's primary email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    @JsonCreator
    public DlpPersonMetadata(
            @JsonProperty("firstName") Optional<String> firstName,
            @JsonProperty("email") Optional<String> email) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(email, "email");
        this.firstName = firstName;
        this.email = email;
    }
    
    public DlpPersonMetadata() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The first name of the person
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The user's primary email address
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The first name of the person
     */
    public DlpPersonMetadata withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The first name of the person
     */
    public DlpPersonMetadata withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The user's primary email address
     */
    public DlpPersonMetadata withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The user's primary email address
     */
    public DlpPersonMetadata withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DlpPersonMetadata other = (DlpPersonMetadata) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.email, other.email);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            email);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DlpPersonMetadata.class,
                "firstName", firstName,
                "email", email);
    }
    
    public final static class Builder {
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> email = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The first name of the person
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The first name of the person
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The user's primary email address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The user's primary email address
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }
        
        public DlpPersonMetadata build() {
            return new DlpPersonMetadata(
                firstName,
                email);
        }
    }
}
