/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FeedRequest {

    /**
     * Categories of content requested. An allowlist gives flexibility to request content separately or together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends List<FeedRequestCategory>> categories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestOptions")
    private Optional<? extends FeedRequestOptions> requestOptions;

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutMillis")
    private Optional<Long> timeoutMillis;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    private Optional<? extends SessionInfo> sessionInfo;

    @JsonCreator
    public FeedRequest(
            @JsonProperty("categories") Optional<? extends List<FeedRequestCategory>> categories,
            @JsonProperty("requestOptions") Optional<? extends FeedRequestOptions> requestOptions,
            @JsonProperty("timeoutMillis") Optional<Long> timeoutMillis,
            @JsonProperty("sessionInfo") Optional<? extends SessionInfo> sessionInfo) {
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(requestOptions, "requestOptions");
        Utils.checkNotNull(timeoutMillis, "timeoutMillis");
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.categories = categories;
        this.requestOptions = requestOptions;
        this.timeoutMillis = timeoutMillis;
        this.sessionInfo = sessionInfo;
    }
    
    public FeedRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Categories of content requested. An allowlist gives flexibility to request content separately or together.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeedRequestCategory>> categories() {
        return (Optional<List<FeedRequestCategory>>) categories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeedRequestOptions> requestOptions() {
        return (Optional<FeedRequestOptions>) requestOptions;
    }

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    @JsonIgnore
    public Optional<Long> timeoutMillis() {
        return timeoutMillis;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SessionInfo> sessionInfo() {
        return (Optional<SessionInfo>) sessionInfo;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Categories of content requested. An allowlist gives flexibility to request content separately or together.
     */
    public FeedRequest withCategories(List<FeedRequestCategory> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    /**
     * Categories of content requested. An allowlist gives flexibility to request content separately or together.
     */
    public FeedRequest withCategories(Optional<? extends List<FeedRequestCategory>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    public FeedRequest withRequestOptions(FeedRequestOptions requestOptions) {
        Utils.checkNotNull(requestOptions, "requestOptions");
        this.requestOptions = Optional.ofNullable(requestOptions);
        return this;
    }

    public FeedRequest withRequestOptions(Optional<? extends FeedRequestOptions> requestOptions) {
        Utils.checkNotNull(requestOptions, "requestOptions");
        this.requestOptions = requestOptions;
        return this;
    }

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    public FeedRequest withTimeoutMillis(long timeoutMillis) {
        Utils.checkNotNull(timeoutMillis, "timeoutMillis");
        this.timeoutMillis = Optional.ofNullable(timeoutMillis);
        return this;
    }

    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    public FeedRequest withTimeoutMillis(Optional<Long> timeoutMillis) {
        Utils.checkNotNull(timeoutMillis, "timeoutMillis");
        this.timeoutMillis = timeoutMillis;
        return this;
    }

    public FeedRequest withSessionInfo(SessionInfo sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = Optional.ofNullable(sessionInfo);
        return this;
    }

    public FeedRequest withSessionInfo(Optional<? extends SessionInfo> sessionInfo) {
        Utils.checkNotNull(sessionInfo, "sessionInfo");
        this.sessionInfo = sessionInfo;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedRequest other = (FeedRequest) o;
        return 
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.requestOptions, other.requestOptions) &&
            Objects.deepEquals(this.timeoutMillis, other.timeoutMillis) &&
            Objects.deepEquals(this.sessionInfo, other.sessionInfo);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            categories,
            requestOptions,
            timeoutMillis,
            sessionInfo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedRequest.class,
                "categories", categories,
                "requestOptions", requestOptions,
                "timeoutMillis", timeoutMillis,
                "sessionInfo", sessionInfo);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<FeedRequestCategory>> categories = Optional.empty();
 
        private Optional<? extends FeedRequestOptions> requestOptions = Optional.empty();
 
        private Optional<Long> timeoutMillis = Optional.empty();
 
        private Optional<? extends SessionInfo> sessionInfo = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Categories of content requested. An allowlist gives flexibility to request content separately or together.
         */
        public Builder categories(List<FeedRequestCategory> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * Categories of content requested. An allowlist gives flexibility to request content separately or together.
         */
        public Builder categories(Optional<? extends List<FeedRequestCategory>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        public Builder requestOptions(FeedRequestOptions requestOptions) {
            Utils.checkNotNull(requestOptions, "requestOptions");
            this.requestOptions = Optional.ofNullable(requestOptions);
            return this;
        }

        public Builder requestOptions(Optional<? extends FeedRequestOptions> requestOptions) {
            Utils.checkNotNull(requestOptions, "requestOptions");
            this.requestOptions = requestOptions;
            return this;
        }

        /**
         * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
         */
        public Builder timeoutMillis(long timeoutMillis) {
            Utils.checkNotNull(timeoutMillis, "timeoutMillis");
            this.timeoutMillis = Optional.ofNullable(timeoutMillis);
            return this;
        }

        /**
         * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
         */
        public Builder timeoutMillis(Optional<Long> timeoutMillis) {
            Utils.checkNotNull(timeoutMillis, "timeoutMillis");
            this.timeoutMillis = timeoutMillis;
            return this;
        }

        public Builder sessionInfo(SessionInfo sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = Optional.ofNullable(sessionInfo);
            return this;
        }

        public Builder sessionInfo(Optional<? extends SessionInfo> sessionInfo) {
            Utils.checkNotNull(sessionInfo, "sessionInfo");
            this.sessionInfo = sessionInfo;
            return this;
        }
        
        public FeedRequest build() {
            return new FeedRequest(
                categories,
                requestOptions,
                timeoutMillis,
                sessionInfo);
        }
    }
}
