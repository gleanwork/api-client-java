/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * DebugDatasourceStatusResponse
 * 
 * <p>Describes the response body of the /debug/{datasource}/status API call
 */
public class DebugDatasourceStatusResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    private Optional<? extends Documents> documents;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identity")
    private Optional<? extends Identity> identity;

    /**
     * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceVisibility")
    private Optional<? extends DatasourceVisibility> datasourceVisibility;

    @JsonCreator
    public DebugDatasourceStatusResponse(
            @JsonProperty("documents") Optional<? extends Documents> documents,
            @JsonProperty("identity") Optional<? extends Identity> identity,
            @JsonProperty("datasourceVisibility") Optional<? extends DatasourceVisibility> datasourceVisibility) {
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(identity, "identity");
        Utils.checkNotNull(datasourceVisibility, "datasourceVisibility");
        this.documents = documents;
        this.identity = identity;
        this.datasourceVisibility = datasourceVisibility;
    }
    
    public DebugDatasourceStatusResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Documents> documents() {
        return (Optional<Documents>) documents;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Identity> identity() {
        return (Optional<Identity>) identity;
    }

    /**
     * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DatasourceVisibility> datasourceVisibility() {
        return (Optional<DatasourceVisibility>) datasourceVisibility;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DebugDatasourceStatusResponse withDocuments(Documents documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    public DebugDatasourceStatusResponse withDocuments(Optional<? extends Documents> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    public DebugDatasourceStatusResponse withIdentity(Identity identity) {
        Utils.checkNotNull(identity, "identity");
        this.identity = Optional.ofNullable(identity);
        return this;
    }

    public DebugDatasourceStatusResponse withIdentity(Optional<? extends Identity> identity) {
        Utils.checkNotNull(identity, "identity");
        this.identity = identity;
        return this;
    }

    /**
     * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
     */
    public DebugDatasourceStatusResponse withDatasourceVisibility(DatasourceVisibility datasourceVisibility) {
        Utils.checkNotNull(datasourceVisibility, "datasourceVisibility");
        this.datasourceVisibility = Optional.ofNullable(datasourceVisibility);
        return this;
    }

    /**
     * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
     */
    public DebugDatasourceStatusResponse withDatasourceVisibility(Optional<? extends DatasourceVisibility> datasourceVisibility) {
        Utils.checkNotNull(datasourceVisibility, "datasourceVisibility");
        this.datasourceVisibility = datasourceVisibility;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugDatasourceStatusResponse other = (DebugDatasourceStatusResponse) o;
        return 
            Utils.enhancedDeepEquals(this.documents, other.documents) &&
            Utils.enhancedDeepEquals(this.identity, other.identity) &&
            Utils.enhancedDeepEquals(this.datasourceVisibility, other.datasourceVisibility);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            documents,
            identity,
            datasourceVisibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugDatasourceStatusResponse.class,
                "documents", documents,
                "identity", identity,
                "datasourceVisibility", datasourceVisibility);
    }
    
    public final static class Builder {
 
        private Optional<? extends Documents> documents = Optional.empty();
 
        private Optional<? extends Identity> identity = Optional.empty();
 
        private Optional<? extends DatasourceVisibility> datasourceVisibility = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder documents(Documents documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        public Builder documents(Optional<? extends Documents> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        public Builder identity(Identity identity) {
            Utils.checkNotNull(identity, "identity");
            this.identity = Optional.ofNullable(identity);
            return this;
        }

        public Builder identity(Optional<? extends Identity> identity) {
            Utils.checkNotNull(identity, "identity");
            this.identity = identity;
            return this;
        }

        /**
         * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
         */
        public Builder datasourceVisibility(DatasourceVisibility datasourceVisibility) {
            Utils.checkNotNull(datasourceVisibility, "datasourceVisibility");
            this.datasourceVisibility = Optional.ofNullable(datasourceVisibility);
            return this;
        }

        /**
         * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
         */
        public Builder datasourceVisibility(Optional<? extends DatasourceVisibility> datasourceVisibility) {
            Utils.checkNotNull(datasourceVisibility, "datasourceVisibility");
            this.datasourceVisibility = datasourceVisibility;
            return this;
        }
        
        public DebugDatasourceStatusResponse build() {
            return new DebugDatasourceStatusResponse(
                documents,
                identity,
                datasourceVisibility);
        }
    }
}
