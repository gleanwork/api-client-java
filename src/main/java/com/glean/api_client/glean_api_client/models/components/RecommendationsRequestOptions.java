/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class RecommendationsRequestOptions {

    /**
     * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceFilter")
    private Optional<String> datasourceFilter;

    /**
     * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourcesFilter")
    private Optional<? extends List<String>> datasourcesFilter;

    /**
     * A list of facet filter sets that will be OR'ed together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facetFilterSets")
    private Optional<? extends List<FacetFilterSet>> facetFilterSets;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    private Optional<? extends Document> context;

    /**
     * The types of prominence wanted in results returned. Default is any type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultProminence")
    private Optional<? extends List<SearchResultProminenceEnum>> resultProminence;

    @JsonCreator
    public RecommendationsRequestOptions(
            @JsonProperty("datasourceFilter") Optional<String> datasourceFilter,
            @JsonProperty("datasourcesFilter") Optional<? extends List<String>> datasourcesFilter,
            @JsonProperty("facetFilterSets") Optional<? extends List<FacetFilterSet>> facetFilterSets,
            @JsonProperty("context") Optional<? extends Document> context,
            @JsonProperty("resultProminence") Optional<? extends List<SearchResultProminenceEnum>> resultProminence) {
        Utils.checkNotNull(datasourceFilter, "datasourceFilter");
        Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
        Utils.checkNotNull(facetFilterSets, "facetFilterSets");
        Utils.checkNotNull(context, "context");
        Utils.checkNotNull(resultProminence, "resultProminence");
        this.datasourceFilter = datasourceFilter;
        this.datasourcesFilter = datasourcesFilter;
        this.facetFilterSets = facetFilterSets;
        this.context = context;
        this.resultProminence = resultProminence;
    }
    
    public RecommendationsRequestOptions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
     */
    @JsonIgnore
    public Optional<String> datasourceFilter() {
        return datasourceFilter;
    }

    /**
     * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> datasourcesFilter() {
        return (Optional<List<String>>) datasourcesFilter;
    }

    /**
     * A list of facet filter sets that will be OR'ed together.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilterSet>> facetFilterSets() {
        return (Optional<List<FacetFilterSet>>) facetFilterSets;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> context() {
        return (Optional<Document>) context;
    }

    /**
     * The types of prominence wanted in results returned. Default is any type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SearchResultProminenceEnum>> resultProminence() {
        return (Optional<List<SearchResultProminenceEnum>>) resultProminence;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
     */
    public RecommendationsRequestOptions withDatasourceFilter(String datasourceFilter) {
        Utils.checkNotNull(datasourceFilter, "datasourceFilter");
        this.datasourceFilter = Optional.ofNullable(datasourceFilter);
        return this;
    }

    /**
     * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
     */
    public RecommendationsRequestOptions withDatasourceFilter(Optional<String> datasourceFilter) {
        Utils.checkNotNull(datasourceFilter, "datasourceFilter");
        this.datasourceFilter = datasourceFilter;
        return this;
    }

    /**
     * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
     */
    public RecommendationsRequestOptions withDatasourcesFilter(List<String> datasourcesFilter) {
        Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
        this.datasourcesFilter = Optional.ofNullable(datasourcesFilter);
        return this;
    }

    /**
     * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
     */
    public RecommendationsRequestOptions withDatasourcesFilter(Optional<? extends List<String>> datasourcesFilter) {
        Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
        this.datasourcesFilter = datasourcesFilter;
        return this;
    }

    /**
     * A list of facet filter sets that will be OR'ed together.
     */
    public RecommendationsRequestOptions withFacetFilterSets(List<FacetFilterSet> facetFilterSets) {
        Utils.checkNotNull(facetFilterSets, "facetFilterSets");
        this.facetFilterSets = Optional.ofNullable(facetFilterSets);
        return this;
    }

    /**
     * A list of facet filter sets that will be OR'ed together.
     */
    public RecommendationsRequestOptions withFacetFilterSets(Optional<? extends List<FacetFilterSet>> facetFilterSets) {
        Utils.checkNotNull(facetFilterSets, "facetFilterSets");
        this.facetFilterSets = facetFilterSets;
        return this;
    }

    public RecommendationsRequestOptions withContext(Document context) {
        Utils.checkNotNull(context, "context");
        this.context = Optional.ofNullable(context);
        return this;
    }

    public RecommendationsRequestOptions withContext(Optional<? extends Document> context) {
        Utils.checkNotNull(context, "context");
        this.context = context;
        return this;
    }

    /**
     * The types of prominence wanted in results returned. Default is any type.
     */
    public RecommendationsRequestOptions withResultProminence(List<SearchResultProminenceEnum> resultProminence) {
        Utils.checkNotNull(resultProminence, "resultProminence");
        this.resultProminence = Optional.ofNullable(resultProminence);
        return this;
    }

    /**
     * The types of prominence wanted in results returned. Default is any type.
     */
    public RecommendationsRequestOptions withResultProminence(Optional<? extends List<SearchResultProminenceEnum>> resultProminence) {
        Utils.checkNotNull(resultProminence, "resultProminence");
        this.resultProminence = resultProminence;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RecommendationsRequestOptions other = (RecommendationsRequestOptions) o;
        return 
            Objects.deepEquals(this.datasourceFilter, other.datasourceFilter) &&
            Objects.deepEquals(this.datasourcesFilter, other.datasourcesFilter) &&
            Objects.deepEquals(this.facetFilterSets, other.facetFilterSets) &&
            Objects.deepEquals(this.context, other.context) &&
            Objects.deepEquals(this.resultProminence, other.resultProminence);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasourceFilter,
            datasourcesFilter,
            facetFilterSets,
            context,
            resultProminence);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RecommendationsRequestOptions.class,
                "datasourceFilter", datasourceFilter,
                "datasourcesFilter", datasourcesFilter,
                "facetFilterSets", facetFilterSets,
                "context", context,
                "resultProminence", resultProminence);
    }
    
    public final static class Builder {
 
        private Optional<String> datasourceFilter = Optional.empty();
 
        private Optional<? extends List<String>> datasourcesFilter = Optional.empty();
 
        private Optional<? extends List<FacetFilterSet>> facetFilterSets = Optional.empty();
 
        private Optional<? extends Document> context = Optional.empty();
 
        private Optional<? extends List<SearchResultProminenceEnum>> resultProminence = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
         */
        public Builder datasourceFilter(String datasourceFilter) {
            Utils.checkNotNull(datasourceFilter, "datasourceFilter");
            this.datasourceFilter = Optional.ofNullable(datasourceFilter);
            return this;
        }

        /**
         * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
         */
        public Builder datasourceFilter(Optional<String> datasourceFilter) {
            Utils.checkNotNull(datasourceFilter, "datasourceFilter");
            this.datasourceFilter = datasourceFilter;
            return this;
        }

        /**
         * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
         */
        public Builder datasourcesFilter(List<String> datasourcesFilter) {
            Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
            this.datasourcesFilter = Optional.ofNullable(datasourcesFilter);
            return this;
        }

        /**
         * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
         */
        public Builder datasourcesFilter(Optional<? extends List<String>> datasourcesFilter) {
            Utils.checkNotNull(datasourcesFilter, "datasourcesFilter");
            this.datasourcesFilter = datasourcesFilter;
            return this;
        }

        /**
         * A list of facet filter sets that will be OR'ed together.
         */
        public Builder facetFilterSets(List<FacetFilterSet> facetFilterSets) {
            Utils.checkNotNull(facetFilterSets, "facetFilterSets");
            this.facetFilterSets = Optional.ofNullable(facetFilterSets);
            return this;
        }

        /**
         * A list of facet filter sets that will be OR'ed together.
         */
        public Builder facetFilterSets(Optional<? extends List<FacetFilterSet>> facetFilterSets) {
            Utils.checkNotNull(facetFilterSets, "facetFilterSets");
            this.facetFilterSets = facetFilterSets;
            return this;
        }

        public Builder context(Document context) {
            Utils.checkNotNull(context, "context");
            this.context = Optional.ofNullable(context);
            return this;
        }

        public Builder context(Optional<? extends Document> context) {
            Utils.checkNotNull(context, "context");
            this.context = context;
            return this;
        }

        /**
         * The types of prominence wanted in results returned. Default is any type.
         */
        public Builder resultProminence(List<SearchResultProminenceEnum> resultProminence) {
            Utils.checkNotNull(resultProminence, "resultProminence");
            this.resultProminence = Optional.ofNullable(resultProminence);
            return this;
        }

        /**
         * The types of prominence wanted in results returned. Default is any type.
         */
        public Builder resultProminence(Optional<? extends List<SearchResultProminenceEnum>> resultProminence) {
            Utils.checkNotNull(resultProminence, "resultProminence");
            this.resultProminence = resultProminence;
            return this;
        }
        
        public RecommendationsRequestOptions build() {
            return new RecommendationsRequestOptions(
                datasourceFilter,
                datasourcesFilter,
                facetFilterSets,
                context,
                resultProminence);
        }
    }
}
