/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SearchProviderInfo {

    /**
     * Name of the search provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * URL to the provider's logo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoUrl")
    private Optional<String> logoUrl;

    /**
     * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchLinkUrlTemplate")
    private Optional<String> searchLinkUrlTemplate;

    @JsonCreator
    public SearchProviderInfo(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("logoUrl") Optional<String> logoUrl,
            @JsonProperty("searchLinkUrlTemplate") Optional<String> searchLinkUrlTemplate) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(logoUrl, "logoUrl");
        Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
        this.name = name;
        this.logoUrl = logoUrl;
        this.searchLinkUrlTemplate = searchLinkUrlTemplate;
    }
    
    public SearchProviderInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the search provider.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * URL to the provider's logo.
     */
    @JsonIgnore
    public Optional<String> logoUrl() {
        return logoUrl;
    }

    /**
     * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
     */
    @JsonIgnore
    public Optional<String> searchLinkUrlTemplate() {
        return searchLinkUrlTemplate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the search provider.
     */
    public SearchProviderInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the search provider.
     */
    public SearchProviderInfo withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * URL to the provider's logo.
     */
    public SearchProviderInfo withLogoUrl(String logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = Optional.ofNullable(logoUrl);
        return this;
    }

    /**
     * URL to the provider's logo.
     */
    public SearchProviderInfo withLogoUrl(Optional<String> logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = logoUrl;
        return this;
    }

    /**
     * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
     */
    public SearchProviderInfo withSearchLinkUrlTemplate(String searchLinkUrlTemplate) {
        Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
        this.searchLinkUrlTemplate = Optional.ofNullable(searchLinkUrlTemplate);
        return this;
    }

    /**
     * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
     */
    public SearchProviderInfo withSearchLinkUrlTemplate(Optional<String> searchLinkUrlTemplate) {
        Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
        this.searchLinkUrlTemplate = searchLinkUrlTemplate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchProviderInfo other = (SearchProviderInfo) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.logoUrl, other.logoUrl) &&
            Objects.deepEquals(this.searchLinkUrlTemplate, other.searchLinkUrlTemplate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            logoUrl,
            searchLinkUrlTemplate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchProviderInfo.class,
                "name", name,
                "logoUrl", logoUrl,
                "searchLinkUrlTemplate", searchLinkUrlTemplate);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> logoUrl = Optional.empty();
 
        private Optional<String> searchLinkUrlTemplate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the search provider.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the search provider.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * URL to the provider's logo.
         */
        public Builder logoUrl(String logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        /**
         * URL to the provider's logo.
         */
        public Builder logoUrl(Optional<String> logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = logoUrl;
            return this;
        }

        /**
         * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
         */
        public Builder searchLinkUrlTemplate(String searchLinkUrlTemplate) {
            Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
            this.searchLinkUrlTemplate = Optional.ofNullable(searchLinkUrlTemplate);
            return this;
        }

        /**
         * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
         */
        public Builder searchLinkUrlTemplate(Optional<String> searchLinkUrlTemplate) {
            Utils.checkNotNull(searchLinkUrlTemplate, "searchLinkUrlTemplate");
            this.searchLinkUrlTemplate = searchLinkUrlTemplate;
            return this;
        }
        
        public SearchProviderInfo build() {
            return new SearchProviderInfo(
                name,
                logoUrl,
                searchLinkUrlTemplate);
        }
    }
}
