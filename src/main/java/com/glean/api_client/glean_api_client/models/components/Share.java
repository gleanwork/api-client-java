/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Share
 * 
 * <p>Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
 */
public class Share {

    /**
     * The number of days that has passed since the share happened
     */
    @JsonProperty("numDaysAgo")
    private long numDaysAgo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharer")
    private Optional<? extends Person> sharer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharingDocument")
    private Optional<? extends Document> sharingDocument;

    @JsonCreator
    public Share(
            @JsonProperty("numDaysAgo") long numDaysAgo,
            @JsonProperty("sharer") Optional<? extends Person> sharer,
            @JsonProperty("sharingDocument") Optional<? extends Document> sharingDocument) {
        Utils.checkNotNull(numDaysAgo, "numDaysAgo");
        Utils.checkNotNull(sharer, "sharer");
        Utils.checkNotNull(sharingDocument, "sharingDocument");
        this.numDaysAgo = numDaysAgo;
        this.sharer = sharer;
        this.sharingDocument = sharingDocument;
    }
    
    public Share(
            long numDaysAgo) {
        this(numDaysAgo, Optional.empty(), Optional.empty());
    }

    /**
     * The number of days that has passed since the share happened
     */
    @JsonIgnore
    public long numDaysAgo() {
        return numDaysAgo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> sharer() {
        return (Optional<Person>) sharer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> sharingDocument() {
        return (Optional<Document>) sharingDocument;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The number of days that has passed since the share happened
     */
    public Share withNumDaysAgo(long numDaysAgo) {
        Utils.checkNotNull(numDaysAgo, "numDaysAgo");
        this.numDaysAgo = numDaysAgo;
        return this;
    }

    public Share withSharer(Person sharer) {
        Utils.checkNotNull(sharer, "sharer");
        this.sharer = Optional.ofNullable(sharer);
        return this;
    }

    public Share withSharer(Optional<? extends Person> sharer) {
        Utils.checkNotNull(sharer, "sharer");
        this.sharer = sharer;
        return this;
    }

    public Share withSharingDocument(Document sharingDocument) {
        Utils.checkNotNull(sharingDocument, "sharingDocument");
        this.sharingDocument = Optional.ofNullable(sharingDocument);
        return this;
    }

    public Share withSharingDocument(Optional<? extends Document> sharingDocument) {
        Utils.checkNotNull(sharingDocument, "sharingDocument");
        this.sharingDocument = sharingDocument;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Share other = (Share) o;
        return 
            Objects.deepEquals(this.numDaysAgo, other.numDaysAgo) &&
            Objects.deepEquals(this.sharer, other.sharer) &&
            Objects.deepEquals(this.sharingDocument, other.sharingDocument);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            numDaysAgo,
            sharer,
            sharingDocument);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Share.class,
                "numDaysAgo", numDaysAgo,
                "sharer", sharer,
                "sharingDocument", sharingDocument);
    }
    
    public final static class Builder {
 
        private Long numDaysAgo;
 
        private Optional<? extends Person> sharer = Optional.empty();
 
        private Optional<? extends Document> sharingDocument = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of days that has passed since the share happened
         */
        public Builder numDaysAgo(long numDaysAgo) {
            Utils.checkNotNull(numDaysAgo, "numDaysAgo");
            this.numDaysAgo = numDaysAgo;
            return this;
        }

        public Builder sharer(Person sharer) {
            Utils.checkNotNull(sharer, "sharer");
            this.sharer = Optional.ofNullable(sharer);
            return this;
        }

        public Builder sharer(Optional<? extends Person> sharer) {
            Utils.checkNotNull(sharer, "sharer");
            this.sharer = sharer;
            return this;
        }

        public Builder sharingDocument(Document sharingDocument) {
            Utils.checkNotNull(sharingDocument, "sharingDocument");
            this.sharingDocument = Optional.ofNullable(sharingDocument);
            return this;
        }

        public Builder sharingDocument(Optional<? extends Document> sharingDocument) {
            Utils.checkNotNull(sharingDocument, "sharingDocument");
            this.sharingDocument = sharingDocument;
            return this;
        }
        
        public Share build() {
            return new Share(
                numDaysAgo,
                sharer,
                sharingDocument);
        }
    }
}
