/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class WriteActionParameter {

    /**
     * The type of the value (e.g., integer, string, boolean, etc.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends WriteActionParameterType> type;

    /**
     * Human readable display name for the key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    /**
     * The value of the field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<String> value;

    /**
     * Is the parameter a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRequired")
    private Optional<Boolean> isRequired;

    /**
     * Description of the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Possible values that the parameter can take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("possibleValues")
    private Optional<? extends List<PossibleValue>> possibleValues;

    @JsonCreator
    public WriteActionParameter(
            @JsonProperty("type") Optional<? extends WriteActionParameterType> type,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("value") Optional<String> value,
            @JsonProperty("isRequired") Optional<Boolean> isRequired,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("possibleValues") Optional<? extends List<PossibleValue>> possibleValues) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(isRequired, "isRequired");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(possibleValues, "possibleValues");
        this.type = type;
        this.displayName = displayName;
        this.value = value;
        this.isRequired = isRequired;
        this.description = description;
        this.possibleValues = possibleValues;
    }
    
    public WriteActionParameter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of the value (e.g., integer, string, boolean, etc.)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WriteActionParameterType> type() {
        return (Optional<WriteActionParameterType>) type;
    }

    /**
     * Human readable display name for the key.
     */
    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    /**
     * The value of the field.
     */
    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    /**
     * Is the parameter a required field.
     */
    @JsonIgnore
    public Optional<Boolean> isRequired() {
        return isRequired;
    }

    /**
     * Description of the parameter.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Possible values that the parameter can take.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PossibleValue>> possibleValues() {
        return (Optional<List<PossibleValue>>) possibleValues;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of the value (e.g., integer, string, boolean, etc.)
     */
    public WriteActionParameter withType(WriteActionParameterType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of the value (e.g., integer, string, boolean, etc.)
     */
    public WriteActionParameter withType(Optional<? extends WriteActionParameterType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Human readable display name for the key.
     */
    public WriteActionParameter withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    /**
     * Human readable display name for the key.
     */
    public WriteActionParameter withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The value of the field.
     */
    public WriteActionParameter withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * The value of the field.
     */
    public WriteActionParameter withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * Is the parameter a required field.
     */
    public WriteActionParameter withIsRequired(boolean isRequired) {
        Utils.checkNotNull(isRequired, "isRequired");
        this.isRequired = Optional.ofNullable(isRequired);
        return this;
    }

    /**
     * Is the parameter a required field.
     */
    public WriteActionParameter withIsRequired(Optional<Boolean> isRequired) {
        Utils.checkNotNull(isRequired, "isRequired");
        this.isRequired = isRequired;
        return this;
    }

    /**
     * Description of the parameter.
     */
    public WriteActionParameter withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Description of the parameter.
     */
    public WriteActionParameter withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Possible values that the parameter can take.
     */
    public WriteActionParameter withPossibleValues(List<PossibleValue> possibleValues) {
        Utils.checkNotNull(possibleValues, "possibleValues");
        this.possibleValues = Optional.ofNullable(possibleValues);
        return this;
    }

    /**
     * Possible values that the parameter can take.
     */
    public WriteActionParameter withPossibleValues(Optional<? extends List<PossibleValue>> possibleValues) {
        Utils.checkNotNull(possibleValues, "possibleValues");
        this.possibleValues = possibleValues;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WriteActionParameter other = (WriteActionParameter) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.value, other.value) &&
            Utils.enhancedDeepEquals(this.isRequired, other.isRequired) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.possibleValues, other.possibleValues);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            displayName,
            value,
            isRequired,
            description,
            possibleValues);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WriteActionParameter.class,
                "type", type,
                "displayName", displayName,
                "value", value,
                "isRequired", isRequired,
                "description", description,
                "possibleValues", possibleValues);
    }
    
    public final static class Builder {
 
        private Optional<? extends WriteActionParameterType> type = Optional.empty();
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<String> value = Optional.empty();
 
        private Optional<Boolean> isRequired = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends List<PossibleValue>> possibleValues = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of the value (e.g., integer, string, boolean, etc.)
         */
        public Builder type(WriteActionParameterType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of the value (e.g., integer, string, boolean, etc.)
         */
        public Builder type(Optional<? extends WriteActionParameterType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Human readable display name for the key.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * Human readable display name for the key.
         */
        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The value of the field.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * The value of the field.
         */
        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * Is the parameter a required field.
         */
        public Builder isRequired(boolean isRequired) {
            Utils.checkNotNull(isRequired, "isRequired");
            this.isRequired = Optional.ofNullable(isRequired);
            return this;
        }

        /**
         * Is the parameter a required field.
         */
        public Builder isRequired(Optional<Boolean> isRequired) {
            Utils.checkNotNull(isRequired, "isRequired");
            this.isRequired = isRequired;
            return this;
        }

        /**
         * Description of the parameter.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the parameter.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Possible values that the parameter can take.
         */
        public Builder possibleValues(List<PossibleValue> possibleValues) {
            Utils.checkNotNull(possibleValues, "possibleValues");
            this.possibleValues = Optional.ofNullable(possibleValues);
            return this;
        }

        /**
         * Possible values that the parameter can take.
         */
        public Builder possibleValues(Optional<? extends List<PossibleValue>> possibleValues) {
            Utils.checkNotNull(possibleValues, "possibleValues");
            this.possibleValues = possibleValues;
            return this;
        }
        
        public WriteActionParameter build() {
            return new WriteActionParameter(
                type,
                displayName,
                value,
                isRequired,
                description,
                possibleValues);
        }
    }
}
