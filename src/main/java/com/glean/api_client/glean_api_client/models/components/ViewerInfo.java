/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;

public class ViewerInfo {

    /**
     * DEPRECATED - use permissions instead. Viewer's role on the specific document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    @Deprecated
    private Optional<? extends Role> role;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastViewedTime")
    private Optional<OffsetDateTime> lastViewedTime;

    @JsonCreator
    public ViewerInfo(
            @JsonProperty("role") Optional<? extends Role> role,
            @JsonProperty("lastViewedTime") Optional<OffsetDateTime> lastViewedTime) {
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(lastViewedTime, "lastViewedTime");
        this.role = role;
        this.lastViewedTime = lastViewedTime;
    }
    
    public ViewerInfo() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * DEPRECATED - use permissions instead. Viewer's role on the specific document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Role> role() {
        return (Optional<Role>) role;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> lastViewedTime() {
        return lastViewedTime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * DEPRECATED - use permissions instead. Viewer's role on the specific document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ViewerInfo withRole(Role role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    /**
     * DEPRECATED - use permissions instead. Viewer's role on the specific document.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ViewerInfo withRole(Optional<? extends Role> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public ViewerInfo withLastViewedTime(OffsetDateTime lastViewedTime) {
        Utils.checkNotNull(lastViewedTime, "lastViewedTime");
        this.lastViewedTime = Optional.ofNullable(lastViewedTime);
        return this;
    }

    public ViewerInfo withLastViewedTime(Optional<OffsetDateTime> lastViewedTime) {
        Utils.checkNotNull(lastViewedTime, "lastViewedTime");
        this.lastViewedTime = lastViewedTime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ViewerInfo other = (ViewerInfo) o;
        return 
            Utils.enhancedDeepEquals(this.role, other.role) &&
            Utils.enhancedDeepEquals(this.lastViewedTime, other.lastViewedTime);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            role,
            lastViewedTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ViewerInfo.class,
                "role", role,
                "lastViewedTime", lastViewedTime);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<? extends Role> role = Optional.empty();
 
        private Optional<OffsetDateTime> lastViewedTime = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * DEPRECATED - use permissions instead. Viewer's role on the specific document.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder role(Role role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        /**
         * DEPRECATED - use permissions instead. Viewer's role on the specific document.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder role(Optional<? extends Role> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        public Builder lastViewedTime(OffsetDateTime lastViewedTime) {
            Utils.checkNotNull(lastViewedTime, "lastViewedTime");
            this.lastViewedTime = Optional.ofNullable(lastViewedTime);
            return this;
        }

        public Builder lastViewedTime(Optional<OffsetDateTime> lastViewedTime) {
            Utils.checkNotNull(lastViewedTime, "lastViewedTime");
            this.lastViewedTime = lastViewedTime;
            return this;
        }
        
        public ViewerInfo build() {
            return new ViewerInfo(
                role,
                lastViewedTime);
        }
    }
}
