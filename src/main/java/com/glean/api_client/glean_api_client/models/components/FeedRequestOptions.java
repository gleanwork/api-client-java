/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class FeedRequestOptions {

    /**
     * Number of results asked in response. If a result is a collection, counts as one.
     */
    @JsonProperty("resultSize")
    private long resultSize;

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezoneOffset")
    private Optional<Long> timezoneOffset;

    /**
     * Mapping from category to number of results asked for the category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryToResultSize")
    private Optional<? extends Map<String, CategoryToResultSize>> categoryToResultSize;

    /**
     * Datasources for which content should be included. Empty is for all.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceFilter")
    private Optional<? extends List<String>> datasourceFilter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatZeroStateSuggestionOptions")
    private Optional<? extends ChatZeroStateSuggestionOptions> chatZeroStateSuggestionOptions;

    @JsonCreator
    public FeedRequestOptions(
            @JsonProperty("resultSize") long resultSize,
            @JsonProperty("timezoneOffset") Optional<Long> timezoneOffset,
            @JsonProperty("categoryToResultSize") Optional<? extends Map<String, CategoryToResultSize>> categoryToResultSize,
            @JsonProperty("datasourceFilter") Optional<? extends List<String>> datasourceFilter,
            @JsonProperty("chatZeroStateSuggestionOptions") Optional<? extends ChatZeroStateSuggestionOptions> chatZeroStateSuggestionOptions) {
        Utils.checkNotNull(resultSize, "resultSize");
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        Utils.checkNotNull(categoryToResultSize, "categoryToResultSize");
        Utils.checkNotNull(datasourceFilter, "datasourceFilter");
        Utils.checkNotNull(chatZeroStateSuggestionOptions, "chatZeroStateSuggestionOptions");
        this.resultSize = resultSize;
        this.timezoneOffset = timezoneOffset;
        this.categoryToResultSize = categoryToResultSize;
        this.datasourceFilter = datasourceFilter;
        this.chatZeroStateSuggestionOptions = chatZeroStateSuggestionOptions;
    }
    
    public FeedRequestOptions(
            long resultSize) {
        this(resultSize, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Number of results asked in response. If a result is a collection, counts as one.
     */
    @JsonIgnore
    public long resultSize() {
        return resultSize;
    }

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    @JsonIgnore
    public Optional<Long> timezoneOffset() {
        return timezoneOffset;
    }

    /**
     * Mapping from category to number of results asked for the category.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, CategoryToResultSize>> categoryToResultSize() {
        return (Optional<Map<String, CategoryToResultSize>>) categoryToResultSize;
    }

    /**
     * Datasources for which content should be included. Empty is for all.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> datasourceFilter() {
        return (Optional<List<String>>) datasourceFilter;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatZeroStateSuggestionOptions> chatZeroStateSuggestionOptions() {
        return (Optional<ChatZeroStateSuggestionOptions>) chatZeroStateSuggestionOptions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Number of results asked in response. If a result is a collection, counts as one.
     */
    public FeedRequestOptions withResultSize(long resultSize) {
        Utils.checkNotNull(resultSize, "resultSize");
        this.resultSize = resultSize;
        return this;
    }

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    public FeedRequestOptions withTimezoneOffset(long timezoneOffset) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        this.timezoneOffset = Optional.ofNullable(timezoneOffset);
        return this;
    }

    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    public FeedRequestOptions withTimezoneOffset(Optional<Long> timezoneOffset) {
        Utils.checkNotNull(timezoneOffset, "timezoneOffset");
        this.timezoneOffset = timezoneOffset;
        return this;
    }

    /**
     * Mapping from category to number of results asked for the category.
     */
    public FeedRequestOptions withCategoryToResultSize(Map<String, CategoryToResultSize> categoryToResultSize) {
        Utils.checkNotNull(categoryToResultSize, "categoryToResultSize");
        this.categoryToResultSize = Optional.ofNullable(categoryToResultSize);
        return this;
    }

    /**
     * Mapping from category to number of results asked for the category.
     */
    public FeedRequestOptions withCategoryToResultSize(Optional<? extends Map<String, CategoryToResultSize>> categoryToResultSize) {
        Utils.checkNotNull(categoryToResultSize, "categoryToResultSize");
        this.categoryToResultSize = categoryToResultSize;
        return this;
    }

    /**
     * Datasources for which content should be included. Empty is for all.
     */
    public FeedRequestOptions withDatasourceFilter(List<String> datasourceFilter) {
        Utils.checkNotNull(datasourceFilter, "datasourceFilter");
        this.datasourceFilter = Optional.ofNullable(datasourceFilter);
        return this;
    }

    /**
     * Datasources for which content should be included. Empty is for all.
     */
    public FeedRequestOptions withDatasourceFilter(Optional<? extends List<String>> datasourceFilter) {
        Utils.checkNotNull(datasourceFilter, "datasourceFilter");
        this.datasourceFilter = datasourceFilter;
        return this;
    }

    public FeedRequestOptions withChatZeroStateSuggestionOptions(ChatZeroStateSuggestionOptions chatZeroStateSuggestionOptions) {
        Utils.checkNotNull(chatZeroStateSuggestionOptions, "chatZeroStateSuggestionOptions");
        this.chatZeroStateSuggestionOptions = Optional.ofNullable(chatZeroStateSuggestionOptions);
        return this;
    }

    public FeedRequestOptions withChatZeroStateSuggestionOptions(Optional<? extends ChatZeroStateSuggestionOptions> chatZeroStateSuggestionOptions) {
        Utils.checkNotNull(chatZeroStateSuggestionOptions, "chatZeroStateSuggestionOptions");
        this.chatZeroStateSuggestionOptions = chatZeroStateSuggestionOptions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedRequestOptions other = (FeedRequestOptions) o;
        return 
            Utils.enhancedDeepEquals(this.resultSize, other.resultSize) &&
            Utils.enhancedDeepEquals(this.timezoneOffset, other.timezoneOffset) &&
            Utils.enhancedDeepEquals(this.categoryToResultSize, other.categoryToResultSize) &&
            Utils.enhancedDeepEquals(this.datasourceFilter, other.datasourceFilter) &&
            Utils.enhancedDeepEquals(this.chatZeroStateSuggestionOptions, other.chatZeroStateSuggestionOptions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultSize,
            timezoneOffset,
            categoryToResultSize,
            datasourceFilter,
            chatZeroStateSuggestionOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeedRequestOptions.class,
                "resultSize", resultSize,
                "timezoneOffset", timezoneOffset,
                "categoryToResultSize", categoryToResultSize,
                "datasourceFilter", datasourceFilter,
                "chatZeroStateSuggestionOptions", chatZeroStateSuggestionOptions);
    }
    
    public final static class Builder {
 
        private Long resultSize;
 
        private Optional<Long> timezoneOffset = Optional.empty();
 
        private Optional<? extends Map<String, CategoryToResultSize>> categoryToResultSize = Optional.empty();
 
        private Optional<? extends List<String>> datasourceFilter = Optional.empty();
 
        private Optional<? extends ChatZeroStateSuggestionOptions> chatZeroStateSuggestionOptions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of results asked in response. If a result is a collection, counts as one.
         */
        public Builder resultSize(long resultSize) {
            Utils.checkNotNull(resultSize, "resultSize");
            this.resultSize = resultSize;
            return this;
        }

        /**
         * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
         */
        public Builder timezoneOffset(long timezoneOffset) {
            Utils.checkNotNull(timezoneOffset, "timezoneOffset");
            this.timezoneOffset = Optional.ofNullable(timezoneOffset);
            return this;
        }

        /**
         * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
         */
        public Builder timezoneOffset(Optional<Long> timezoneOffset) {
            Utils.checkNotNull(timezoneOffset, "timezoneOffset");
            this.timezoneOffset = timezoneOffset;
            return this;
        }

        /**
         * Mapping from category to number of results asked for the category.
         */
        public Builder categoryToResultSize(Map<String, CategoryToResultSize> categoryToResultSize) {
            Utils.checkNotNull(categoryToResultSize, "categoryToResultSize");
            this.categoryToResultSize = Optional.ofNullable(categoryToResultSize);
            return this;
        }

        /**
         * Mapping from category to number of results asked for the category.
         */
        public Builder categoryToResultSize(Optional<? extends Map<String, CategoryToResultSize>> categoryToResultSize) {
            Utils.checkNotNull(categoryToResultSize, "categoryToResultSize");
            this.categoryToResultSize = categoryToResultSize;
            return this;
        }

        /**
         * Datasources for which content should be included. Empty is for all.
         */
        public Builder datasourceFilter(List<String> datasourceFilter) {
            Utils.checkNotNull(datasourceFilter, "datasourceFilter");
            this.datasourceFilter = Optional.ofNullable(datasourceFilter);
            return this;
        }

        /**
         * Datasources for which content should be included. Empty is for all.
         */
        public Builder datasourceFilter(Optional<? extends List<String>> datasourceFilter) {
            Utils.checkNotNull(datasourceFilter, "datasourceFilter");
            this.datasourceFilter = datasourceFilter;
            return this;
        }

        public Builder chatZeroStateSuggestionOptions(ChatZeroStateSuggestionOptions chatZeroStateSuggestionOptions) {
            Utils.checkNotNull(chatZeroStateSuggestionOptions, "chatZeroStateSuggestionOptions");
            this.chatZeroStateSuggestionOptions = Optional.ofNullable(chatZeroStateSuggestionOptions);
            return this;
        }

        public Builder chatZeroStateSuggestionOptions(Optional<? extends ChatZeroStateSuggestionOptions> chatZeroStateSuggestionOptions) {
            Utils.checkNotNull(chatZeroStateSuggestionOptions, "chatZeroStateSuggestionOptions");
            this.chatZeroStateSuggestionOptions = chatZeroStateSuggestionOptions;
            return this;
        }
        
        public FeedRequestOptions build() {
            return new FeedRequestOptions(
                resultSize,
                timezoneOffset,
                categoryToResultSize,
                datasourceFilter,
                chatZeroStateSuggestionOptions);
        }
    }
}
