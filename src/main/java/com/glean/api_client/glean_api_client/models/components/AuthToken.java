/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class AuthToken {

    @JsonProperty("accessToken")
    private String accessToken;

    @JsonProperty("datasource")
    private String datasource;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    private Optional<String> scope;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenType")
    private Optional<String> tokenType;

    /**
     * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authUser")
    private Optional<String> authUser;

    /**
     * Unix timestamp when this token expires (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration")
    private Optional<Long> expiration;

    @JsonCreator
    public AuthToken(
            @JsonProperty("accessToken") String accessToken,
            @JsonProperty("datasource") String datasource,
            @JsonProperty("scope") Optional<String> scope,
            @JsonProperty("tokenType") Optional<String> tokenType,
            @JsonProperty("authUser") Optional<String> authUser,
            @JsonProperty("expiration") Optional<Long> expiration) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(scope, "scope");
        Utils.checkNotNull(tokenType, "tokenType");
        Utils.checkNotNull(authUser, "authUser");
        Utils.checkNotNull(expiration, "expiration");
        this.accessToken = accessToken;
        this.datasource = datasource;
        this.scope = scope;
        this.tokenType = tokenType;
        this.authUser = authUser;
        this.expiration = expiration;
    }
    
    public AuthToken(
            String accessToken,
            String datasource) {
        this(accessToken, datasource, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    @JsonIgnore
    public Optional<String> scope() {
        return scope;
    }

    @JsonIgnore
    public Optional<String> tokenType() {
        return tokenType;
    }

    /**
     * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
     */
    @JsonIgnore
    public Optional<String> authUser() {
        return authUser;
    }

    /**
     * Unix timestamp when this token expires (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> expiration() {
        return expiration;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AuthToken withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    public AuthToken withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    public AuthToken withScope(String scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = Optional.ofNullable(scope);
        return this;
    }

    public AuthToken withScope(Optional<String> scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }

    public AuthToken withTokenType(String tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = Optional.ofNullable(tokenType);
        return this;
    }

    public AuthToken withTokenType(Optional<String> tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = tokenType;
        return this;
    }

    /**
     * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
     */
    public AuthToken withAuthUser(String authUser) {
        Utils.checkNotNull(authUser, "authUser");
        this.authUser = Optional.ofNullable(authUser);
        return this;
    }

    /**
     * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
     */
    public AuthToken withAuthUser(Optional<String> authUser) {
        Utils.checkNotNull(authUser, "authUser");
        this.authUser = authUser;
        return this;
    }

    /**
     * Unix timestamp when this token expires (in seconds since epoch UTC).
     */
    public AuthToken withExpiration(long expiration) {
        Utils.checkNotNull(expiration, "expiration");
        this.expiration = Optional.ofNullable(expiration);
        return this;
    }

    /**
     * Unix timestamp when this token expires (in seconds since epoch UTC).
     */
    public AuthToken withExpiration(Optional<Long> expiration) {
        Utils.checkNotNull(expiration, "expiration");
        this.expiration = expiration;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthToken other = (AuthToken) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.scope, other.scope) &&
            Objects.deepEquals(this.tokenType, other.tokenType) &&
            Objects.deepEquals(this.authUser, other.authUser) &&
            Objects.deepEquals(this.expiration, other.expiration);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            datasource,
            scope,
            tokenType,
            authUser,
            expiration);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthToken.class,
                "accessToken", accessToken,
                "datasource", datasource,
                "scope", scope,
                "tokenType", tokenType,
                "authUser", authUser,
                "expiration", expiration);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String datasource;
 
        private Optional<String> scope = Optional.empty();
 
        private Optional<String> tokenType = Optional.empty();
 
        private Optional<String> authUser = Optional.empty();
 
        private Optional<Long> expiration = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        public Builder scope(String scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        public Builder scope(Optional<String> scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }

        public Builder tokenType(String tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = Optional.ofNullable(tokenType);
            return this;
        }

        public Builder tokenType(Optional<String> tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = tokenType;
            return this;
        }

        /**
         * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
         */
        public Builder authUser(String authUser) {
            Utils.checkNotNull(authUser, "authUser");
            this.authUser = Optional.ofNullable(authUser);
            return this;
        }

        /**
         * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
         */
        public Builder authUser(Optional<String> authUser) {
            Utils.checkNotNull(authUser, "authUser");
            this.authUser = authUser;
            return this;
        }

        /**
         * Unix timestamp when this token expires (in seconds since epoch UTC).
         */
        public Builder expiration(long expiration) {
            Utils.checkNotNull(expiration, "expiration");
            this.expiration = Optional.ofNullable(expiration);
            return this;
        }

        /**
         * Unix timestamp when this token expires (in seconds since epoch UTC).
         */
        public Builder expiration(Optional<Long> expiration) {
            Utils.checkNotNull(expiration, "expiration");
            this.expiration = expiration;
            return this;
        }
        
        public AuthToken build() {
            return new AuthToken(
                accessToken,
                datasource,
                scope,
                tokenType,
                authUser,
                expiration);
        }
    }
}
