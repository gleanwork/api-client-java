/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * ChatMessageFragment
 * 
 * <p>Represents a part of a ChatMessage that originates from a single action/tool. It is designed to support rich data formats beyond simple text, allowing for a more dynamic and interactive chat experience. Each fragment can include various types of content, such as text, search queries, action information, and more. Also, each ChatMessageFragment should only have one of structuredResults, querySuggestion, writeAction, followupAction, or file.
 */
public class ChatMessageFragment {

    /**
     * An array of entities in the work graph retrieved via a data request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredResults")
    private Optional<? extends List<StructuredResult>> structuredResults;

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("querySuggestion")
    private Optional<? extends QuerySuggestion> querySuggestion;

    /**
     * Structure for file uploaded by a user for Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file")
    private Optional<? extends ChatFile> file;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private Optional<? extends ToolInfo> action;

    @JsonCreator
    public ChatMessageFragment(
            @JsonProperty("structuredResults") Optional<? extends List<StructuredResult>> structuredResults,
            @JsonProperty("trackingToken") Optional<String> trackingToken,
            @JsonProperty("text") Optional<String> text,
            @JsonProperty("querySuggestion") Optional<? extends QuerySuggestion> querySuggestion,
            @JsonProperty("file") Optional<? extends ChatFile> file,
            @JsonProperty("action") Optional<? extends ToolInfo> action) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        Utils.checkNotNull(trackingToken, "trackingToken");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        Utils.checkNotNull(file, "file");
        Utils.checkNotNull(action, "action");
        this.structuredResults = structuredResults;
        this.trackingToken = trackingToken;
        this.text = text;
        this.querySuggestion = querySuggestion;
        this.file = file;
        this.action = action;
    }
    
    public ChatMessageFragment() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * An array of entities in the work graph retrieved via a data request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<StructuredResult>> structuredResults() {
        return (Optional<List<StructuredResult>>) structuredResults;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuerySuggestion> querySuggestion() {
        return (Optional<QuerySuggestion>) querySuggestion;
    }

    /**
     * Structure for file uploaded by a user for Chat.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChatFile> file() {
        return (Optional<ChatFile>) file;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ToolInfo> action() {
        return (Optional<ToolInfo>) action;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An array of entities in the work graph retrieved via a data request.
     */
    public ChatMessageFragment withStructuredResults(List<StructuredResult> structuredResults) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        this.structuredResults = Optional.ofNullable(structuredResults);
        return this;
    }

    /**
     * An array of entities in the work graph retrieved via a data request.
     */
    public ChatMessageFragment withStructuredResults(Optional<? extends List<StructuredResult>> structuredResults) {
        Utils.checkNotNull(structuredResults, "structuredResults");
        this.structuredResults = structuredResults;
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    public ChatMessageFragment withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    public ChatMessageFragment withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    public ChatMessageFragment withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    public ChatMessageFragment withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public ChatMessageFragment withQuerySuggestion(QuerySuggestion querySuggestion) {
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        this.querySuggestion = Optional.ofNullable(querySuggestion);
        return this;
    }

    public ChatMessageFragment withQuerySuggestion(Optional<? extends QuerySuggestion> querySuggestion) {
        Utils.checkNotNull(querySuggestion, "querySuggestion");
        this.querySuggestion = querySuggestion;
        return this;
    }

    /**
     * Structure for file uploaded by a user for Chat.
     */
    public ChatMessageFragment withFile(ChatFile file) {
        Utils.checkNotNull(file, "file");
        this.file = Optional.ofNullable(file);
        return this;
    }

    /**
     * Structure for file uploaded by a user for Chat.
     */
    public ChatMessageFragment withFile(Optional<? extends ChatFile> file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
        return this;
    }

    public ChatMessageFragment withAction(ToolInfo action) {
        Utils.checkNotNull(action, "action");
        this.action = Optional.ofNullable(action);
        return this;
    }

    public ChatMessageFragment withAction(Optional<? extends ToolInfo> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatMessageFragment other = (ChatMessageFragment) o;
        return 
            Utils.enhancedDeepEquals(this.structuredResults, other.structuredResults) &&
            Utils.enhancedDeepEquals(this.trackingToken, other.trackingToken) &&
            Utils.enhancedDeepEquals(this.text, other.text) &&
            Utils.enhancedDeepEquals(this.querySuggestion, other.querySuggestion) &&
            Utils.enhancedDeepEquals(this.file, other.file) &&
            Utils.enhancedDeepEquals(this.action, other.action);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            structuredResults,
            trackingToken,
            text,
            querySuggestion,
            file,
            action);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatMessageFragment.class,
                "structuredResults", structuredResults,
                "trackingToken", trackingToken,
                "text", text,
                "querySuggestion", querySuggestion,
                "file", file,
                "action", action);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<StructuredResult>> structuredResults = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
 
        private Optional<String> text = Optional.empty();
 
        private Optional<? extends QuerySuggestion> querySuggestion = Optional.empty();
 
        private Optional<? extends ChatFile> file = Optional.empty();
 
        private Optional<? extends ToolInfo> action = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of entities in the work graph retrieved via a data request.
         */
        public Builder structuredResults(List<StructuredResult> structuredResults) {
            Utils.checkNotNull(structuredResults, "structuredResults");
            this.structuredResults = Optional.ofNullable(structuredResults);
            return this;
        }

        /**
         * An array of entities in the work graph retrieved via a data request.
         */
        public Builder structuredResults(Optional<? extends List<StructuredResult>> structuredResults) {
            Utils.checkNotNull(structuredResults, "structuredResults");
            this.structuredResults = structuredResults;
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public Builder querySuggestion(QuerySuggestion querySuggestion) {
            Utils.checkNotNull(querySuggestion, "querySuggestion");
            this.querySuggestion = Optional.ofNullable(querySuggestion);
            return this;
        }

        public Builder querySuggestion(Optional<? extends QuerySuggestion> querySuggestion) {
            Utils.checkNotNull(querySuggestion, "querySuggestion");
            this.querySuggestion = querySuggestion;
            return this;
        }

        /**
         * Structure for file uploaded by a user for Chat.
         */
        public Builder file(ChatFile file) {
            Utils.checkNotNull(file, "file");
            this.file = Optional.ofNullable(file);
            return this;
        }

        /**
         * Structure for file uploaded by a user for Chat.
         */
        public Builder file(Optional<? extends ChatFile> file) {
            Utils.checkNotNull(file, "file");
            this.file = file;
            return this;
        }

        public Builder action(ToolInfo action) {
            Utils.checkNotNull(action, "action");
            this.action = Optional.ofNullable(action);
            return this;
        }

        public Builder action(Optional<? extends ToolInfo> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }
        
        public ChatMessageFragment build() {
            return new ChatMessageFragment(
                structuredResults,
                trackingToken,
                text,
                querySuggestion,
                file,
                action);
        }
    }
}
