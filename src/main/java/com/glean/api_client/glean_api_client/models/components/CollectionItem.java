/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class CollectionItem {

    /**
     * The optional name of the Collection item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<String> icon;

    /**
     * The Collection ID of the Collection that this CollectionItem belongs in.
     */
    @JsonProperty("collectionId")
    private long collectionId;

    /**
     * If this CollectionItem is indexed, the Glean Document ID of that document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentId")
    private Optional<String> documentId;

    /**
     * The URL of this CollectionItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * Unique identifier for the item within the Collection it belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemId")
    private Optional<String> itemId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    private Optional<? extends Person> createdBy;

    /**
     * Unix timestamp for when the item was first added (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private Optional<? extends Document> document;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcut")
    private Optional<? extends Shortcut> shortcut;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends Collection> collection;

    @JsonProperty("itemType")
    private CollectionItemItemType itemType;

    @JsonCreator
    public CollectionItem(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("icon") Optional<String> icon,
            @JsonProperty("collectionId") long collectionId,
            @JsonProperty("documentId") Optional<String> documentId,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("itemId") Optional<String> itemId,
            @JsonProperty("createdBy") Optional<? extends Person> createdBy,
            @JsonProperty("createdAt") Optional<OffsetDateTime> createdAt,
            @JsonProperty("document") Optional<? extends Document> document,
            @JsonProperty("shortcut") Optional<? extends Shortcut> shortcut,
            @JsonProperty("collection") Optional<? extends Collection> collection,
            @JsonProperty("itemType") CollectionItemItemType itemType) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(icon, "icon");
        Utils.checkNotNull(collectionId, "collectionId");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(itemId, "itemId");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(shortcut, "shortcut");
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(itemType, "itemType");
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.collectionId = collectionId;
        this.documentId = documentId;
        this.url = url;
        this.itemId = itemId;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.document = document;
        this.shortcut = shortcut;
        this.collection = collection;
        this.itemType = itemType;
    }
    
    public CollectionItem(
            long collectionId,
            CollectionItemItemType itemType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), collectionId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), itemType);
    }

    /**
     * The optional name of the Collection item.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    @JsonIgnore
    public Optional<String> icon() {
        return icon;
    }

    /**
     * The Collection ID of the Collection that this CollectionItem belongs in.
     */
    @JsonIgnore
    public long collectionId() {
        return collectionId;
    }

    /**
     * If this CollectionItem is indexed, the Glean Document ID of that document.
     */
    @JsonIgnore
    public Optional<String> documentId() {
        return documentId;
    }

    /**
     * The URL of this CollectionItem.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * Unique identifier for the item within the Collection it belongs to.
     */
    @JsonIgnore
    public Optional<String> itemId() {
        return itemId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> createdBy() {
        return (Optional<Person>) createdBy;
    }

    /**
     * Unix timestamp for when the item was first added (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Document> document() {
        return (Optional<Document>) document;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Shortcut> shortcut() {
        return (Optional<Shortcut>) shortcut;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> collection() {
        return (Optional<Collection>) collection;
    }

    @JsonIgnore
    public CollectionItemItemType itemType() {
        return itemType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The optional name of the Collection item.
     */
    public CollectionItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The optional name of the Collection item.
     */
    public CollectionItem withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    public CollectionItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    public CollectionItem withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    public CollectionItem withIcon(String icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    public CollectionItem withIcon(Optional<String> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }

    /**
     * The Collection ID of the Collection that this CollectionItem belongs in.
     */
    public CollectionItem withCollectionId(long collectionId) {
        Utils.checkNotNull(collectionId, "collectionId");
        this.collectionId = collectionId;
        return this;
    }

    /**
     * If this CollectionItem is indexed, the Glean Document ID of that document.
     */
    public CollectionItem withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = Optional.ofNullable(documentId);
        return this;
    }

    /**
     * If this CollectionItem is indexed, the Glean Document ID of that document.
     */
    public CollectionItem withDocumentId(Optional<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The URL of this CollectionItem.
     */
    public CollectionItem withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL of this CollectionItem.
     */
    public CollectionItem withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Unique identifier for the item within the Collection it belongs to.
     */
    public CollectionItem withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = Optional.ofNullable(itemId);
        return this;
    }

    /**
     * Unique identifier for the item within the Collection it belongs to.
     */
    public CollectionItem withItemId(Optional<String> itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    public CollectionItem withCreatedBy(Person createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }

    public CollectionItem withCreatedBy(Optional<? extends Person> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Unix timestamp for when the item was first added (in seconds since epoch UTC).
     */
    public CollectionItem withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp for when the item was first added (in seconds since epoch UTC).
     */
    public CollectionItem withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public CollectionItem withDocument(Document document) {
        Utils.checkNotNull(document, "document");
        this.document = Optional.ofNullable(document);
        return this;
    }

    public CollectionItem withDocument(Optional<? extends Document> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    public CollectionItem withShortcut(Shortcut shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = Optional.ofNullable(shortcut);
        return this;
    }

    public CollectionItem withShortcut(Optional<? extends Shortcut> shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = shortcut;
        return this;
    }

    public CollectionItem withCollection(Collection collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public CollectionItem withCollection(Optional<? extends Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public CollectionItem withItemType(CollectionItemItemType itemType) {
        Utils.checkNotNull(itemType, "itemType");
        this.itemType = itemType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollectionItem other = (CollectionItem) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.icon, other.icon) &&
            Objects.deepEquals(this.collectionId, other.collectionId) &&
            Objects.deepEquals(this.documentId, other.documentId) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.itemId, other.itemId) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.document, other.document) &&
            Objects.deepEquals(this.shortcut, other.shortcut) &&
            Objects.deepEquals(this.collection, other.collection) &&
            Objects.deepEquals(this.itemType, other.itemType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            description,
            icon,
            collectionId,
            documentId,
            url,
            itemId,
            createdBy,
            createdAt,
            document,
            shortcut,
            collection,
            itemType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CollectionItem.class,
                "name", name,
                "description", description,
                "icon", icon,
                "collectionId", collectionId,
                "documentId", documentId,
                "url", url,
                "itemId", itemId,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "document", document,
                "shortcut", shortcut,
                "collection", collection,
                "itemType", itemType);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> icon = Optional.empty();
 
        private Long collectionId;
 
        private Optional<String> documentId = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> itemId = Optional.empty();
 
        private Optional<? extends Person> createdBy = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends Document> document = Optional.empty();
 
        private Optional<? extends Shortcut> shortcut = Optional.empty();
 
        private Optional<? extends Collection> collection = Optional.empty();
 
        private CollectionItemItemType itemType;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The optional name of the Collection item.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The optional name of the Collection item.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A helpful description of why this CollectionItem is in the Collection that it's in.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A helpful description of why this CollectionItem is in the Collection that it's in.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The emoji icon for this CollectionItem. Only used for Text type items.
         */
        public Builder icon(String icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        /**
         * The emoji icon for this CollectionItem. Only used for Text type items.
         */
        public Builder icon(Optional<String> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }

        /**
         * The Collection ID of the Collection that this CollectionItem belongs in.
         */
        public Builder collectionId(long collectionId) {
            Utils.checkNotNull(collectionId, "collectionId");
            this.collectionId = collectionId;
            return this;
        }

        /**
         * If this CollectionItem is indexed, the Glean Document ID of that document.
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = Optional.ofNullable(documentId);
            return this;
        }

        /**
         * If this CollectionItem is indexed, the Glean Document ID of that document.
         */
        public Builder documentId(Optional<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        /**
         * The URL of this CollectionItem.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL of this CollectionItem.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Unique identifier for the item within the Collection it belongs to.
         */
        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = Optional.ofNullable(itemId);
            return this;
        }

        /**
         * Unique identifier for the item within the Collection it belongs to.
         */
        public Builder itemId(Optional<String> itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }

        public Builder createdBy(Person createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        public Builder createdBy(Optional<? extends Person> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * Unix timestamp for when the item was first added (in seconds since epoch UTC).
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp for when the item was first added (in seconds since epoch UTC).
         */
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder document(Document document) {
            Utils.checkNotNull(document, "document");
            this.document = Optional.ofNullable(document);
            return this;
        }

        public Builder document(Optional<? extends Document> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        public Builder shortcut(Shortcut shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = Optional.ofNullable(shortcut);
            return this;
        }

        public Builder shortcut(Optional<? extends Shortcut> shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = shortcut;
            return this;
        }

        public Builder collection(Collection collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder itemType(CollectionItemItemType itemType) {
            Utils.checkNotNull(itemType, "itemType");
            this.itemType = itemType;
            return this;
        }
        
        public CollectionItem build() {
            return new CollectionItem(
                name,
                description,
                icon,
                collectionId,
                documentId,
                url,
                itemId,
                createdBy,
                createdAt,
                document,
                shortcut,
                collection,
                itemType);
        }
    }
}
