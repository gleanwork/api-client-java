/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListDlpReportsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reports")
    private Optional<? extends List<DlpReport>> reports;

    @JsonCreator
    public ListDlpReportsResponse(
            @JsonProperty("reports") Optional<? extends List<DlpReport>> reports) {
        Utils.checkNotNull(reports, "reports");
        this.reports = reports;
    }
    
    public ListDlpReportsResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DlpReport>> reports() {
        return (Optional<List<DlpReport>>) reports;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListDlpReportsResponse withReports(List<DlpReport> reports) {
        Utils.checkNotNull(reports, "reports");
        this.reports = Optional.ofNullable(reports);
        return this;
    }

    public ListDlpReportsResponse withReports(Optional<? extends List<DlpReport>> reports) {
        Utils.checkNotNull(reports, "reports");
        this.reports = reports;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListDlpReportsResponse other = (ListDlpReportsResponse) o;
        return 
            Objects.deepEquals(this.reports, other.reports);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            reports);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListDlpReportsResponse.class,
                "reports", reports);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<DlpReport>> reports = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder reports(List<DlpReport> reports) {
            Utils.checkNotNull(reports, "reports");
            this.reports = Optional.ofNullable(reports);
            return this;
        }

        public Builder reports(Optional<? extends List<DlpReport>> reports) {
            Utils.checkNotNull(reports, "reports");
            this.reports = reports;
            return this;
        }
        
        public ListDlpReportsResponse build() {
            return new ListDlpReportsResponse(
                reports);
        }
    }
}
