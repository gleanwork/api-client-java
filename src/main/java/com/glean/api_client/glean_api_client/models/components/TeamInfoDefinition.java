/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * TeamInfoDefinition
 * 
 * <p>Information about an employee's team
 */
public class TeamInfoDefinition {

    /**
     * The unique ID of the team
     */
    @JsonProperty("id")
    private String id;

    /**
     * Human-readable team name
     */
    @JsonProperty("name")
    private String name;

    /**
     * The description of this team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessUnit")
    private Optional<String> businessUnit;

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<String> department;

    /**
     * A link to the team's photo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    private Optional<String> photoUrl;

    /**
     * A link to an external team page. If set, team results will link to it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalLink")
    private Optional<String> externalLink;

    /**
     * The emails of the team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<TeamEmail>> emails;

    /**
     * The datasource profiles of the team, e.g. `Slack`,`Github`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceProfiles")
    private Optional<? extends List<DatasourceProfile>> datasourceProfiles;

    /**
     * The members of the team
     */
    @JsonProperty("members")
    private List<TeamMember> members;

    /**
     * List of additional fields with more information about the team.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalFields")
    private Optional<? extends List<AdditionalFieldDefinition>> additionalFields;

    @JsonCreator
    public TeamInfoDefinition(
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("businessUnit") Optional<String> businessUnit,
            @JsonProperty("department") Optional<String> department,
            @JsonProperty("photoUrl") Optional<String> photoUrl,
            @JsonProperty("externalLink") Optional<String> externalLink,
            @JsonProperty("emails") Optional<? extends List<TeamEmail>> emails,
            @JsonProperty("datasourceProfiles") Optional<? extends List<DatasourceProfile>> datasourceProfiles,
            @JsonProperty("members") List<TeamMember> members,
            @JsonProperty("additionalFields") Optional<? extends List<AdditionalFieldDefinition>> additionalFields) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(businessUnit, "businessUnit");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(externalLink, "externalLink");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        Utils.checkNotNull(members, "members");
        Utils.checkNotNull(additionalFields, "additionalFields");
        this.id = id;
        this.name = name;
        this.description = description;
        this.businessUnit = businessUnit;
        this.department = department;
        this.photoUrl = photoUrl;
        this.externalLink = externalLink;
        this.emails = emails;
        this.datasourceProfiles = datasourceProfiles;
        this.members = members;
        this.additionalFields = additionalFields;
    }
    
    public TeamInfoDefinition(
            String id,
            String name,
            List<TeamMember> members) {
        this(id, name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), members, Optional.empty());
    }

    /**
     * The unique ID of the team
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Human-readable team name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The description of this team
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    @JsonIgnore
    public Optional<String> businessUnit() {
        return businessUnit;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    @JsonIgnore
    public Optional<String> department() {
        return department;
    }

    /**
     * A link to the team's photo
     */
    @JsonIgnore
    public Optional<String> photoUrl() {
        return photoUrl;
    }

    /**
     * A link to an external team page. If set, team results will link to it.
     */
    @JsonIgnore
    public Optional<String> externalLink() {
        return externalLink;
    }

    /**
     * The emails of the team
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TeamEmail>> emails() {
        return (Optional<List<TeamEmail>>) emails;
    }

    /**
     * The datasource profiles of the team, e.g. `Slack`,`Github`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DatasourceProfile>> datasourceProfiles() {
        return (Optional<List<DatasourceProfile>>) datasourceProfiles;
    }

    /**
     * The members of the team
     */
    @JsonIgnore
    public List<TeamMember> members() {
        return members;
    }

    /**
     * List of additional fields with more information about the team.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AdditionalFieldDefinition>> additionalFields() {
        return (Optional<List<AdditionalFieldDefinition>>) additionalFields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique ID of the team
     */
    public TeamInfoDefinition withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Human-readable team name
     */
    public TeamInfoDefinition withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of this team
     */
    public TeamInfoDefinition withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of this team
     */
    public TeamInfoDefinition withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public TeamInfoDefinition withBusinessUnit(String businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = Optional.ofNullable(businessUnit);
        return this;
    }

    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    public TeamInfoDefinition withBusinessUnit(Optional<String> businessUnit) {
        Utils.checkNotNull(businessUnit, "businessUnit");
        this.businessUnit = businessUnit;
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public TeamInfoDefinition withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }

    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    public TeamInfoDefinition withDepartment(Optional<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * A link to the team's photo
     */
    public TeamInfoDefinition withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = Optional.ofNullable(photoUrl);
        return this;
    }

    /**
     * A link to the team's photo
     */
    public TeamInfoDefinition withPhotoUrl(Optional<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * A link to an external team page. If set, team results will link to it.
     */
    public TeamInfoDefinition withExternalLink(String externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = Optional.ofNullable(externalLink);
        return this;
    }

    /**
     * A link to an external team page. If set, team results will link to it.
     */
    public TeamInfoDefinition withExternalLink(Optional<String> externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = externalLink;
        return this;
    }

    /**
     * The emails of the team
     */
    public TeamInfoDefinition withEmails(List<TeamEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    /**
     * The emails of the team
     */
    public TeamInfoDefinition withEmails(Optional<? extends List<TeamEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * The datasource profiles of the team, e.g. `Slack`,`Github`.
     */
    public TeamInfoDefinition withDatasourceProfiles(List<DatasourceProfile> datasourceProfiles) {
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        this.datasourceProfiles = Optional.ofNullable(datasourceProfiles);
        return this;
    }

    /**
     * The datasource profiles of the team, e.g. `Slack`,`Github`.
     */
    public TeamInfoDefinition withDatasourceProfiles(Optional<? extends List<DatasourceProfile>> datasourceProfiles) {
        Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
        this.datasourceProfiles = datasourceProfiles;
        return this;
    }

    /**
     * The members of the team
     */
    public TeamInfoDefinition withMembers(List<TeamMember> members) {
        Utils.checkNotNull(members, "members");
        this.members = members;
        return this;
    }

    /**
     * List of additional fields with more information about the team.
     */
    public TeamInfoDefinition withAdditionalFields(List<AdditionalFieldDefinition> additionalFields) {
        Utils.checkNotNull(additionalFields, "additionalFields");
        this.additionalFields = Optional.ofNullable(additionalFields);
        return this;
    }

    /**
     * List of additional fields with more information about the team.
     */
    public TeamInfoDefinition withAdditionalFields(Optional<? extends List<AdditionalFieldDefinition>> additionalFields) {
        Utils.checkNotNull(additionalFields, "additionalFields");
        this.additionalFields = additionalFields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeamInfoDefinition other = (TeamInfoDefinition) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.businessUnit, other.businessUnit) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            Objects.deepEquals(this.externalLink, other.externalLink) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.datasourceProfiles, other.datasourceProfiles) &&
            Objects.deepEquals(this.members, other.members) &&
            Objects.deepEquals(this.additionalFields, other.additionalFields);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            description,
            businessUnit,
            department,
            photoUrl,
            externalLink,
            emails,
            datasourceProfiles,
            members,
            additionalFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TeamInfoDefinition.class,
                "id", id,
                "name", name,
                "description", description,
                "businessUnit", businessUnit,
                "department", department,
                "photoUrl", photoUrl,
                "externalLink", externalLink,
                "emails", emails,
                "datasourceProfiles", datasourceProfiles,
                "members", members,
                "additionalFields", additionalFields);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> businessUnit = Optional.empty();
 
        private Optional<String> department = Optional.empty();
 
        private Optional<String> photoUrl = Optional.empty();
 
        private Optional<String> externalLink = Optional.empty();
 
        private Optional<? extends List<TeamEmail>> emails = Optional.empty();
 
        private Optional<? extends List<DatasourceProfile>> datasourceProfiles = Optional.empty();
 
        private List<TeamMember> members;
 
        private Optional<? extends List<AdditionalFieldDefinition>> additionalFields = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique ID of the team
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Human-readable team name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of this team
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of this team
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(String businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = Optional.ofNullable(businessUnit);
            return this;
        }

        /**
         * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
         */
        public Builder businessUnit(Optional<String> businessUnit) {
            Utils.checkNotNull(businessUnit, "businessUnit");
            this.businessUnit = businessUnit;
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        /**
         * An organizational unit where everyone has a similar task, e.g. `Engineering`.
         */
        public Builder department(Optional<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * A link to the team's photo
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = Optional.ofNullable(photoUrl);
            return this;
        }

        /**
         * A link to the team's photo
         */
        public Builder photoUrl(Optional<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * A link to an external team page. If set, team results will link to it.
         */
        public Builder externalLink(String externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = Optional.ofNullable(externalLink);
            return this;
        }

        /**
         * A link to an external team page. If set, team results will link to it.
         */
        public Builder externalLink(Optional<String> externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = externalLink;
            return this;
        }

        /**
         * The emails of the team
         */
        public Builder emails(List<TeamEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        /**
         * The emails of the team
         */
        public Builder emails(Optional<? extends List<TeamEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * The datasource profiles of the team, e.g. `Slack`,`Github`.
         */
        public Builder datasourceProfiles(List<DatasourceProfile> datasourceProfiles) {
            Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
            this.datasourceProfiles = Optional.ofNullable(datasourceProfiles);
            return this;
        }

        /**
         * The datasource profiles of the team, e.g. `Slack`,`Github`.
         */
        public Builder datasourceProfiles(Optional<? extends List<DatasourceProfile>> datasourceProfiles) {
            Utils.checkNotNull(datasourceProfiles, "datasourceProfiles");
            this.datasourceProfiles = datasourceProfiles;
            return this;
        }

        /**
         * The members of the team
         */
        public Builder members(List<TeamMember> members) {
            Utils.checkNotNull(members, "members");
            this.members = members;
            return this;
        }

        /**
         * List of additional fields with more information about the team.
         */
        public Builder additionalFields(List<AdditionalFieldDefinition> additionalFields) {
            Utils.checkNotNull(additionalFields, "additionalFields");
            this.additionalFields = Optional.ofNullable(additionalFields);
            return this;
        }

        /**
         * List of additional fields with more information about the team.
         */
        public Builder additionalFields(Optional<? extends List<AdditionalFieldDefinition>> additionalFields) {
            Utils.checkNotNull(additionalFields, "additionalFields");
            this.additionalFields = additionalFields;
            return this;
        }
        
        public TeamInfoDefinition build() {
            return new TeamInfoDefinition(
                id,
                name,
                description,
                businessUnit,
                department,
                photoUrl,
                externalLink,
                emails,
                datasourceProfiles,
                members,
                additionalFields);
        }
    }
}
