/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * UpdatePermissionsRequest
 * 
 * <p>Describes the request body of the /updatepermissions API call
 */
public class UpdatePermissionsRequest {

    @JsonProperty("datasource")
    private String datasource;

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    private Optional<String> objectType;

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewURL")
    private Optional<String> viewURL;

    /**
     * describes the access control details of the document
     */
    @JsonProperty("permissions")
    private DocumentPermissionsDefinition permissions;

    @JsonCreator
    public UpdatePermissionsRequest(
            @JsonProperty("datasource") String datasource,
            @JsonProperty("objectType") Optional<String> objectType,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("viewURL") Optional<String> viewURL,
            @JsonProperty("permissions") DocumentPermissionsDefinition permissions) {
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(objectType, "objectType");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(viewURL, "viewURL");
        Utils.checkNotNull(permissions, "permissions");
        this.datasource = datasource;
        this.objectType = objectType;
        this.id = id;
        this.viewURL = viewURL;
        this.permissions = permissions;
    }
    
    public UpdatePermissionsRequest(
            String datasource,
            DocumentPermissionsDefinition permissions) {
        this(datasource, Optional.empty(), Optional.empty(), Optional.empty(), permissions);
    }

    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    @JsonIgnore
    public Optional<String> objectType() {
        return objectType;
    }

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
     */
    @JsonIgnore
    public Optional<String> viewURL() {
        return viewURL;
    }

    /**
     * describes the access control details of the document
     */
    @JsonIgnore
    public DocumentPermissionsDefinition permissions() {
        return permissions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UpdatePermissionsRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    public UpdatePermissionsRequest withObjectType(String objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = Optional.ofNullable(objectType);
        return this;
    }

    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    public UpdatePermissionsRequest withObjectType(Optional<String> objectType) {
        Utils.checkNotNull(objectType, "objectType");
        this.objectType = objectType;
        return this;
    }

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    public UpdatePermissionsRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    public UpdatePermissionsRequest withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
     */
    public UpdatePermissionsRequest withViewURL(String viewURL) {
        Utils.checkNotNull(viewURL, "viewURL");
        this.viewURL = Optional.ofNullable(viewURL);
        return this;
    }

    /**
     * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
     */
    public UpdatePermissionsRequest withViewURL(Optional<String> viewURL) {
        Utils.checkNotNull(viewURL, "viewURL");
        this.viewURL = viewURL;
        return this;
    }

    /**
     * describes the access control details of the document
     */
    public UpdatePermissionsRequest withPermissions(DocumentPermissionsDefinition permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePermissionsRequest other = (UpdatePermissionsRequest) o;
        return 
            Objects.deepEquals(this.datasource, other.datasource) &&
            Objects.deepEquals(this.objectType, other.objectType) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.viewURL, other.viewURL) &&
            Objects.deepEquals(this.permissions, other.permissions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasource,
            objectType,
            id,
            viewURL,
            permissions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePermissionsRequest.class,
                "datasource", datasource,
                "objectType", objectType,
                "id", id,
                "viewURL", viewURL,
                "permissions", permissions);
    }
    
    public final static class Builder {
 
        private String datasource;
 
        private Optional<String> objectType = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> viewURL = Optional.empty();
 
        private DocumentPermissionsDefinition permissions;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
         */
        public Builder objectType(String objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = Optional.ofNullable(objectType);
            return this;
        }

        /**
         * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
         */
        public Builder objectType(Optional<String> objectType) {
            Utils.checkNotNull(objectType, "objectType");
            this.objectType = objectType;
            return this;
        }

        /**
         * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
         */
        public Builder viewURL(String viewURL) {
            Utils.checkNotNull(viewURL, "viewURL");
            this.viewURL = Optional.ofNullable(viewURL);
            return this;
        }

        /**
         * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
         */
        public Builder viewURL(Optional<String> viewURL) {
            Utils.checkNotNull(viewURL, "viewURL");
            this.viewURL = viewURL;
            return this;
        }

        /**
         * describes the access control details of the document
         */
        public Builder permissions(DocumentPermissionsDefinition permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }
        
        public UpdatePermissionsRequest build() {
            return new UpdatePermissionsRequest(
                datasource,
                objectType,
                id,
                viewURL,
                permissions);
        }
    }
}
