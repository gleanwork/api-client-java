/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class ListShortcutsPaginatedRequest {

    /**
     * Array of fields/data to be included in response that are not included by default
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeFields")
    private Optional<? extends List<ListShortcutsPaginatedRequestIncludeField>> includeFields;

    @JsonProperty("pageSize")
    private long pageSize;

    /**
     * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<String> cursor;

    /**
     * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filters")
    private Optional<? extends List<FacetFilter>> filters;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    private Optional<? extends SortOptions> sort;

    /**
     * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    @JsonCreator
    public ListShortcutsPaginatedRequest(
            @JsonProperty("includeFields") Optional<? extends List<ListShortcutsPaginatedRequestIncludeField>> includeFields,
            @JsonProperty("pageSize") long pageSize,
            @JsonProperty("cursor") Optional<String> cursor,
            @JsonProperty("filters") Optional<? extends List<FacetFilter>> filters,
            @JsonProperty("sort") Optional<? extends SortOptions> sort,
            @JsonProperty("query") Optional<String> query) {
        Utils.checkNotNull(includeFields, "includeFields");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(filters, "filters");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(query, "query");
        this.includeFields = includeFields;
        this.pageSize = pageSize;
        this.cursor = cursor;
        this.filters = filters;
        this.sort = sort;
        this.query = query;
    }
    
    public ListShortcutsPaginatedRequest(
            long pageSize) {
        this(Optional.empty(), pageSize, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Array of fields/data to be included in response that are not included by default
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListShortcutsPaginatedRequestIncludeField>> includeFields() {
        return (Optional<List<ListShortcutsPaginatedRequestIncludeField>>) includeFields;
    }

    @JsonIgnore
    public long pageSize() {
        return pageSize;
    }

    /**
     * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> filters() {
        return (Optional<List<FacetFilter>>) filters;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SortOptions> sort() {
        return (Optional<SortOptions>) sort;
    }

    /**
     * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Array of fields/data to be included in response that are not included by default
     */
    public ListShortcutsPaginatedRequest withIncludeFields(List<ListShortcutsPaginatedRequestIncludeField> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = Optional.ofNullable(includeFields);
        return this;
    }

    /**
     * Array of fields/data to be included in response that are not included by default
     */
    public ListShortcutsPaginatedRequest withIncludeFields(Optional<? extends List<ListShortcutsPaginatedRequestIncludeField>> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = includeFields;
        return this;
    }

    public ListShortcutsPaginatedRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
     */
    public ListShortcutsPaginatedRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
     */
    public ListShortcutsPaginatedRequest withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
     */
    public ListShortcutsPaginatedRequest withFilters(List<FacetFilter> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = Optional.ofNullable(filters);
        return this;
    }

    /**
     * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
     */
    public ListShortcutsPaginatedRequest withFilters(Optional<? extends List<FacetFilter>> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }

    public ListShortcutsPaginatedRequest withSort(SortOptions sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    public ListShortcutsPaginatedRequest withSort(Optional<? extends SortOptions> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
     */
    public ListShortcutsPaginatedRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
     */
    public ListShortcutsPaginatedRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListShortcutsPaginatedRequest other = (ListShortcutsPaginatedRequest) o;
        return 
            Utils.enhancedDeepEquals(this.includeFields, other.includeFields) &&
            Utils.enhancedDeepEquals(this.pageSize, other.pageSize) &&
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.filters, other.filters) &&
            Utils.enhancedDeepEquals(this.sort, other.sort) &&
            Utils.enhancedDeepEquals(this.query, other.query);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            includeFields,
            pageSize,
            cursor,
            filters,
            sort,
            query);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListShortcutsPaginatedRequest.class,
                "includeFields", includeFields,
                "pageSize", pageSize,
                "cursor", cursor,
                "filters", filters,
                "sort", sort,
                "query", query);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ListShortcutsPaginatedRequestIncludeField>> includeFields = Optional.empty();
 
        private Long pageSize;
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> filters = Optional.empty();
 
        private Optional<? extends SortOptions> sort = Optional.empty();
 
        private Optional<String> query = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Array of fields/data to be included in response that are not included by default
         */
        public Builder includeFields(List<ListShortcutsPaginatedRequestIncludeField> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * Array of fields/data to be included in response that are not included by default
         */
        public Builder includeFields(Optional<? extends List<ListShortcutsPaginatedRequestIncludeField>> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = includeFields;
            return this;
        }

        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
         */
        public Builder filters(List<FacetFilter> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        /**
         * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
         */
        public Builder filters(Optional<? extends List<FacetFilter>> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }

        public Builder sort(SortOptions sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        public Builder sort(Optional<? extends SortOptions> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        /**
         * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public ListShortcutsPaginatedRequest build() {
            return new ListShortcutsPaginatedRequest(
                includeFields,
                pageSize,
                cursor,
                filters,
                sort,
                query);
        }
    }
}
