/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class RelatedObject {

    /**
     * The ID of the related object
     */
    @JsonProperty("id")
    private String id;

    /**
     * Some metadata of the object which can be displayed, while not having the actual object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends RelatedObjectMetadata> metadata;

    @JsonCreator
    public RelatedObject(
            @JsonProperty("id") String id,
            @JsonProperty("metadata") Optional<? extends RelatedObjectMetadata> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        this.id = id;
        this.metadata = metadata;
    }
    
    public RelatedObject(
            String id) {
        this(id, Optional.empty());
    }

    /**
     * The ID of the related object
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Some metadata of the object which can be displayed, while not having the actual object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RelatedObjectMetadata> metadata() {
        return (Optional<RelatedObjectMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the related object
     */
    public RelatedObject withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Some metadata of the object which can be displayed, while not having the actual object.
     */
    public RelatedObject withMetadata(RelatedObjectMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Some metadata of the object which can be displayed, while not having the actual object.
     */
    public RelatedObject withMetadata(Optional<? extends RelatedObjectMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RelatedObject other = (RelatedObject) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RelatedObject.class,
                "id", id,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<? extends RelatedObjectMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the related object
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Some metadata of the object which can be displayed, while not having the actual object.
         */
        public Builder metadata(RelatedObjectMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Some metadata of the object which can be displayed, while not having the actual object.
         */
        public Builder metadata(Optional<? extends RelatedObjectMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public RelatedObject build() {
            return new RelatedObject(
                id,
                metadata);
        }
    }
}
