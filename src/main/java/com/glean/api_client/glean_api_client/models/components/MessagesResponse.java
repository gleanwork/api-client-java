/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class MessagesResponse {

    /**
     * Whether there are more results for client to continue requesting.
     */
    @JsonProperty("hasMore")
    private boolean hasMore;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchResponse")
    private Optional<? extends SearchResponse> searchResponse;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootMessage")
    private Optional<? extends SearchResult> rootMessage;

    @JsonCreator
    public MessagesResponse(
            @JsonProperty("hasMore") boolean hasMore,
            @JsonProperty("searchResponse") Optional<? extends SearchResponse> searchResponse,
            @JsonProperty("rootMessage") Optional<? extends SearchResult> rootMessage) {
        Utils.checkNotNull(hasMore, "hasMore");
        Utils.checkNotNull(searchResponse, "searchResponse");
        Utils.checkNotNull(rootMessage, "rootMessage");
        this.hasMore = hasMore;
        this.searchResponse = searchResponse;
        this.rootMessage = rootMessage;
    }
    
    public MessagesResponse(
            boolean hasMore) {
        this(hasMore, Optional.empty(), Optional.empty());
    }

    /**
     * Whether there are more results for client to continue requesting.
     */
    @JsonIgnore
    public boolean hasMore() {
        return hasMore;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchResponse> searchResponse() {
        return (Optional<SearchResponse>) searchResponse;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchResult> rootMessage() {
        return (Optional<SearchResult>) rootMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether there are more results for client to continue requesting.
     */
    public MessagesResponse withHasMore(boolean hasMore) {
        Utils.checkNotNull(hasMore, "hasMore");
        this.hasMore = hasMore;
        return this;
    }

    public MessagesResponse withSearchResponse(SearchResponse searchResponse) {
        Utils.checkNotNull(searchResponse, "searchResponse");
        this.searchResponse = Optional.ofNullable(searchResponse);
        return this;
    }

    public MessagesResponse withSearchResponse(Optional<? extends SearchResponse> searchResponse) {
        Utils.checkNotNull(searchResponse, "searchResponse");
        this.searchResponse = searchResponse;
        return this;
    }

    public MessagesResponse withRootMessage(SearchResult rootMessage) {
        Utils.checkNotNull(rootMessage, "rootMessage");
        this.rootMessage = Optional.ofNullable(rootMessage);
        return this;
    }

    public MessagesResponse withRootMessage(Optional<? extends SearchResult> rootMessage) {
        Utils.checkNotNull(rootMessage, "rootMessage");
        this.rootMessage = rootMessage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessagesResponse other = (MessagesResponse) o;
        return 
            Objects.deepEquals(this.hasMore, other.hasMore) &&
            Objects.deepEquals(this.searchResponse, other.searchResponse) &&
            Objects.deepEquals(this.rootMessage, other.rootMessage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hasMore,
            searchResponse,
            rootMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessagesResponse.class,
                "hasMore", hasMore,
                "searchResponse", searchResponse,
                "rootMessage", rootMessage);
    }
    
    public final static class Builder {
 
        private Boolean hasMore;
 
        private Optional<? extends SearchResponse> searchResponse = Optional.empty();
 
        private Optional<? extends SearchResult> rootMessage = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether there are more results for client to continue requesting.
         */
        public Builder hasMore(boolean hasMore) {
            Utils.checkNotNull(hasMore, "hasMore");
            this.hasMore = hasMore;
            return this;
        }

        public Builder searchResponse(SearchResponse searchResponse) {
            Utils.checkNotNull(searchResponse, "searchResponse");
            this.searchResponse = Optional.ofNullable(searchResponse);
            return this;
        }

        public Builder searchResponse(Optional<? extends SearchResponse> searchResponse) {
            Utils.checkNotNull(searchResponse, "searchResponse");
            this.searchResponse = searchResponse;
            return this;
        }

        public Builder rootMessage(SearchResult rootMessage) {
            Utils.checkNotNull(rootMessage, "rootMessage");
            this.rootMessage = Optional.ofNullable(rootMessage);
            return this;
        }

        public Builder rootMessage(Optional<? extends SearchResult> rootMessage) {
            Utils.checkNotNull(rootMessage, "rootMessage");
            this.rootMessage = rootMessage;
            return this;
        }
        
        public MessagesResponse build() {
            return new MessagesResponse(
                hasMore,
                searchResponse,
                rootMessage);
        }
    }
}
