/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.glean.api_client.glean_api_client.utils.SpeakeasyMetadata;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ListverificationsRequest {

    /**
     * Maximum number of documents to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=count")
    private Optional<Long> count;

    @JsonCreator
    public ListverificationsRequest(
            Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
    }
    
    public ListverificationsRequest() {
        this(Optional.empty());
    }

    /**
     * Maximum number of documents to return
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Maximum number of documents to return
     */
    public ListverificationsRequest withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * Maximum number of documents to return
     */
    public ListverificationsRequest withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListverificationsRequest other = (ListverificationsRequest) o;
        return 
            Objects.deepEquals(this.count, other.count);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            count);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListverificationsRequest.class,
                "count", count);
    }
    
    public final static class Builder {
 
        private Optional<Long> count = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Maximum number of documents to return
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Maximum number of documents to return
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }
        
        public ListverificationsRequest build() {
            return new ListverificationsRequest(
                count);
        }
    }
}
