/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.glean_api_client.utils.LazySingletonValue;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * PersonToTeamRelationship
 * 
 * <p>Metadata about the relationship of a person to a team.
 */
public class PersonToTeamRelationship {

    @JsonProperty("person")
    private Person person;

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationship")
    private Optional<? extends PersonToTeamRelationshipRelationship> relationship;

    /**
     * Displayed name for the relationship if relationship is set to `OTHER`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customRelationshipStr")
    private Optional<String> customRelationshipStr;

    /**
     * The team member's start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("joinDate")
    private Optional<OffsetDateTime> joinDate;

    @JsonCreator
    public PersonToTeamRelationship(
            @JsonProperty("person") Person person,
            @JsonProperty("relationship") Optional<? extends PersonToTeamRelationshipRelationship> relationship,
            @JsonProperty("customRelationshipStr") Optional<String> customRelationshipStr,
            @JsonProperty("joinDate") Optional<OffsetDateTime> joinDate) {
        Utils.checkNotNull(person, "person");
        Utils.checkNotNull(relationship, "relationship");
        Utils.checkNotNull(customRelationshipStr, "customRelationshipStr");
        Utils.checkNotNull(joinDate, "joinDate");
        this.person = person;
        this.relationship = relationship;
        this.customRelationshipStr = customRelationshipStr;
        this.joinDate = joinDate;
    }
    
    public PersonToTeamRelationship(
            Person person) {
        this(person, Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Person person() {
        return person;
    }

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PersonToTeamRelationshipRelationship> relationship() {
        return (Optional<PersonToTeamRelationshipRelationship>) relationship;
    }

    /**
     * Displayed name for the relationship if relationship is set to `OTHER`.
     */
    @JsonIgnore
    public Optional<String> customRelationshipStr() {
        return customRelationshipStr;
    }

    /**
     * The team member's start date
     */
    @JsonIgnore
    public Optional<OffsetDateTime> joinDate() {
        return joinDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PersonToTeamRelationship withPerson(Person person) {
        Utils.checkNotNull(person, "person");
        this.person = person;
        return this;
    }

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    public PersonToTeamRelationship withRelationship(PersonToTeamRelationshipRelationship relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = Optional.ofNullable(relationship);
        return this;
    }

    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    public PersonToTeamRelationship withRelationship(Optional<? extends PersonToTeamRelationshipRelationship> relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = relationship;
        return this;
    }

    /**
     * Displayed name for the relationship if relationship is set to `OTHER`.
     */
    public PersonToTeamRelationship withCustomRelationshipStr(String customRelationshipStr) {
        Utils.checkNotNull(customRelationshipStr, "customRelationshipStr");
        this.customRelationshipStr = Optional.ofNullable(customRelationshipStr);
        return this;
    }

    /**
     * Displayed name for the relationship if relationship is set to `OTHER`.
     */
    public PersonToTeamRelationship withCustomRelationshipStr(Optional<String> customRelationshipStr) {
        Utils.checkNotNull(customRelationshipStr, "customRelationshipStr");
        this.customRelationshipStr = customRelationshipStr;
        return this;
    }

    /**
     * The team member's start date
     */
    public PersonToTeamRelationship withJoinDate(OffsetDateTime joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = Optional.ofNullable(joinDate);
        return this;
    }

    /**
     * The team member's start date
     */
    public PersonToTeamRelationship withJoinDate(Optional<OffsetDateTime> joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = joinDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonToTeamRelationship other = (PersonToTeamRelationship) o;
        return 
            Utils.enhancedDeepEquals(this.person, other.person) &&
            Utils.enhancedDeepEquals(this.relationship, other.relationship) &&
            Utils.enhancedDeepEquals(this.customRelationshipStr, other.customRelationshipStr) &&
            Utils.enhancedDeepEquals(this.joinDate, other.joinDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            person,
            relationship,
            customRelationshipStr,
            joinDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PersonToTeamRelationship.class,
                "person", person,
                "relationship", relationship,
                "customRelationshipStr", customRelationshipStr,
                "joinDate", joinDate);
    }
    
    public final static class Builder {
 
        private Person person;
 
        private Optional<? extends PersonToTeamRelationshipRelationship> relationship;
 
        private Optional<String> customRelationshipStr = Optional.empty();
 
        private Optional<OffsetDateTime> joinDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder person(Person person) {
            Utils.checkNotNull(person, "person");
            this.person = person;
            return this;
        }

        /**
         * The team member's relationship to the team. This defaults to MEMBER if not set.
         */
        public Builder relationship(PersonToTeamRelationshipRelationship relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = Optional.ofNullable(relationship);
            return this;
        }

        /**
         * The team member's relationship to the team. This defaults to MEMBER if not set.
         */
        public Builder relationship(Optional<? extends PersonToTeamRelationshipRelationship> relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = relationship;
            return this;
        }

        /**
         * Displayed name for the relationship if relationship is set to `OTHER`.
         */
        public Builder customRelationshipStr(String customRelationshipStr) {
            Utils.checkNotNull(customRelationshipStr, "customRelationshipStr");
            this.customRelationshipStr = Optional.ofNullable(customRelationshipStr);
            return this;
        }

        /**
         * Displayed name for the relationship if relationship is set to `OTHER`.
         */
        public Builder customRelationshipStr(Optional<String> customRelationshipStr) {
            Utils.checkNotNull(customRelationshipStr, "customRelationshipStr");
            this.customRelationshipStr = customRelationshipStr;
            return this;
        }

        /**
         * The team member's start date
         */
        public Builder joinDate(OffsetDateTime joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = Optional.ofNullable(joinDate);
            return this;
        }

        /**
         * The team member's start date
         */
        public Builder joinDate(Optional<OffsetDateTime> joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = joinDate;
            return this;
        }
        
        public PersonToTeamRelationship build() {
            if (relationship == null) {
                relationship = _SINGLETON_VALUE_Relationship.value();
            }
            return new PersonToTeamRelationship(
                person,
                relationship,
                customRelationshipStr,
                joinDate);
        }

        private static final LazySingletonValue<Optional<? extends PersonToTeamRelationshipRelationship>> _SINGLETON_VALUE_Relationship =
                new LazySingletonValue<>(
                        "relationship",
                        "\"MEMBER\"",
                        new TypeReference<Optional<? extends PersonToTeamRelationshipRelationship>>() {});
    }
}
