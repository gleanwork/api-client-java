/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class ToolParameter {

    /**
     * Parameter type (string, number, boolean, object, array)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ToolParameterType> type;

    /**
     * The name of the parameter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of the parameter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether the parameter is required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRequired")
    private Optional<Boolean> isRequired;

    /**
     * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("possibleValues")
    private Optional<? extends List<String>> possibleValues;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends ToolParameter> items;

    /**
     * When type is 'object', this describes the structure of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private Optional<? extends Map<String, ToolParameter>> properties;

    @JsonCreator
    public ToolParameter(
            @JsonProperty("type") Optional<? extends ToolParameterType> type,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("isRequired") Optional<Boolean> isRequired,
            @JsonProperty("possibleValues") Optional<? extends List<String>> possibleValues,
            @JsonProperty("items") Optional<? extends ToolParameter> items,
            @JsonProperty("properties") Optional<? extends Map<String, ToolParameter>> properties) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(isRequired, "isRequired");
        Utils.checkNotNull(possibleValues, "possibleValues");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(properties, "properties");
        this.type = type;
        this.name = name;
        this.description = description;
        this.isRequired = isRequired;
        this.possibleValues = possibleValues;
        this.items = items;
        this.properties = properties;
    }
    
    public ToolParameter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Parameter type (string, number, boolean, object, array)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ToolParameterType> type() {
        return (Optional<ToolParameterType>) type;
    }

    /**
     * The name of the parameter
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of the parameter
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether the parameter is required
     */
    @JsonIgnore
    public Optional<Boolean> isRequired() {
        return isRequired;
    }

    /**
     * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> possibleValues() {
        return (Optional<List<String>>) possibleValues;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ToolParameter> items() {
        return (Optional<ToolParameter>) items;
    }

    /**
     * When type is 'object', this describes the structure of the object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, ToolParameter>> properties() {
        return (Optional<Map<String, ToolParameter>>) properties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Parameter type (string, number, boolean, object, array)
     */
    public ToolParameter withType(ToolParameterType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Parameter type (string, number, boolean, object, array)
     */
    public ToolParameter withType(Optional<? extends ToolParameterType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The name of the parameter
     */
    public ToolParameter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the parameter
     */
    public ToolParameter withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the parameter
     */
    public ToolParameter withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the parameter
     */
    public ToolParameter withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether the parameter is required
     */
    public ToolParameter withIsRequired(boolean isRequired) {
        Utils.checkNotNull(isRequired, "isRequired");
        this.isRequired = Optional.ofNullable(isRequired);
        return this;
    }

    /**
     * Whether the parameter is required
     */
    public ToolParameter withIsRequired(Optional<Boolean> isRequired) {
        Utils.checkNotNull(isRequired, "isRequired");
        this.isRequired = isRequired;
        return this;
    }

    /**
     * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
     */
    public ToolParameter withPossibleValues(List<String> possibleValues) {
        Utils.checkNotNull(possibleValues, "possibleValues");
        this.possibleValues = Optional.ofNullable(possibleValues);
        return this;
    }

    /**
     * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
     */
    public ToolParameter withPossibleValues(Optional<? extends List<String>> possibleValues) {
        Utils.checkNotNull(possibleValues, "possibleValues");
        this.possibleValues = possibleValues;
        return this;
    }

    public ToolParameter withItems(ToolParameter items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }

    public ToolParameter withItems(Optional<? extends ToolParameter> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * When type is 'object', this describes the structure of the object.
     */
    public ToolParameter withProperties(Map<String, ToolParameter> properties) {
        Utils.checkNotNull(properties, "properties");
        this.properties = Optional.ofNullable(properties);
        return this;
    }

    /**
     * When type is 'object', this describes the structure of the object.
     */
    public ToolParameter withProperties(Optional<? extends Map<String, ToolParameter>> properties) {
        Utils.checkNotNull(properties, "properties");
        this.properties = properties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolParameter other = (ToolParameter) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.isRequired, other.isRequired) &&
            Utils.enhancedDeepEquals(this.possibleValues, other.possibleValues) &&
            Utils.enhancedDeepEquals(this.items, other.items) &&
            Utils.enhancedDeepEquals(this.properties, other.properties);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            name,
            description,
            isRequired,
            possibleValues,
            items,
            properties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ToolParameter.class,
                "type", type,
                "name", name,
                "description", description,
                "isRequired", isRequired,
                "possibleValues", possibleValues,
                "items", items,
                "properties", properties);
    }
    
    public final static class Builder {
 
        private Optional<? extends ToolParameterType> type = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Boolean> isRequired = Optional.empty();
 
        private Optional<? extends List<String>> possibleValues = Optional.empty();
 
        private Optional<? extends ToolParameter> items = Optional.empty();
 
        private Optional<? extends Map<String, ToolParameter>> properties = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Parameter type (string, number, boolean, object, array)
         */
        public Builder type(ToolParameterType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Parameter type (string, number, boolean, object, array)
         */
        public Builder type(Optional<? extends ToolParameterType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The name of the parameter
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the parameter
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of the parameter
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the parameter
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether the parameter is required
         */
        public Builder isRequired(boolean isRequired) {
            Utils.checkNotNull(isRequired, "isRequired");
            this.isRequired = Optional.ofNullable(isRequired);
            return this;
        }

        /**
         * Whether the parameter is required
         */
        public Builder isRequired(Optional<Boolean> isRequired) {
            Utils.checkNotNull(isRequired, "isRequired");
            this.isRequired = isRequired;
            return this;
        }

        /**
         * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
         */
        public Builder possibleValues(List<String> possibleValues) {
            Utils.checkNotNull(possibleValues, "possibleValues");
            this.possibleValues = Optional.ofNullable(possibleValues);
            return this;
        }

        /**
         * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
         */
        public Builder possibleValues(Optional<? extends List<String>> possibleValues) {
            Utils.checkNotNull(possibleValues, "possibleValues");
            this.possibleValues = possibleValues;
            return this;
        }

        public Builder items(ToolParameter items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }

        public Builder items(Optional<? extends ToolParameter> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        /**
         * When type is 'object', this describes the structure of the object.
         */
        public Builder properties(Map<String, ToolParameter> properties) {
            Utils.checkNotNull(properties, "properties");
            this.properties = Optional.ofNullable(properties);
            return this;
        }

        /**
         * When type is 'object', this describes the structure of the object.
         */
        public Builder properties(Optional<? extends Map<String, ToolParameter>> properties) {
            Utils.checkNotNull(properties, "properties");
            this.properties = properties;
            return this;
        }
        
        public ToolParameter build() {
            return new ToolParameter(
                type,
                name,
                description,
                isRequired,
                possibleValues,
                items,
                properties);
        }
    }
}
