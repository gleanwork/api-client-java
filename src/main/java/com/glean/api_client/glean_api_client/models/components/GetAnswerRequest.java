/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetAnswerRequest {

    /**
     * The opaque ID of the Answer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docId")
    private Optional<String> docId;

    @JsonCreator
    public GetAnswerRequest(
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("docId") Optional<String> docId) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(docId, "docId");
        this.id = id;
        this.docId = docId;
    }
    
    public GetAnswerRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The opaque ID of the Answer.
     */
    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    @JsonIgnore
    public Optional<String> docId() {
        return docId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The opaque ID of the Answer.
     */
    public GetAnswerRequest withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The opaque ID of the Answer.
     */
    public GetAnswerRequest withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    public GetAnswerRequest withDocId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = Optional.ofNullable(docId);
        return this;
    }

    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    public GetAnswerRequest withDocId(Optional<String> docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAnswerRequest other = (GetAnswerRequest) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.docId, other.docId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            docId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAnswerRequest.class,
                "id", id,
                "docId", docId);
    }
    
    public final static class Builder {
 
        private Optional<Long> id = Optional.empty();
 
        private Optional<String> docId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The opaque ID of the Answer.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The opaque ID of the Answer.
         */
        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
         */
        public Builder docId(String docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = Optional.ofNullable(docId);
            return this;
        }

        /**
         * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
         */
        public Builder docId(Optional<String> docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = docId;
            return this;
        }
        
        public GetAnswerRequest build() {
            return new GetAnswerRequest(
                id,
                docId);
        }
    }
}
