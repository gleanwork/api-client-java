/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class ExternalShortcut {

    /**
     * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
     */
    @JsonProperty("inputAlias")
    private String inputAlias;

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * destination URL for the shortcut.
     */
    @JsonProperty("destinationUrl")
    private String destinationUrl;

    /**
     * Email of the user who created this shortcut.
     */
    @JsonProperty("createdBy")
    private String createdBy;

    /**
     * The time the shortcut was created in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<Long> createTime;

    /**
     * Email of the user who last updated this shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<String> updatedBy;

    /**
     * The time the shortcut was updated in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    private Optional<Long> updateTime;

    /**
     * Title of the golink
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The URL from which the user is then redirected to the destination URL.
     */
    @JsonProperty("intermediateUrl")
    private String intermediateUrl;

    /**
     * decayed visits score for ranking
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decayedVisitScore")
    private Optional<Double> decayedVisitScore;

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editUrl")
    private Optional<String> editUrl;

    @JsonCreator
    public ExternalShortcut(
            @JsonProperty("inputAlias") String inputAlias,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("destinationUrl") String destinationUrl,
            @JsonProperty("createdBy") String createdBy,
            @JsonProperty("createTime") Optional<Long> createTime,
            @JsonProperty("updatedBy") Optional<String> updatedBy,
            @JsonProperty("updateTime") Optional<Long> updateTime,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("intermediateUrl") String intermediateUrl,
            @JsonProperty("decayedVisitScore") Optional<Double> decayedVisitScore,
            @JsonProperty("editUrl") Optional<String> editUrl) {
        Utils.checkNotNull(inputAlias, "inputAlias");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destinationUrl, "destinationUrl");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(updateTime, "updateTime");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(intermediateUrl, "intermediateUrl");
        Utils.checkNotNull(decayedVisitScore, "decayedVisitScore");
        Utils.checkNotNull(editUrl, "editUrl");
        this.inputAlias = inputAlias;
        this.description = description;
        this.destinationUrl = destinationUrl;
        this.createdBy = createdBy;
        this.createTime = createTime;
        this.updatedBy = updatedBy;
        this.updateTime = updateTime;
        this.title = title;
        this.intermediateUrl = intermediateUrl;
        this.decayedVisitScore = decayedVisitScore;
        this.editUrl = editUrl;
    }
    
    public ExternalShortcut(
            String inputAlias,
            String destinationUrl,
            String createdBy,
            String intermediateUrl) {
        this(inputAlias, Optional.empty(), destinationUrl, createdBy, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), intermediateUrl, Optional.empty(), Optional.empty());
    }

    /**
     * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
     */
    @JsonIgnore
    public String inputAlias() {
        return inputAlias;
    }

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * destination URL for the shortcut.
     */
    @JsonIgnore
    public String destinationUrl() {
        return destinationUrl;
    }

    /**
     * Email of the user who created this shortcut.
     */
    @JsonIgnore
    public String createdBy() {
        return createdBy;
    }

    /**
     * The time the shortcut was created in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> createTime() {
        return createTime;
    }

    /**
     * Email of the user who last updated this shortcut.
     */
    @JsonIgnore
    public Optional<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The time the shortcut was updated in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> updateTime() {
        return updateTime;
    }

    /**
     * Title of the golink
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The URL from which the user is then redirected to the destination URL.
     */
    @JsonIgnore
    public String intermediateUrl() {
        return intermediateUrl;
    }

    /**
     * decayed visits score for ranking
     */
    @JsonIgnore
    public Optional<Double> decayedVisitScore() {
        return decayedVisitScore;
    }

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    @JsonIgnore
    public Optional<String> editUrl() {
        return editUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
     */
    public ExternalShortcut withInputAlias(String inputAlias) {
        Utils.checkNotNull(inputAlias, "inputAlias");
        this.inputAlias = inputAlias;
        return this;
    }

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    public ExternalShortcut withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    public ExternalShortcut withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * destination URL for the shortcut.
     */
    public ExternalShortcut withDestinationUrl(String destinationUrl) {
        Utils.checkNotNull(destinationUrl, "destinationUrl");
        this.destinationUrl = destinationUrl;
        return this;
    }

    /**
     * Email of the user who created this shortcut.
     */
    public ExternalShortcut withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The time the shortcut was created in epoch seconds.
     */
    public ExternalShortcut withCreateTime(long createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    /**
     * The time the shortcut was created in epoch seconds.
     */
    public ExternalShortcut withCreateTime(Optional<Long> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    /**
     * Email of the user who last updated this shortcut.
     */
    public ExternalShortcut withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    /**
     * Email of the user who last updated this shortcut.
     */
    public ExternalShortcut withUpdatedBy(Optional<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The time the shortcut was updated in epoch seconds.
     */
    public ExternalShortcut withUpdateTime(long updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = Optional.ofNullable(updateTime);
        return this;
    }

    /**
     * The time the shortcut was updated in epoch seconds.
     */
    public ExternalShortcut withUpdateTime(Optional<Long> updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Title of the golink
     */
    public ExternalShortcut withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Title of the golink
     */
    public ExternalShortcut withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The URL from which the user is then redirected to the destination URL.
     */
    public ExternalShortcut withIntermediateUrl(String intermediateUrl) {
        Utils.checkNotNull(intermediateUrl, "intermediateUrl");
        this.intermediateUrl = intermediateUrl;
        return this;
    }

    /**
     * decayed visits score for ranking
     */
    public ExternalShortcut withDecayedVisitScore(double decayedVisitScore) {
        Utils.checkNotNull(decayedVisitScore, "decayedVisitScore");
        this.decayedVisitScore = Optional.ofNullable(decayedVisitScore);
        return this;
    }

    /**
     * decayed visits score for ranking
     */
    public ExternalShortcut withDecayedVisitScore(Optional<Double> decayedVisitScore) {
        Utils.checkNotNull(decayedVisitScore, "decayedVisitScore");
        this.decayedVisitScore = decayedVisitScore;
        return this;
    }

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    public ExternalShortcut withEditUrl(String editUrl) {
        Utils.checkNotNull(editUrl, "editUrl");
        this.editUrl = Optional.ofNullable(editUrl);
        return this;
    }

    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    public ExternalShortcut withEditUrl(Optional<String> editUrl) {
        Utils.checkNotNull(editUrl, "editUrl");
        this.editUrl = editUrl;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalShortcut other = (ExternalShortcut) o;
        return 
            Utils.enhancedDeepEquals(this.inputAlias, other.inputAlias) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.destinationUrl, other.destinationUrl) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.createTime, other.createTime) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.updateTime, other.updateTime) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.intermediateUrl, other.intermediateUrl) &&
            Utils.enhancedDeepEquals(this.decayedVisitScore, other.decayedVisitScore) &&
            Utils.enhancedDeepEquals(this.editUrl, other.editUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            inputAlias,
            description,
            destinationUrl,
            createdBy,
            createTime,
            updatedBy,
            updateTime,
            title,
            intermediateUrl,
            decayedVisitScore,
            editUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExternalShortcut.class,
                "inputAlias", inputAlias,
                "description", description,
                "destinationUrl", destinationUrl,
                "createdBy", createdBy,
                "createTime", createTime,
                "updatedBy", updatedBy,
                "updateTime", updateTime,
                "title", title,
                "intermediateUrl", intermediateUrl,
                "decayedVisitScore", decayedVisitScore,
                "editUrl", editUrl);
    }
    
    public final static class Builder {
 
        private String inputAlias;
 
        private Optional<String> description = Optional.empty();
 
        private String destinationUrl;
 
        private String createdBy;
 
        private Optional<Long> createTime = Optional.empty();
 
        private Optional<String> updatedBy = Optional.empty();
 
        private Optional<Long> updateTime = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private String intermediateUrl;
 
        private Optional<Double> decayedVisitScore = Optional.empty();
 
        private Optional<String> editUrl = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
         */
        public Builder inputAlias(String inputAlias) {
            Utils.checkNotNull(inputAlias, "inputAlias");
            this.inputAlias = inputAlias;
            return this;
        }

        /**
         * A short, plain text blurb to help people understand the intent of the shortcut.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short, plain text blurb to help people understand the intent of the shortcut.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * destination URL for the shortcut.
         */
        public Builder destinationUrl(String destinationUrl) {
            Utils.checkNotNull(destinationUrl, "destinationUrl");
            this.destinationUrl = destinationUrl;
            return this;
        }

        /**
         * Email of the user who created this shortcut.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The time the shortcut was created in epoch seconds.
         */
        public Builder createTime(long createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        /**
         * The time the shortcut was created in epoch seconds.
         */
        public Builder createTime(Optional<Long> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        /**
         * Email of the user who last updated this shortcut.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        /**
         * Email of the user who last updated this shortcut.
         */
        public Builder updatedBy(Optional<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The time the shortcut was updated in epoch seconds.
         */
        public Builder updateTime(long updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        /**
         * The time the shortcut was updated in epoch seconds.
         */
        public Builder updateTime(Optional<Long> updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = updateTime;
            return this;
        }

        /**
         * Title of the golink
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Title of the golink
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The URL from which the user is then redirected to the destination URL.
         */
        public Builder intermediateUrl(String intermediateUrl) {
            Utils.checkNotNull(intermediateUrl, "intermediateUrl");
            this.intermediateUrl = intermediateUrl;
            return this;
        }

        /**
         * decayed visits score for ranking
         */
        public Builder decayedVisitScore(double decayedVisitScore) {
            Utils.checkNotNull(decayedVisitScore, "decayedVisitScore");
            this.decayedVisitScore = Optional.ofNullable(decayedVisitScore);
            return this;
        }

        /**
         * decayed visits score for ranking
         */
        public Builder decayedVisitScore(Optional<Double> decayedVisitScore) {
            Utils.checkNotNull(decayedVisitScore, "decayedVisitScore");
            this.decayedVisitScore = decayedVisitScore;
            return this;
        }

        /**
         * The URL using which the user can access the edit page of the shortcut.
         */
        public Builder editUrl(String editUrl) {
            Utils.checkNotNull(editUrl, "editUrl");
            this.editUrl = Optional.ofNullable(editUrl);
            return this;
        }

        /**
         * The URL using which the user can access the edit page of the shortcut.
         */
        public Builder editUrl(Optional<String> editUrl) {
            Utils.checkNotNull(editUrl, "editUrl");
            this.editUrl = editUrl;
            return this;
        }
        
        public ExternalShortcut build() {
            return new ExternalShortcut(
                inputAlias,
                description,
                destinationUrl,
                createdBy,
                createTime,
                updatedBy,
                updateTime,
                title,
                intermediateUrl,
                decayedVisitScore,
                editUrl);
        }
    }
}
