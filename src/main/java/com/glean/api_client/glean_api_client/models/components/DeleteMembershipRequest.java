/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * DeleteMembershipRequest
 * 
 * <p>Describes the request body of the /deletemembership API call
 */
public class DeleteMembershipRequest {

    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<Long> version;

    /**
     * The datasource for which the membership is removed
     */
    @JsonProperty("datasource")
    private String datasource;

    /**
     * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
     */
    @JsonProperty("membership")
    private DatasourceMembershipDefinition membership;

    @JsonCreator
    public DeleteMembershipRequest(
            @JsonProperty("version") Optional<Long> version,
            @JsonProperty("datasource") String datasource,
            @JsonProperty("membership") DatasourceMembershipDefinition membership) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(datasource, "datasource");
        Utils.checkNotNull(membership, "membership");
        this.version = version;
        this.datasource = datasource;
        this.membership = membership;
    }
    
    public DeleteMembershipRequest(
            String datasource,
            DatasourceMembershipDefinition membership) {
        this(Optional.empty(), datasource, membership);
    }

    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    @JsonIgnore
    public Optional<Long> version() {
        return version;
    }

    /**
     * The datasource for which the membership is removed
     */
    @JsonIgnore
    public String datasource() {
        return datasource;
    }

    /**
     * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
     */
    @JsonIgnore
    public DatasourceMembershipDefinition membership() {
        return membership;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    public DeleteMembershipRequest withVersion(long version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    public DeleteMembershipRequest withVersion(Optional<Long> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The datasource for which the membership is removed
     */
    public DeleteMembershipRequest withDatasource(String datasource) {
        Utils.checkNotNull(datasource, "datasource");
        this.datasource = datasource;
        return this;
    }

    /**
     * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
     */
    public DeleteMembershipRequest withMembership(DatasourceMembershipDefinition membership) {
        Utils.checkNotNull(membership, "membership");
        this.membership = membership;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteMembershipRequest other = (DeleteMembershipRequest) o;
        return 
            Utils.enhancedDeepEquals(this.version, other.version) &&
            Utils.enhancedDeepEquals(this.datasource, other.datasource) &&
            Utils.enhancedDeepEquals(this.membership, other.membership);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            version,
            datasource,
            membership);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteMembershipRequest.class,
                "version", version,
                "datasource", datasource,
                "membership", membership);
    }
    
    public final static class Builder {
 
        private Optional<Long> version = Optional.empty();
 
        private String datasource;
 
        private DatasourceMembershipDefinition membership;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
         */
        public Builder version(long version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
         */
        public Builder version(Optional<Long> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The datasource for which the membership is removed
         */
        public Builder datasource(String datasource) {
            Utils.checkNotNull(datasource, "datasource");
            this.datasource = datasource;
            return this;
        }

        /**
         * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
         */
        public Builder membership(DatasourceMembershipDefinition membership) {
            Utils.checkNotNull(membership, "membership");
            this.membership = membership;
            return this;
        }
        
        public DeleteMembershipRequest build() {
            return new DeleteMembershipRequest(
                version,
                datasource,
                membership);
        }
    }
}
