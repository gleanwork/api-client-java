/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CodeLine {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineNumber")
    private Optional<Long> lineNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<String> content;

    /**
     * Index ranges depicting matched sections of the line
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ranges")
    private Optional<? extends List<TextRange>> ranges;

    @JsonCreator
    public CodeLine(
            @JsonProperty("lineNumber") Optional<Long> lineNumber,
            @JsonProperty("content") Optional<String> content,
            @JsonProperty("ranges") Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(ranges, "ranges");
        this.lineNumber = lineNumber;
        this.content = content;
        this.ranges = ranges;
    }
    
    public CodeLine() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> lineNumber() {
        return lineNumber;
    }

    @JsonIgnore
    public Optional<String> content() {
        return content;
    }

    /**
     * Index ranges depicting matched sections of the line
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TextRange>> ranges() {
        return (Optional<List<TextRange>>) ranges;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CodeLine withLineNumber(long lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = Optional.ofNullable(lineNumber);
        return this;
    }

    public CodeLine withLineNumber(Optional<Long> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }

    public CodeLine withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    public CodeLine withContent(Optional<String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * Index ranges depicting matched sections of the line
     */
    public CodeLine withRanges(List<TextRange> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = Optional.ofNullable(ranges);
        return this;
    }

    /**
     * Index ranges depicting matched sections of the line
     */
    public CodeLine withRanges(Optional<? extends List<TextRange>> ranges) {
        Utils.checkNotNull(ranges, "ranges");
        this.ranges = ranges;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CodeLine other = (CodeLine) o;
        return 
            Objects.deepEquals(this.lineNumber, other.lineNumber) &&
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.ranges, other.ranges);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lineNumber,
            content,
            ranges);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CodeLine.class,
                "lineNumber", lineNumber,
                "content", content,
                "ranges", ranges);
    }
    
    public final static class Builder {
 
        private Optional<Long> lineNumber = Optional.empty();
 
        private Optional<String> content = Optional.empty();
 
        private Optional<? extends List<TextRange>> ranges = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder lineNumber(long lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = Optional.ofNullable(lineNumber);
            return this;
        }

        public Builder lineNumber(Optional<Long> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        public Builder content(Optional<String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * Index ranges depicting matched sections of the line
         */
        public Builder ranges(List<TextRange> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * Index ranges depicting matched sections of the line
         */
        public Builder ranges(Optional<? extends List<TextRange>> ranges) {
            Utils.checkNotNull(ranges, "ranges");
            this.ranges = ranges;
            return this;
        }
        
        public CodeLine build() {
            return new CodeLine(
                lineNumber,
                content,
                ranges);
        }
    }
}
