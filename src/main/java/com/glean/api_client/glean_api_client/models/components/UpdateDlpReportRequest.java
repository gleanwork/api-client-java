/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class UpdateDlpReportRequest {

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    private Optional<? extends DlpConfig> config;

    /**
     * Interval between scans. DAILY is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<? extends DlpFrequency> frequency;

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends DlpReportStatus> status;

    /**
     * The new autoHideDoc boolean the policy will be updated to if provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoHideDocs")
    private Optional<Boolean> autoHideDocs;

    /**
     * The new name of the policy if provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportName")
    private Optional<String> reportName;

    @JsonCreator
    public UpdateDlpReportRequest(
            @JsonProperty("config") Optional<? extends DlpConfig> config,
            @JsonProperty("frequency") Optional<? extends DlpFrequency> frequency,
            @JsonProperty("status") Optional<? extends DlpReportStatus> status,
            @JsonProperty("autoHideDocs") Optional<Boolean> autoHideDocs,
            @JsonProperty("reportName") Optional<String> reportName) {
        Utils.checkNotNull(config, "config");
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        Utils.checkNotNull(reportName, "reportName");
        this.config = config;
        this.frequency = frequency;
        this.status = status;
        this.autoHideDocs = autoHideDocs;
        this.reportName = reportName;
    }
    
    public UpdateDlpReportRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpConfig> config() {
        return (Optional<DlpConfig>) config;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpFrequency> frequency() {
        return (Optional<DlpFrequency>) frequency;
    }

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpReportStatus> status() {
        return (Optional<DlpReportStatus>) status;
    }

    /**
     * The new autoHideDoc boolean the policy will be updated to if provided.
     */
    @JsonIgnore
    public Optional<Boolean> autoHideDocs() {
        return autoHideDocs;
    }

    /**
     * The new name of the policy if provided.
     */
    @JsonIgnore
    public Optional<String> reportName() {
        return reportName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public UpdateDlpReportRequest withConfig(DlpConfig config) {
        Utils.checkNotNull(config, "config");
        this.config = Optional.ofNullable(config);
        return this;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public UpdateDlpReportRequest withConfig(Optional<? extends DlpConfig> config) {
        Utils.checkNotNull(config, "config");
        this.config = config;
        return this;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    public UpdateDlpReportRequest withFrequency(DlpFrequency frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    public UpdateDlpReportRequest withFrequency(Optional<? extends DlpFrequency> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    public UpdateDlpReportRequest withStatus(DlpReportStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    public UpdateDlpReportRequest withStatus(Optional<? extends DlpReportStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The new autoHideDoc boolean the policy will be updated to if provided.
     */
    public UpdateDlpReportRequest withAutoHideDocs(boolean autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = Optional.ofNullable(autoHideDocs);
        return this;
    }

    /**
     * The new autoHideDoc boolean the policy will be updated to if provided.
     */
    public UpdateDlpReportRequest withAutoHideDocs(Optional<Boolean> autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = autoHideDocs;
        return this;
    }

    /**
     * The new name of the policy if provided.
     */
    public UpdateDlpReportRequest withReportName(String reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = Optional.ofNullable(reportName);
        return this;
    }

    /**
     * The new name of the policy if provided.
     */
    public UpdateDlpReportRequest withReportName(Optional<String> reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = reportName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDlpReportRequest other = (UpdateDlpReportRequest) o;
        return 
            Utils.enhancedDeepEquals(this.config, other.config) &&
            Utils.enhancedDeepEquals(this.frequency, other.frequency) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.autoHideDocs, other.autoHideDocs) &&
            Utils.enhancedDeepEquals(this.reportName, other.reportName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            config,
            frequency,
            status,
            autoHideDocs,
            reportName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDlpReportRequest.class,
                "config", config,
                "frequency", frequency,
                "status", status,
                "autoHideDocs", autoHideDocs,
                "reportName", reportName);
    }
    
    public final static class Builder {
 
        private Optional<? extends DlpConfig> config = Optional.empty();
 
        private Optional<? extends DlpFrequency> frequency = Optional.empty();
 
        private Optional<? extends DlpReportStatus> status = Optional.empty();
 
        private Optional<Boolean> autoHideDocs = Optional.empty();
 
        private Optional<String> reportName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(DlpConfig config) {
            Utils.checkNotNull(config, "config");
            this.config = Optional.ofNullable(config);
            return this;
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(Optional<? extends DlpConfig> config) {
            Utils.checkNotNull(config, "config");
            this.config = config;
            return this;
        }

        /**
         * Interval between scans. DAILY is deprecated.
         */
        public Builder frequency(DlpFrequency frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * Interval between scans. DAILY is deprecated.
         */
        public Builder frequency(Optional<? extends DlpFrequency> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }

        /**
         * The status of the policy/report. Only ACTIVE status will be picked for scans.
         */
        public Builder status(DlpReportStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the policy/report. Only ACTIVE status will be picked for scans.
         */
        public Builder status(Optional<? extends DlpReportStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The new autoHideDoc boolean the policy will be updated to if provided.
         */
        public Builder autoHideDocs(boolean autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = Optional.ofNullable(autoHideDocs);
            return this;
        }

        /**
         * The new autoHideDoc boolean the policy will be updated to if provided.
         */
        public Builder autoHideDocs(Optional<Boolean> autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = autoHideDocs;
            return this;
        }

        /**
         * The new name of the policy if provided.
         */
        public Builder reportName(String reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = Optional.ofNullable(reportName);
            return this;
        }

        /**
         * The new name of the policy if provided.
         */
        public Builder reportName(Optional<String> reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = reportName;
            return this;
        }
        
        public UpdateDlpReportRequest build() {
            return new UpdateDlpReportRequest(
                config,
                frequency,
                status,
                autoHideDocs,
                reportName);
        }
    }
}
