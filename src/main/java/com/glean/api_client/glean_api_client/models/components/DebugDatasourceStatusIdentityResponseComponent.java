/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class DebugDatasourceStatusIdentityResponseComponent {

    /**
     * Information about active and recent successful uploads for the datasource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bulkUploadHistory")
    private Optional<? extends List<BulkUploadHistoryEvent>> bulkUploadHistory;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counts")
    private Optional<? extends DebugDatasourceStatusIdentityResponseComponentCounts> counts;

    @JsonCreator
    public DebugDatasourceStatusIdentityResponseComponent(
            @JsonProperty("bulkUploadHistory") Optional<? extends List<BulkUploadHistoryEvent>> bulkUploadHistory,
            @JsonProperty("counts") Optional<? extends DebugDatasourceStatusIdentityResponseComponentCounts> counts) {
        Utils.checkNotNull(bulkUploadHistory, "bulkUploadHistory");
        Utils.checkNotNull(counts, "counts");
        this.bulkUploadHistory = bulkUploadHistory;
        this.counts = counts;
    }
    
    public DebugDatasourceStatusIdentityResponseComponent() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Information about active and recent successful uploads for the datasource
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BulkUploadHistoryEvent>> bulkUploadHistory() {
        return (Optional<List<BulkUploadHistoryEvent>>) bulkUploadHistory;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DebugDatasourceStatusIdentityResponseComponentCounts> counts() {
        return (Optional<DebugDatasourceStatusIdentityResponseComponentCounts>) counts;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Information about active and recent successful uploads for the datasource
     */
    public DebugDatasourceStatusIdentityResponseComponent withBulkUploadHistory(List<BulkUploadHistoryEvent> bulkUploadHistory) {
        Utils.checkNotNull(bulkUploadHistory, "bulkUploadHistory");
        this.bulkUploadHistory = Optional.ofNullable(bulkUploadHistory);
        return this;
    }

    /**
     * Information about active and recent successful uploads for the datasource
     */
    public DebugDatasourceStatusIdentityResponseComponent withBulkUploadHistory(Optional<? extends List<BulkUploadHistoryEvent>> bulkUploadHistory) {
        Utils.checkNotNull(bulkUploadHistory, "bulkUploadHistory");
        this.bulkUploadHistory = bulkUploadHistory;
        return this;
    }

    public DebugDatasourceStatusIdentityResponseComponent withCounts(DebugDatasourceStatusIdentityResponseComponentCounts counts) {
        Utils.checkNotNull(counts, "counts");
        this.counts = Optional.ofNullable(counts);
        return this;
    }

    public DebugDatasourceStatusIdentityResponseComponent withCounts(Optional<? extends DebugDatasourceStatusIdentityResponseComponentCounts> counts) {
        Utils.checkNotNull(counts, "counts");
        this.counts = counts;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugDatasourceStatusIdentityResponseComponent other = (DebugDatasourceStatusIdentityResponseComponent) o;
        return 
            Utils.enhancedDeepEquals(this.bulkUploadHistory, other.bulkUploadHistory) &&
            Utils.enhancedDeepEquals(this.counts, other.counts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            bulkUploadHistory,
            counts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugDatasourceStatusIdentityResponseComponent.class,
                "bulkUploadHistory", bulkUploadHistory,
                "counts", counts);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<BulkUploadHistoryEvent>> bulkUploadHistory = Optional.empty();
 
        private Optional<? extends DebugDatasourceStatusIdentityResponseComponentCounts> counts = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Information about active and recent successful uploads for the datasource
         */
        public Builder bulkUploadHistory(List<BulkUploadHistoryEvent> bulkUploadHistory) {
            Utils.checkNotNull(bulkUploadHistory, "bulkUploadHistory");
            this.bulkUploadHistory = Optional.ofNullable(bulkUploadHistory);
            return this;
        }

        /**
         * Information about active and recent successful uploads for the datasource
         */
        public Builder bulkUploadHistory(Optional<? extends List<BulkUploadHistoryEvent>> bulkUploadHistory) {
            Utils.checkNotNull(bulkUploadHistory, "bulkUploadHistory");
            this.bulkUploadHistory = bulkUploadHistory;
            return this;
        }

        public Builder counts(DebugDatasourceStatusIdentityResponseComponentCounts counts) {
            Utils.checkNotNull(counts, "counts");
            this.counts = Optional.ofNullable(counts);
            return this;
        }

        public Builder counts(Optional<? extends DebugDatasourceStatusIdentityResponseComponentCounts> counts) {
            Utils.checkNotNull(counts, "counts");
            this.counts = counts;
            return this;
        }
        
        public DebugDatasourceStatusIdentityResponseComponent build() {
            return new DebugDatasourceStatusIdentityResponseComponent(
                bulkUploadHistory,
                counts);
        }
    }
}
