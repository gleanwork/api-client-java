/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * DlpReport
 * 
 * <p>Full policy information that will be used for scans.
 */
public class DlpReport {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    private Optional<? extends DlpConfig> config;

    /**
     * Interval between scans. DAILY is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<? extends DlpFrequency> frequency;

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends DlpReportStatus> status;

    /**
     * Details about the person who created this report/policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    private Optional<? extends DlpPerson> createdBy;

    /**
     * Timestamp at which the policy was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * Timestamp at which the policy was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdatedAt")
    private Optional<String> lastUpdatedAt;

    /**
     * Auto hide documents with findings in the policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoHideDocs")
    private Optional<Boolean> autoHideDocs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastScanStatus")
    private Optional<? extends LastScanStatus> lastScanStatus;

    /**
     * The timestamp at which the report's last run/scan began.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastScanStartTime")
    private Optional<String> lastScanStartTime;

    /**
     * Details about the person who created this report/policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends DlpPerson> updatedBy;

    @JsonCreator
    public DlpReport(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("config") Optional<? extends DlpConfig> config,
            @JsonProperty("frequency") Optional<? extends DlpFrequency> frequency,
            @JsonProperty("status") Optional<? extends DlpReportStatus> status,
            @JsonProperty("createdBy") Optional<? extends DlpPerson> createdBy,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("lastUpdatedAt") Optional<String> lastUpdatedAt,
            @JsonProperty("autoHideDocs") Optional<Boolean> autoHideDocs,
            @JsonProperty("lastScanStatus") Optional<? extends LastScanStatus> lastScanStatus,
            @JsonProperty("lastScanStartTime") Optional<String> lastScanStartTime,
            @JsonProperty("updatedBy") Optional<? extends DlpPerson> updatedBy) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(config, "config");
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        Utils.checkNotNull(lastScanStatus, "lastScanStatus");
        Utils.checkNotNull(lastScanStartTime, "lastScanStartTime");
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.id = id;
        this.name = name;
        this.config = config;
        this.frequency = frequency;
        this.status = status;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.lastUpdatedAt = lastUpdatedAt;
        this.autoHideDocs = autoHideDocs;
        this.lastScanStatus = lastScanStatus;
        this.lastScanStartTime = lastScanStartTime;
        this.updatedBy = updatedBy;
    }
    
    public DlpReport() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpConfig> config() {
        return (Optional<DlpConfig>) config;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpFrequency> frequency() {
        return (Optional<DlpFrequency>) frequency;
    }

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpReportStatus> status() {
        return (Optional<DlpReportStatus>) status;
    }

    /**
     * Details about the person who created this report/policy.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpPerson> createdBy() {
        return (Optional<DlpPerson>) createdBy;
    }

    /**
     * Timestamp at which the policy was created.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * Timestamp at which the policy was last updated.
     */
    @JsonIgnore
    public Optional<String> lastUpdatedAt() {
        return lastUpdatedAt;
    }

    /**
     * Auto hide documents with findings in the policy.
     */
    @JsonIgnore
    public Optional<Boolean> autoHideDocs() {
        return autoHideDocs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LastScanStatus> lastScanStatus() {
        return (Optional<LastScanStatus>) lastScanStatus;
    }

    /**
     * The timestamp at which the report's last run/scan began.
     */
    @JsonIgnore
    public Optional<String> lastScanStartTime() {
        return lastScanStartTime;
    }

    /**
     * Details about the person who created this report/policy.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DlpPerson> updatedBy() {
        return (Optional<DlpPerson>) updatedBy;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DlpReport withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public DlpReport withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public DlpReport withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public DlpReport withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public DlpReport withConfig(DlpConfig config) {
        Utils.checkNotNull(config, "config");
        this.config = Optional.ofNullable(config);
        return this;
    }

    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    public DlpReport withConfig(Optional<? extends DlpConfig> config) {
        Utils.checkNotNull(config, "config");
        this.config = config;
        return this;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    public DlpReport withFrequency(DlpFrequency frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * Interval between scans. DAILY is deprecated.
     */
    public DlpReport withFrequency(Optional<? extends DlpFrequency> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    public DlpReport withStatus(DlpReportStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    public DlpReport withStatus(Optional<? extends DlpReportStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Details about the person who created this report/policy.
     */
    public DlpReport withCreatedBy(DlpPerson createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }

    /**
     * Details about the person who created this report/policy.
     */
    public DlpReport withCreatedBy(Optional<? extends DlpPerson> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Timestamp at which the policy was created.
     */
    public DlpReport withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp at which the policy was created.
     */
    public DlpReport withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Timestamp at which the policy was last updated.
     */
    public DlpReport withLastUpdatedAt(String lastUpdatedAt) {
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        this.lastUpdatedAt = Optional.ofNullable(lastUpdatedAt);
        return this;
    }

    /**
     * Timestamp at which the policy was last updated.
     */
    public DlpReport withLastUpdatedAt(Optional<String> lastUpdatedAt) {
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        this.lastUpdatedAt = lastUpdatedAt;
        return this;
    }

    /**
     * Auto hide documents with findings in the policy.
     */
    public DlpReport withAutoHideDocs(boolean autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = Optional.ofNullable(autoHideDocs);
        return this;
    }

    /**
     * Auto hide documents with findings in the policy.
     */
    public DlpReport withAutoHideDocs(Optional<Boolean> autoHideDocs) {
        Utils.checkNotNull(autoHideDocs, "autoHideDocs");
        this.autoHideDocs = autoHideDocs;
        return this;
    }

    public DlpReport withLastScanStatus(LastScanStatus lastScanStatus) {
        Utils.checkNotNull(lastScanStatus, "lastScanStatus");
        this.lastScanStatus = Optional.ofNullable(lastScanStatus);
        return this;
    }

    public DlpReport withLastScanStatus(Optional<? extends LastScanStatus> lastScanStatus) {
        Utils.checkNotNull(lastScanStatus, "lastScanStatus");
        this.lastScanStatus = lastScanStatus;
        return this;
    }

    /**
     * The timestamp at which the report's last run/scan began.
     */
    public DlpReport withLastScanStartTime(String lastScanStartTime) {
        Utils.checkNotNull(lastScanStartTime, "lastScanStartTime");
        this.lastScanStartTime = Optional.ofNullable(lastScanStartTime);
        return this;
    }

    /**
     * The timestamp at which the report's last run/scan began.
     */
    public DlpReport withLastScanStartTime(Optional<String> lastScanStartTime) {
        Utils.checkNotNull(lastScanStartTime, "lastScanStartTime");
        this.lastScanStartTime = lastScanStartTime;
        return this;
    }

    /**
     * Details about the person who created this report/policy.
     */
    public DlpReport withUpdatedBy(DlpPerson updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    /**
     * Details about the person who created this report/policy.
     */
    public DlpReport withUpdatedBy(Optional<? extends DlpPerson> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DlpReport other = (DlpReport) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.config, other.config) &&
            Objects.deepEquals(this.frequency, other.frequency) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.lastUpdatedAt, other.lastUpdatedAt) &&
            Objects.deepEquals(this.autoHideDocs, other.autoHideDocs) &&
            Objects.deepEquals(this.lastScanStatus, other.lastScanStatus) &&
            Objects.deepEquals(this.lastScanStartTime, other.lastScanStartTime) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            config,
            frequency,
            status,
            createdBy,
            createdAt,
            lastUpdatedAt,
            autoHideDocs,
            lastScanStatus,
            lastScanStartTime,
            updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DlpReport.class,
                "id", id,
                "name", name,
                "config", config,
                "frequency", frequency,
                "status", status,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "lastUpdatedAt", lastUpdatedAt,
                "autoHideDocs", autoHideDocs,
                "lastScanStatus", lastScanStatus,
                "lastScanStartTime", lastScanStartTime,
                "updatedBy", updatedBy);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends DlpConfig> config = Optional.empty();
 
        private Optional<? extends DlpFrequency> frequency = Optional.empty();
 
        private Optional<? extends DlpReportStatus> status = Optional.empty();
 
        private Optional<? extends DlpPerson> createdBy = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<String> lastUpdatedAt = Optional.empty();
 
        private Optional<Boolean> autoHideDocs = Optional.empty();
 
        private Optional<? extends LastScanStatus> lastScanStatus = Optional.empty();
 
        private Optional<String> lastScanStartTime = Optional.empty();
 
        private Optional<? extends DlpPerson> updatedBy = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(DlpConfig config) {
            Utils.checkNotNull(config, "config");
            this.config = Optional.ofNullable(config);
            return this;
        }

        /**
         * Detailed configuration of what documents and sensitive content will be scanned.
         */
        public Builder config(Optional<? extends DlpConfig> config) {
            Utils.checkNotNull(config, "config");
            this.config = config;
            return this;
        }

        /**
         * Interval between scans. DAILY is deprecated.
         */
        public Builder frequency(DlpFrequency frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * Interval between scans. DAILY is deprecated.
         */
        public Builder frequency(Optional<? extends DlpFrequency> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }

        /**
         * The status of the policy/report. Only ACTIVE status will be picked for scans.
         */
        public Builder status(DlpReportStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the policy/report. Only ACTIVE status will be picked for scans.
         */
        public Builder status(Optional<? extends DlpReportStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Details about the person who created this report/policy.
         */
        public Builder createdBy(DlpPerson createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        /**
         * Details about the person who created this report/policy.
         */
        public Builder createdBy(Optional<? extends DlpPerson> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * Timestamp at which the policy was created.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp at which the policy was created.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Timestamp at which the policy was last updated.
         */
        public Builder lastUpdatedAt(String lastUpdatedAt) {
            Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
            this.lastUpdatedAt = Optional.ofNullable(lastUpdatedAt);
            return this;
        }

        /**
         * Timestamp at which the policy was last updated.
         */
        public Builder lastUpdatedAt(Optional<String> lastUpdatedAt) {
            Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
            this.lastUpdatedAt = lastUpdatedAt;
            return this;
        }

        /**
         * Auto hide documents with findings in the policy.
         */
        public Builder autoHideDocs(boolean autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = Optional.ofNullable(autoHideDocs);
            return this;
        }

        /**
         * Auto hide documents with findings in the policy.
         */
        public Builder autoHideDocs(Optional<Boolean> autoHideDocs) {
            Utils.checkNotNull(autoHideDocs, "autoHideDocs");
            this.autoHideDocs = autoHideDocs;
            return this;
        }

        public Builder lastScanStatus(LastScanStatus lastScanStatus) {
            Utils.checkNotNull(lastScanStatus, "lastScanStatus");
            this.lastScanStatus = Optional.ofNullable(lastScanStatus);
            return this;
        }

        public Builder lastScanStatus(Optional<? extends LastScanStatus> lastScanStatus) {
            Utils.checkNotNull(lastScanStatus, "lastScanStatus");
            this.lastScanStatus = lastScanStatus;
            return this;
        }

        /**
         * The timestamp at which the report's last run/scan began.
         */
        public Builder lastScanStartTime(String lastScanStartTime) {
            Utils.checkNotNull(lastScanStartTime, "lastScanStartTime");
            this.lastScanStartTime = Optional.ofNullable(lastScanStartTime);
            return this;
        }

        /**
         * The timestamp at which the report's last run/scan began.
         */
        public Builder lastScanStartTime(Optional<String> lastScanStartTime) {
            Utils.checkNotNull(lastScanStartTime, "lastScanStartTime");
            this.lastScanStartTime = lastScanStartTime;
            return this;
        }

        /**
         * Details about the person who created this report/policy.
         */
        public Builder updatedBy(DlpPerson updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        /**
         * Details about the person who created this report/policy.
         */
        public Builder updatedBy(Optional<? extends DlpPerson> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }
        
        public DlpReport build() {
            return new DlpReport(
                id,
                name,
                config,
                frequency,
                status,
                createdBy,
                createdAt,
                lastUpdatedAt,
                autoHideDocs,
                lastScanStatus,
                lastScanStartTime,
                updatedBy);
        }
    }
}
