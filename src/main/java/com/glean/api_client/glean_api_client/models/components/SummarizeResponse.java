/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SummarizeResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends Error> error;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends Summary> summary;

    /**
     * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingToken")
    private Optional<String> trackingToken;

    @JsonCreator
    public SummarizeResponse(
            @JsonProperty("error") Optional<? extends Error> error,
            @JsonProperty("summary") Optional<? extends Summary> summary,
            @JsonProperty("trackingToken") Optional<String> trackingToken) {
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.error = error;
        this.summary = summary;
        this.trackingToken = trackingToken;
    }
    
    public SummarizeResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Error> error() {
        return (Optional<Error>) error;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Summary> summary() {
        return (Optional<Summary>) summary;
    }

    /**
     * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
     */
    @JsonIgnore
    public Optional<String> trackingToken() {
        return trackingToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SummarizeResponse withError(Error error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public SummarizeResponse withError(Optional<? extends Error> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public SummarizeResponse withSummary(Summary summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public SummarizeResponse withSummary(Optional<? extends Summary> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
     */
    public SummarizeResponse withTrackingToken(String trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = Optional.ofNullable(trackingToken);
        return this;
    }

    /**
     * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
     */
    public SummarizeResponse withTrackingToken(Optional<String> trackingToken) {
        Utils.checkNotNull(trackingToken, "trackingToken");
        this.trackingToken = trackingToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SummarizeResponse other = (SummarizeResponse) o;
        return 
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.summary, other.summary) &&
            Objects.deepEquals(this.trackingToken, other.trackingToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            error,
            summary,
            trackingToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SummarizeResponse.class,
                "error", error,
                "summary", summary,
                "trackingToken", trackingToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends Error> error = Optional.empty();
 
        private Optional<? extends Summary> summary = Optional.empty();
 
        private Optional<String> trackingToken = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder error(Error error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends Error> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder summary(Summary summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends Summary> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        /**
         * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(String trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = Optional.ofNullable(trackingToken);
            return this;
        }

        /**
         * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
         */
        public Builder trackingToken(Optional<String> trackingToken) {
            Utils.checkNotNull(trackingToken, "trackingToken");
            this.trackingToken = trackingToken;
            return this;
        }
        
        public SummarizeResponse build() {
            return new SummarizeResponse(
                error,
                summary,
                trackingToken);
        }
    }
}
