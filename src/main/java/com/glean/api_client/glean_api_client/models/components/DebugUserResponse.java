/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * DebugUserResponse
 * 
 * <p>Describes the response body of the /debug/{datasource}/user API call
 */
public class DebugUserResponse {

    /**
     * Describes the user status response body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends UserStatusResponse> status;

    /**
     * List of groups the user is a member of, as uploaded via permissions API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadedGroups")
    private Optional<? extends List<DatasourceGroupDefinition>> uploadedGroups;

    @JsonCreator
    public DebugUserResponse(
            @JsonProperty("status") Optional<? extends UserStatusResponse> status,
            @JsonProperty("uploadedGroups") Optional<? extends List<DatasourceGroupDefinition>> uploadedGroups) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(uploadedGroups, "uploadedGroups");
        this.status = status;
        this.uploadedGroups = uploadedGroups;
    }
    
    public DebugUserResponse() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Describes the user status response body
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserStatusResponse> status() {
        return (Optional<UserStatusResponse>) status;
    }

    /**
     * List of groups the user is a member of, as uploaded via permissions API.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DatasourceGroupDefinition>> uploadedGroups() {
        return (Optional<List<DatasourceGroupDefinition>>) uploadedGroups;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Describes the user status response body
     */
    public DebugUserResponse withStatus(UserStatusResponse status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Describes the user status response body
     */
    public DebugUserResponse withStatus(Optional<? extends UserStatusResponse> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * List of groups the user is a member of, as uploaded via permissions API.
     */
    public DebugUserResponse withUploadedGroups(List<DatasourceGroupDefinition> uploadedGroups) {
        Utils.checkNotNull(uploadedGroups, "uploadedGroups");
        this.uploadedGroups = Optional.ofNullable(uploadedGroups);
        return this;
    }

    /**
     * List of groups the user is a member of, as uploaded via permissions API.
     */
    public DebugUserResponse withUploadedGroups(Optional<? extends List<DatasourceGroupDefinition>> uploadedGroups) {
        Utils.checkNotNull(uploadedGroups, "uploadedGroups");
        this.uploadedGroups = uploadedGroups;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebugUserResponse other = (DebugUserResponse) o;
        return 
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.uploadedGroups, other.uploadedGroups);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status,
            uploadedGroups);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebugUserResponse.class,
                "status", status,
                "uploadedGroups", uploadedGroups);
    }
    
    public final static class Builder {
 
        private Optional<? extends UserStatusResponse> status = Optional.empty();
 
        private Optional<? extends List<DatasourceGroupDefinition>> uploadedGroups = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the user status response body
         */
        public Builder status(UserStatusResponse status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Describes the user status response body
         */
        public Builder status(Optional<? extends UserStatusResponse> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * List of groups the user is a member of, as uploaded via permissions API.
         */
        public Builder uploadedGroups(List<DatasourceGroupDefinition> uploadedGroups) {
            Utils.checkNotNull(uploadedGroups, "uploadedGroups");
            this.uploadedGroups = Optional.ofNullable(uploadedGroups);
            return this;
        }

        /**
         * List of groups the user is a member of, as uploaded via permissions API.
         */
        public Builder uploadedGroups(Optional<? extends List<DatasourceGroupDefinition>> uploadedGroups) {
            Utils.checkNotNull(uploadedGroups, "uploadedGroups");
            this.uploadedGroups = uploadedGroups;
            return this;
        }
        
        public DebugUserResponse build() {
            return new DebugUserResponse(
                status,
                uploadedGroups);
        }
    }
}
