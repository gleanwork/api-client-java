/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * AgentCapabilities
 * 
 * <p>Describes features that the agent supports. example: {
 *   "ap.io.messages": true,
 *   "ap.io.streaming": true
 * }
 */
public class AgentCapabilities {

    /**
     * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ap.io.messages")
    private Optional<Boolean> apIoMessages;

    /**
     * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ap.io.streaming")
    private Optional<Boolean> apIoStreaming;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public AgentCapabilities(
            @JsonProperty("ap.io.messages") Optional<Boolean> apIoMessages,
            @JsonProperty("ap.io.streaming") Optional<Boolean> apIoStreaming) {
        Utils.checkNotNull(apIoMessages, "apIoMessages");
        Utils.checkNotNull(apIoStreaming, "apIoStreaming");
        this.apIoMessages = apIoMessages;
        this.apIoStreaming = apIoStreaming;
        this.additionalProperties = new HashMap<>();
    }
    
    public AgentCapabilities() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
     */
    @JsonIgnore
    public Optional<Boolean> apIoMessages() {
        return apIoMessages;
    }

    /**
     * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
     */
    @JsonIgnore
    public Optional<Boolean> apIoStreaming() {
        return apIoStreaming;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
     */
    public AgentCapabilities withApIoMessages(boolean apIoMessages) {
        Utils.checkNotNull(apIoMessages, "apIoMessages");
        this.apIoMessages = Optional.ofNullable(apIoMessages);
        return this;
    }

    /**
     * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
     */
    public AgentCapabilities withApIoMessages(Optional<Boolean> apIoMessages) {
        Utils.checkNotNull(apIoMessages, "apIoMessages");
        this.apIoMessages = apIoMessages;
        return this;
    }

    /**
     * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
     */
    public AgentCapabilities withApIoStreaming(boolean apIoStreaming) {
        Utils.checkNotNull(apIoStreaming, "apIoStreaming");
        this.apIoStreaming = Optional.ofNullable(apIoStreaming);
        return this;
    }

    /**
     * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
     */
    public AgentCapabilities withApIoStreaming(Optional<Boolean> apIoStreaming) {
        Utils.checkNotNull(apIoStreaming, "apIoStreaming");
        this.apIoStreaming = apIoStreaming;
        return this;
    }

    @JsonAnySetter
    public AgentCapabilities withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public AgentCapabilities withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgentCapabilities other = (AgentCapabilities) o;
        return 
            Utils.enhancedDeepEquals(this.apIoMessages, other.apIoMessages) &&
            Utils.enhancedDeepEquals(this.apIoStreaming, other.apIoStreaming) &&
            Utils.enhancedDeepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            apIoMessages,
            apIoStreaming,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgentCapabilities.class,
                "apIoMessages", apIoMessages,
                "apIoStreaming", apIoStreaming,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> apIoMessages = Optional.empty();
 
        private Optional<Boolean> apIoStreaming = Optional.empty();
 
        private Map<String, Object> additionalProperties = new HashMap<>();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
         */
        public Builder apIoMessages(boolean apIoMessages) {
            Utils.checkNotNull(apIoMessages, "apIoMessages");
            this.apIoMessages = Optional.ofNullable(apIoMessages);
            return this;
        }

        /**
         * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
         */
        public Builder apIoMessages(Optional<Boolean> apIoMessages) {
            Utils.checkNotNull(apIoMessages, "apIoMessages");
            this.apIoMessages = apIoMessages;
            return this;
        }

        /**
         * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
         */
        public Builder apIoStreaming(boolean apIoStreaming) {
            Utils.checkNotNull(apIoStreaming, "apIoStreaming");
            this.apIoStreaming = Optional.ofNullable(apIoStreaming);
            return this;
        }

        /**
         * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
         */
        public Builder apIoStreaming(Optional<Boolean> apIoStreaming) {
            Utils.checkNotNull(apIoStreaming, "apIoStreaming");
            this.apIoStreaming = apIoStreaming;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public AgentCapabilities build() {
            return new AgentCapabilities(
                apIoMessages,
                apIoStreaming)
                .withAdditionalProperties(additionalProperties);
        }
    }
}
