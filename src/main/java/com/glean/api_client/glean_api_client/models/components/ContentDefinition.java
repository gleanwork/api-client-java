/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ContentDefinition
 * 
 * <p>Describes text content or base64 encoded binary content
 */
public class ContentDefinition {

    @JsonProperty("mimeType")
    private String mimeType;

    /**
     * text content. Only one of textContent or binary content can be specified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textContent")
    private Optional<String> textContent;

    /**
     * base64 encoded binary content. Only one of textContent or binary content can be specified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("binaryContent")
    private Optional<String> binaryContent;

    @JsonCreator
    public ContentDefinition(
            @JsonProperty("mimeType") String mimeType,
            @JsonProperty("textContent") Optional<String> textContent,
            @JsonProperty("binaryContent") Optional<String> binaryContent) {
        Utils.checkNotNull(mimeType, "mimeType");
        Utils.checkNotNull(textContent, "textContent");
        Utils.checkNotNull(binaryContent, "binaryContent");
        this.mimeType = mimeType;
        this.textContent = textContent;
        this.binaryContent = binaryContent;
    }
    
    public ContentDefinition(
            String mimeType) {
        this(mimeType, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String mimeType() {
        return mimeType;
    }

    /**
     * text content. Only one of textContent or binary content can be specified
     */
    @JsonIgnore
    public Optional<String> textContent() {
        return textContent;
    }

    /**
     * base64 encoded binary content. Only one of textContent or binary content can be specified
     */
    @JsonIgnore
    public Optional<String> binaryContent() {
        return binaryContent;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ContentDefinition withMimeType(String mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = mimeType;
        return this;
    }

    /**
     * text content. Only one of textContent or binary content can be specified
     */
    public ContentDefinition withTextContent(String textContent) {
        Utils.checkNotNull(textContent, "textContent");
        this.textContent = Optional.ofNullable(textContent);
        return this;
    }

    /**
     * text content. Only one of textContent or binary content can be specified
     */
    public ContentDefinition withTextContent(Optional<String> textContent) {
        Utils.checkNotNull(textContent, "textContent");
        this.textContent = textContent;
        return this;
    }

    /**
     * base64 encoded binary content. Only one of textContent or binary content can be specified
     */
    public ContentDefinition withBinaryContent(String binaryContent) {
        Utils.checkNotNull(binaryContent, "binaryContent");
        this.binaryContent = Optional.ofNullable(binaryContent);
        return this;
    }

    /**
     * base64 encoded binary content. Only one of textContent or binary content can be specified
     */
    public ContentDefinition withBinaryContent(Optional<String> binaryContent) {
        Utils.checkNotNull(binaryContent, "binaryContent");
        this.binaryContent = binaryContent;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentDefinition other = (ContentDefinition) o;
        return 
            Objects.deepEquals(this.mimeType, other.mimeType) &&
            Objects.deepEquals(this.textContent, other.textContent) &&
            Objects.deepEquals(this.binaryContent, other.binaryContent);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            mimeType,
            textContent,
            binaryContent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentDefinition.class,
                "mimeType", mimeType,
                "textContent", textContent,
                "binaryContent", binaryContent);
    }
    
    public final static class Builder {
 
        private String mimeType;
 
        private Optional<String> textContent = Optional.empty();
 
        private Optional<String> binaryContent = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder mimeType(String mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = mimeType;
            return this;
        }

        /**
         * text content. Only one of textContent or binary content can be specified
         */
        public Builder textContent(String textContent) {
            Utils.checkNotNull(textContent, "textContent");
            this.textContent = Optional.ofNullable(textContent);
            return this;
        }

        /**
         * text content. Only one of textContent or binary content can be specified
         */
        public Builder textContent(Optional<String> textContent) {
            Utils.checkNotNull(textContent, "textContent");
            this.textContent = textContent;
            return this;
        }

        /**
         * base64 encoded binary content. Only one of textContent or binary content can be specified
         */
        public Builder binaryContent(String binaryContent) {
            Utils.checkNotNull(binaryContent, "binaryContent");
            this.binaryContent = Optional.ofNullable(binaryContent);
            return this;
        }

        /**
         * base64 encoded binary content. Only one of textContent or binary content can be specified
         */
        public Builder binaryContent(Optional<String> binaryContent) {
            Utils.checkNotNull(binaryContent, "binaryContent");
            this.binaryContent = binaryContent;
            return this;
        }
        
        public ContentDefinition build() {
            return new ContentDefinition(
                mimeType,
                textContent,
                binaryContent);
        }
    }
}
