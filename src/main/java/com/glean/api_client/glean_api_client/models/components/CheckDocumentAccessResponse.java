/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * CheckDocumentAccessResponse
 * 
 * <p>Describes the response body of the /checkdocumentaccess API call
 */
public class CheckDocumentAccessResponse {

    /**
     * If true, user has access to document for search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasAccess")
    private Optional<Boolean> hasAccess;

    @JsonCreator
    public CheckDocumentAccessResponse(
            @JsonProperty("hasAccess") Optional<Boolean> hasAccess) {
        Utils.checkNotNull(hasAccess, "hasAccess");
        this.hasAccess = hasAccess;
    }
    
    public CheckDocumentAccessResponse() {
        this(Optional.empty());
    }

    /**
     * If true, user has access to document for search
     */
    @JsonIgnore
    public Optional<Boolean> hasAccess() {
        return hasAccess;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * If true, user has access to document for search
     */
    public CheckDocumentAccessResponse withHasAccess(boolean hasAccess) {
        Utils.checkNotNull(hasAccess, "hasAccess");
        this.hasAccess = Optional.ofNullable(hasAccess);
        return this;
    }

    /**
     * If true, user has access to document for search
     */
    public CheckDocumentAccessResponse withHasAccess(Optional<Boolean> hasAccess) {
        Utils.checkNotNull(hasAccess, "hasAccess");
        this.hasAccess = hasAccess;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckDocumentAccessResponse other = (CheckDocumentAccessResponse) o;
        return 
            Objects.deepEquals(this.hasAccess, other.hasAccess);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hasAccess);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CheckDocumentAccessResponse.class,
                "hasAccess", hasAccess);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> hasAccess = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If true, user has access to document for search
         */
        public Builder hasAccess(boolean hasAccess) {
            Utils.checkNotNull(hasAccess, "hasAccess");
            this.hasAccess = Optional.ofNullable(hasAccess);
            return this;
        }

        /**
         * If true, user has access to document for search
         */
        public Builder hasAccess(Optional<Boolean> hasAccess) {
            Utils.checkNotNull(hasAccess, "hasAccess");
            this.hasAccess = hasAccess;
            return this;
        }
        
        public CheckDocumentAccessResponse build() {
            return new CheckDocumentAccessResponse(
                hasAccess);
        }
    }
}
