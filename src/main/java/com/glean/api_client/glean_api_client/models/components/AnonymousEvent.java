/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * AnonymousEvent
 * 
 * <p>A generic, light-weight calendar event.
 */
public class AnonymousEvent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    private Optional<? extends TimeInterval> time;

    /**
     * The nature of the event, for example "out of office".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventType")
    private Optional<? extends AnonymousEventEventType> eventType;

    @JsonCreator
    public AnonymousEvent(
            @JsonProperty("time") Optional<? extends TimeInterval> time,
            @JsonProperty("eventType") Optional<? extends AnonymousEventEventType> eventType) {
        Utils.checkNotNull(time, "time");
        Utils.checkNotNull(eventType, "eventType");
        this.time = time;
        this.eventType = eventType;
    }
    
    public AnonymousEvent() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeInterval> time() {
        return (Optional<TimeInterval>) time;
    }

    /**
     * The nature of the event, for example "out of office".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AnonymousEventEventType> eventType() {
        return (Optional<AnonymousEventEventType>) eventType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AnonymousEvent withTime(TimeInterval time) {
        Utils.checkNotNull(time, "time");
        this.time = Optional.ofNullable(time);
        return this;
    }

    public AnonymousEvent withTime(Optional<? extends TimeInterval> time) {
        Utils.checkNotNull(time, "time");
        this.time = time;
        return this;
    }

    /**
     * The nature of the event, for example "out of office".
     */
    public AnonymousEvent withEventType(AnonymousEventEventType eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = Optional.ofNullable(eventType);
        return this;
    }

    /**
     * The nature of the event, for example "out of office".
     */
    public AnonymousEvent withEventType(Optional<? extends AnonymousEventEventType> eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = eventType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnonymousEvent other = (AnonymousEvent) o;
        return 
            Utils.enhancedDeepEquals(this.time, other.time) &&
            Utils.enhancedDeepEquals(this.eventType, other.eventType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            time,
            eventType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AnonymousEvent.class,
                "time", time,
                "eventType", eventType);
    }
    
    public final static class Builder {
 
        private Optional<? extends TimeInterval> time = Optional.empty();
 
        private Optional<? extends AnonymousEventEventType> eventType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder time(TimeInterval time) {
            Utils.checkNotNull(time, "time");
            this.time = Optional.ofNullable(time);
            return this;
        }

        public Builder time(Optional<? extends TimeInterval> time) {
            Utils.checkNotNull(time, "time");
            this.time = time;
            return this;
        }

        /**
         * The nature of the event, for example "out of office".
         */
        public Builder eventType(AnonymousEventEventType eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * The nature of the event, for example "out of office".
         */
        public Builder eventType(Optional<? extends AnonymousEventEventType> eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = eventType;
            return this;
        }
        
        public AnonymousEvent build() {
            return new AnonymousEvent(
                time,
                eventType);
        }
    }
}
