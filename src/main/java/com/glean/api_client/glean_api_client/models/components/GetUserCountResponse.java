/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * GetUserCountResponse
 * 
 * <p>Describes the response body of the /getusercount API call
 */
public class GetUserCountResponse {

    /**
     * Number of users corresponding to the specified custom datasource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userCount")
    private Optional<Long> userCount;

    @JsonCreator
    public GetUserCountResponse(
            @JsonProperty("userCount") Optional<Long> userCount) {
        Utils.checkNotNull(userCount, "userCount");
        this.userCount = userCount;
    }
    
    public GetUserCountResponse() {
        this(Optional.empty());
    }

    /**
     * Number of users corresponding to the specified custom datasource.
     */
    @JsonIgnore
    public Optional<Long> userCount() {
        return userCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Number of users corresponding to the specified custom datasource.
     */
    public GetUserCountResponse withUserCount(long userCount) {
        Utils.checkNotNull(userCount, "userCount");
        this.userCount = Optional.ofNullable(userCount);
        return this;
    }

    /**
     * Number of users corresponding to the specified custom datasource.
     */
    public GetUserCountResponse withUserCount(Optional<Long> userCount) {
        Utils.checkNotNull(userCount, "userCount");
        this.userCount = userCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetUserCountResponse other = (GetUserCountResponse) o;
        return 
            Utils.enhancedDeepEquals(this.userCount, other.userCount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            userCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetUserCountResponse.class,
                "userCount", userCount);
    }
    
    public final static class Builder {
 
        private Optional<Long> userCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of users corresponding to the specified custom datasource.
         */
        public Builder userCount(long userCount) {
            Utils.checkNotNull(userCount, "userCount");
            this.userCount = Optional.ofNullable(userCount);
            return this;
        }

        /**
         * Number of users corresponding to the specified custom datasource.
         */
        public Builder userCount(Optional<Long> userCount) {
            Utils.checkNotNull(userCount, "userCount");
            this.userCount = userCount;
            return this;
        }
        
        public GetUserCountResponse build() {
            return new GetUserCountResponse(
                userCount);
        }
    }
}
