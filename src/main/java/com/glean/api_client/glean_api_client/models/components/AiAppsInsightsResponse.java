/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AiAppsInsightsResponse {

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastLogTimestamp")
    private Optional<Long> lastLogTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aiAppInsights")
    private Optional<? extends List<UserActivityInsight>> aiAppInsights;

    /**
     * Total number of active users on the Ai App in the requested period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalActiveUsers")
    private Optional<Long> totalActiveUsers;

    /**
     * Map from action to frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionCounts")
    private Optional<? extends AiAppActionCounts> actionCounts;

    /**
     * list of departments applicable for users tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<String>> departments;

    @JsonCreator
    public AiAppsInsightsResponse(
            @JsonProperty("lastLogTimestamp") Optional<Long> lastLogTimestamp,
            @JsonProperty("aiAppInsights") Optional<? extends List<UserActivityInsight>> aiAppInsights,
            @JsonProperty("totalActiveUsers") Optional<Long> totalActiveUsers,
            @JsonProperty("actionCounts") Optional<? extends AiAppActionCounts> actionCounts,
            @JsonProperty("departments") Optional<? extends List<String>> departments) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        Utils.checkNotNull(aiAppInsights, "aiAppInsights");
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        Utils.checkNotNull(actionCounts, "actionCounts");
        Utils.checkNotNull(departments, "departments");
        this.lastLogTimestamp = lastLogTimestamp;
        this.aiAppInsights = aiAppInsights;
        this.totalActiveUsers = totalActiveUsers;
        this.actionCounts = actionCounts;
        this.departments = departments;
    }
    
    public AiAppsInsightsResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    @JsonIgnore
    public Optional<Long> lastLogTimestamp() {
        return lastLogTimestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserActivityInsight>> aiAppInsights() {
        return (Optional<List<UserActivityInsight>>) aiAppInsights;
    }

    /**
     * Total number of active users on the Ai App in the requested period.
     */
    @JsonIgnore
    public Optional<Long> totalActiveUsers() {
        return totalActiveUsers;
    }

    /**
     * Map from action to frequency.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AiAppActionCounts> actionCounts() {
        return (Optional<AiAppActionCounts>) actionCounts;
    }

    /**
     * list of departments applicable for users tab.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> departments() {
        return (Optional<List<String>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public AiAppsInsightsResponse withLastLogTimestamp(long lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
        return this;
    }

    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    public AiAppsInsightsResponse withLastLogTimestamp(Optional<Long> lastLogTimestamp) {
        Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
        this.lastLogTimestamp = lastLogTimestamp;
        return this;
    }

    public AiAppsInsightsResponse withAiAppInsights(List<UserActivityInsight> aiAppInsights) {
        Utils.checkNotNull(aiAppInsights, "aiAppInsights");
        this.aiAppInsights = Optional.ofNullable(aiAppInsights);
        return this;
    }

    public AiAppsInsightsResponse withAiAppInsights(Optional<? extends List<UserActivityInsight>> aiAppInsights) {
        Utils.checkNotNull(aiAppInsights, "aiAppInsights");
        this.aiAppInsights = aiAppInsights;
        return this;
    }

    /**
     * Total number of active users on the Ai App in the requested period.
     */
    public AiAppsInsightsResponse withTotalActiveUsers(long totalActiveUsers) {
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        this.totalActiveUsers = Optional.ofNullable(totalActiveUsers);
        return this;
    }

    /**
     * Total number of active users on the Ai App in the requested period.
     */
    public AiAppsInsightsResponse withTotalActiveUsers(Optional<Long> totalActiveUsers) {
        Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
        this.totalActiveUsers = totalActiveUsers;
        return this;
    }

    /**
     * Map from action to frequency.
     */
    public AiAppsInsightsResponse withActionCounts(AiAppActionCounts actionCounts) {
        Utils.checkNotNull(actionCounts, "actionCounts");
        this.actionCounts = Optional.ofNullable(actionCounts);
        return this;
    }

    /**
     * Map from action to frequency.
     */
    public AiAppsInsightsResponse withActionCounts(Optional<? extends AiAppActionCounts> actionCounts) {
        Utils.checkNotNull(actionCounts, "actionCounts");
        this.actionCounts = actionCounts;
        return this;
    }

    /**
     * list of departments applicable for users tab.
     */
    public AiAppsInsightsResponse withDepartments(List<String> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * list of departments applicable for users tab.
     */
    public AiAppsInsightsResponse withDepartments(Optional<? extends List<String>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AiAppsInsightsResponse other = (AiAppsInsightsResponse) o;
        return 
            Objects.deepEquals(this.lastLogTimestamp, other.lastLogTimestamp) &&
            Objects.deepEquals(this.aiAppInsights, other.aiAppInsights) &&
            Objects.deepEquals(this.totalActiveUsers, other.totalActiveUsers) &&
            Objects.deepEquals(this.actionCounts, other.actionCounts) &&
            Objects.deepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lastLogTimestamp,
            aiAppInsights,
            totalActiveUsers,
            actionCounts,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AiAppsInsightsResponse.class,
                "lastLogTimestamp", lastLogTimestamp,
                "aiAppInsights", aiAppInsights,
                "totalActiveUsers", totalActiveUsers,
                "actionCounts", actionCounts,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private Optional<Long> lastLogTimestamp = Optional.empty();
 
        private Optional<? extends List<UserActivityInsight>> aiAppInsights = Optional.empty();
 
        private Optional<Long> totalActiveUsers = Optional.empty();
 
        private Optional<? extends AiAppActionCounts> actionCounts = Optional.empty();
 
        private Optional<? extends List<String>> departments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(long lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = Optional.ofNullable(lastLogTimestamp);
            return this;
        }

        /**
         * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
         */
        public Builder lastLogTimestamp(Optional<Long> lastLogTimestamp) {
            Utils.checkNotNull(lastLogTimestamp, "lastLogTimestamp");
            this.lastLogTimestamp = lastLogTimestamp;
            return this;
        }

        public Builder aiAppInsights(List<UserActivityInsight> aiAppInsights) {
            Utils.checkNotNull(aiAppInsights, "aiAppInsights");
            this.aiAppInsights = Optional.ofNullable(aiAppInsights);
            return this;
        }

        public Builder aiAppInsights(Optional<? extends List<UserActivityInsight>> aiAppInsights) {
            Utils.checkNotNull(aiAppInsights, "aiAppInsights");
            this.aiAppInsights = aiAppInsights;
            return this;
        }

        /**
         * Total number of active users on the Ai App in the requested period.
         */
        public Builder totalActiveUsers(long totalActiveUsers) {
            Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
            this.totalActiveUsers = Optional.ofNullable(totalActiveUsers);
            return this;
        }

        /**
         * Total number of active users on the Ai App in the requested period.
         */
        public Builder totalActiveUsers(Optional<Long> totalActiveUsers) {
            Utils.checkNotNull(totalActiveUsers, "totalActiveUsers");
            this.totalActiveUsers = totalActiveUsers;
            return this;
        }

        /**
         * Map from action to frequency.
         */
        public Builder actionCounts(AiAppActionCounts actionCounts) {
            Utils.checkNotNull(actionCounts, "actionCounts");
            this.actionCounts = Optional.ofNullable(actionCounts);
            return this;
        }

        /**
         * Map from action to frequency.
         */
        public Builder actionCounts(Optional<? extends AiAppActionCounts> actionCounts) {
            Utils.checkNotNull(actionCounts, "actionCounts");
            this.actionCounts = actionCounts;
            return this;
        }

        /**
         * list of departments applicable for users tab.
         */
        public Builder departments(List<String> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * list of departments applicable for users tab.
         */
        public Builder departments(Optional<? extends List<String>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public AiAppsInsightsResponse build() {
            return new AiAppsInsightsResponse(
                lastLogTimestamp,
                aiAppInsights,
                totalActiveUsers,
                actionCounts,
                departments);
        }
    }
}
