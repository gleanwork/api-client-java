/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * AgentRunCreate
 * 
 * <p>Payload for creating a run.
 */
public class AgentRunCreate {

    /**
     * The ID of the agent to run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agent_id")
    private Optional<String> agentId;

    /**
     * The input to the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("input")
    private Optional<? extends Map<String, Object>> input;

    /**
     * The messages to pass an input to the agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<Message>> messages;

    @JsonCreator
    public AgentRunCreate(
            @JsonProperty("agent_id") Optional<String> agentId,
            @JsonProperty("input") Optional<? extends Map<String, Object>> input,
            @JsonProperty("messages") Optional<? extends List<Message>> messages) {
        Utils.checkNotNull(agentId, "agentId");
        Utils.checkNotNull(input, "input");
        Utils.checkNotNull(messages, "messages");
        this.agentId = agentId;
        this.input = input;
        this.messages = messages;
    }
    
    public AgentRunCreate() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the agent to run.
     */
    @JsonIgnore
    public Optional<String> agentId() {
        return agentId;
    }

    /**
     * The input to the agent.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> input() {
        return (Optional<Map<String, Object>>) input;
    }

    /**
     * The messages to pass an input to the agent.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Message>> messages() {
        return (Optional<List<Message>>) messages;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the agent to run.
     */
    public AgentRunCreate withAgentId(String agentId) {
        Utils.checkNotNull(agentId, "agentId");
        this.agentId = Optional.ofNullable(agentId);
        return this;
    }

    /**
     * The ID of the agent to run.
     */
    public AgentRunCreate withAgentId(Optional<String> agentId) {
        Utils.checkNotNull(agentId, "agentId");
        this.agentId = agentId;
        return this;
    }

    /**
     * The input to the agent.
     */
    public AgentRunCreate withInput(Map<String, Object> input) {
        Utils.checkNotNull(input, "input");
        this.input = Optional.ofNullable(input);
        return this;
    }

    /**
     * The input to the agent.
     */
    public AgentRunCreate withInput(Optional<? extends Map<String, Object>> input) {
        Utils.checkNotNull(input, "input");
        this.input = input;
        return this;
    }

    /**
     * The messages to pass an input to the agent.
     */
    public AgentRunCreate withMessages(List<Message> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    /**
     * The messages to pass an input to the agent.
     */
    public AgentRunCreate withMessages(Optional<? extends List<Message>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgentRunCreate other = (AgentRunCreate) o;
        return 
            Objects.deepEquals(this.agentId, other.agentId) &&
            Objects.deepEquals(this.input, other.input) &&
            Objects.deepEquals(this.messages, other.messages);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agentId,
            input,
            messages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgentRunCreate.class,
                "agentId", agentId,
                "input", input,
                "messages", messages);
    }
    
    public final static class Builder {
 
        private Optional<String> agentId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> input = Optional.empty();
 
        private Optional<? extends List<Message>> messages = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the agent to run.
         */
        public Builder agentId(String agentId) {
            Utils.checkNotNull(agentId, "agentId");
            this.agentId = Optional.ofNullable(agentId);
            return this;
        }

        /**
         * The ID of the agent to run.
         */
        public Builder agentId(Optional<String> agentId) {
            Utils.checkNotNull(agentId, "agentId");
            this.agentId = agentId;
            return this;
        }

        /**
         * The input to the agent.
         */
        public Builder input(Map<String, Object> input) {
            Utils.checkNotNull(input, "input");
            this.input = Optional.ofNullable(input);
            return this;
        }

        /**
         * The input to the agent.
         */
        public Builder input(Optional<? extends Map<String, Object>> input) {
            Utils.checkNotNull(input, "input");
            this.input = input;
            return this;
        }

        /**
         * The messages to pass an input to the agent.
         */
        public Builder messages(List<Message> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * The messages to pass an input to the agent.
         */
        public Builder messages(Optional<? extends List<Message>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }
        
        public AgentRunCreate build() {
            return new AgentRunCreate(
                agentId,
                input,
                messages);
        }
    }
}
