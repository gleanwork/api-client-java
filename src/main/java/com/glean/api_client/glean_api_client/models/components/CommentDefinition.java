/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * CommentDefinition
 * 
 * <p>Describes a comment on a document
 */
public class CommentDefinition {

    /**
     * The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<? extends UserReferenceDefinition> author;

    /**
     * Describes text content or base64 encoded binary content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends ContentDefinition> content;

    /**
     * The creation time, in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Long> createdAt;

    /**
     * The last updated time, in epoch seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<Long> updatedAt;

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends UserReferenceDefinition> updatedBy;

    @JsonCreator
    public CommentDefinition(
            @JsonProperty("id") String id,
            @JsonProperty("author") Optional<? extends UserReferenceDefinition> author,
            @JsonProperty("content") Optional<? extends ContentDefinition> content,
            @JsonProperty("createdAt") Optional<Long> createdAt,
            @JsonProperty("updatedAt") Optional<Long> updatedAt,
            @JsonProperty("updatedBy") Optional<? extends UserReferenceDefinition> updatedBy) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.id = id;
        this.author = author;
        this.content = content;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }
    
    public CommentDefinition(
            String id) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserReferenceDefinition> author() {
        return (Optional<UserReferenceDefinition>) author;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentDefinition> content() {
        return (Optional<ContentDefinition>) content;
    }

    /**
     * The creation time, in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * The last updated time, in epoch seconds.
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserReferenceDefinition> updatedBy() {
        return (Optional<UserReferenceDefinition>) updatedBy;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
     */
    public CommentDefinition withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public CommentDefinition withAuthor(UserReferenceDefinition author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public CommentDefinition withAuthor(Optional<? extends UserReferenceDefinition> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    public CommentDefinition withContent(ContentDefinition content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    /**
     * Describes text content or base64 encoded binary content
     */
    public CommentDefinition withContent(Optional<? extends ContentDefinition> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * The creation time, in epoch seconds.
     */
    public CommentDefinition withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The creation time, in epoch seconds.
     */
    public CommentDefinition withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The last updated time, in epoch seconds.
     */
    public CommentDefinition withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * The last updated time, in epoch seconds.
     */
    public CommentDefinition withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public CommentDefinition withUpdatedBy(UserReferenceDefinition updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    public CommentDefinition withUpdatedBy(Optional<? extends UserReferenceDefinition> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommentDefinition other = (CommentDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.author, other.author) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            author,
            content,
            createdAt,
            updatedAt,
            updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommentDefinition.class,
                "id", id,
                "author", author,
                "content", content,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<? extends UserReferenceDefinition> author = Optional.empty();
 
        private Optional<? extends ContentDefinition> content = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<Long> updatedAt = Optional.empty();
 
        private Optional<? extends UserReferenceDefinition> updatedBy = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder author(UserReferenceDefinition author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder author(Optional<? extends UserReferenceDefinition> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        /**
         * Describes text content or base64 encoded binary content
         */
        public Builder content(ContentDefinition content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * Describes text content or base64 encoded binary content
         */
        public Builder content(Optional<? extends ContentDefinition> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * The creation time, in epoch seconds.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The creation time, in epoch seconds.
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The last updated time, in epoch seconds.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * The last updated time, in epoch seconds.
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder updatedBy(UserReferenceDefinition updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        /**
         * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
         */
        public Builder updatedBy(Optional<? extends UserReferenceDefinition> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }
        
        public CommentDefinition build() {
            return new CommentDefinition(
                id,
                author,
                content,
                createdAt,
                updatedAt,
                updatedBy);
        }
    }
}
