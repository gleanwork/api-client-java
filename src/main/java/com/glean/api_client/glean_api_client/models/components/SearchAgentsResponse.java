/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class SearchAgentsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agents")
    private Optional<? extends List<Agent>> agents;

    @JsonCreator
    public SearchAgentsResponse(
            @JsonProperty("agents") Optional<? extends List<Agent>> agents) {
        Utils.checkNotNull(agents, "agents");
        this.agents = agents;
    }
    
    public SearchAgentsResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Agent>> agents() {
        return (Optional<List<Agent>>) agents;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SearchAgentsResponse withAgents(List<Agent> agents) {
        Utils.checkNotNull(agents, "agents");
        this.agents = Optional.ofNullable(agents);
        return this;
    }

    public SearchAgentsResponse withAgents(Optional<? extends List<Agent>> agents) {
        Utils.checkNotNull(agents, "agents");
        this.agents = agents;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchAgentsResponse other = (SearchAgentsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.agents, other.agents);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            agents);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchAgentsResponse.class,
                "agents", agents);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Agent>> agents = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder agents(List<Agent> agents) {
            Utils.checkNotNull(agents, "agents");
            this.agents = Optional.ofNullable(agents);
            return this;
        }

        public Builder agents(Optional<? extends List<Agent>> agents) {
            Utils.checkNotNull(agents, "agents");
            this.agents = agents;
            return this;
        }
        
        public SearchAgentsResponse build() {
            return new SearchAgentsResponse(
                agents);
        }
    }
}
