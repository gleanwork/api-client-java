/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

public class CreateCollectionResponse {

    /**
     * The unique name of the Collection.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A brief summary of the Collection's contents.
     */
    @JsonProperty("description")
    private String description;

    /**
     * A list of added user roles for the Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedRoles")
    private Optional<? extends List<UserRoleSpecification>> addedRoles;

    /**
     * A list of removed user roles for the Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedRoles")
    private Optional<? extends List<UserRoleSpecification>> removedRoles;

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceFilters")
    private Optional<? extends List<FacetFilter>> audienceFilters;

    /**
     * The emoji icon of this Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<String> icon;

    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adminLocked")
    private Optional<Boolean> adminLocked;

    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    private Optional<Long> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    private Optional<? extends Thumbnail> thumbnail;

    /**
     * The datasource type this Collection can hold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedDatasource")
    private Optional<String> allowedDatasource;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends ObjectPermissions> permissions;

    /**
     * The unique ID of the Collection.
     */
    @JsonProperty("id")
    private long id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    private Optional<OffsetDateTime> createTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    private Optional<OffsetDateTime> updateTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    private Optional<? extends Person> creator;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends Person> updatedBy;

    /**
     * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemCount")
    private Optional<Long> itemCount;

    /**
     * The number of children Collections. Separated from the actual children so we can grab the count without children.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childCount")
    private Optional<Long> childCount;

    /**
     * The items in this Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends List<CollectionItem>> items;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinMetadata")
    private Optional<? extends CollectionPinnedMetadata> pinMetadata;

    /**
     * The names of the shortcuts (Go Links) that point to this Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcuts")
    private Optional<? extends List<String>> shortcuts;

    /**
     * The children Collections of this Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    private Optional<? extends List<Collection>> children;

    /**
     * A list of user roles for the Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<UserRoleSpecification>> roles;

    @JsonProperty("errorCode")
    private CreateCollectionResponseErrorCode errorCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends Collection> collection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends CollectionError1> error;

    @JsonCreator
    public CreateCollectionResponse(
            @JsonProperty("name") String name,
            @JsonProperty("description") String description,
            @JsonProperty("addedRoles") Optional<? extends List<UserRoleSpecification>> addedRoles,
            @JsonProperty("removedRoles") Optional<? extends List<UserRoleSpecification>> removedRoles,
            @JsonProperty("audienceFilters") Optional<? extends List<FacetFilter>> audienceFilters,
            @JsonProperty("icon") Optional<String> icon,
            @JsonProperty("adminLocked") Optional<Boolean> adminLocked,
            @JsonProperty("parentId") Optional<Long> parentId,
            @JsonProperty("thumbnail") Optional<? extends Thumbnail> thumbnail,
            @JsonProperty("allowedDatasource") Optional<String> allowedDatasource,
            @JsonProperty("permissions") Optional<? extends ObjectPermissions> permissions,
            @JsonProperty("id") long id,
            @JsonProperty("createTime") Optional<OffsetDateTime> createTime,
            @JsonProperty("updateTime") Optional<OffsetDateTime> updateTime,
            @JsonProperty("creator") Optional<? extends Person> creator,
            @JsonProperty("updatedBy") Optional<? extends Person> updatedBy,
            @JsonProperty("itemCount") Optional<Long> itemCount,
            @JsonProperty("childCount") Optional<Long> childCount,
            @JsonProperty("items") Optional<? extends List<CollectionItem>> items,
            @JsonProperty("pinMetadata") Optional<? extends CollectionPinnedMetadata> pinMetadata,
            @JsonProperty("shortcuts") Optional<? extends List<String>> shortcuts,
            @JsonProperty("children") Optional<? extends List<Collection>> children,
            @JsonProperty("roles") Optional<? extends List<UserRoleSpecification>> roles,
            @JsonProperty("errorCode") CreateCollectionResponseErrorCode errorCode,
            @JsonProperty("collection") Optional<? extends Collection> collection,
            @JsonProperty("error") Optional<? extends CollectionError1> error) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(addedRoles, "addedRoles");
        Utils.checkNotNull(removedRoles, "removedRoles");
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        Utils.checkNotNull(icon, "icon");
        Utils.checkNotNull(adminLocked, "adminLocked");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(thumbnail, "thumbnail");
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(updateTime, "updateTime");
        Utils.checkNotNull(creator, "creator");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(itemCount, "itemCount");
        Utils.checkNotNull(childCount, "childCount");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(pinMetadata, "pinMetadata");
        Utils.checkNotNull(shortcuts, "shortcuts");
        Utils.checkNotNull(children, "children");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(error, "error");
        this.name = name;
        this.description = description;
        this.addedRoles = addedRoles;
        this.removedRoles = removedRoles;
        this.audienceFilters = audienceFilters;
        this.icon = icon;
        this.adminLocked = adminLocked;
        this.parentId = parentId;
        this.thumbnail = thumbnail;
        this.allowedDatasource = allowedDatasource;
        this.permissions = permissions;
        this.id = id;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.creator = creator;
        this.updatedBy = updatedBy;
        this.itemCount = itemCount;
        this.childCount = childCount;
        this.items = items;
        this.pinMetadata = pinMetadata;
        this.shortcuts = shortcuts;
        this.children = children;
        this.roles = roles;
        this.errorCode = errorCode;
        this.collection = collection;
        this.error = error;
    }
    
    public CreateCollectionResponse(
            String name,
            String description,
            long id,
            CreateCollectionResponseErrorCode errorCode) {
        this(name, description, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), errorCode, Optional.empty(), Optional.empty());
    }

    /**
     * The unique name of the Collection.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A brief summary of the Collection's contents.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * A list of added user roles for the Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> addedRoles() {
        return (Optional<List<UserRoleSpecification>>) addedRoles;
    }

    /**
     * A list of removed user roles for the Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> removedRoles() {
        return (Optional<List<UserRoleSpecification>>) removedRoles;
    }

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FacetFilter>> audienceFilters() {
        return (Optional<List<FacetFilter>>) audienceFilters;
    }

    /**
     * The emoji icon of this Collection.
     */
    @JsonIgnore
    public Optional<String> icon() {
        return icon;
    }

    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    @JsonIgnore
    public Optional<Boolean> adminLocked() {
        return adminLocked;
    }

    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    @JsonIgnore
    public Optional<Long> parentId() {
        return parentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Thumbnail> thumbnail() {
        return (Optional<Thumbnail>) thumbnail;
    }

    /**
     * The datasource type this Collection can hold.
     */
    @JsonIgnore
    public Optional<String> allowedDatasource() {
        return allowedDatasource;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectPermissions> permissions() {
        return (Optional<ObjectPermissions>) permissions;
    }

    /**
     * The unique ID of the Collection.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createTime() {
        return createTime;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updateTime() {
        return updateTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> creator() {
        return (Optional<Person>) creator;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Person> updatedBy() {
        return (Optional<Person>) updatedBy;
    }

    /**
     * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
     */
    @JsonIgnore
    public Optional<Long> itemCount() {
        return itemCount;
    }

    /**
     * The number of children Collections. Separated from the actual children so we can grab the count without children.
     */
    @JsonIgnore
    public Optional<Long> childCount() {
        return childCount;
    }

    /**
     * The items in this Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CollectionItem>> items() {
        return (Optional<List<CollectionItem>>) items;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectionPinnedMetadata> pinMetadata() {
        return (Optional<CollectionPinnedMetadata>) pinMetadata;
    }

    /**
     * The names of the shortcuts (Go Links) that point to this Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> shortcuts() {
        return (Optional<List<String>>) shortcuts;
    }

    /**
     * The children Collections of this Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Collection>> children() {
        return (Optional<List<Collection>>) children;
    }

    /**
     * A list of user roles for the Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserRoleSpecification>> roles() {
        return (Optional<List<UserRoleSpecification>>) roles;
    }

    @JsonIgnore
    public CreateCollectionResponseErrorCode errorCode() {
        return errorCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> collection() {
        return (Optional<Collection>) collection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectionError1> error() {
        return (Optional<CollectionError1>) error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique name of the Collection.
     */
    public CreateCollectionResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A brief summary of the Collection's contents.
     */
    public CreateCollectionResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A list of added user roles for the Collection.
     */
    public CreateCollectionResponse withAddedRoles(List<UserRoleSpecification> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = Optional.ofNullable(addedRoles);
        return this;
    }

    /**
     * A list of added user roles for the Collection.
     */
    public CreateCollectionResponse withAddedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
        Utils.checkNotNull(addedRoles, "addedRoles");
        this.addedRoles = addedRoles;
        return this;
    }

    /**
     * A list of removed user roles for the Collection.
     */
    public CreateCollectionResponse withRemovedRoles(List<UserRoleSpecification> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = Optional.ofNullable(removedRoles);
        return this;
    }

    /**
     * A list of removed user roles for the Collection.
     */
    public CreateCollectionResponse withRemovedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
        Utils.checkNotNull(removedRoles, "removedRoles");
        this.removedRoles = removedRoles;
        return this;
    }

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    public CreateCollectionResponse withAudienceFilters(List<FacetFilter> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = Optional.ofNullable(audienceFilters);
        return this;
    }

    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    public CreateCollectionResponse withAudienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
        Utils.checkNotNull(audienceFilters, "audienceFilters");
        this.audienceFilters = audienceFilters;
        return this;
    }

    /**
     * The emoji icon of this Collection.
     */
    public CreateCollectionResponse withIcon(String icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    /**
     * The emoji icon of this Collection.
     */
    public CreateCollectionResponse withIcon(Optional<String> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }

    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    public CreateCollectionResponse withAdminLocked(boolean adminLocked) {
        Utils.checkNotNull(adminLocked, "adminLocked");
        this.adminLocked = Optional.ofNullable(adminLocked);
        return this;
    }

    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    public CreateCollectionResponse withAdminLocked(Optional<Boolean> adminLocked) {
        Utils.checkNotNull(adminLocked, "adminLocked");
        this.adminLocked = adminLocked;
        return this;
    }

    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    public CreateCollectionResponse withParentId(long parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }

    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    public CreateCollectionResponse withParentId(Optional<Long> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public CreateCollectionResponse withThumbnail(Thumbnail thumbnail) {
        Utils.checkNotNull(thumbnail, "thumbnail");
        this.thumbnail = Optional.ofNullable(thumbnail);
        return this;
    }

    public CreateCollectionResponse withThumbnail(Optional<? extends Thumbnail> thumbnail) {
        Utils.checkNotNull(thumbnail, "thumbnail");
        this.thumbnail = thumbnail;
        return this;
    }

    /**
     * The datasource type this Collection can hold.
     */
    public CreateCollectionResponse withAllowedDatasource(String allowedDatasource) {
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.allowedDatasource = Optional.ofNullable(allowedDatasource);
        return this;
    }

    /**
     * The datasource type this Collection can hold.
     */
    public CreateCollectionResponse withAllowedDatasource(Optional<String> allowedDatasource) {
        Utils.checkNotNull(allowedDatasource, "allowedDatasource");
        this.allowedDatasource = allowedDatasource;
        return this;
    }

    public CreateCollectionResponse withPermissions(ObjectPermissions permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public CreateCollectionResponse withPermissions(Optional<? extends ObjectPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * The unique ID of the Collection.
     */
    public CreateCollectionResponse withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CreateCollectionResponse withCreateTime(OffsetDateTime createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    public CreateCollectionResponse withCreateTime(Optional<OffsetDateTime> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    public CreateCollectionResponse withUpdateTime(OffsetDateTime updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = Optional.ofNullable(updateTime);
        return this;
    }

    public CreateCollectionResponse withUpdateTime(Optional<OffsetDateTime> updateTime) {
        Utils.checkNotNull(updateTime, "updateTime");
        this.updateTime = updateTime;
        return this;
    }

    public CreateCollectionResponse withCreator(Person creator) {
        Utils.checkNotNull(creator, "creator");
        this.creator = Optional.ofNullable(creator);
        return this;
    }

    public CreateCollectionResponse withCreator(Optional<? extends Person> creator) {
        Utils.checkNotNull(creator, "creator");
        this.creator = creator;
        return this;
    }

    public CreateCollectionResponse withUpdatedBy(Person updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    public CreateCollectionResponse withUpdatedBy(Optional<? extends Person> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
     */
    public CreateCollectionResponse withItemCount(long itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = Optional.ofNullable(itemCount);
        return this;
    }

    /**
     * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
     */
    public CreateCollectionResponse withItemCount(Optional<Long> itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = itemCount;
        return this;
    }

    /**
     * The number of children Collections. Separated from the actual children so we can grab the count without children.
     */
    public CreateCollectionResponse withChildCount(long childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = Optional.ofNullable(childCount);
        return this;
    }

    /**
     * The number of children Collections. Separated from the actual children so we can grab the count without children.
     */
    public CreateCollectionResponse withChildCount(Optional<Long> childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = childCount;
        return this;
    }

    /**
     * The items in this Collection.
     */
    public CreateCollectionResponse withItems(List<CollectionItem> items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }

    /**
     * The items in this Collection.
     */
    public CreateCollectionResponse withItems(Optional<? extends List<CollectionItem>> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    public CreateCollectionResponse withPinMetadata(CollectionPinnedMetadata pinMetadata) {
        Utils.checkNotNull(pinMetadata, "pinMetadata");
        this.pinMetadata = Optional.ofNullable(pinMetadata);
        return this;
    }

    public CreateCollectionResponse withPinMetadata(Optional<? extends CollectionPinnedMetadata> pinMetadata) {
        Utils.checkNotNull(pinMetadata, "pinMetadata");
        this.pinMetadata = pinMetadata;
        return this;
    }

    /**
     * The names of the shortcuts (Go Links) that point to this Collection.
     */
    public CreateCollectionResponse withShortcuts(List<String> shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = Optional.ofNullable(shortcuts);
        return this;
    }

    /**
     * The names of the shortcuts (Go Links) that point to this Collection.
     */
    public CreateCollectionResponse withShortcuts(Optional<? extends List<String>> shortcuts) {
        Utils.checkNotNull(shortcuts, "shortcuts");
        this.shortcuts = shortcuts;
        return this;
    }

    /**
     * The children Collections of this Collection.
     */
    public CreateCollectionResponse withChildren(List<Collection> children) {
        Utils.checkNotNull(children, "children");
        this.children = Optional.ofNullable(children);
        return this;
    }

    /**
     * The children Collections of this Collection.
     */
    public CreateCollectionResponse withChildren(Optional<? extends List<Collection>> children) {
        Utils.checkNotNull(children, "children");
        this.children = children;
        return this;
    }

    /**
     * A list of user roles for the Collection.
     */
    public CreateCollectionResponse withRoles(List<UserRoleSpecification> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * A list of user roles for the Collection.
     */
    public CreateCollectionResponse withRoles(Optional<? extends List<UserRoleSpecification>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public CreateCollectionResponse withErrorCode(CreateCollectionResponseErrorCode errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    public CreateCollectionResponse withCollection(Collection collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public CreateCollectionResponse withCollection(Optional<? extends Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public CreateCollectionResponse withError(CollectionError1 error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public CreateCollectionResponse withError(Optional<? extends CollectionError1> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCollectionResponse other = (CreateCollectionResponse) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.addedRoles, other.addedRoles) &&
            Utils.enhancedDeepEquals(this.removedRoles, other.removedRoles) &&
            Utils.enhancedDeepEquals(this.audienceFilters, other.audienceFilters) &&
            Utils.enhancedDeepEquals(this.icon, other.icon) &&
            Utils.enhancedDeepEquals(this.adminLocked, other.adminLocked) &&
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.thumbnail, other.thumbnail) &&
            Utils.enhancedDeepEquals(this.allowedDatasource, other.allowedDatasource) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.createTime, other.createTime) &&
            Utils.enhancedDeepEquals(this.updateTime, other.updateTime) &&
            Utils.enhancedDeepEquals(this.creator, other.creator) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.itemCount, other.itemCount) &&
            Utils.enhancedDeepEquals(this.childCount, other.childCount) &&
            Utils.enhancedDeepEquals(this.items, other.items) &&
            Utils.enhancedDeepEquals(this.pinMetadata, other.pinMetadata) &&
            Utils.enhancedDeepEquals(this.shortcuts, other.shortcuts) &&
            Utils.enhancedDeepEquals(this.children, other.children) &&
            Utils.enhancedDeepEquals(this.roles, other.roles) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.collection, other.collection) &&
            Utils.enhancedDeepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            description,
            addedRoles,
            removedRoles,
            audienceFilters,
            icon,
            adminLocked,
            parentId,
            thumbnail,
            allowedDatasource,
            permissions,
            id,
            createTime,
            updateTime,
            creator,
            updatedBy,
            itemCount,
            childCount,
            items,
            pinMetadata,
            shortcuts,
            children,
            roles,
            errorCode,
            collection,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCollectionResponse.class,
                "name", name,
                "description", description,
                "addedRoles", addedRoles,
                "removedRoles", removedRoles,
                "audienceFilters", audienceFilters,
                "icon", icon,
                "adminLocked", adminLocked,
                "parentId", parentId,
                "thumbnail", thumbnail,
                "allowedDatasource", allowedDatasource,
                "permissions", permissions,
                "id", id,
                "createTime", createTime,
                "updateTime", updateTime,
                "creator", creator,
                "updatedBy", updatedBy,
                "itemCount", itemCount,
                "childCount", childCount,
                "items", items,
                "pinMetadata", pinMetadata,
                "shortcuts", shortcuts,
                "children", children,
                "roles", roles,
                "errorCode", errorCode,
                "collection", collection,
                "error", error);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String description;
 
        private Optional<? extends List<UserRoleSpecification>> addedRoles = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> removedRoles = Optional.empty();
 
        private Optional<? extends List<FacetFilter>> audienceFilters = Optional.empty();
 
        private Optional<String> icon = Optional.empty();
 
        private Optional<Boolean> adminLocked = Optional.empty();
 
        private Optional<Long> parentId = Optional.empty();
 
        private Optional<? extends Thumbnail> thumbnail = Optional.empty();
 
        private Optional<String> allowedDatasource = Optional.empty();
 
        private Optional<? extends ObjectPermissions> permissions = Optional.empty();
 
        private Long id;
 
        private Optional<OffsetDateTime> createTime = Optional.empty();
 
        private Optional<OffsetDateTime> updateTime = Optional.empty();
 
        private Optional<? extends Person> creator = Optional.empty();
 
        private Optional<? extends Person> updatedBy = Optional.empty();
 
        private Optional<Long> itemCount = Optional.empty();
 
        private Optional<Long> childCount = Optional.empty();
 
        private Optional<? extends List<CollectionItem>> items = Optional.empty();
 
        private Optional<? extends CollectionPinnedMetadata> pinMetadata = Optional.empty();
 
        private Optional<? extends List<String>> shortcuts = Optional.empty();
 
        private Optional<? extends List<Collection>> children = Optional.empty();
 
        private Optional<? extends List<UserRoleSpecification>> roles = Optional.empty();
 
        private CreateCollectionResponseErrorCode errorCode;
 
        private Optional<? extends Collection> collection = Optional.empty();
 
        private Optional<? extends CollectionError1> error = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique name of the Collection.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A brief summary of the Collection's contents.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A list of added user roles for the Collection.
         */
        public Builder addedRoles(List<UserRoleSpecification> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = Optional.ofNullable(addedRoles);
            return this;
        }

        /**
         * A list of added user roles for the Collection.
         */
        public Builder addedRoles(Optional<? extends List<UserRoleSpecification>> addedRoles) {
            Utils.checkNotNull(addedRoles, "addedRoles");
            this.addedRoles = addedRoles;
            return this;
        }

        /**
         * A list of removed user roles for the Collection.
         */
        public Builder removedRoles(List<UserRoleSpecification> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = Optional.ofNullable(removedRoles);
            return this;
        }

        /**
         * A list of removed user roles for the Collection.
         */
        public Builder removedRoles(Optional<? extends List<UserRoleSpecification>> removedRoles) {
            Utils.checkNotNull(removedRoles, "removedRoles");
            this.removedRoles = removedRoles;
            return this;
        }

        /**
         * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(List<FacetFilter> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = Optional.ofNullable(audienceFilters);
            return this;
        }

        /**
         * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
         */
        public Builder audienceFilters(Optional<? extends List<FacetFilter>> audienceFilters) {
            Utils.checkNotNull(audienceFilters, "audienceFilters");
            this.audienceFilters = audienceFilters;
            return this;
        }

        /**
         * The emoji icon of this Collection.
         */
        public Builder icon(String icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        /**
         * The emoji icon of this Collection.
         */
        public Builder icon(Optional<String> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }

        /**
         * Indicates whether edits are allowed for everyone or only admins.
         */
        public Builder adminLocked(boolean adminLocked) {
            Utils.checkNotNull(adminLocked, "adminLocked");
            this.adminLocked = Optional.ofNullable(adminLocked);
            return this;
        }

        /**
         * Indicates whether edits are allowed for everyone or only admins.
         */
        public Builder adminLocked(Optional<Boolean> adminLocked) {
            Utils.checkNotNull(adminLocked, "adminLocked");
            this.adminLocked = adminLocked;
            return this;
        }

        /**
         * The parent of this Collection, or 0 if it's a top-level Collection.
         */
        public Builder parentId(long parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        /**
         * The parent of this Collection, or 0 if it's a top-level Collection.
         */
        public Builder parentId(Optional<Long> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder thumbnail(Thumbnail thumbnail) {
            Utils.checkNotNull(thumbnail, "thumbnail");
            this.thumbnail = Optional.ofNullable(thumbnail);
            return this;
        }

        public Builder thumbnail(Optional<? extends Thumbnail> thumbnail) {
            Utils.checkNotNull(thumbnail, "thumbnail");
            this.thumbnail = thumbnail;
            return this;
        }

        /**
         * The datasource type this Collection can hold.
         */
        public Builder allowedDatasource(String allowedDatasource) {
            Utils.checkNotNull(allowedDatasource, "allowedDatasource");
            this.allowedDatasource = Optional.ofNullable(allowedDatasource);
            return this;
        }

        /**
         * The datasource type this Collection can hold.
         */
        public Builder allowedDatasource(Optional<String> allowedDatasource) {
            Utils.checkNotNull(allowedDatasource, "allowedDatasource");
            this.allowedDatasource = allowedDatasource;
            return this;
        }

        public Builder permissions(ObjectPermissions permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends ObjectPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * The unique ID of the Collection.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder createTime(OffsetDateTime createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        public Builder createTime(Optional<OffsetDateTime> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        public Builder updateTime(OffsetDateTime updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        public Builder updateTime(Optional<OffsetDateTime> updateTime) {
            Utils.checkNotNull(updateTime, "updateTime");
            this.updateTime = updateTime;
            return this;
        }

        public Builder creator(Person creator) {
            Utils.checkNotNull(creator, "creator");
            this.creator = Optional.ofNullable(creator);
            return this;
        }

        public Builder creator(Optional<? extends Person> creator) {
            Utils.checkNotNull(creator, "creator");
            this.creator = creator;
            return this;
        }

        public Builder updatedBy(Person updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        public Builder updatedBy(Optional<? extends Person> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
         */
        public Builder itemCount(long itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = Optional.ofNullable(itemCount);
            return this;
        }

        /**
         * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
         */
        public Builder itemCount(Optional<Long> itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = itemCount;
            return this;
        }

        /**
         * The number of children Collections. Separated from the actual children so we can grab the count without children.
         */
        public Builder childCount(long childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = Optional.ofNullable(childCount);
            return this;
        }

        /**
         * The number of children Collections. Separated from the actual children so we can grab the count without children.
         */
        public Builder childCount(Optional<Long> childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = childCount;
            return this;
        }

        /**
         * The items in this Collection.
         */
        public Builder items(List<CollectionItem> items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }

        /**
         * The items in this Collection.
         */
        public Builder items(Optional<? extends List<CollectionItem>> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        public Builder pinMetadata(CollectionPinnedMetadata pinMetadata) {
            Utils.checkNotNull(pinMetadata, "pinMetadata");
            this.pinMetadata = Optional.ofNullable(pinMetadata);
            return this;
        }

        public Builder pinMetadata(Optional<? extends CollectionPinnedMetadata> pinMetadata) {
            Utils.checkNotNull(pinMetadata, "pinMetadata");
            this.pinMetadata = pinMetadata;
            return this;
        }

        /**
         * The names of the shortcuts (Go Links) that point to this Collection.
         */
        public Builder shortcuts(List<String> shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = Optional.ofNullable(shortcuts);
            return this;
        }

        /**
         * The names of the shortcuts (Go Links) that point to this Collection.
         */
        public Builder shortcuts(Optional<? extends List<String>> shortcuts) {
            Utils.checkNotNull(shortcuts, "shortcuts");
            this.shortcuts = shortcuts;
            return this;
        }

        /**
         * The children Collections of this Collection.
         */
        public Builder children(List<Collection> children) {
            Utils.checkNotNull(children, "children");
            this.children = Optional.ofNullable(children);
            return this;
        }

        /**
         * The children Collections of this Collection.
         */
        public Builder children(Optional<? extends List<Collection>> children) {
            Utils.checkNotNull(children, "children");
            this.children = children;
            return this;
        }

        /**
         * A list of user roles for the Collection.
         */
        public Builder roles(List<UserRoleSpecification> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * A list of user roles for the Collection.
         */
        public Builder roles(Optional<? extends List<UserRoleSpecification>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }

        public Builder errorCode(CreateCollectionResponseErrorCode errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        public Builder collection(Collection collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder error(CollectionError1 error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends CollectionError1> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public CreateCollectionResponse build() {
            return new CreateCollectionResponse(
                name,
                description,
                addedRoles,
                removedRoles,
                audienceFilters,
                icon,
                adminLocked,
                parentId,
                thumbnail,
                allowedDatasource,
                permissions,
                id,
                createTime,
                updateTime,
                creator,
                updatedBy,
                itemCount,
                childCount,
                items,
                pinMetadata,
                shortcuts,
                children,
                roles,
                errorCode,
                collection,
                error);
        }
    }
}
