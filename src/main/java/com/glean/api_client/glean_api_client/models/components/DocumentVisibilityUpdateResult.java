/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class DocumentVisibilityUpdateResult {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docId")
    private Optional<String> docId;

    /**
     * The visibility-override state of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("override")
    private Optional<? extends DocumentVisibilityUpdateResultOverride> override;

    /**
     * Whether this document was successfully set to its desired visibility state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<Boolean> success;

    @JsonCreator
    public DocumentVisibilityUpdateResult(
            @JsonProperty("docId") Optional<String> docId,
            @JsonProperty("override") Optional<? extends DocumentVisibilityUpdateResultOverride> override,
            @JsonProperty("success") Optional<Boolean> success) {
        Utils.checkNotNull(docId, "docId");
        Utils.checkNotNull(override, "override");
        Utils.checkNotNull(success, "success");
        this.docId = docId;
        this.override = override;
        this.success = success;
    }
    
    public DocumentVisibilityUpdateResult() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> docId() {
        return docId;
    }

    /**
     * The visibility-override state of the document.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentVisibilityUpdateResultOverride> override() {
        return (Optional<DocumentVisibilityUpdateResultOverride>) override;
    }

    /**
     * Whether this document was successfully set to its desired visibility state.
     */
    @JsonIgnore
    public Optional<Boolean> success() {
        return success;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DocumentVisibilityUpdateResult withDocId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = Optional.ofNullable(docId);
        return this;
    }

    public DocumentVisibilityUpdateResult withDocId(Optional<String> docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }

    /**
     * The visibility-override state of the document.
     */
    public DocumentVisibilityUpdateResult withOverride(DocumentVisibilityUpdateResultOverride override) {
        Utils.checkNotNull(override, "override");
        this.override = Optional.ofNullable(override);
        return this;
    }

    /**
     * The visibility-override state of the document.
     */
    public DocumentVisibilityUpdateResult withOverride(Optional<? extends DocumentVisibilityUpdateResultOverride> override) {
        Utils.checkNotNull(override, "override");
        this.override = override;
        return this;
    }

    /**
     * Whether this document was successfully set to its desired visibility state.
     */
    public DocumentVisibilityUpdateResult withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Whether this document was successfully set to its desired visibility state.
     */
    public DocumentVisibilityUpdateResult withSuccess(Optional<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentVisibilityUpdateResult other = (DocumentVisibilityUpdateResult) o;
        return 
            Utils.enhancedDeepEquals(this.docId, other.docId) &&
            Utils.enhancedDeepEquals(this.override, other.override) &&
            Utils.enhancedDeepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            docId,
            override,
            success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentVisibilityUpdateResult.class,
                "docId", docId,
                "override", override,
                "success", success);
    }
    
    public final static class Builder {
 
        private Optional<String> docId = Optional.empty();
 
        private Optional<? extends DocumentVisibilityUpdateResultOverride> override = Optional.empty();
 
        private Optional<Boolean> success = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder docId(String docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = Optional.ofNullable(docId);
            return this;
        }

        public Builder docId(Optional<String> docId) {
            Utils.checkNotNull(docId, "docId");
            this.docId = docId;
            return this;
        }

        /**
         * The visibility-override state of the document.
         */
        public Builder override(DocumentVisibilityUpdateResultOverride override) {
            Utils.checkNotNull(override, "override");
            this.override = Optional.ofNullable(override);
            return this;
        }

        /**
         * The visibility-override state of the document.
         */
        public Builder override(Optional<? extends DocumentVisibilityUpdateResultOverride> override) {
            Utils.checkNotNull(override, "override");
            this.override = override;
            return this;
        }

        /**
         * Whether this document was successfully set to its desired visibility state.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Whether this document was successfully set to its desired visibility state.
         */
        public Builder success(Optional<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }
        
        public DocumentVisibilityUpdateResult build() {
            return new DocumentVisibilityUpdateResult(
                docId,
                override,
                success);
        }
    }
}
