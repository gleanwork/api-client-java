/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * EventClassification
 * 
 * <p>A generated classification of a given event.
 */
public class EventClassification {

    /**
     * The name for a generated classification of an event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends EventClassificationName> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strategies")
    private Optional<? extends List<EventStrategyName>> strategies;

    @JsonCreator
    public EventClassification(
            @JsonProperty("name") Optional<? extends EventClassificationName> name,
            @JsonProperty("strategies") Optional<? extends List<EventStrategyName>> strategies) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(strategies, "strategies");
        this.name = name;
        this.strategies = strategies;
    }
    
    public EventClassification() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The name for a generated classification of an event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EventClassificationName> name() {
        return (Optional<EventClassificationName>) name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EventStrategyName>> strategies() {
        return (Optional<List<EventStrategyName>>) strategies;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name for a generated classification of an event.
     */
    public EventClassification withName(EventClassificationName name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name for a generated classification of an event.
     */
    public EventClassification withName(Optional<? extends EventClassificationName> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public EventClassification withStrategies(List<EventStrategyName> strategies) {
        Utils.checkNotNull(strategies, "strategies");
        this.strategies = Optional.ofNullable(strategies);
        return this;
    }

    public EventClassification withStrategies(Optional<? extends List<EventStrategyName>> strategies) {
        Utils.checkNotNull(strategies, "strategies");
        this.strategies = strategies;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EventClassification other = (EventClassification) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.strategies, other.strategies);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            strategies);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EventClassification.class,
                "name", name,
                "strategies", strategies);
    }
    
    public final static class Builder {
 
        private Optional<? extends EventClassificationName> name = Optional.empty();
 
        private Optional<? extends List<EventStrategyName>> strategies = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name for a generated classification of an event.
         */
        public Builder name(EventClassificationName name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name for a generated classification of an event.
         */
        public Builder name(Optional<? extends EventClassificationName> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder strategies(List<EventStrategyName> strategies) {
            Utils.checkNotNull(strategies, "strategies");
            this.strategies = Optional.ofNullable(strategies);
            return this;
        }

        public Builder strategies(Optional<? extends List<EventStrategyName>> strategies) {
            Utils.checkNotNull(strategies, "strategies");
            this.strategies = strategies;
            return this;
        }
        
        public EventClassification build() {
            return new EventClassification(
                name,
                strategies);
        }
    }
}
