/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * InputOptions
 * 
 * <p>Controls which data-sources and what time-range to include in scans.
 */
public class InputOptions {

    /**
     * list of url regex matching documents excluded from report
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlGreenlist")
    @Deprecated
    private Optional<? extends List<String>> urlGreenlist;

    /**
     * The types of datasource for which to run the report/policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourcesType")
    private Optional<? extends DatasourcesType> datasourcesType;

    /**
     * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasources")
    @Deprecated
    private Optional<? extends List<String>> datasources;

    /**
     * List of datasource instances to consider for report/policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasourceInstances")
    private Optional<? extends List<String>> datasourceInstances;

    /**
     * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timePeriodType")
    private Optional<? extends TimePeriodType> timePeriodType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customTimeRange")
    private Optional<? extends TimeRange> customTimeRange;

    @JsonCreator
    public InputOptions(
            @JsonProperty("urlGreenlist") Optional<? extends List<String>> urlGreenlist,
            @JsonProperty("datasourcesType") Optional<? extends DatasourcesType> datasourcesType,
            @JsonProperty("datasources") Optional<? extends List<String>> datasources,
            @JsonProperty("datasourceInstances") Optional<? extends List<String>> datasourceInstances,
            @JsonProperty("timePeriodType") Optional<? extends TimePeriodType> timePeriodType,
            @JsonProperty("customTimeRange") Optional<? extends TimeRange> customTimeRange) {
        Utils.checkNotNull(urlGreenlist, "urlGreenlist");
        Utils.checkNotNull(datasourcesType, "datasourcesType");
        Utils.checkNotNull(datasources, "datasources");
        Utils.checkNotNull(datasourceInstances, "datasourceInstances");
        Utils.checkNotNull(timePeriodType, "timePeriodType");
        Utils.checkNotNull(customTimeRange, "customTimeRange");
        this.urlGreenlist = urlGreenlist;
        this.datasourcesType = datasourcesType;
        this.datasources = datasources;
        this.datasourceInstances = datasourceInstances;
        this.timePeriodType = timePeriodType;
        this.customTimeRange = customTimeRange;
    }
    
    public InputOptions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * list of url regex matching documents excluded from report
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> urlGreenlist() {
        return (Optional<List<String>>) urlGreenlist;
    }

    /**
     * The types of datasource for which to run the report/policy.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DatasourcesType> datasourcesType() {
        return (Optional<DatasourcesType>) datasourcesType;
    }

    /**
     * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> datasources() {
        return (Optional<List<String>>) datasources;
    }

    /**
     * List of datasource instances to consider for report/policy.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> datasourceInstances() {
        return (Optional<List<String>>) datasourceInstances;
    }

    /**
     * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimePeriodType> timePeriodType() {
        return (Optional<TimePeriodType>) timePeriodType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeRange> customTimeRange() {
        return (Optional<TimeRange>) customTimeRange;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * list of url regex matching documents excluded from report
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InputOptions withUrlGreenlist(List<String> urlGreenlist) {
        Utils.checkNotNull(urlGreenlist, "urlGreenlist");
        this.urlGreenlist = Optional.ofNullable(urlGreenlist);
        return this;
    }

    /**
     * list of url regex matching documents excluded from report
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InputOptions withUrlGreenlist(Optional<? extends List<String>> urlGreenlist) {
        Utils.checkNotNull(urlGreenlist, "urlGreenlist");
        this.urlGreenlist = urlGreenlist;
        return this;
    }

    /**
     * The types of datasource for which to run the report/policy.
     */
    public InputOptions withDatasourcesType(DatasourcesType datasourcesType) {
        Utils.checkNotNull(datasourcesType, "datasourcesType");
        this.datasourcesType = Optional.ofNullable(datasourcesType);
        return this;
    }

    /**
     * The types of datasource for which to run the report/policy.
     */
    public InputOptions withDatasourcesType(Optional<? extends DatasourcesType> datasourcesType) {
        Utils.checkNotNull(datasourcesType, "datasourcesType");
        this.datasourcesType = datasourcesType;
        return this;
    }

    /**
     * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InputOptions withDatasources(List<String> datasources) {
        Utils.checkNotNull(datasources, "datasources");
        this.datasources = Optional.ofNullable(datasources);
        return this;
    }

    /**
     * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InputOptions withDatasources(Optional<? extends List<String>> datasources) {
        Utils.checkNotNull(datasources, "datasources");
        this.datasources = datasources;
        return this;
    }

    /**
     * List of datasource instances to consider for report/policy.
     */
    public InputOptions withDatasourceInstances(List<String> datasourceInstances) {
        Utils.checkNotNull(datasourceInstances, "datasourceInstances");
        this.datasourceInstances = Optional.ofNullable(datasourceInstances);
        return this;
    }

    /**
     * List of datasource instances to consider for report/policy.
     */
    public InputOptions withDatasourceInstances(Optional<? extends List<String>> datasourceInstances) {
        Utils.checkNotNull(datasourceInstances, "datasourceInstances");
        this.datasourceInstances = datasourceInstances;
        return this;
    }

    /**
     * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
     */
    public InputOptions withTimePeriodType(TimePeriodType timePeriodType) {
        Utils.checkNotNull(timePeriodType, "timePeriodType");
        this.timePeriodType = Optional.ofNullable(timePeriodType);
        return this;
    }

    /**
     * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
     */
    public InputOptions withTimePeriodType(Optional<? extends TimePeriodType> timePeriodType) {
        Utils.checkNotNull(timePeriodType, "timePeriodType");
        this.timePeriodType = timePeriodType;
        return this;
    }

    public InputOptions withCustomTimeRange(TimeRange customTimeRange) {
        Utils.checkNotNull(customTimeRange, "customTimeRange");
        this.customTimeRange = Optional.ofNullable(customTimeRange);
        return this;
    }

    public InputOptions withCustomTimeRange(Optional<? extends TimeRange> customTimeRange) {
        Utils.checkNotNull(customTimeRange, "customTimeRange");
        this.customTimeRange = customTimeRange;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InputOptions other = (InputOptions) o;
        return 
            Objects.deepEquals(this.urlGreenlist, other.urlGreenlist) &&
            Objects.deepEquals(this.datasourcesType, other.datasourcesType) &&
            Objects.deepEquals(this.datasources, other.datasources) &&
            Objects.deepEquals(this.datasourceInstances, other.datasourceInstances) &&
            Objects.deepEquals(this.timePeriodType, other.timePeriodType) &&
            Objects.deepEquals(this.customTimeRange, other.customTimeRange);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            urlGreenlist,
            datasourcesType,
            datasources,
            datasourceInstances,
            timePeriodType,
            customTimeRange);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InputOptions.class,
                "urlGreenlist", urlGreenlist,
                "datasourcesType", datasourcesType,
                "datasources", datasources,
                "datasourceInstances", datasourceInstances,
                "timePeriodType", timePeriodType,
                "customTimeRange", customTimeRange);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<? extends List<String>> urlGreenlist = Optional.empty();
 
        private Optional<? extends DatasourcesType> datasourcesType = Optional.empty();
 
        @Deprecated
        private Optional<? extends List<String>> datasources = Optional.empty();
 
        private Optional<? extends List<String>> datasourceInstances = Optional.empty();
 
        private Optional<? extends TimePeriodType> timePeriodType = Optional.empty();
 
        private Optional<? extends TimeRange> customTimeRange = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * list of url regex matching documents excluded from report
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder urlGreenlist(List<String> urlGreenlist) {
            Utils.checkNotNull(urlGreenlist, "urlGreenlist");
            this.urlGreenlist = Optional.ofNullable(urlGreenlist);
            return this;
        }

        /**
         * list of url regex matching documents excluded from report
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder urlGreenlist(Optional<? extends List<String>> urlGreenlist) {
            Utils.checkNotNull(urlGreenlist, "urlGreenlist");
            this.urlGreenlist = urlGreenlist;
            return this;
        }

        /**
         * The types of datasource for which to run the report/policy.
         */
        public Builder datasourcesType(DatasourcesType datasourcesType) {
            Utils.checkNotNull(datasourcesType, "datasourcesType");
            this.datasourcesType = Optional.ofNullable(datasourcesType);
            return this;
        }

        /**
         * The types of datasource for which to run the report/policy.
         */
        public Builder datasourcesType(Optional<? extends DatasourcesType> datasourcesType) {
            Utils.checkNotNull(datasourcesType, "datasourcesType");
            this.datasourcesType = datasourcesType;
            return this;
        }

        /**
         * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder datasources(List<String> datasources) {
            Utils.checkNotNull(datasources, "datasources");
            this.datasources = Optional.ofNullable(datasources);
            return this;
        }

        /**
         * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder datasources(Optional<? extends List<String>> datasources) {
            Utils.checkNotNull(datasources, "datasources");
            this.datasources = datasources;
            return this;
        }

        /**
         * List of datasource instances to consider for report/policy.
         */
        public Builder datasourceInstances(List<String> datasourceInstances) {
            Utils.checkNotNull(datasourceInstances, "datasourceInstances");
            this.datasourceInstances = Optional.ofNullable(datasourceInstances);
            return this;
        }

        /**
         * List of datasource instances to consider for report/policy.
         */
        public Builder datasourceInstances(Optional<? extends List<String>> datasourceInstances) {
            Utils.checkNotNull(datasourceInstances, "datasourceInstances");
            this.datasourceInstances = datasourceInstances;
            return this;
        }

        /**
         * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
         */
        public Builder timePeriodType(TimePeriodType timePeriodType) {
            Utils.checkNotNull(timePeriodType, "timePeriodType");
            this.timePeriodType = Optional.ofNullable(timePeriodType);
            return this;
        }

        /**
         * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
         */
        public Builder timePeriodType(Optional<? extends TimePeriodType> timePeriodType) {
            Utils.checkNotNull(timePeriodType, "timePeriodType");
            this.timePeriodType = timePeriodType;
            return this;
        }

        public Builder customTimeRange(TimeRange customTimeRange) {
            Utils.checkNotNull(customTimeRange, "customTimeRange");
            this.customTimeRange = Optional.ofNullable(customTimeRange);
            return this;
        }

        public Builder customTimeRange(Optional<? extends TimeRange> customTimeRange) {
            Utils.checkNotNull(customTimeRange, "customTimeRange");
            this.customTimeRange = customTimeRange;
            return this;
        }
        
        public InputOptions build() {
            return new InputOptions(
                urlGreenlist,
                datasourcesType,
                datasources,
                datasourceInstances,
                timePeriodType,
                customTimeRange);
        }
    }
}
