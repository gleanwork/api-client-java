/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.AutocompleteRequest;
import com.glean.api_client.glean_api_client.models.components.FeedRequest;
import com.glean.api_client.glean_api_client.models.components.RecommendationsRequest;
import com.glean.api_client.glean_api_client.models.components.SearchRequest;
import com.glean.api_client.glean_api_client.models.operations.AdminsearchRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.AdminsearchResponse;
import com.glean.api_client.glean_api_client.models.operations.AutocompleteRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.AutocompleteResponse;
import com.glean.api_client.glean_api_client.models.operations.FeedRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.FeedResponse;
import com.glean.api_client.glean_api_client.models.operations.RecommendationsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.RecommendationsResponse;
import com.glean.api_client.glean_api_client.models.operations.SearchRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.SearchResponse;
import com.glean.api_client.glean_api_client.operations.AdminsearchOperation;
import com.glean.api_client.glean_api_client.operations.AutocompleteOperation;
import com.glean.api_client.glean_api_client.operations.FeedOperation;
import com.glean.api_client.glean_api_client.operations.RecommendationsOperation;
import com.glean.api_client.glean_api_client.operations.SearchOperation;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Search {
    private final SDKConfiguration sdkConfiguration;

    Search(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Search the index (admin)
     * 
     * <p>Retrieves results for search query without respect for permissions. This is available only to privileged users.
     * 
     * @return The call builder
     */
    public AdminsearchRequestBuilder queryAsAdmin() {
        return new AdminsearchRequestBuilder(sdkConfiguration);
    }

    /**
     * Search the index (admin)
     * 
     * <p>Retrieves results for search query without respect for permissions. This is available only to privileged users.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AdminsearchResponse queryAsAdmin(
            SearchRequest request) throws Exception {
        RequestOperation<SearchRequest, AdminsearchResponse> operation
              = new AdminsearchOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Autocomplete
     * 
     * <p>Retrieve query suggestions, operators and documents for the given partially typed query.
     * 
     * @return The call builder
     */
    public AutocompleteRequestBuilder autocomplete() {
        return new AutocompleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Autocomplete
     * 
     * <p>Retrieve query suggestions, operators and documents for the given partially typed query.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AutocompleteResponse autocomplete(
            AutocompleteRequest request) throws Exception {
        RequestOperation<AutocompleteRequest, AutocompleteResponse> operation
              = new AutocompleteOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Feed of documents and events
     * 
     * <p>The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
     * 
     * @return The call builder
     */
    public FeedRequestBuilder retrieveFeed() {
        return new FeedRequestBuilder(sdkConfiguration);
    }

    /**
     * Feed of documents and events
     * 
     * <p>The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FeedResponse retrieveFeed(
            FeedRequest request) throws Exception {
        RequestOperation<FeedRequest, FeedResponse> operation
              = new FeedOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Recommend documents
     * 
     * <p>Retrieve recommended documents for the given URL or Glean Document ID.
     * 
     * @return The call builder
     */
    public RecommendationsRequestBuilder recommendations() {
        return new RecommendationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Recommend documents
     * 
     * <p>Retrieve recommended documents for the given URL or Glean Document ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RecommendationsResponse recommendations(
            RecommendationsRequest request) throws Exception {
        RequestOperation<RecommendationsRequest, RecommendationsResponse> operation
              = new RecommendationsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Search
     * 
     * <p>Retrieve results from the index for the given query and filters.
     * 
     * @return The call builder
     */
    public SearchRequestBuilder query() {
        return new SearchRequestBuilder(sdkConfiguration);
    }

    /**
     * Search
     * 
     * <p>Retrieve results from the index for the given query and filters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SearchResponse query(
            SearchRequest request) throws Exception {
        RequestOperation<SearchRequest, SearchResponse> operation
              = new SearchOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
