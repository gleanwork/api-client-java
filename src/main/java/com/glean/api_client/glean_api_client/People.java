/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;
import static com.glean.api_client.glean_api_client.operations.Operations.RequestlessOperation;

import com.glean.api_client.glean_api_client.models.components.BulkIndexEmployeesRequest;
import com.glean.api_client.glean_api_client.models.components.BulkIndexTeamsRequest;
import com.glean.api_client.glean_api_client.models.components.DebugUserRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteEmployeeRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteTeamRequest;
import com.glean.api_client.glean_api_client.models.components.GetUserCountRequest;
import com.glean.api_client.glean_api_client.models.components.IndexEmployeeRequest;
import com.glean.api_client.glean_api_client.models.components.IndexTeamRequest;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexemployeesRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexemployeesResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexteamsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexteamsResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DebugDatasourceUserRequest;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DebugDatasourceUserRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DebugDatasourceUserResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeleteemployeeRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeleteemployeeResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeleteteamRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeleteteamResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1GetusercountRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1GetusercountResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexemployeeRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexemployeeResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexteamRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexteamResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1ProcessallemployeesandteamsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1ProcessallemployeesandteamsResponse;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1BulkindexemployeesOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1BulkindexteamsOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1DebugDatasourceUserOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1DeleteemployeeOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1DeleteteamOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1GetusercountOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1IndexemployeeOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1IndexteamOperation;
import com.glean.api_client.glean_api_client.operations.PostApiIndexV1ProcessallemployeesandteamsOperation;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class People {
    private final SDKConfiguration sdkConfiguration;

    People(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Beta: Get user information
     * 
     * <p>Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice.
     * 
     * <p>Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
     * 
     * @return The call builder
     */
    public PostApiIndexV1DebugDatasourceUserRequestBuilder debug() {
        return new PostApiIndexV1DebugDatasourceUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Beta: Get user information
     * 
     * <p>Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice.
     * 
     * <p>Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
     * 
     * @param datasource The datasource to which the user belongs
     * @param debugUserRequest Describes the request body of the /debug/{datasource}/user API call
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1DebugDatasourceUserResponse debug(
            String datasource,
            DebugUserRequest debugUserRequest) throws Exception {
        PostApiIndexV1DebugDatasourceUserRequest request =
            PostApiIndexV1DebugDatasourceUserRequest
                .builder()
                .datasource(datasource)
                .debugUserRequest(debugUserRequest)
                .build();
        RequestOperation<PostApiIndexV1DebugDatasourceUserRequest, PostApiIndexV1DebugDatasourceUserResponse> operation
              = new PostApiIndexV1DebugDatasourceUserOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get user count
     * 
     * <p>Fetches user count for the specified custom datasource.
     * 
     * <p>Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PostApiIndexV1GetusercountRequestBuilder count() {
        return new PostApiIndexV1GetusercountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get user count
     * 
     * <p>Fetches user count for the specified custom datasource.
     * 
     * <p>Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PostApiIndexV1GetusercountResponse count(
            GetUserCountRequest request) throws Exception {
        RequestOperation<GetUserCountRequest, PostApiIndexV1GetusercountResponse> operation
              = new PostApiIndexV1GetusercountOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Index employee
     * 
     * <p>Adds an employee or updates information about an employee
     * 
     * @return The call builder
     */
    public PostApiIndexV1IndexemployeeRequestBuilder index() {
        return new PostApiIndexV1IndexemployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Index employee
     * 
     * <p>Adds an employee or updates information about an employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1IndexemployeeResponse index(
            IndexEmployeeRequest request) throws Exception {
        RequestOperation<IndexEmployeeRequest, PostApiIndexV1IndexemployeeResponse> operation
              = new PostApiIndexV1IndexemployeeOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Bulk index employees
     * 
     * <p>Replaces all the currently indexed employees using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     * 
     * @return The call builder
     */
    public PostApiIndexV1BulkindexemployeesRequestBuilder bulkIndex() {
        return new PostApiIndexV1BulkindexemployeesRequestBuilder(sdkConfiguration);
    }

    /**
     * Bulk index employees
     * 
     * <p>Replaces all the currently indexed employees using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1BulkindexemployeesResponse bulkIndex(
            BulkIndexEmployeesRequest request) throws Exception {
        RequestOperation<BulkIndexEmployeesRequest, PostApiIndexV1BulkindexemployeesResponse> operation
              = new PostApiIndexV1BulkindexemployeesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Schedules the processing of uploaded employees and teams
     * 
     * <p>Schedules the immediate processing of employees and teams uploaded through the indexing API. By default all uploaded people data will be processed asynchronously but this API can be used to schedule its processing on demand.
     * 
     * @return The call builder
     */
    public PostApiIndexV1ProcessallemployeesandteamsRequestBuilder processAllEmployeesAndTeams() {
        return new PostApiIndexV1ProcessallemployeesandteamsRequestBuilder(sdkConfiguration);
    }

    /**
     * Schedules the processing of uploaded employees and teams
     * 
     * <p>Schedules the immediate processing of employees and teams uploaded through the indexing API. By default all uploaded people data will be processed asynchronously but this API can be used to schedule its processing on demand.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1ProcessallemployeesandteamsResponse processAllEmployeesAndTeamsDirect() throws Exception {
        RequestlessOperation<PostApiIndexV1ProcessallemployeesandteamsResponse> operation
            = new PostApiIndexV1ProcessallemployeesandteamsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }


    /**
     * Delete employee
     * 
     * <p>Delete an employee. Silently succeeds if employee is not present.
     * 
     * @return The call builder
     */
    public PostApiIndexV1DeleteemployeeRequestBuilder delete() {
        return new PostApiIndexV1DeleteemployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete employee
     * 
     * <p>Delete an employee. Silently succeeds if employee is not present.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1DeleteemployeeResponse delete(
            DeleteEmployeeRequest request) throws Exception {
        RequestOperation<DeleteEmployeeRequest, PostApiIndexV1DeleteemployeeResponse> operation
              = new PostApiIndexV1DeleteemployeeOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Index team
     * 
     * <p>Adds a team or updates information about a team
     * 
     * @return The call builder
     */
    public PostApiIndexV1IndexteamRequestBuilder indexTeam() {
        return new PostApiIndexV1IndexteamRequestBuilder(sdkConfiguration);
    }

    /**
     * Index team
     * 
     * <p>Adds a team or updates information about a team
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1IndexteamResponse indexTeam(
            IndexTeamRequest request) throws Exception {
        RequestOperation<IndexTeamRequest, PostApiIndexV1IndexteamResponse> operation
              = new PostApiIndexV1IndexteamOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete team
     * 
     * <p>Delete a team based on provided id.
     * 
     * @return The call builder
     */
    public PostApiIndexV1DeleteteamRequestBuilder deleteTeam() {
        return new PostApiIndexV1DeleteteamRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete team
     * 
     * <p>Delete a team based on provided id.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1DeleteteamResponse deleteTeam(
            DeleteTeamRequest request) throws Exception {
        RequestOperation<DeleteTeamRequest, PostApiIndexV1DeleteteamResponse> operation
              = new PostApiIndexV1DeleteteamOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Bulk index teams
     * 
     * <p>Replaces all the currently indexed teams using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     * 
     * @return The call builder
     */
    public PostApiIndexV1BulkindexteamsRequestBuilder bulkIndexTeams() {
        return new PostApiIndexV1BulkindexteamsRequestBuilder(sdkConfiguration);
    }

    /**
     * Bulk index teams
     * 
     * <p>Replaces all the currently indexed teams using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostApiIndexV1BulkindexteamsResponse bulkIndexTeams(
            BulkIndexTeamsRequest request) throws Exception {
        RequestOperation<BulkIndexTeamsRequest, PostApiIndexV1BulkindexteamsResponse> operation
              = new PostApiIndexV1BulkindexteamsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
