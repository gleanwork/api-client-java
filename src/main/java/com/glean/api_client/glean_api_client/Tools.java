/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.ToolsCallRequest;
import com.glean.api_client.glean_api_client.models.operations.GetRestApiV1ToolsListRequest;
import com.glean.api_client.glean_api_client.models.operations.GetRestApiV1ToolsListRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetRestApiV1ToolsListResponse;
import com.glean.api_client.glean_api_client.models.operations.PostRestApiV1ToolsCallRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.PostRestApiV1ToolsCallResponse;
import com.glean.api_client.glean_api_client.operations.GetRestApiV1ToolsListOperation;
import com.glean.api_client.glean_api_client.operations.PostRestApiV1ToolsCallOperation;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Tools {
    private final SDKConfiguration sdkConfiguration;

    Tools(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List available tools
     * 
     * <p>Returns a filtered set of available tools based on optional tool name parameters. If no filters are provided, all available tools are returned.
     * 
     * @return The call builder
     */
    public GetRestApiV1ToolsListRequestBuilder list() {
        return new GetRestApiV1ToolsListRequestBuilder(sdkConfiguration);
    }

    /**
     * List available tools
     * 
     * <p>Returns a filtered set of available tools based on optional tool name parameters. If no filters are provided, all available tools are returned.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRestApiV1ToolsListResponse listDirect() throws Exception {
        return list(Optional.empty());
    }

    /**
     * List available tools
     * 
     * <p>Returns a filtered set of available tools based on optional tool name parameters. If no filters are provided, all available tools are returned.
     * 
     * @param toolNames Optional array of tool names to filter by
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRestApiV1ToolsListResponse list(
            Optional<? extends List<String>> toolNames) throws Exception {
        GetRestApiV1ToolsListRequest request =
            GetRestApiV1ToolsListRequest
                .builder()
                .toolNames(toolNames)
                .build();
        RequestOperation<GetRestApiV1ToolsListRequest, GetRestApiV1ToolsListResponse> operation
              = new GetRestApiV1ToolsListOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Execute the specified tool
     * 
     * <p>Execute the specified tool with provided parameters
     * 
     * @return The call builder
     */
    public PostRestApiV1ToolsCallRequestBuilder run() {
        return new PostRestApiV1ToolsCallRequestBuilder(sdkConfiguration);
    }

    /**
     * Execute the specified tool
     * 
     * <p>Execute the specified tool with provided parameters
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostRestApiV1ToolsCallResponse run(
            ToolsCallRequest request) throws Exception {
        RequestOperation<ToolsCallRequest, PostRestApiV1ToolsCallResponse> operation
              = new PostRestApiV1ToolsCallOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
