/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.CreateDlpReportRequest;
import com.glean.api_client.glean_api_client.models.components.UpdateDlpReportRequest;
import com.glean.api_client.glean_api_client.models.operations.CreatepolicyRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.CreatepolicyResponse;
import com.glean.api_client.glean_api_client.models.operations.DownloadpolicycsvRequest;
import com.glean.api_client.glean_api_client.models.operations.DownloadpolicycsvRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DownloadpolicycsvResponse;
import com.glean.api_client.glean_api_client.models.operations.GetpolicyRequest;
import com.glean.api_client.glean_api_client.models.operations.GetpolicyRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetpolicyResponse;
import com.glean.api_client.glean_api_client.models.operations.ListpoliciesRequest;
import com.glean.api_client.glean_api_client.models.operations.ListpoliciesRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ListpoliciesResponse;
import com.glean.api_client.glean_api_client.models.operations.UpdatepolicyRequest;
import com.glean.api_client.glean_api_client.models.operations.UpdatepolicyRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.UpdatepolicyResponse;
import com.glean.api_client.glean_api_client.operations.CreatepolicyOperation;
import com.glean.api_client.glean_api_client.operations.DownloadpolicycsvOperation;
import com.glean.api_client.glean_api_client.operations.GetpolicyOperation;
import com.glean.api_client.glean_api_client.operations.ListpoliciesOperation;
import com.glean.api_client.glean_api_client.operations.UpdatepolicyOperation;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Policies {
    private final SDKConfiguration sdkConfiguration;

    Policies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Gets specified policy
     * 
     * <p>Fetches the specified policy version, or the latest if no version is provided.
     * 
     * @return The call builder
     */
    public GetpolicyRequestBuilder retrieve() {
        return new GetpolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Gets specified policy
     * 
     * <p>Fetches the specified policy version, or the latest if no version is provided.
     * 
     * @param id The id of the policy to fetch.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetpolicyResponse retrieve(String id) throws Exception {
        return retrieve(id, Optional.empty());
    }

    /**
     * Gets specified policy
     * 
     * <p>Fetches the specified policy version, or the latest if no version is provided.
     * 
     * @param id The id of the policy to fetch.
     * @param version The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetpolicyResponse retrieve(
            String id,
            Optional<Long> version) throws Exception {
        GetpolicyRequest request =
            GetpolicyRequest
                .builder()
                .id(id)
                .version(version)
                .build();
        RequestOperation<GetpolicyRequest, GetpolicyResponse> operation
              = new GetpolicyOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Updates an existing policy
     * 
     * <p>Updates an existing policy.
     * 
     * @return The call builder
     */
    public UpdatepolicyRequestBuilder update() {
        return new UpdatepolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Updates an existing policy
     * 
     * <p>Updates an existing policy.
     * 
     * @param id The id of the policy to fetch.
     * @param updateDlpReportRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatepolicyResponse update(
            String id,
            UpdateDlpReportRequest updateDlpReportRequest) throws Exception {
        UpdatepolicyRequest request =
            UpdatepolicyRequest
                .builder()
                .id(id)
                .updateDlpReportRequest(updateDlpReportRequest)
                .build();
        RequestOperation<UpdatepolicyRequest, UpdatepolicyResponse> operation
              = new UpdatepolicyOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Lists policies
     * 
     * <p>Lists policies with filtering.
     * 
     * @return The call builder
     */
    public ListpoliciesRequestBuilder list() {
        return new ListpoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * Lists policies
     * 
     * <p>Lists policies with filtering.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListpoliciesResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty());
    }

    /**
     * Lists policies
     * 
     * <p>Lists policies with filtering.
     * 
     * @param autoHide Filter to return reports with a given value of auto-hide.
     * @param frequency Filter to return reports with a given frequency.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListpoliciesResponse list(
            Optional<Boolean> autoHide,
            Optional<String> frequency) throws Exception {
        ListpoliciesRequest request =
            ListpoliciesRequest
                .builder()
                .autoHide(autoHide)
                .frequency(frequency)
                .build();
        RequestOperation<ListpoliciesRequest, ListpoliciesResponse> operation
              = new ListpoliciesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Creates new policy
     * 
     * <p>Creates a new policy with specified specifications and returns its id.
     * 
     * @return The call builder
     */
    public CreatepolicyRequestBuilder create() {
        return new CreatepolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates new policy
     * 
     * <p>Creates a new policy with specified specifications and returns its id.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatepolicyResponse create(
            CreateDlpReportRequest request) throws Exception {
        RequestOperation<CreateDlpReportRequest, CreatepolicyResponse> operation
              = new CreatepolicyOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Downloads violations CSV for policy
     * 
     * <p>Downloads CSV violations report for a specific policy id. This does not support continuous policies.
     * 
     * @return The call builder
     */
    public DownloadpolicycsvRequestBuilder download() {
        return new DownloadpolicycsvRequestBuilder(sdkConfiguration);
    }

    /**
     * Downloads violations CSV for policy
     * 
     * <p>Downloads CSV violations report for a specific policy id. This does not support continuous policies.
     * 
     * @param id The id of the policy to download violations for.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DownloadpolicycsvResponse download(
            String id) throws Exception {
        DownloadpolicycsvRequest request =
            DownloadpolicycsvRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<DownloadpolicycsvRequest, DownloadpolicycsvResponse> operation
              = new DownloadpolicycsvOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
