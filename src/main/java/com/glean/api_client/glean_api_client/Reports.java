/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.UpdateDlpConfigRequest;
import com.glean.api_client.glean_api_client.models.operations.CreatereportRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.CreatereportResponse;
import com.glean.api_client.glean_api_client.models.operations.DownloadreportcsvRequest;
import com.glean.api_client.glean_api_client.models.operations.DownloadreportcsvRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DownloadreportcsvResponse;
import com.glean.api_client.glean_api_client.models.operations.GetreportstatusRequest;
import com.glean.api_client.glean_api_client.models.operations.GetreportstatusRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetreportstatusResponse;
import com.glean.api_client.glean_api_client.operations.CreatereportOperation;
import com.glean.api_client.glean_api_client.operations.DownloadreportcsvOperation;
import com.glean.api_client.glean_api_client.operations.GetreportstatusOperation;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Reports {
    private final SDKConfiguration sdkConfiguration;

    Reports(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Creates new one-time report
     * 
     * <p>Creates a new one-time report and executes its batch job.
     * 
     * @return The call builder
     */
    public CreatereportRequestBuilder create() {
        return new CreatereportRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates new one-time report
     * 
     * <p>Creates a new one-time report and executes its batch job.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatereportResponse create(
            UpdateDlpConfigRequest request) throws Exception {
        RequestOperation<UpdateDlpConfigRequest, CreatereportResponse> operation
              = new CreatereportOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Downloads violations CSV for report
     * 
     * <p>Downloads CSV violations report for a specific report id.
     * 
     * @return The call builder
     */
    public DownloadreportcsvRequestBuilder download() {
        return new DownloadreportcsvRequestBuilder(sdkConfiguration);
    }

    /**
     * Downloads violations CSV for report
     * 
     * <p>Downloads CSV violations report for a specific report id.
     * 
     * @param id The id of the report to download violations for.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DownloadreportcsvResponse download(
            String id) throws Exception {
        DownloadreportcsvRequest request =
            DownloadreportcsvRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<DownloadreportcsvRequest, DownloadreportcsvResponse> operation
              = new DownloadreportcsvOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Fetches report run status
     * 
     * <p>Fetches the status of the run corresponding to the report-id.
     * 
     * @return The call builder
     */
    public GetreportstatusRequestBuilder status() {
        return new GetreportstatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Fetches report run status
     * 
     * <p>Fetches the status of the run corresponding to the report-id.
     * 
     * @param id The id of the report to get run status for.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetreportstatusResponse status(
            String id) throws Exception {
        GetreportstatusRequest request =
            GetreportstatusRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetreportstatusRequest, GetreportstatusResponse> operation
              = new GetreportstatusOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
