/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.ChatRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteChatFilesRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteChatsRequest;
import com.glean.api_client.glean_api_client.models.components.GetChatApplicationRequest;
import com.glean.api_client.glean_api_client.models.components.GetChatFilesRequest;
import com.glean.api_client.glean_api_client.models.components.GetChatRequest;
import com.glean.api_client.glean_api_client.models.components.UploadChatFilesRequest;
import com.glean.api_client.glean_api_client.models.operations.ChatRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ChatResponse;
import com.glean.api_client.glean_api_client.models.operations.ChatStreamRequest;
import com.glean.api_client.glean_api_client.models.operations.ChatStreamRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ChatStreamResponse;
import com.glean.api_client.glean_api_client.models.operations.DeleteallchatsRequest;
import com.glean.api_client.glean_api_client.models.operations.DeleteallchatsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DeleteallchatsResponse;
import com.glean.api_client.glean_api_client.models.operations.DeletechatfilesRequest;
import com.glean.api_client.glean_api_client.models.operations.DeletechatfilesRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DeletechatfilesResponse;
import com.glean.api_client.glean_api_client.models.operations.DeletechatsRequest;
import com.glean.api_client.glean_api_client.models.operations.DeletechatsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DeletechatsResponse;
import com.glean.api_client.glean_api_client.models.operations.GetchatRequest;
import com.glean.api_client.glean_api_client.models.operations.GetchatRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetchatResponse;
import com.glean.api_client.glean_api_client.models.operations.GetchatapplicationRequest;
import com.glean.api_client.glean_api_client.models.operations.GetchatapplicationRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetchatapplicationResponse;
import com.glean.api_client.glean_api_client.models.operations.GetchatfilesRequest;
import com.glean.api_client.glean_api_client.models.operations.GetchatfilesRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetchatfilesResponse;
import com.glean.api_client.glean_api_client.models.operations.ListchatsRequest;
import com.glean.api_client.glean_api_client.models.operations.ListchatsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ListchatsResponse;
import com.glean.api_client.glean_api_client.models.operations.UploadchatfilesRequest;
import com.glean.api_client.glean_api_client.models.operations.UploadchatfilesRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.UploadchatfilesResponse;
import com.glean.api_client.glean_api_client.operations.ChatOperation;
import com.glean.api_client.glean_api_client.operations.ChatStreamOperation;
import com.glean.api_client.glean_api_client.operations.DeleteallchatsOperation;
import com.glean.api_client.glean_api_client.operations.DeletechatfilesOperation;
import com.glean.api_client.glean_api_client.operations.DeletechatsOperation;
import com.glean.api_client.glean_api_client.operations.GetchatOperation;
import com.glean.api_client.glean_api_client.operations.GetchatapplicationOperation;
import com.glean.api_client.glean_api_client.operations.GetchatfilesOperation;
import com.glean.api_client.glean_api_client.operations.ListchatsOperation;
import com.glean.api_client.glean_api_client.operations.UploadchatfilesOperation;
import java.lang.Exception;
import java.lang.Long;
import java.util.List;
import java.util.Optional;


public class Chat {
    private final SDKConfiguration sdkConfiguration;

    Chat(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @return The call builder
     */
    public ChatRequestBuilder create() {
        return new ChatRequestBuilder(sdkConfiguration);
    }

    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @param chatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChatResponse create(ChatRequest chatRequest) throws Exception {
        return create(Optional.empty(), chatRequest);
    }

    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param chatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChatResponse create(
            Optional<Long> timezoneOffset,
            ChatRequest chatRequest) throws Exception {
        com.glean.api_client.glean_api_client.models.operations.ChatRequest request =
            com.glean.api_client.glean_api_client.models.operations.ChatRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .chatRequest(chatRequest)
                .build();
        RequestOperation<com.glean.api_client.glean_api_client.models.operations.ChatRequest, ChatResponse> operation
              = new ChatOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Deletes all saved Chats owned by a user
     * 
     * <p>Deletes all saved Chats a user has had and all their contained conversational content.
     * 
     * @return The call builder
     */
    public DeleteallchatsRequestBuilder deleteAll() {
        return new DeleteallchatsRequestBuilder(sdkConfiguration);
    }

    /**
     * Deletes all saved Chats owned by a user
     * 
     * <p>Deletes all saved Chats a user has had and all their contained conversational content.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteallchatsResponse deleteAllDirect() throws Exception {
        return deleteAll(Optional.empty());
    }

    /**
     * Deletes all saved Chats owned by a user
     * 
     * <p>Deletes all saved Chats a user has had and all their contained conversational content.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteallchatsResponse deleteAll(
            Optional<Long> timezoneOffset) throws Exception {
        DeleteallchatsRequest request =
            DeleteallchatsRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .build();
        RequestOperation<DeleteallchatsRequest, DeleteallchatsResponse> operation
              = new DeleteallchatsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Deletes saved Chats
     * 
     * <p>Deletes saved Chats and all their contained conversational content.
     * 
     * @return The call builder
     */
    public DeletechatsRequestBuilder delete() {
        return new DeletechatsRequestBuilder(sdkConfiguration);
    }

    /**
     * Deletes saved Chats
     * 
     * <p>Deletes saved Chats and all their contained conversational content.
     * 
     * @param deleteChatsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatsResponse delete(DeleteChatsRequest deleteChatsRequest) throws Exception {
        return delete(Optional.empty(), deleteChatsRequest);
    }

    /**
     * Deletes saved Chats
     * 
     * <p>Deletes saved Chats and all their contained conversational content.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param deleteChatsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatsResponse delete(
            Optional<Long> timezoneOffset,
            DeleteChatsRequest deleteChatsRequest) throws Exception {
        DeletechatsRequest request =
            DeletechatsRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .deleteChatsRequest(deleteChatsRequest)
                .build();
        RequestOperation<DeletechatsRequest, DeletechatsResponse> operation
              = new DeletechatsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieves a Chat
     * 
     * <p>Retrieves the chat history between Glean Assistant and the user for a given Chat.
     * 
     * @return The call builder
     */
    public GetchatRequestBuilder retrieve() {
        return new GetchatRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieves a Chat
     * 
     * <p>Retrieves the chat history between Glean Assistant and the user for a given Chat.
     * 
     * @param getChatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatResponse retrieve(GetChatRequest getChatRequest) throws Exception {
        return retrieve(Optional.empty(), getChatRequest);
    }

    /**
     * Retrieves a Chat
     * 
     * <p>Retrieves the chat history between Glean Assistant and the user for a given Chat.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param getChatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatResponse retrieve(
            Optional<Long> timezoneOffset,
            GetChatRequest getChatRequest) throws Exception {
        GetchatRequest request =
            GetchatRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .getChatRequest(getChatRequest)
                .build();
        RequestOperation<GetchatRequest, GetchatResponse> operation
              = new GetchatOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieves all saved Chats
     * 
     * <p>Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     * 
     * @return The call builder
     */
    public ListchatsRequestBuilder list() {
        return new ListchatsRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieves all saved Chats
     * 
     * <p>Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListchatsResponse listDirect() throws Exception {
        return list(Optional.empty());
    }

    /**
     * Retrieves all saved Chats
     * 
     * <p>Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListchatsResponse list(
            Optional<Long> timezoneOffset) throws Exception {
        ListchatsRequest request =
            ListchatsRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .build();
        RequestOperation<ListchatsRequest, ListchatsResponse> operation
              = new ListchatsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Gets the metadata for a custom Chat application
     * 
     * <p>Gets the Chat application details for the specified application ID.
     * 
     * @return The call builder
     */
    public GetchatapplicationRequestBuilder retrieveApplication() {
        return new GetchatapplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Gets the metadata for a custom Chat application
     * 
     * <p>Gets the Chat application details for the specified application ID.
     * 
     * @param getChatApplicationRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatapplicationResponse retrieveApplication(GetChatApplicationRequest getChatApplicationRequest) throws Exception {
        return retrieveApplication(Optional.empty(), getChatApplicationRequest);
    }

    /**
     * Gets the metadata for a custom Chat application
     * 
     * <p>Gets the Chat application details for the specified application ID.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param getChatApplicationRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatapplicationResponse retrieveApplication(
            Optional<Long> timezoneOffset,
            GetChatApplicationRequest getChatApplicationRequest) throws Exception {
        GetchatapplicationRequest request =
            GetchatapplicationRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .getChatApplicationRequest(getChatApplicationRequest)
                .build();
        RequestOperation<GetchatapplicationRequest, GetchatapplicationResponse> operation
              = new GetchatapplicationOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Upload files for Chat.
     * 
     * <p>Upload files for Chat.
     * 
     * @return The call builder
     */
    public UploadchatfilesRequestBuilder uploadFiles() {
        return new UploadchatfilesRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload files for Chat.
     * 
     * <p>Upload files for Chat.
     * 
     * @param uploadChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadchatfilesResponse uploadFiles(UploadChatFilesRequest uploadChatFilesRequest) throws Exception {
        return uploadFiles(Optional.empty(), uploadChatFilesRequest);
    }

    /**
     * Upload files for Chat.
     * 
     * <p>Upload files for Chat.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param uploadChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadchatfilesResponse uploadFiles(
            Optional<Long> timezoneOffset,
            UploadChatFilesRequest uploadChatFilesRequest) throws Exception {
        UploadchatfilesRequest request =
            UploadchatfilesRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .uploadChatFilesRequest(uploadChatFilesRequest)
                .build();
        RequestOperation<UploadchatfilesRequest, UploadchatfilesResponse> operation
              = new UploadchatfilesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get files uploaded by a user for Chat.
     * 
     * <p>Get files uploaded by a user for Chat.
     * 
     * @return The call builder
     */
    public GetchatfilesRequestBuilder retrieveFiles() {
        return new GetchatfilesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get files uploaded by a user for Chat.
     * 
     * <p>Get files uploaded by a user for Chat.
     * 
     * @param getChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatfilesResponse retrieveFiles(GetChatFilesRequest getChatFilesRequest) throws Exception {
        return retrieveFiles(Optional.empty(), getChatFilesRequest);
    }

    /**
     * Get files uploaded by a user for Chat.
     * 
     * <p>Get files uploaded by a user for Chat.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param getChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetchatfilesResponse retrieveFiles(
            Optional<Long> timezoneOffset,
            GetChatFilesRequest getChatFilesRequest) throws Exception {
        GetchatfilesRequest request =
            GetchatfilesRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .getChatFilesRequest(getChatFilesRequest)
                .build();
        RequestOperation<GetchatfilesRequest, GetchatfilesResponse> operation
              = new GetchatfilesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete files uploaded by a user for chat.
     * 
     * <p>Delete files uploaded by a user for Chat.
     * 
     * @return The call builder
     */
    public DeletechatfilesRequestBuilder deleteFiles() {
        return new DeletechatfilesRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete files uploaded by a user for chat.
     * 
     * <p>Delete files uploaded by a user for Chat.
     * 
     * @param deleteChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatfilesResponse deleteFiles(DeleteChatFilesRequest deleteChatFilesRequest) throws Exception {
        return deleteFiles(Optional.empty(), deleteChatFilesRequest);
    }

    /**
     * Delete files uploaded by a user for chat.
     * 
     * <p>Delete files uploaded by a user for Chat.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param deleteChatFilesRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletechatfilesResponse deleteFiles(
            Optional<Long> timezoneOffset,
            DeleteChatFilesRequest deleteChatFilesRequest) throws Exception {
        DeletechatfilesRequest request =
            DeletechatfilesRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .deleteChatFilesRequest(deleteChatFilesRequest)
                .build();
        RequestOperation<DeletechatfilesRequest, DeletechatfilesResponse> operation
              = new DeletechatfilesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @return The call builder
     */
    public ChatStreamRequestBuilder createStream() {
        return new ChatStreamRequestBuilder(sdkConfiguration);
    }

    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @param chatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChatStreamResponse createStream(ChatRequest chatRequest) throws Exception {
        return createStream(Optional.empty(), chatRequest);
    }

    /**
     * Chat
     * 
     * <p>Have a conversation with Glean AI.
     * 
     * @param timezoneOffset The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     * @param chatRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChatStreamResponse createStream(
            Optional<Long> timezoneOffset,
            ChatRequest chatRequest) throws Exception {
        ChatStreamRequest request =
            ChatStreamRequest
                .builder()
                .timezoneOffset(timezoneOffset)
                .chatRequest(chatRequest)
                .build();
        RequestOperation<ChatStreamRequest, ChatStreamResponse> operation
              = new ChatStreamOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
