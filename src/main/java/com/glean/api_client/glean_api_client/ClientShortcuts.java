/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static com.glean.api_client.glean_api_client.operations.Operations.RequestOperation;

import com.glean.api_client.glean_api_client.models.components.CreateShortcutRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteShortcutRequest;
import com.glean.api_client.glean_api_client.models.components.GetShortcutRequestUnion;
import com.glean.api_client.glean_api_client.models.components.ListShortcutsPaginatedRequest;
import com.glean.api_client.glean_api_client.models.components.UpdateShortcutRequest;
import com.glean.api_client.glean_api_client.models.operations.CreateshortcutRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.CreateshortcutResponse;
import com.glean.api_client.glean_api_client.models.operations.DeleteshortcutRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.DeleteshortcutResponse;
import com.glean.api_client.glean_api_client.models.operations.GetshortcutRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.GetshortcutResponse;
import com.glean.api_client.glean_api_client.models.operations.ListshortcutsRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.ListshortcutsResponse;
import com.glean.api_client.glean_api_client.models.operations.UpdateshortcutRequestBuilder;
import com.glean.api_client.glean_api_client.models.operations.UpdateshortcutResponse;
import com.glean.api_client.glean_api_client.operations.CreateshortcutOperation;
import com.glean.api_client.glean_api_client.operations.DeleteshortcutOperation;
import com.glean.api_client.glean_api_client.operations.GetshortcutOperation;
import com.glean.api_client.glean_api_client.operations.ListshortcutsOperation;
import com.glean.api_client.glean_api_client.operations.UpdateshortcutOperation;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class ClientShortcuts {
    private final SDKConfiguration sdkConfiguration;

    ClientShortcuts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create shortcut
     * 
     * <p>Create a user-generated shortcut that contains an alias and destination URL.
     * 
     * @return The call builder
     */
    public CreateshortcutRequestBuilder create() {
        return new CreateshortcutRequestBuilder(sdkConfiguration);
    }

    /**
     * Create shortcut
     * 
     * <p>Create a user-generated shortcut that contains an alias and destination URL.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateshortcutResponse create(
            CreateShortcutRequest request) throws Exception {
        RequestOperation<CreateShortcutRequest, CreateshortcutResponse> operation
              = new CreateshortcutOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete shortcut
     * 
     * <p>Delete an existing user-generated shortcut.
     * 
     * @return The call builder
     */
    public DeleteshortcutRequestBuilder delete() {
        return new DeleteshortcutRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete shortcut
     * 
     * <p>Delete an existing user-generated shortcut.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteshortcutResponse delete(
            DeleteShortcutRequest request) throws Exception {
        RequestOperation<DeleteShortcutRequest, DeleteshortcutResponse> operation
              = new DeleteshortcutOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Read shortcut
     * 
     * <p>Read a particular shortcut's details given its ID.
     * 
     * @return The call builder
     */
    public GetshortcutRequestBuilder retrieve() {
        return new GetshortcutRequestBuilder(sdkConfiguration);
    }

    /**
     * Read shortcut
     * 
     * <p>Read a particular shortcut's details given its ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetshortcutResponse retrieve(
            GetShortcutRequestUnion request) throws Exception {
        RequestOperation<GetShortcutRequestUnion, GetshortcutResponse> operation
              = new GetshortcutOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List shortcuts
     * 
     * <p>List shortcuts editable/owned by the currently authenticated user.
     * 
     * @return The call builder
     */
    public ListshortcutsRequestBuilder list() {
        return new ListshortcutsRequestBuilder(sdkConfiguration);
    }

    /**
     * List shortcuts
     * 
     * <p>List shortcuts editable/owned by the currently authenticated user.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListshortcutsResponse list(
            ListShortcutsPaginatedRequest request) throws Exception {
        RequestOperation<ListShortcutsPaginatedRequest, ListshortcutsResponse> operation
              = new ListshortcutsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update shortcut
     * 
     * <p>Updates the shortcut with the given ID.
     * 
     * @return The call builder
     */
    public UpdateshortcutRequestBuilder update() {
        return new UpdateshortcutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update shortcut
     * 
     * <p>Updates the shortcut with the given ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateshortcutResponse update(
            UpdateShortcutRequest request) throws Exception {
        RequestOperation<UpdateShortcutRequest, UpdateshortcutResponse> operation
              = new UpdateshortcutOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
