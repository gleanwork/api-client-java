/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client;

import com.fasterxml.jackson.core.type.TypeReference;
import com.glean.api_client.models.components.AutocompleteRequest;
import com.glean.api_client.models.components.FeedRequest;
import com.glean.api_client.models.components.RecommendationsRequest;
import com.glean.api_client.models.components.ResultsResponse;
import com.glean.api_client.models.components.SearchRequest;
import com.glean.api_client.models.components.SearchResponse;
import com.glean.api_client.models.errors.APIException;
import com.glean.api_client.models.errors.GleanDataError;
import com.glean.api_client.models.operations.AdminsearchRequest;
import com.glean.api_client.models.operations.AdminsearchRequestBuilder;
import com.glean.api_client.models.operations.AdminsearchResponse;
import com.glean.api_client.models.operations.AutocompleteRequestBuilder;
import com.glean.api_client.models.operations.AutocompleteResponse;
import com.glean.api_client.models.operations.FeedRequestBuilder;
import com.glean.api_client.models.operations.FeedResponse;
import com.glean.api_client.models.operations.RecommendationsRequestBuilder;
import com.glean.api_client.models.operations.RecommendationsResponse;
import com.glean.api_client.models.operations.SDKMethodInterfaces.*;
import com.glean.api_client.models.operations.SearchRequestBuilder;
import com.glean.api_client.utils.HTTPClient;
import com.glean.api_client.utils.HTTPRequest;
import com.glean.api_client.utils.Hook.AfterErrorContextImpl;
import com.glean.api_client.utils.Hook.AfterSuccessContextImpl;
import com.glean.api_client.utils.Hook.BeforeRequestContextImpl;
import com.glean.api_client.utils.SerializedBody;
import com.glean.api_client.utils.Utils.JsonShape;
import com.glean.api_client.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;

public class Search implements
            MethodCallAdminsearch,
            MethodCallAutocomplete,
            MethodCallFeed,
            MethodCallRecommendations,
            MethodCallSearch {

    private final SDKConfiguration sdkConfiguration;

    Search(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Search the index (admin)
     * 
     * <p>Retrieves results for search query without respect for permissions. This is available only to privileged users.
     * 
     * @return The call builder
     */
    public AdminsearchRequestBuilder admin() {
        return new AdminsearchRequestBuilder(this);
    }

    /**
     * Search the index (admin)
     * 
     * <p>Retrieves results for search query without respect for permissions. This is available only to privileged users.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AdminsearchResponse adminDirect() throws Exception {
        return admin(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Search the index (admin)
     * 
     * <p>Retrieves results for search query without respect for permissions. This is available only to privileged users.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param searchRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AdminsearchResponse admin(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends SearchRequest> searchRequest) throws Exception {
        AdminsearchRequest request =
            AdminsearchRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .searchRequest(searchRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/adminsearch");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "searchRequest",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "adminsearch", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "422", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "adminsearch",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "adminsearch",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "adminsearch",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AdminsearchResponse.Builder _resBuilder = 
            AdminsearchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        AdminsearchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                SearchResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<SearchResponse>() {});
                _res.withSearchResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "403", "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GleanDataError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GleanDataError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Autocomplete
     * 
     * <p>Retrieve query suggestions, operators and documents for the given partially typed query.
     * 
     * @return The call builder
     */
    public AutocompleteRequestBuilder autocomplete() {
        return new AutocompleteRequestBuilder(this);
    }

    /**
     * Autocomplete
     * 
     * <p>Retrieve query suggestions, operators and documents for the given partially typed query.
     * 
     * @param autocompleteRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AutocompleteResponse autocomplete(
            AutocompleteRequest autocompleteRequest) throws Exception {
        return autocomplete(Optional.empty(), Optional.empty(), autocompleteRequest);
    }
    
    /**
     * Autocomplete
     * 
     * <p>Retrieve query suggestions, operators and documents for the given partially typed query.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param autocompleteRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AutocompleteResponse autocomplete(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            AutocompleteRequest autocompleteRequest) throws Exception {
        com.glean.api_client.models.operations.AutocompleteRequest request =
            com.glean.api_client.models.operations.AutocompleteRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .autocompleteRequest(autocompleteRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/autocomplete");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "autocompleteRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "autocomplete", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "autocomplete",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "autocomplete",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "autocomplete",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AutocompleteResponse.Builder _resBuilder = 
            AutocompleteResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        AutocompleteResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.glean.api_client.models.components.AutocompleteResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.glean.api_client.models.components.AutocompleteResponse>() {});
                _res.withAutocompleteResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Feed of documents and events
     * 
     * <p>The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
     * 
     * @return The call builder
     */
    public FeedRequestBuilder getFeed() {
        return new FeedRequestBuilder(this);
    }

    /**
     * Feed of documents and events
     * 
     * <p>The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
     * 
     * @param feedRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FeedResponse getFeed(
            FeedRequest feedRequest) throws Exception {
        return getFeed(Optional.empty(), Optional.empty(), feedRequest);
    }
    
    /**
     * Feed of documents and events
     * 
     * <p>The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param feedRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FeedResponse getFeed(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            FeedRequest feedRequest) throws Exception {
        com.glean.api_client.models.operations.FeedRequest request =
            com.glean.api_client.models.operations.FeedRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .feedRequest(feedRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/feed");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "feedRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "feed", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "408", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "feed",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "feed",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "feed",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        FeedResponse.Builder _resBuilder = 
            FeedResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        FeedResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.glean.api_client.models.components.FeedResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.glean.api_client.models.components.FeedResponse>() {});
                _res.withFeedResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "408", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Recommend documents
     * 
     * <p>Retrieve recommended documents for the given URL or Glean Document ID.
     * 
     * @return The call builder
     */
    public RecommendationsRequestBuilder recommendations() {
        return new RecommendationsRequestBuilder(this);
    }

    /**
     * Recommend documents
     * 
     * <p>Retrieve recommended documents for the given URL or Glean Document ID.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RecommendationsResponse recommendationsDirect() throws Exception {
        return recommendations(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Recommend documents
     * 
     * <p>Retrieve recommended documents for the given URL or Glean Document ID.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param recommendationsRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RecommendationsResponse recommendations(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends RecommendationsRequest> recommendationsRequest) throws Exception {
        com.glean.api_client.models.operations.RecommendationsRequest request =
            com.glean.api_client.models.operations.RecommendationsRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .recommendationsRequest(recommendationsRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/recommendations");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "recommendationsRequest",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "recommendations", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "recommendations",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "recommendations",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "recommendations",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        RecommendationsResponse.Builder _resBuilder = 
            RecommendationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        RecommendationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ResultsResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ResultsResponse>() {});
                _res.withResultsResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202", "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Search
     * 
     * <p>Retrieve results from the index for the given query and filters.
     * 
     * @return The call builder
     */
    public SearchRequestBuilder execute() {
        return new SearchRequestBuilder(this);
    }

    /**
     * Search
     * 
     * <p>Retrieve results from the index for the given query and filters.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.glean.api_client.models.operations.SearchResponse executeDirect() throws Exception {
        return execute(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Search
     * 
     * <p>Retrieve results from the index for the given query and filters.
     * 
     * @param xGleanActAs Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
     * @param xGleanAuthType Auth type being used to access the endpoint (should be non-empty only for global tokens).
     * @param searchRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.glean.api_client.models.operations.SearchResponse execute(
            Optional<String> xGleanActAs,
            Optional<String> xGleanAuthType,
            Optional<? extends SearchRequest> searchRequest) throws Exception {
        com.glean.api_client.models.operations.SearchRequest request =
            com.glean.api_client.models.operations.SearchRequest
                .builder()
                .xGleanActAs(xGleanActAs)
                .xGleanAuthType(xGleanAuthType)
                .searchRequest(searchRequest)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/rest/api/v1/search");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "searchRequest",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "search", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "408", "422", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "search",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "search",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "search",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.glean.api_client.models.operations.SearchResponse.Builder _resBuilder = 
            com.glean.api_client.models.operations.SearchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.glean.api_client.models.operations.SearchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                SearchResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<SearchResponse>() {});
                _res.withSearchResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "403", "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GleanDataError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GleanDataError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "408", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
