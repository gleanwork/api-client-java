/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.glean.api_client.glean_api_client.models.components.AuthToken;
import com.glean.api_client.glean_api_client.models.components.Badge;
import com.glean.api_client.glean_api_client.models.components.ChannelInviteInfo;
import com.glean.api_client.glean_api_client.models.components.Collection;
import com.glean.api_client.glean_api_client.models.components.CollectionItem;
import com.glean.api_client.glean_api_client.models.components.CollectionItemItemType;
import com.glean.api_client.glean_api_client.models.components.CreateShortcutRequest;
import com.glean.api_client.glean_api_client.models.components.CreateShortcutResponse;
import com.glean.api_client.glean_api_client.models.components.CustomDataValue;
import com.glean.api_client.glean_api_client.models.components.CustomFieldData;
import com.glean.api_client.glean_api_client.models.components.CustomFieldValue;
import com.glean.api_client.glean_api_client.models.components.CustomFieldValueStr;
import com.glean.api_client.glean_api_client.models.components.DatasourceProfile;
import com.glean.api_client.glean_api_client.models.components.DeleteShortcutRequest;
import com.glean.api_client.glean_api_client.models.components.Document;
import com.glean.api_client.glean_api_client.models.components.DocumentInteractions;
import com.glean.api_client.glean_api_client.models.components.DocumentMetadata;
import com.glean.api_client.glean_api_client.models.components.FacetBucket;
import com.glean.api_client.glean_api_client.models.components.FacetFilter;
import com.glean.api_client.glean_api_client.models.components.FacetFilterSet;
import com.glean.api_client.glean_api_client.models.components.FacetFilterValue;
import com.glean.api_client.glean_api_client.models.components.FacetResult;
import com.glean.api_client.glean_api_client.models.components.FacetValue;
import com.glean.api_client.glean_api_client.models.components.GetShortcutRequest;
import com.glean.api_client.glean_api_client.models.components.GetShortcutRequestUnion;
import com.glean.api_client.glean_api_client.models.components.GetShortcutResponse;
import com.glean.api_client.glean_api_client.models.components.IconConfig;
import com.glean.api_client.glean_api_client.models.components.IconType;
import com.glean.api_client.glean_api_client.models.components.InviteInfo;
import com.glean.api_client.glean_api_client.models.components.ListShortcutsPaginatedRequest;
import com.glean.api_client.glean_api_client.models.components.ListShortcutsPaginatedResponse;
import com.glean.api_client.glean_api_client.models.components.Person;
import com.glean.api_client.glean_api_client.models.components.PersonMetadata;
import com.glean.api_client.glean_api_client.models.components.PersonMetadataType;
import com.glean.api_client.glean_api_client.models.components.PinDocument;
import com.glean.api_client.glean_api_client.models.components.QuerySuggestion;
import com.glean.api_client.glean_api_client.models.components.QuerySuggestionList;
import com.glean.api_client.glean_api_client.models.components.Reaction;
import com.glean.api_client.glean_api_client.models.components.RelatedDocuments;
import com.glean.api_client.glean_api_client.models.components.RelationType;
import com.glean.api_client.glean_api_client.models.components.Reminder;
import com.glean.api_client.glean_api_client.models.components.SearchProviderInfo;
import com.glean.api_client.glean_api_client.models.components.SearchRequestInputDetails;
import com.glean.api_client.glean_api_client.models.components.SearchRequestOptions;
import com.glean.api_client.glean_api_client.models.components.SearchResult;
import com.glean.api_client.glean_api_client.models.components.SearchResultSnippet;
import com.glean.api_client.glean_api_client.models.components.Share;
import com.glean.api_client.glean_api_client.models.components.Shortcut;
import com.glean.api_client.glean_api_client.models.components.ShortcutMutableProperties;
import com.glean.api_client.glean_api_client.models.components.ShortcutsPaginationMetadata;
import com.glean.api_client.glean_api_client.models.components.State;
import com.glean.api_client.glean_api_client.models.components.TextRange;
import com.glean.api_client.glean_api_client.models.components.UpdateShortcutRequest;
import com.glean.api_client.glean_api_client.models.components.UpdateShortcutResponse;
import com.glean.api_client.glean_api_client.models.components.UserRole;
import com.glean.api_client.glean_api_client.models.components.UserRoleSpecification;
import com.glean.api_client.glean_api_client.models.components.Verification;
import com.glean.api_client.glean_api_client.models.components.VerificationMetadata;
import com.glean.api_client.glean_api_client.models.operations.CreateshortcutResponse;
import com.glean.api_client.glean_api_client.models.operations.DeleteshortcutResponse;
import com.glean.api_client.glean_api_client.models.operations.GetshortcutResponse;
import com.glean.api_client.glean_api_client.models.operations.ListshortcutsResponse;
import com.glean.api_client.glean_api_client.models.operations.UpdateshortcutResponse;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.Test;

public class ClientShortcutsTests {

    @Test
    public void testClientShortcuts_Createshortcut() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createshortcut");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        CreateShortcutRequest req = CreateShortcutRequest.builder()
                .data(ShortcutMutableProperties.builder()
                    .addedRoles(List.of(
                        UserRoleSpecification.builder()
                            .role(UserRole.OWNER)
                            .person(Person.builder()
                                .name("George Clooney")
                                .obfuscatedId("abc123")
                                .relatedDocuments(List.of(
                                    RelatedDocuments.builder()
                                        .querySuggestion(QuerySuggestion.builder()
                                            .query("app:github type:pull author:mortimer")
                                            .searchProviderInfo(SearchProviderInfo.builder()
                                                .name("Google")
                                                .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                                .build())
                                            .label("Mortimer's PRs")
                                            .datasource("github")
                                            .requestOptions(SearchRequestOptions.builder()
                                                .facetBucketSize(134365L)
                                                .datasourceFilter("JIRA")
                                                .datasourcesFilter(List.of(
                                                    "JIRA"))
                                                .queryOverridesFacetFilters(true)
                                                .facetFilters(List.of(
                                                    FacetFilter.builder()
                                                        .fieldName("type")
                                                        .values(List.of(
                                                            FacetFilterValue.builder()
                                                                .value("Spreadsheet")
                                                                .relationType(RelationType.EQUALS)
                                                                .build(),
                                                            FacetFilterValue.builder()
                                                                .value("Presentation")
                                                                .relationType(RelationType.EQUALS)
                                                                .build()))
                                                        .build()))
                                                .facetFilterSets(List.of(
                                                    FacetFilterSet.builder()
                                                        .filters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .build(),
                                                    FacetFilterSet.builder()
                                                        .filters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .build()))
                                                .authTokens(List.of(
                                                    AuthToken.builder()
                                                        .accessToken("123abc")
                                                        .datasource("gmail")
                                                        .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                                        .tokenType("Bearer")
                                                        .authUser("1")
                                                        .build()))
                                                .build())
                                            .ranges(List.of(
                                                TextRange.builder()
                                                    .startIndex(796474L)
                                                    .document(Document.builder()
                                                        .metadata(DocumentMetadata.builder()
                                                            .datasource("datasource")
                                                            .objectType("Feature Request")
                                                            .container("container")
                                                            .parentId("JIRA_EN-1337")
                                                            .mimeType("mimeType")
                                                            .documentId("documentId")
                                                            .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                            .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                            .components(List.of(
                                                                "Backend",
                                                                "Networking"))
                                                            .status("[\"Done\"]")
                                                            .pins(List.of(
                                                                PinDocument.builder()
                                                                    .documentId("<id>")
                                                                    .audienceFilters(List.of(
                                                                        FacetFilter.builder()
                                                                            .fieldName("type")
                                                                            .values(List.of(
                                                                                FacetFilterValue.builder()
                                                                                    .value("Spreadsheet")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build(),
                                                                                FacetFilterValue.builder()
                                                                                    .value("Presentation")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build()))
                                                                            .build()))
                                                                    .build(),
                                                                PinDocument.builder()
                                                                    .documentId("<id>")
                                                                    .audienceFilters(List.of(
                                                                        FacetFilter.builder()
                                                                            .fieldName("type")
                                                                            .values(List.of(
                                                                                FacetFilterValue.builder()
                                                                                    .value("Spreadsheet")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build(),
                                                                                FacetFilterValue.builder()
                                                                                    .value("Presentation")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build()))
                                                                            .build()))
                                                                    .build(),
                                                                PinDocument.builder()
                                                                    .documentId("<id>")
                                                                    .audienceFilters(List.of(
                                                                        FacetFilter.builder()
                                                                            .fieldName("type")
                                                                            .values(List.of(
                                                                                FacetFilterValue.builder()
                                                                                    .value("Spreadsheet")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build(),
                                                                                FacetFilterValue.builder()
                                                                                    .value("Presentation")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build()))
                                                                            .build()))
                                                                    .build()))
                                                            .collections(List.of(
                                                                Collection.builder()
                                                                    .name("<value>")
                                                                    .description("fumigate convection though zowie")
                                                                    .id(496323L)
                                                                    .audienceFilters(List.of(
                                                                        FacetFilter.builder()
                                                                            .fieldName("type")
                                                                            .values(List.of(
                                                                                FacetFilterValue.builder()
                                                                                    .value("Spreadsheet")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build(),
                                                                                FacetFilterValue.builder()
                                                                                    .value("Presentation")
                                                                                    .relationType(RelationType.EQUALS)
                                                                                    .build()))
                                                                            .build()))
                                                                    .items(List.of(
                                                                        CollectionItem.builder()
                                                                            .collectionId(782367L)
                                                                            .itemType(CollectionItemItemType.DOCUMENT)
                                                                            .build()))
                                                                    .build()))
                                                            .interactions(DocumentInteractions.builder()
                                                                .reacts(List.of(
                                                                    Reaction.builder()
                                                                        .build(),
                                                                    Reaction.builder()
                                                                        .build(),
                                                                    Reaction.builder()
                                                                        .build()))
                                                                .shares(List.of(
                                                                    Share.builder()
                                                                        .numDaysAgo(219974L)
                                                                        .build(),
                                                                    Share.builder()
                                                                        .numDaysAgo(449221L)
                                                                        .build(),
                                                                    Share.builder()
                                                                        .numDaysAgo(427887L)
                                                                        .build()))
                                                                .build())
                                                            .verification(Verification.builder()
                                                                .state(State.VERIFIED)
                                                                .metadata(VerificationMetadata.builder()
                                                                    .reminders(List.of(
                                                                        Reminder.builder()
                                                                            .assignee(Person.builder()
                                                                                .name("George Clooney")
                                                                                .obfuscatedId("abc123")
                                                                                .build())
                                                                            .remindAt(491427L)
                                                                            .build()))
                                                                    .lastReminder(Reminder.builder()
                                                                        .assignee(Person.builder()
                                                                            .name("George Clooney")
                                                                            .obfuscatedId("abc123")
                                                                            .build())
                                                                        .remindAt(490420L)
                                                                        .build())
                                                                    .build())
                                                                .build())
                                                            .customData(Map.ofEntries(
                                                                Map.entry("someCustomField", CustomDataValue.builder()
                                                                    .build())))
                                                            .build())
                                                        .build())
                                                    .build()))
                                            .inputDetails(SearchRequestInputDetails.builder()
                                                .hasCopyPaste(true)
                                                .build())
                                            .build())
                                        .results(List.of(
                                            SearchResult.builder()
                                                .url("https://example.com/foo/bar")
                                                .title("title")
                                                .nativeAppUrl("slack://foo/bar")
                                                .snippets(List.of(
                                                    SearchResultSnippet.builder()
                                                        .snippet("snippet")
                                                        .mimeType("mimeType")
                                                        .build()))
                                                .build()))
                                        .build(),
                                    RelatedDocuments.builder()
                                        .querySuggestion(QuerySuggestion.builder()
                                            .query("app:github type:pull author:mortimer")
                                            .searchProviderInfo(SearchProviderInfo.builder()
                                                .name("Google")
                                                .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                                .build())
                                            .label("Mortimer's PRs")
                                            .datasource("github")
                                            .requestOptions(SearchRequestOptions.builder()
                                                .facetBucketSize(45416L)
                                                .datasourceFilter("JIRA")
                                                .datasourcesFilter(List.of(
                                                    "JIRA"))
                                                .queryOverridesFacetFilters(true)
                                                .facetFilters(List.of(
                                                    FacetFilter.builder()
                                                        .fieldName("type")
                                                        .values(List.of(
                                                            FacetFilterValue.builder()
                                                                .value("Spreadsheet")
                                                                .relationType(RelationType.EQUALS)
                                                                .build(),
                                                            FacetFilterValue.builder()
                                                                .value("Presentation")
                                                                .relationType(RelationType.EQUALS)
                                                                .build()))
                                                        .build()))
                                                .facetFilterSets(List.of(
                                                    FacetFilterSet.builder()
                                                        .filters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .build(),
                                                    FacetFilterSet.builder()
                                                        .filters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .build(),
                                                    FacetFilterSet.builder()
                                                        .filters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .build()))
                                                .authTokens(List.of(
                                                    AuthToken.builder()
                                                        .accessToken("123abc")
                                                        .datasource("gmail")
                                                        .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                                        .tokenType("Bearer")
                                                        .authUser("1")
                                                        .build()))
                                                .build())
                                            .inputDetails(SearchRequestInputDetails.builder()
                                                .hasCopyPaste(true)
                                                .build())
                                            .build())
                                        .build()))
                                .metadata(PersonMetadata.builder()
                                    .type(PersonMetadataType.FULL_TIME)
                                    .title("Actor")
                                    .department("Movies")
                                    .email("george@example.com")
                                    .location("Hollywood, CA")
                                    .phone("6505551234")
                                    .photoUrl("https://example.com/george.jpg")
                                    .startDate(LocalDate.parse("2000-01-23"))
                                    .datasourceProfile(List.of(
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build()))
                                    .querySuggestions(QuerySuggestionList.builder()
                                        .suggestions(List.of(
                                            QuerySuggestion.builder()
                                                .query("app:github type:pull author:mortimer")
                                                .label("Mortimer's PRs")
                                                .datasource("github")
                                                .build()))
                                        .build())
                                    .inviteInfo(InviteInfo.builder()
                                        .invites(List.of(
                                            ChannelInviteInfo.builder()
                                                .build()))
                                        .build())
                                    .customFields(List.of(
                                        CustomFieldData.builder()
                                            .label("<value>")
                                            .values(List.of(
                                                CustomFieldValue.of(CustomFieldValueStr.builder()
                                                    .build()),
                                                CustomFieldValue.of(CustomFieldValueStr.builder()
                                                    .build())))
                                            .build(),
                                        CustomFieldData.builder()
                                            .label("<value>")
                                            .values(List.of())
                                            .build()))
                                    .badges(List.of(
                                        Badge.builder()
                                            .key("deployment_name_new_hire")
                                            .displayName("New hire")
                                            .iconConfig(IconConfig.builder()
                                                .color("#343CED")
                                                .key("person_icon")
                                                .iconType(IconType.GLYPH)
                                                .name("user")
                                                .build())
                                            .build()))
                                    .build())
                                .build())
                            .build(),
                        UserRoleSpecification.builder()
                            .role(UserRole.VERIFIER)
                            .person(Person.builder()
                                .name("George Clooney")
                                .obfuscatedId("abc123")
                                .metadata(PersonMetadata.builder()
                                    .type(PersonMetadataType.FULL_TIME)
                                    .title("Actor")
                                    .department("Movies")
                                    .email("george@example.com")
                                    .location("Hollywood, CA")
                                    .phone("6505551234")
                                    .photoUrl("https://example.com/george.jpg")
                                    .startDate(LocalDate.parse("2000-01-23"))
                                    .datasourceProfile(List.of(
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build()))
                                    .querySuggestions(QuerySuggestionList.builder()
                                        .build())
                                    .inviteInfo(InviteInfo.builder()
                                        .build())
                                    .badges(List.of(
                                        Badge.builder()
                                            .key("deployment_name_new_hire")
                                            .displayName("New hire")
                                            .iconConfig(IconConfig.builder()
                                                .color("#343CED")
                                                .key("person_icon")
                                                .iconType(IconType.GLYPH)
                                                .name("user")
                                                .build())
                                            .build()))
                                    .build())
                                .build())
                            .build()))
                    .removedRoles(List.of(
                        UserRoleSpecification.builder()
                            .role(UserRole.VERIFIER)
                            .person(Person.builder()
                                .name("George Clooney")
                                .obfuscatedId("abc123")
                                .metadata(PersonMetadata.builder()
                                    .type(PersonMetadataType.FULL_TIME)
                                    .title("Actor")
                                    .department("Movies")
                                    .email("george@example.com")
                                    .location("Hollywood, CA")
                                    .phone("6505551234")
                                    .photoUrl("https://example.com/george.jpg")
                                    .startDate(LocalDate.parse("2000-01-23"))
                                    .datasourceProfile(List.of(
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build()))
                                    .querySuggestions(QuerySuggestionList.builder()
                                        .build())
                                    .inviteInfo(InviteInfo.builder()
                                        .build())
                                    .badges(List.of(
                                        Badge.builder()
                                            .key("deployment_name_new_hire")
                                            .displayName("New hire")
                                            .iconConfig(IconConfig.builder()
                                                .color("#343CED")
                                                .key("person_icon")
                                                .iconType(IconType.GLYPH)
                                                .name("user")
                                                .build())
                                            .build()))
                                    .build())
                                .build())
                            .build(),
                        UserRoleSpecification.builder()
                            .role(UserRole.ANSWER_MODERATOR)
                            .person(Person.builder()
                                .name("George Clooney")
                                .obfuscatedId("abc123")
                                .metadata(PersonMetadata.builder()
                                    .type(PersonMetadataType.FULL_TIME)
                                    .title("Actor")
                                    .department("Movies")
                                    .email("george@example.com")
                                    .location("Hollywood, CA")
                                    .phone("6505551234")
                                    .photoUrl("https://example.com/george.jpg")
                                    .startDate(LocalDate.parse("2000-01-23"))
                                    .datasourceProfile(List.of(
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build(),
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build(),
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build()))
                                    .querySuggestions(QuerySuggestionList.builder()
                                        .build())
                                    .inviteInfo(InviteInfo.builder()
                                        .build())
                                    .badges(List.of(
                                        Badge.builder()
                                            .key("deployment_name_new_hire")
                                            .displayName("New hire")
                                            .iconConfig(IconConfig.builder()
                                                .color("#343CED")
                                                .key("person_icon")
                                                .iconType(IconType.GLYPH)
                                                .name("user")
                                                .build())
                                            .build()))
                                    .build())
                                .build())
                            .build(),
                        UserRoleSpecification.builder()
                            .role(UserRole.OWNER)
                            .person(Person.builder()
                                .name("George Clooney")
                                .obfuscatedId("abc123")
                                .metadata(PersonMetadata.builder()
                                    .type(PersonMetadataType.FULL_TIME)
                                    .title("Actor")
                                    .department("Movies")
                                    .email("george@example.com")
                                    .location("Hollywood, CA")
                                    .phone("6505551234")
                                    .photoUrl("https://example.com/george.jpg")
                                    .startDate(LocalDate.parse("2000-01-23"))
                                    .datasourceProfile(List.of(
                                        DatasourceProfile.builder()
                                            .datasource("github")
                                            .handle("<value>")
                                            .build()))
                                    .querySuggestions(QuerySuggestionList.builder()
                                        .build())
                                    .inviteInfo(InviteInfo.builder()
                                        .build())
                                    .badges(List.of(
                                        Badge.builder()
                                            .key("deployment_name_new_hire")
                                            .displayName("New hire")
                                            .iconConfig(IconConfig.builder()
                                                .color("#343CED")
                                                .key("person_icon")
                                                .iconType(IconType.GLYPH)
                                                .name("user")
                                                .build())
                                            .build()))
                                    .build())
                                .build())
                            .build()))
                    .build())
                .build();

        CreateshortcutResponse res = sdk.client().shortcuts().create()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            CreateShortcutResponse.builder()
            .build(),
            res.createShortcutResponse().get());
    }

    @Test
    public void testClientShortcuts_Deleteshortcut() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteshortcut");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        DeleteShortcutRequest req = DeleteShortcutRequest.builder()
                .id(545907L)
                .build();

        DeleteshortcutResponse res = sdk.client().shortcuts().delete()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testClientShortcuts_Getshortcut() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getshortcut");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        GetShortcutRequestUnion req = GetShortcutRequestUnion.of(GetShortcutRequest.builder()
                .alias("<value>")
                .build());

        GetshortcutResponse res = sdk.client().shortcuts().retrieve()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            GetShortcutResponse.builder()
            .build(),
            res.getShortcutResponse().get());
    }

    @Test
    public void testClientShortcuts_Getsimilarshortcuts() throws Exception {
        Assumptions.assumeTrue(false, "incomplete test found please make sure to address the following errors: [`workflow step getsimilarshortcuts.test referencing operation getsimilarshortcuts not found in document`]");
    }

    @Test
    public void testClientShortcuts_Listshortcuts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listshortcuts");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        ListShortcutsPaginatedRequest req = ListShortcutsPaginatedRequest.builder()
                .pageSize(10L)
                .filters(List.of(
                    FacetFilter.builder()
                        .fieldName("type")
                        .values(List.of(
                            FacetFilterValue.builder()
                                .value("Spreadsheet")
                                .relationType(RelationType.EQUALS)
                                .build(),
                            FacetFilterValue.builder()
                                .value("Presentation")
                                .relationType(RelationType.EQUALS)
                                .build()))
                        .build()))
                .build();

        ListshortcutsResponse res = sdk.client().shortcuts().list()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ListShortcutsPaginatedResponse.builder()
            .shortcuts(List.of(
                Shortcut.builder()
                    .inputAlias("<value>")
                    .destinationUrl("https://remorseful-concentration.biz")
                    .createdBy(Person.builder()
                        .name("<value>")
                        .obfuscatedId("<id>")
                        .build())
                    .build(),
                Shortcut.builder()
                    .inputAlias("<value>")
                    .destinationUrl("https://primary-paintwork.com/")
                    .createdBy(Person.builder()
                        .name("<value>")
                        .obfuscatedId("<id>")
                        .build())
                    .build(),
                Shortcut.builder()
                    .inputAlias("<value>")
                    .destinationUrl("https://breakable-bathrobe.net")
                    .createdBy(Person.builder()
                        .name("<value>")
                        .obfuscatedId("<id>")
                        .build())
                    .build()))
            .meta(ShortcutsPaginationMetadata.builder()
                .build())
            .facetResults(List.of(
                FacetResult.builder()
                    .sourceName("container_name")
                    .operatorName("SelectMultiple")
                    .buckets(List.of(
                        FacetBucket.builder()
                            .count(1L)
                            .datasource("jira")
                            .percentage(5L)
                            .value(FacetValue.builder()
                                .stringValue("engineering")
                                .integerValue(5L)
                                .displayLabel("engineering")
                                .iconConfig(IconConfig.builder()
                                    .color("#343CED")
                                    .key("person_icon")
                                    .iconType(IconType.GLYPH)
                                    .name("user")
                                    .build())
                                .build())
                            .build(),
                        FacetBucket.builder()
                            .count(1L)
                            .datasource("jira")
                            .percentage(5L)
                            .value(FacetValue.builder()
                                .stringValue("engineering")
                                .integerValue(5L)
                                .displayLabel("engineering")
                                .iconConfig(IconConfig.builder()
                                    .color("#343CED")
                                    .key("person_icon")
                                    .iconType(IconType.GLYPH)
                                    .name("user")
                                    .build())
                                .build())
                            .build()))
                    .hasMoreBuckets(false)
                    .groupName("Service Cloud")
                    .build(),
                FacetResult.builder()
                    .sourceName("container_name")
                    .operatorName("SelectMultiple")
                    .buckets(List.of(
                        FacetBucket.builder()
                            .count(1L)
                            .datasource("jira")
                            .percentage(5L)
                            .value(FacetValue.builder()
                                .stringValue("engineering")
                                .integerValue(5L)
                                .displayLabel("engineering")
                                .iconConfig(IconConfig.builder()
                                    .color("#343CED")
                                    .key("person_icon")
                                    .iconType(IconType.GLYPH)
                                    .name("user")
                                    .build())
                                .build())
                            .build()))
                    .hasMoreBuckets(false)
                    .groupName("Service Cloud")
                    .build()))
            .build(),
            res.listShortcutsPaginatedResponse().get());
    }

    @Test
    public void testClientShortcuts_Previewshortcut() throws Exception {
        Assumptions.assumeTrue(false, "incomplete test found please make sure to address the following errors: [`workflow step previewshortcut.test referencing operation previewshortcut not found in document`]");
    }

    @Test
    public void testClientShortcuts_Updateshortcut() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateshortcut");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        UpdateShortcutRequest req = UpdateShortcutRequest.builder()
                .id(857478L)
                .addedRoles(List.of(
                    UserRoleSpecification.builder()
                        .role(UserRole.EDITOR)
                        .person(Person.builder()
                            .name("George Clooney")
                            .obfuscatedId("abc123")
                            .relatedDocuments(List.of(
                                RelatedDocuments.builder()
                                    .querySuggestion(QuerySuggestion.builder()
                                        .query("app:github type:pull author:mortimer")
                                        .searchProviderInfo(SearchProviderInfo.builder()
                                            .name("Google")
                                            .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                            .build())
                                        .label("Mortimer's PRs")
                                        .datasource("github")
                                        .requestOptions(SearchRequestOptions.builder()
                                            .facetBucketSize(627690L)
                                            .datasourceFilter("JIRA")
                                            .datasourcesFilter(List.of(
                                                "JIRA"))
                                            .queryOverridesFacetFilters(true)
                                            .facetFilters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .facetFilterSets(List.of(
                                                FacetFilterSet.builder()
                                                    .filters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build(),
                                                FacetFilterSet.builder()
                                                    .filters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build(),
                                                FacetFilterSet.builder()
                                                    .filters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build()))
                                            .authTokens(List.of(
                                                AuthToken.builder()
                                                    .accessToken("123abc")
                                                    .datasource("gmail")
                                                    .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                                    .tokenType("Bearer")
                                                    .authUser("1")
                                                    .build()))
                                            .build())
                                        .ranges(List.of(
                                            TextRange.builder()
                                                .startIndex(984008L)
                                                .document(Document.builder()
                                                    .metadata(DocumentMetadata.builder()
                                                        .datasource("datasource")
                                                        .objectType("Feature Request")
                                                        .container("container")
                                                        .parentId("JIRA_EN-1337")
                                                        .mimeType("mimeType")
                                                        .documentId("documentId")
                                                        .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                        .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                        .components(List.of(
                                                            "Backend",
                                                            "Networking"))
                                                        .status("[\"Done\"]")
                                                        .pins(List.of(
                                                            PinDocument.builder()
                                                                .documentId("<id>")
                                                                .audienceFilters(List.of(
                                                                    FacetFilter.builder()
                                                                        .fieldName("type")
                                                                        .values(List.of(
                                                                            FacetFilterValue.builder()
                                                                                .value("Spreadsheet")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build(),
                                                                            FacetFilterValue.builder()
                                                                                .value("Presentation")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build()))
                                                                        .build()))
                                                                .build()))
                                                        .collections(List.of(
                                                            Collection.builder()
                                                                .name("<value>")
                                                                .description("for drat underneath sticky yuck even")
                                                                .id(996168L)
                                                                .audienceFilters(List.of(
                                                                    FacetFilter.builder()
                                                                        .fieldName("type")
                                                                        .values(List.of(
                                                                            FacetFilterValue.builder()
                                                                                .value("Spreadsheet")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build(),
                                                                            FacetFilterValue.builder()
                                                                                .value("Presentation")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build()))
                                                                        .build()))
                                                                .items(List.of(
                                                                    CollectionItem.builder()
                                                                        .collectionId(392671L)
                                                                        .itemType(CollectionItemItemType.TEXT)
                                                                        .build(),
                                                                    CollectionItem.builder()
                                                                        .collectionId(434386L)
                                                                        .itemType(CollectionItemItemType.COLLECTION)
                                                                        .build()))
                                                                .build(),
                                                            Collection.builder()
                                                                .name("<value>")
                                                                .description("duh now mechanically during since anxiously lightly ultimately")
                                                                .id(958595L)
                                                                .audienceFilters(List.of(
                                                                    FacetFilter.builder()
                                                                        .fieldName("type")
                                                                        .values(List.of(
                                                                            FacetFilterValue.builder()
                                                                                .value("Spreadsheet")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build(),
                                                                            FacetFilterValue.builder()
                                                                                .value("Presentation")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build()))
                                                                        .build()))
                                                                .build(),
                                                            Collection.builder()
                                                                .name("<value>")
                                                                .description("whereas anenst habit onto worriedly revoke hm eminent sham")
                                                                .id(115263L)
                                                                .audienceFilters(List.of(
                                                                    FacetFilter.builder()
                                                                        .fieldName("type")
                                                                        .values(List.of(
                                                                            FacetFilterValue.builder()
                                                                                .value("Spreadsheet")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build(),
                                                                            FacetFilterValue.builder()
                                                                                .value("Presentation")
                                                                                .relationType(RelationType.EQUALS)
                                                                                .build()))
                                                                        .build()))
                                                                .build()))
                                                        .interactions(DocumentInteractions.builder()
                                                            .reacts(List.of(
                                                                Reaction.builder()
                                                                    .build(),
                                                                Reaction.builder()
                                                                    .build(),
                                                                Reaction.builder()
                                                                    .build()))
                                                            .shares(List.of(
                                                                Share.builder()
                                                                    .numDaysAgo(691669L)
                                                                    .build(),
                                                                Share.builder()
                                                                    .numDaysAgo(202116L)
                                                                    .build()))
                                                            .build())
                                                        .verification(Verification.builder()
                                                            .state(State.UNVERIFIED)
                                                            .metadata(VerificationMetadata.builder()
                                                                .reminders(List.of(
                                                                    Reminder.builder()
                                                                        .assignee(Person.builder()
                                                                            .name("George Clooney")
                                                                            .obfuscatedId("abc123")
                                                                            .build())
                                                                        .remindAt(246216L)
                                                                        .build()))
                                                                .lastReminder(Reminder.builder()
                                                                    .assignee(Person.builder()
                                                                        .name("George Clooney")
                                                                        .obfuscatedId("abc123")
                                                                        .build())
                                                                    .remindAt(778241L)
                                                                    .build())
                                                                .build())
                                                            .build())
                                                        .customData(Map.ofEntries(
                                                            Map.entry("someCustomField", CustomDataValue.builder()
                                                                .build())))
                                                        .build())
                                                    .build())
                                                .build(),
                                            TextRange.builder()
                                                .startIndex(475618L)
                                                .document(Document.builder()
                                                    .metadata(DocumentMetadata.builder()
                                                        .datasource("datasource")
                                                        .objectType("Feature Request")
                                                        .container("container")
                                                        .parentId("JIRA_EN-1337")
                                                        .mimeType("mimeType")
                                                        .documentId("documentId")
                                                        .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                        .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                        .components(List.of(
                                                            "Backend",
                                                            "Networking"))
                                                        .status("[\"Done\"]")
                                                        .interactions(DocumentInteractions.builder()
                                                            .build())
                                                        .verification(Verification.builder()
                                                            .state(State.DEPRECATED)
                                                            .metadata(VerificationMetadata.builder()
                                                                .lastReminder(Reminder.builder()
                                                                    .assignee(Person.builder()
                                                                        .name("George Clooney")
                                                                        .obfuscatedId("abc123")
                                                                        .build())
                                                                    .remindAt(234790L)
                                                                    .build())
                                                                .build())
                                                            .build())
                                                        .customData(Map.ofEntries(
                                                            Map.entry("someCustomField", CustomDataValue.builder()
                                                                .build())))
                                                        .build())
                                                    .build())
                                                .build()))
                                        .inputDetails(SearchRequestInputDetails.builder()
                                            .hasCopyPaste(true)
                                            .build())
                                        .build())
                                    .results(List.of(
                                        SearchResult.builder()
                                            .url("https://example.com/foo/bar")
                                            .title("title")
                                            .nativeAppUrl("slack://foo/bar")
                                            .snippets(List.of(
                                                SearchResultSnippet.builder()
                                                    .snippet("snippet")
                                                    .mimeType("mimeType")
                                                    .build()))
                                            .build()))
                                    .build(),
                                RelatedDocuments.builder()
                                    .querySuggestion(QuerySuggestion.builder()
                                        .query("app:github type:pull author:mortimer")
                                        .searchProviderInfo(SearchProviderInfo.builder()
                                            .name("Google")
                                            .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                            .build())
                                        .label("Mortimer's PRs")
                                        .datasource("github")
                                        .requestOptions(SearchRequestOptions.builder()
                                            .facetBucketSize(253591L)
                                            .datasourceFilter("JIRA")
                                            .datasourcesFilter(List.of(
                                                "JIRA"))
                                            .queryOverridesFacetFilters(true)
                                            .facetFilters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .facetFilterSets(List.of(
                                                FacetFilterSet.builder()
                                                    .filters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build(),
                                                FacetFilterSet.builder()
                                                    .filters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build()))
                                            .authTokens(List.of(
                                                AuthToken.builder()
                                                    .accessToken("123abc")
                                                    .datasource("gmail")
                                                    .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                                    .tokenType("Bearer")
                                                    .authUser("1")
                                                    .build()))
                                            .build())
                                        .inputDetails(SearchRequestInputDetails.builder()
                                            .hasCopyPaste(true)
                                            .build())
                                        .build())
                                    .build()))
                            .metadata(PersonMetadata.builder()
                                .type(PersonMetadataType.FULL_TIME)
                                .title("Actor")
                                .department("Movies")
                                .email("george@example.com")
                                .location("Hollywood, CA")
                                .phone("6505551234")
                                .photoUrl("https://example.com/george.jpg")
                                .startDate(LocalDate.parse("2000-01-23"))
                                .datasourceProfile(List.of(
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build()))
                                .querySuggestions(QuerySuggestionList.builder()
                                    .suggestions(List.of(
                                        QuerySuggestion.builder()
                                            .query("app:github type:pull author:mortimer")
                                            .label("Mortimer's PRs")
                                            .datasource("github")
                                            .build()))
                                    .build())
                                .inviteInfo(InviteInfo.builder()
                                    .invites(List.of(
                                        ChannelInviteInfo.builder()
                                            .build(),
                                        ChannelInviteInfo.builder()
                                            .build(),
                                        ChannelInviteInfo.builder()
                                            .build()))
                                    .build())
                                .customFields(List.of(
                                    CustomFieldData.builder()
                                        .label("<value>")
                                        .values(List.of(
                                            CustomFieldValue.of(CustomFieldValueStr.builder()
                                                .build())))
                                        .build(),
                                    CustomFieldData.builder()
                                        .label("<value>")
                                        .values(List.of())
                                        .build()))
                                .badges(List.of(
                                    Badge.builder()
                                        .key("deployment_name_new_hire")
                                        .displayName("New hire")
                                        .iconConfig(IconConfig.builder()
                                            .color("#343CED")
                                            .key("person_icon")
                                            .iconType(IconType.GLYPH)
                                            .name("user")
                                            .build())
                                        .build()))
                                .build())
                            .build())
                        .build(),
                    UserRoleSpecification.builder()
                        .role(UserRole.ANSWER_MODERATOR)
                        .person(Person.builder()
                            .name("George Clooney")
                            .obfuscatedId("abc123")
                            .metadata(PersonMetadata.builder()
                                .type(PersonMetadataType.FULL_TIME)
                                .title("Actor")
                                .department("Movies")
                                .email("george@example.com")
                                .location("Hollywood, CA")
                                .phone("6505551234")
                                .photoUrl("https://example.com/george.jpg")
                                .startDate(LocalDate.parse("2000-01-23"))
                                .datasourceProfile(List.of(
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build(),
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build()))
                                .querySuggestions(QuerySuggestionList.builder()
                                    .build())
                                .inviteInfo(InviteInfo.builder()
                                    .build())
                                .badges(List.of(
                                    Badge.builder()
                                        .key("deployment_name_new_hire")
                                        .displayName("New hire")
                                        .iconConfig(IconConfig.builder()
                                            .color("#343CED")
                                            .key("person_icon")
                                            .iconType(IconType.GLYPH)
                                            .name("user")
                                            .build())
                                        .build()))
                                .build())
                            .build())
                        .build()))
                .removedRoles(List.of(
                    UserRoleSpecification.builder()
                        .role(UserRole.EDITOR)
                        .person(Person.builder()
                            .name("George Clooney")
                            .obfuscatedId("abc123")
                            .metadata(PersonMetadata.builder()
                                .type(PersonMetadataType.FULL_TIME)
                                .title("Actor")
                                .department("Movies")
                                .email("george@example.com")
                                .location("Hollywood, CA")
                                .phone("6505551234")
                                .photoUrl("https://example.com/george.jpg")
                                .startDate(LocalDate.parse("2000-01-23"))
                                .datasourceProfile(List.of(
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build(),
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build(),
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build()))
                                .querySuggestions(QuerySuggestionList.builder()
                                    .build())
                                .inviteInfo(InviteInfo.builder()
                                    .build())
                                .badges(List.of(
                                    Badge.builder()
                                        .key("deployment_name_new_hire")
                                        .displayName("New hire")
                                        .iconConfig(IconConfig.builder()
                                            .color("#343CED")
                                            .key("person_icon")
                                            .iconType(IconType.GLYPH)
                                            .name("user")
                                            .build())
                                        .build()))
                                .build())
                            .build())
                        .build(),
                    UserRoleSpecification.builder()
                        .role(UserRole.ANSWER_MODERATOR)
                        .person(Person.builder()
                            .name("George Clooney")
                            .obfuscatedId("abc123")
                            .metadata(PersonMetadata.builder()
                                .type(PersonMetadataType.FULL_TIME)
                                .title("Actor")
                                .department("Movies")
                                .email("george@example.com")
                                .location("Hollywood, CA")
                                .phone("6505551234")
                                .photoUrl("https://example.com/george.jpg")
                                .startDate(LocalDate.parse("2000-01-23"))
                                .datasourceProfile(List.of(
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build(),
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build(),
                                    DatasourceProfile.builder()
                                        .datasource("github")
                                        .handle("<value>")
                                        .build()))
                                .querySuggestions(QuerySuggestionList.builder()
                                    .build())
                                .inviteInfo(InviteInfo.builder()
                                    .build())
                                .badges(List.of(
                                    Badge.builder()
                                        .key("deployment_name_new_hire")
                                        .displayName("New hire")
                                        .iconConfig(IconConfig.builder()
                                            .color("#343CED")
                                            .key("person_icon")
                                            .iconType(IconType.GLYPH)
                                            .name("user")
                                            .build())
                                        .build()))
                                .build())
                            .build())
                        .build()))
                .build();

        UpdateshortcutResponse res = sdk.client().shortcuts().update()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            UpdateShortcutResponse.builder()
            .build(),
            res.updateShortcutResponse().get());
    }
}