/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.glean.api_client.glean_api_client.models.components.Activity;
import com.glean.api_client.glean_api_client.models.components.ActivityEvent;
import com.glean.api_client.glean_api_client.models.components.ActivityEventAction;
import com.glean.api_client.glean_api_client.models.components.ActivityEventParams;
import com.glean.api_client.glean_api_client.models.operations.ActivityResponse;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Test;

public class ClientActivityTests {

    @Test
    public void testClientActivity_Activity() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("activity");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        Activity req = Activity.builder()
                .events(List.of(
                    ActivityEvent.builder()
                        .action(ActivityEventAction.HISTORICAL_VIEW)
                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                        .url("https://example.com/")
                        .build(),
                    ActivityEvent.builder()
                        .action(ActivityEventAction.SEARCH)
                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                        .url("https://example.com/search?q=query")
                        .params(ActivityEventParams.builder()
                            .query("query")
                            .build())
                        .build(),
                    ActivityEvent.builder()
                        .action(ActivityEventAction.VIEW)
                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                        .url("https://example.com/")
                        .params(ActivityEventParams.builder()
                            .duration(20L)
                            .referrer("https://example.com/document")
                            .build())
                        .build()))
                .build();

        ActivityResponse res = sdk.client().activity().report()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }
}