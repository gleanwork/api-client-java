/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.glean.api_client.glean_api_client.models.components.CustomDatasourceConfig;
import com.glean.api_client.glean_api_client.models.components.DatasourceCategory;
import com.glean.api_client.glean_api_client.models.components.GetDatasourceConfigRequest;
import com.glean.api_client.glean_api_client.models.components.IconConfig;
import com.glean.api_client.glean_api_client.models.components.IconType;
import com.glean.api_client.glean_api_client.models.components.Quicklink;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1AdddatasourceResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1GetdatasourceconfigResponse;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import java.util.List;
import org.junit.jupiter.api.Test;

public class DatasourcesTests {

    @Test
    public void testDatasources_PostApiIndexV1Adddatasource() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/adddatasource");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        CustomDatasourceConfig req = CustomDatasourceConfig.builder()
                .name("<value>")
                .urlRegex("https://example-company.datasource.com/.*")
                .quicklinks(List.of(
                    Quicklink.builder()
                        .iconConfig(IconConfig.builder()
                            .color("#343CED")
                            .key("person_icon")
                            .iconType(IconType.GLYPH)
                            .name("user")
                            .build())
                        .build(),
                    Quicklink.builder()
                        .iconConfig(IconConfig.builder()
                            .color("#343CED")
                            .key("person_icon")
                            .iconType(IconType.GLYPH)
                            .name("user")
                            .build())
                        .build()))
                .build();

        PostApiIndexV1AdddatasourceResponse res = sdk.indexing().datasources().add()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testDatasources_PostApiIndexV1Getdatasourceconfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/getdatasourceconfig");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        GetDatasourceConfigRequest req = GetDatasourceConfigRequest.builder()
                .datasource("<value>")
                .build();

        PostApiIndexV1GetdatasourceconfigResponse res = sdk.indexing().datasources().retrieveConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            CustomDatasourceConfig.builder()
            .name("<value>")
            .datasourceCategory(DatasourceCategory.UNCATEGORIZED)
            .urlRegex("https://example-company.datasource.com/.*")
            .quicklinks(List.of(
                Quicklink.builder()
                    .iconConfig(IconConfig.builder()
                        .color("#343CED")
                        .key("person_icon")
                        .iconType(IconType.GLYPH)
                        .name("user")
                        .build())
                    .build()))
            .trustUrlRegexForViewActivity(true)
            .stripFragmentInCanonicalUrl(true)
            .isEntityDatasource(false)
            .isTestDatasource(false)
            .build(),
            res.customDatasourceConfig().get());
    }
}