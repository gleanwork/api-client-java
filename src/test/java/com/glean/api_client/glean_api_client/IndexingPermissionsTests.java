/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.glean.api_client.glean_api_client.models.components.BulkIndexGroupsRequest;
import com.glean.api_client.glean_api_client.models.components.BulkIndexMembershipsRequest;
import com.glean.api_client.glean_api_client.models.components.BulkIndexUsersRequest;
import com.glean.api_client.glean_api_client.models.components.DatasourceBulkMembershipDefinition;
import com.glean.api_client.glean_api_client.models.components.DatasourceGroupDefinition;
import com.glean.api_client.glean_api_client.models.components.DatasourceMembershipDefinition;
import com.glean.api_client.glean_api_client.models.components.DatasourceUserDefinition;
import com.glean.api_client.glean_api_client.models.components.DeleteGroupRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteMembershipRequest;
import com.glean.api_client.glean_api_client.models.components.DeleteUserRequest;
import com.glean.api_client.glean_api_client.models.components.DocumentPermissionsDefinition;
import com.glean.api_client.glean_api_client.models.components.GreenlistUsersRequest;
import com.glean.api_client.glean_api_client.models.components.IndexGroupRequest;
import com.glean.api_client.glean_api_client.models.components.IndexMembershipRequest;
import com.glean.api_client.glean_api_client.models.components.IndexUserRequest;
import com.glean.api_client.glean_api_client.models.components.UpdatePermissionsRequest;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BetausersResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexgroupsResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexmembershipsResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1BulkindexusersResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeletegroupResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeletemembershipResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1DeleteuserResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexgroupResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexmembershipResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1IndexuserResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1ProcessallmembershipsResponse;
import com.glean.api_client.glean_api_client.models.operations.PostApiIndexV1UpdatepermissionsResponse;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import java.util.List;
import org.junit.jupiter.api.Test;

public class IndexingPermissionsTests {

    @Test
    public void testIndexingPermissions_PostApiIndexV1Updatepermissions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/updatepermissions");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        UpdatePermissionsRequest req = UpdatePermissionsRequest.builder()
                .datasource("<value>")
                .permissions(DocumentPermissionsDefinition.builder()
                    .build())
                .build();

        PostApiIndexV1UpdatepermissionsResponse res = sdk.indexing().permissions().updatePermissions()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Indexuser() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/indexuser");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        IndexUserRequest req = IndexUserRequest.builder()
                .datasource("<value>")
                .user(DatasourceUserDefinition.builder()
                    .email("Elroy38@gmail.com")
                    .name("<value>")
                    .build())
                .build();

        PostApiIndexV1IndexuserResponse res = sdk.indexing().permissions().indexUser()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Bulkindexusers() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/bulkindexusers");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        BulkIndexUsersRequest req = BulkIndexUsersRequest.builder()
                .uploadId("<id>")
                .datasource("<value>")
                .users(List.of(
                    DatasourceUserDefinition.builder()
                        .email("Nola85@hotmail.com")
                        .name("<value>")
                        .build(),
                    DatasourceUserDefinition.builder()
                        .email("Francisca44@hotmail.com")
                        .name("<value>")
                        .build(),
                    DatasourceUserDefinition.builder()
                        .email("Georgiana_Fadel-Boyle@yahoo.com")
                        .name("<value>")
                        .build()))
                .build();

        PostApiIndexV1BulkindexusersResponse res = sdk.indexing().permissions().bulkIndexUsers()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Indexgroup() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/indexgroup");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        IndexGroupRequest req = IndexGroupRequest.builder()
                .datasource("<value>")
                .group(DatasourceGroupDefinition.builder()
                    .name("<value>")
                    .build())
                .build();

        PostApiIndexV1IndexgroupResponse res = sdk.indexing().permissions().indexGroup()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Bulkindexgroups() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/bulkindexgroups");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        BulkIndexGroupsRequest req = BulkIndexGroupsRequest.builder()
                .uploadId("<id>")
                .datasource("<value>")
                .groups(List.of(
                    DatasourceGroupDefinition.builder()
                        .name("<value>")
                        .build(),
                    DatasourceGroupDefinition.builder()
                        .name("<value>")
                        .build()))
                .build();

        PostApiIndexV1BulkindexgroupsResponse res = sdk.indexing().permissions().bulkIndexGroups()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Indexmembership() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/indexmembership");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        IndexMembershipRequest req = IndexMembershipRequest.builder()
                .datasource("<value>")
                .membership(DatasourceMembershipDefinition.builder()
                    .groupName("<value>")
                    .build())
                .build();

        PostApiIndexV1IndexmembershipResponse res = sdk.indexing().permissions().indexMembership()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Bulkindexmemberships() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/bulkindexmemberships");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        BulkIndexMembershipsRequest req = BulkIndexMembershipsRequest.builder()
                .uploadId("<id>")
                .datasource("<value>")
                .memberships(List.of(
                    DatasourceBulkMembershipDefinition.builder()
                        .build(),
                    DatasourceBulkMembershipDefinition.builder()
                        .build(),
                    DatasourceBulkMembershipDefinition.builder()
                        .build()))
                .build();

        PostApiIndexV1BulkindexmembershipsResponse res = sdk.indexing().permissions().bulkIndexMemberships()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Processallmemberships() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/processallmemberships");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        PostApiIndexV1ProcessallmembershipsResponse res = sdk.indexing().permissions().processMemberships()
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Deleteuser() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/deleteuser");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        DeleteUserRequest req = DeleteUserRequest.builder()
                .datasource("<value>")
                .email("Estrella.Robel56@gmail.com")
                .build();

        PostApiIndexV1DeleteuserResponse res = sdk.indexing().permissions().deleteUser()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Deletegroup() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/deletegroup");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        DeleteGroupRequest req = DeleteGroupRequest.builder()
                .datasource("<value>")
                .groupName("<value>")
                .build();

        PostApiIndexV1DeletegroupResponse res = sdk.indexing().permissions().deleteGroup()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Deletemembership() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/deletemembership");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        DeleteMembershipRequest req = DeleteMembershipRequest.builder()
                .datasource("<value>")
                .membership(DatasourceMembershipDefinition.builder()
                    .groupName("<value>")
                    .build())
                .build();

        PostApiIndexV1DeletemembershipResponse res = sdk.indexing().permissions().deleteMembership()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testIndexingPermissions_PostApiIndexV1Betausers() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("post_/api/index/v1/betausers");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        GreenlistUsersRequest req = GreenlistUsersRequest.builder()
                .datasource("<value>")
                .emails(List.of(
                    "Margaret94@gmail.com",
                    "Jerel_Wilkinson39@yahoo.com"))
                .build();

        PostApiIndexV1BetausersResponse res = sdk.indexing().permissions().authorizeBetaUsers()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }
}