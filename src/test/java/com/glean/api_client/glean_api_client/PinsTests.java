/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.glean.api_client.glean_api_client.models.components.AuthToken;
import com.glean.api_client.glean_api_client.models.components.Badge;
import com.glean.api_client.glean_api_client.models.components.ChannelInviteInfo;
import com.glean.api_client.glean_api_client.models.components.Collection;
import com.glean.api_client.glean_api_client.models.components.CollectionItem;
import com.glean.api_client.glean_api_client.models.components.CollectionItemItemType;
import com.glean.api_client.glean_api_client.models.components.CustomDataValue;
import com.glean.api_client.glean_api_client.models.components.CustomFieldData;
import com.glean.api_client.glean_api_client.models.components.CustomFieldValue;
import com.glean.api_client.glean_api_client.models.components.CustomFieldValueStr;
import com.glean.api_client.glean_api_client.models.components.DatasourceProfile;
import com.glean.api_client.glean_api_client.models.components.Document;
import com.glean.api_client.glean_api_client.models.components.DocumentInteractions;
import com.glean.api_client.glean_api_client.models.components.DocumentMetadata;
import com.glean.api_client.glean_api_client.models.components.EditPinRequest;
import com.glean.api_client.glean_api_client.models.components.FacetFilter;
import com.glean.api_client.glean_api_client.models.components.FacetFilterSet;
import com.glean.api_client.glean_api_client.models.components.FacetFilterValue;
import com.glean.api_client.glean_api_client.models.components.GetPinRequest;
import com.glean.api_client.glean_api_client.models.components.GetPinResponse;
import com.glean.api_client.glean_api_client.models.components.IconConfig;
import com.glean.api_client.glean_api_client.models.components.IconType;
import com.glean.api_client.glean_api_client.models.components.InviteInfo;
import com.glean.api_client.glean_api_client.models.components.ListPinsResponse;
import com.glean.api_client.glean_api_client.models.components.Person;
import com.glean.api_client.glean_api_client.models.components.PersonMetadata;
import com.glean.api_client.glean_api_client.models.components.PersonMetadataType;
import com.glean.api_client.glean_api_client.models.components.PinDocument;
import com.glean.api_client.glean_api_client.models.components.PinRequest;
import com.glean.api_client.glean_api_client.models.components.QuerySuggestion;
import com.glean.api_client.glean_api_client.models.components.QuerySuggestionList;
import com.glean.api_client.glean_api_client.models.components.Reaction;
import com.glean.api_client.glean_api_client.models.components.RelatedDocuments;
import com.glean.api_client.glean_api_client.models.components.RelationType;
import com.glean.api_client.glean_api_client.models.components.Reminder;
import com.glean.api_client.glean_api_client.models.components.SearchProviderInfo;
import com.glean.api_client.glean_api_client.models.components.SearchRequestInputDetails;
import com.glean.api_client.glean_api_client.models.components.SearchRequestOptions;
import com.glean.api_client.glean_api_client.models.components.SearchResult;
import com.glean.api_client.glean_api_client.models.components.SearchResultSnippet;
import com.glean.api_client.glean_api_client.models.components.Share;
import com.glean.api_client.glean_api_client.models.components.State;
import com.glean.api_client.glean_api_client.models.components.TextRange;
import com.glean.api_client.glean_api_client.models.components.Unpin;
import com.glean.api_client.glean_api_client.models.components.UserRole;
import com.glean.api_client.glean_api_client.models.components.UserRoleSpecification;
import com.glean.api_client.glean_api_client.models.components.Verification;
import com.glean.api_client.glean_api_client.models.components.VerificationMetadata;
import com.glean.api_client.glean_api_client.models.operations.EditpinResponse;
import com.glean.api_client.glean_api_client.models.operations.GetpinResponse;
import com.glean.api_client.glean_api_client.models.operations.ListpinsRequest;
import com.glean.api_client.glean_api_client.models.operations.ListpinsResponse;
import com.glean.api_client.glean_api_client.models.operations.PinResponse;
import com.glean.api_client.glean_api_client.models.operations.UnpinResponse;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class PinsTests {

    @Test
    public void testPins_Editpin() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("editpin");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        EditPinRequest req = EditPinRequest.builder()
                .audienceFilters(List.of(
                    FacetFilter.builder()
                        .fieldName("type")
                        .values(List.of(
                            FacetFilterValue.builder()
                                .value("Spreadsheet")
                                .relationType(RelationType.EQUALS)
                                .build(),
                            FacetFilterValue.builder()
                                .value("Presentation")
                                .relationType(RelationType.EQUALS)
                                .build()))
                        .build()))
                .build();

        EditpinResponse res = sdk.client().pins().update()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PinDocument.builder()
            .documentId("<id>")
            .audienceFilters(List.of(
                FacetFilter.builder()
                    .fieldName("type")
                    .values(List.of(
                        FacetFilterValue.builder()
                            .value("Spreadsheet")
                            .relationType(RelationType.EQUALS)
                            .build(),
                        FacetFilterValue.builder()
                            .value("Presentation")
                            .relationType(RelationType.EQUALS)
                            .build()))
                    .build()))
            .attribution(Person.builder()
                .name("George Clooney")
                .obfuscatedId("abc123")
                .relatedDocuments(List.of(
                    RelatedDocuments.builder()
                        .querySuggestion(QuerySuggestion.builder()
                            .query("app:github type:pull author:mortimer")
                            .searchProviderInfo(SearchProviderInfo.builder()
                                .name("Google")
                                .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                .build())
                            .label("Mortimer's PRs")
                            .datasource("github")
                            .requestOptions(SearchRequestOptions.builder()
                                .facetBucketSize(922296L)
                                .datasourceFilter("JIRA")
                                .datasourcesFilter(List.of(
                                    "JIRA"))
                                .queryOverridesFacetFilters(true)
                                .facetFilters(List.of(
                                    FacetFilter.builder()
                                        .fieldName("type")
                                        .values(List.of(
                                            FacetFilterValue.builder()
                                                .value("Spreadsheet")
                                                .relationType(RelationType.EQUALS)
                                                .build(),
                                            FacetFilterValue.builder()
                                                .value("Presentation")
                                                .relationType(RelationType.EQUALS)
                                                .build()))
                                        .build()))
                                .facetFilterSets(List.of(
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build(),
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build()))
                                .authTokens(List.of(
                                    AuthToken.builder()
                                        .accessToken("123abc")
                                        .datasource("gmail")
                                        .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                        .tokenType("Bearer")
                                        .authUser("1")
                                        .build()))
                                .build())
                            .ranges(List.of(
                                TextRange.builder()
                                    .startIndex(47491L)
                                    .document(Document.builder()
                                        .metadata(DocumentMetadata.builder()
                                            .datasource("datasource")
                                            .objectType("Feature Request")
                                            .container("container")
                                            .parentId("JIRA_EN-1337")
                                            .mimeType("mimeType")
                                            .documentId("documentId")
                                            .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                            .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                            .components(List.of(
                                                "Backend",
                                                "Networking"))
                                            .status("[\"Done\"]")
                                            .collections(List.of(
                                                Collection.builder()
                                                    .name("<value>")
                                                    .description("informal wrongly lest slime since pace into row")
                                                    .id(793957L)
                                                    .addedRoles(List.of(
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.VERIFIER)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.VIEWER)
                                                            .build()))
                                                    .removedRoles(List.of(
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.EDITOR)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.EDITOR)
                                                            .build()))
                                                    .audienceFilters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .items(List.of(
                                                        CollectionItem.builder()
                                                            .collectionId(841760L)
                                                            .itemType(CollectionItemItemType.COLLECTION)
                                                            .build(),
                                                        CollectionItem.builder()
                                                            .collectionId(546659L)
                                                            .itemType(CollectionItemItemType.COLLECTION)
                                                            .build()))
                                                    .roles(List.of(
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.OWNER)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.VERIFIER)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.EDITOR)
                                                            .build()))
                                                    .build(),
                                                Collection.builder()
                                                    .name("<value>")
                                                    .description("twine because unnaturally card gallery among agile duh pro athwart")
                                                    .id(201064L)
                                                    .audienceFilters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build()))
                                            .interactions(DocumentInteractions.builder()
                                                .reacts(List.of(
                                                    Reaction.builder()
                                                        .build()))
                                                .shares(List.of(
                                                    Share.builder()
                                                        .numDaysAgo(544237L)
                                                        .build(),
                                                    Share.builder()
                                                        .numDaysAgo(241956L)
                                                        .build()))
                                                .build())
                                            .verification(Verification.builder()
                                                .state(State.DEPRECATED)
                                                .metadata(VerificationMetadata.builder()
                                                    .reminders(List.of(
                                                        Reminder.builder()
                                                            .assignee(Person.builder()
                                                                .name("George Clooney")
                                                                .obfuscatedId("abc123")
                                                                .build())
                                                            .remindAt(448916L)
                                                            .build(),
                                                        Reminder.builder()
                                                            .assignee(Person.builder()
                                                                .name("George Clooney")
                                                                .obfuscatedId("abc123")
                                                                .build())
                                                            .remindAt(494003L)
                                                            .build()))
                                                    .lastReminder(Reminder.builder()
                                                        .assignee(Person.builder()
                                                            .name("George Clooney")
                                                            .obfuscatedId("abc123")
                                                            .build())
                                                        .remindAt(29269L)
                                                        .build())
                                                    .build())
                                                .build())
                                            .customData(Map.ofEntries(
                                                Map.entry("someCustomField", CustomDataValue.builder()
                                                    .build())))
                                            .build())
                                        .build())
                                    .build()))
                            .inputDetails(SearchRequestInputDetails.builder()
                                .hasCopyPaste(true)
                                .build())
                            .build())
                        .results(List.of(
                            SearchResult.builder()
                                .url("https://example.com/foo/bar")
                                .title("title")
                                .nativeAppUrl("slack://foo/bar")
                                .snippets(List.of(
                                    SearchResultSnippet.builder()
                                        .snippet("snippet")
                                        .mimeType("mimeType")
                                        .build()))
                                .build()))
                        .build()))
                .metadata(PersonMetadata.builder()
                    .type(PersonMetadataType.FULL_TIME)
                    .title("Actor")
                    .department("Movies")
                    .email("george@example.com")
                    .location("Hollywood, CA")
                    .phone("6505551234")
                    .photoUrl("https://example.com/george.jpg")
                    .startDate(LocalDate.parse("2000-01-23"))
                    .datasourceProfile(List.of(
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build(),
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build()))
                    .querySuggestions(QuerySuggestionList.builder()
                        .suggestions(List.of(
                            QuerySuggestion.builder()
                                .query("app:github type:pull author:mortimer")
                                .label("Mortimer's PRs")
                                .datasource("github")
                                .build()))
                        .build())
                    .inviteInfo(InviteInfo.builder()
                        .invites(List.of(
                            ChannelInviteInfo.builder()
                                .build()))
                        .build())
                    .customFields(List.of(
                        CustomFieldData.builder()
                            .label("<value>")
                            .values(List.of())
                            .displayable(true)
                            .build()))
                    .badges(List.of(
                        Badge.builder()
                            .key("deployment_name_new_hire")
                            .displayName("New hire")
                            .iconConfig(IconConfig.builder()
                                .color("#343CED")
                                .key("person_icon")
                                .iconType(IconType.GLYPH)
                                .name("user")
                                .build())
                            .build()))
                    .build())
                .build())
            .updatedBy(Person.builder()
                .name("George Clooney")
                .obfuscatedId("abc123")
                .metadata(PersonMetadata.builder()
                    .type(PersonMetadataType.FULL_TIME)
                    .title("Actor")
                    .department("Movies")
                    .email("george@example.com")
                    .location("Hollywood, CA")
                    .phone("6505551234")
                    .photoUrl("https://example.com/george.jpg")
                    .startDate(LocalDate.parse("2000-01-23"))
                    .datasourceProfile(List.of(
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build()))
                    .querySuggestions(QuerySuggestionList.builder()
                        .build())
                    .inviteInfo(InviteInfo.builder()
                        .build())
                    .badges(List.of(
                        Badge.builder()
                            .key("deployment_name_new_hire")
                            .displayName("New hire")
                            .iconConfig(IconConfig.builder()
                                .color("#343CED")
                                .key("person_icon")
                                .iconType(IconType.GLYPH)
                                .name("user")
                                .build())
                            .build()))
                    .build())
                .build())
            .build(),
            res.pinDocument().get());
    }

    @Test
    public void testPins_Getpin() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getpin");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        GetPinRequest req = GetPinRequest.builder()
                .build();

        GetpinResponse res = sdk.client().pins().retrieve()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            GetPinResponse.builder()
            .pin(PinDocument.builder()
                .documentId("<id>")
                .audienceFilters(List.of(
                    FacetFilter.builder()
                        .fieldName("type")
                        .values(List.of(
                            FacetFilterValue.builder()
                                .value("Spreadsheet")
                                .relationType(RelationType.EQUALS)
                                .build(),
                            FacetFilterValue.builder()
                                .value("Presentation")
                                .relationType(RelationType.EQUALS)
                                .build()))
                        .build()))
                .attribution(Person.builder()
                    .name("George Clooney")
                    .obfuscatedId("abc123")
                    .relatedDocuments(List.of(
                        RelatedDocuments.builder()
                            .querySuggestion(QuerySuggestion.builder()
                                .query("app:github type:pull author:mortimer")
                                .searchProviderInfo(SearchProviderInfo.builder()
                                    .name("Google")
                                    .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                    .build())
                                .label("Mortimer's PRs")
                                .datasource("github")
                                .requestOptions(SearchRequestOptions.builder()
                                    .facetBucketSize(544221L)
                                    .datasourceFilter("JIRA")
                                    .datasourcesFilter(List.of(
                                        "JIRA"))
                                    .queryOverridesFacetFilters(true)
                                    .facetFilters(List.of(
                                        FacetFilter.builder()
                                            .fieldName("type")
                                            .values(List.of(
                                                FacetFilterValue.builder()
                                                    .value("Spreadsheet")
                                                    .relationType(RelationType.EQUALS)
                                                    .build(),
                                                FacetFilterValue.builder()
                                                    .value("Presentation")
                                                    .relationType(RelationType.EQUALS)
                                                    .build()))
                                            .build()))
                                    .facetFilterSets(List.of(
                                        FacetFilterSet.builder()
                                            .filters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .build(),
                                        FacetFilterSet.builder()
                                            .filters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .build()))
                                    .authTokens(List.of(
                                        AuthToken.builder()
                                            .accessToken("123abc")
                                            .datasource("gmail")
                                            .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                            .tokenType("Bearer")
                                            .authUser("1")
                                            .build()))
                                    .build())
                                .ranges(List.of(
                                    TextRange.builder()
                                        .startIndex(969961L)
                                        .document(Document.builder()
                                            .metadata(DocumentMetadata.builder()
                                                .datasource("datasource")
                                                .objectType("Feature Request")
                                                .container("container")
                                                .parentId("JIRA_EN-1337")
                                                .mimeType("mimeType")
                                                .documentId("documentId")
                                                .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                .components(List.of(
                                                    "Backend",
                                                    "Networking"))
                                                .status("[\"Done\"]")
                                                .collections(List.of(
                                                    Collection.builder()
                                                        .name("<value>")
                                                        .description("extract neaten qua meanwhile bah")
                                                        .id(808481L)
                                                        .addedRoles(List.of(
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.VIEWER)
                                                                .build(),
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.EDITOR)
                                                                .build()))
                                                        .removedRoles(List.of(
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.ANSWER_MODERATOR)
                                                                .build(),
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.VIEWER)
                                                                .build(),
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.OWNER)
                                                                .build()))
                                                        .audienceFilters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .items(List.of(
                                                            CollectionItem.builder()
                                                                .collectionId(656841L)
                                                                .itemType(CollectionItemItemType.URL)
                                                                .build(),
                                                            CollectionItem.builder()
                                                                .collectionId(607679L)
                                                                .itemType(CollectionItemItemType.COLLECTION)
                                                                .build()))
                                                        .roles(List.of(
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.ANSWER_MODERATOR)
                                                                .build(),
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.OWNER)
                                                                .build(),
                                                            UserRoleSpecification.builder()
                                                                .role(UserRole.EDITOR)
                                                                .build()))
                                                        .build(),
                                                    Collection.builder()
                                                        .name("<value>")
                                                        .description("once out effector determined backburn weary")
                                                        .id(547184L)
                                                        .audienceFilters(List.of(
                                                            FacetFilter.builder()
                                                                .fieldName("type")
                                                                .values(List.of(
                                                                    FacetFilterValue.builder()
                                                                        .value("Spreadsheet")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build(),
                                                                    FacetFilterValue.builder()
                                                                        .value("Presentation")
                                                                        .relationType(RelationType.EQUALS)
                                                                        .build()))
                                                                .build()))
                                                        .build()))
                                                .interactions(DocumentInteractions.builder()
                                                    .reacts(List.of(
                                                        Reaction.builder()
                                                            .build(),
                                                        Reaction.builder()
                                                            .build(),
                                                        Reaction.builder()
                                                            .build()))
                                                    .shares(List.of(
                                                        Share.builder()
                                                            .numDaysAgo(31446L)
                                                            .build(),
                                                        Share.builder()
                                                            .numDaysAgo(339847L)
                                                            .build(),
                                                        Share.builder()
                                                            .numDaysAgo(844917L)
                                                            .build()))
                                                    .build())
                                                .verification(Verification.builder()
                                                    .state(State.VERIFIED)
                                                    .metadata(VerificationMetadata.builder()
                                                        .reminders(List.of(
                                                            Reminder.builder()
                                                                .assignee(Person.builder()
                                                                    .name("George Clooney")
                                                                    .obfuscatedId("abc123")
                                                                    .build())
                                                                .remindAt(845806L)
                                                                .build(),
                                                            Reminder.builder()
                                                                .assignee(Person.builder()
                                                                    .name("George Clooney")
                                                                    .obfuscatedId("abc123")
                                                                    .build())
                                                                .remindAt(350813L)
                                                                .build()))
                                                        .lastReminder(Reminder.builder()
                                                            .assignee(Person.builder()
                                                                .name("George Clooney")
                                                                .obfuscatedId("abc123")
                                                                .build())
                                                            .remindAt(534384L)
                                                            .build())
                                                        .build())
                                                    .build())
                                                .customData(Map.ofEntries(
                                                    Map.entry("someCustomField", CustomDataValue.builder()
                                                        .build())))
                                                .build())
                                            .build())
                                        .build(),
                                    TextRange.builder()
                                        .startIndex(913207L)
                                        .document(Document.builder()
                                            .metadata(DocumentMetadata.builder()
                                                .datasource("datasource")
                                                .objectType("Feature Request")
                                                .container("container")
                                                .parentId("JIRA_EN-1337")
                                                .mimeType("mimeType")
                                                .documentId("documentId")
                                                .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                .components(List.of(
                                                    "Backend",
                                                    "Networking"))
                                                .status("[\"Done\"]")
                                                .interactions(DocumentInteractions.builder()
                                                    .build())
                                                .verification(Verification.builder()
                                                    .state(State.UNVERIFIED)
                                                    .metadata(VerificationMetadata.builder()
                                                        .lastReminder(Reminder.builder()
                                                            .assignee(Person.builder()
                                                                .name("George Clooney")
                                                                .obfuscatedId("abc123")
                                                                .build())
                                                            .remindAt(533795L)
                                                            .build())
                                                        .build())
                                                    .build())
                                                .customData(Map.ofEntries(
                                                    Map.entry("someCustomField", CustomDataValue.builder()
                                                        .build())))
                                                .build())
                                            .build())
                                        .build()))
                                .inputDetails(SearchRequestInputDetails.builder()
                                    .hasCopyPaste(true)
                                    .build())
                                .build())
                            .results(List.of(
                                SearchResult.builder()
                                    .url("https://example.com/foo/bar")
                                    .title("title")
                                    .nativeAppUrl("slack://foo/bar")
                                    .snippets(List.of(
                                        SearchResultSnippet.builder()
                                            .snippet("snippet")
                                            .mimeType("mimeType")
                                            .build()))
                                    .build()))
                            .build(),
                        RelatedDocuments.builder()
                            .querySuggestion(QuerySuggestion.builder()
                                .query("app:github type:pull author:mortimer")
                                .searchProviderInfo(SearchProviderInfo.builder()
                                    .name("Google")
                                    .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                    .build())
                                .label("Mortimer's PRs")
                                .datasource("github")
                                .requestOptions(SearchRequestOptions.builder()
                                    .facetBucketSize(949290L)
                                    .datasourceFilter("JIRA")
                                    .datasourcesFilter(List.of(
                                        "JIRA"))
                                    .queryOverridesFacetFilters(true)
                                    .facetFilters(List.of(
                                        FacetFilter.builder()
                                            .fieldName("type")
                                            .values(List.of(
                                                FacetFilterValue.builder()
                                                    .value("Spreadsheet")
                                                    .relationType(RelationType.EQUALS)
                                                    .build(),
                                                FacetFilterValue.builder()
                                                    .value("Presentation")
                                                    .relationType(RelationType.EQUALS)
                                                    .build()))
                                            .build()))
                                    .facetFilterSets(List.of(
                                        FacetFilterSet.builder()
                                            .filters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .build()))
                                    .authTokens(List.of(
                                        AuthToken.builder()
                                            .accessToken("123abc")
                                            .datasource("gmail")
                                            .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                            .tokenType("Bearer")
                                            .authUser("1")
                                            .build()))
                                    .build())
                                .inputDetails(SearchRequestInputDetails.builder()
                                    .hasCopyPaste(true)
                                    .build())
                                .build())
                            .build(),
                        RelatedDocuments.builder()
                            .querySuggestion(QuerySuggestion.builder()
                                .query("app:github type:pull author:mortimer")
                                .searchProviderInfo(SearchProviderInfo.builder()
                                    .name("Google")
                                    .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                    .build())
                                .label("Mortimer's PRs")
                                .datasource("github")
                                .requestOptions(SearchRequestOptions.builder()
                                    .facetBucketSize(716267L)
                                    .datasourceFilter("JIRA")
                                    .datasourcesFilter(List.of(
                                        "JIRA"))
                                    .queryOverridesFacetFilters(true)
                                    .facetFilters(List.of(
                                        FacetFilter.builder()
                                            .fieldName("type")
                                            .values(List.of(
                                                FacetFilterValue.builder()
                                                    .value("Spreadsheet")
                                                    .relationType(RelationType.EQUALS)
                                                    .build(),
                                                FacetFilterValue.builder()
                                                    .value("Presentation")
                                                    .relationType(RelationType.EQUALS)
                                                    .build()))
                                            .build()))
                                    .facetFilterSets(List.of(
                                        FacetFilterSet.builder()
                                            .filters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .build(),
                                        FacetFilterSet.builder()
                                            .filters(List.of(
                                                FacetFilter.builder()
                                                    .fieldName("type")
                                                    .values(List.of(
                                                        FacetFilterValue.builder()
                                                            .value("Spreadsheet")
                                                            .relationType(RelationType.EQUALS)
                                                            .build(),
                                                        FacetFilterValue.builder()
                                                            .value("Presentation")
                                                            .relationType(RelationType.EQUALS)
                                                            .build()))
                                                    .build()))
                                            .build()))
                                    .authTokens(List.of(
                                        AuthToken.builder()
                                            .accessToken("123abc")
                                            .datasource("gmail")
                                            .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                            .tokenType("Bearer")
                                            .authUser("1")
                                            .build()))
                                    .build())
                                .inputDetails(SearchRequestInputDetails.builder()
                                    .hasCopyPaste(true)
                                    .build())
                                .build())
                            .build()))
                    .metadata(PersonMetadata.builder()
                        .type(PersonMetadataType.FULL_TIME)
                        .title("Actor")
                        .department("Movies")
                        .email("george@example.com")
                        .location("Hollywood, CA")
                        .phone("6505551234")
                        .photoUrl("https://example.com/george.jpg")
                        .startDate(LocalDate.parse("2000-01-23"))
                        .datasourceProfile(List.of(
                            DatasourceProfile.builder()
                                .datasource("github")
                                .handle("<value>")
                                .build()))
                        .querySuggestions(QuerySuggestionList.builder()
                            .suggestions(List.of(
                                QuerySuggestion.builder()
                                    .query("app:github type:pull author:mortimer")
                                    .label("Mortimer's PRs")
                                    .datasource("github")
                                    .build()))
                            .build())
                        .inviteInfo(InviteInfo.builder()
                            .invites(List.of(
                                ChannelInviteInfo.builder()
                                    .build(),
                                ChannelInviteInfo.builder()
                                    .build(),
                                ChannelInviteInfo.builder()
                                    .build()))
                            .build())
                        .customFields(List.of(
                            CustomFieldData.builder()
                                .label("<value>")
                                .values(List.of(
                                    CustomFieldValue.of(CustomFieldValueStr.builder()
                                        .build()),
                                    CustomFieldValue.of(CustomFieldValueStr.builder()
                                        .build())))
                                .displayable(true)
                                .build(),
                            CustomFieldData.builder()
                                .label("<value>")
                                .values(List.of())
                                .displayable(true)
                                .build()))
                        .badges(List.of(
                            Badge.builder()
                                .key("deployment_name_new_hire")
                                .displayName("New hire")
                                .iconConfig(IconConfig.builder()
                                    .color("#343CED")
                                    .key("person_icon")
                                    .iconType(IconType.GLYPH)
                                    .name("user")
                                    .build())
                                .build()))
                        .build())
                    .build())
                .updatedBy(Person.builder()
                    .name("George Clooney")
                    .obfuscatedId("abc123")
                    .metadata(PersonMetadata.builder()
                        .type(PersonMetadataType.FULL_TIME)
                        .title("Actor")
                        .department("Movies")
                        .email("george@example.com")
                        .location("Hollywood, CA")
                        .phone("6505551234")
                        .photoUrl("https://example.com/george.jpg")
                        .startDate(LocalDate.parse("2000-01-23"))
                        .datasourceProfile(List.of(
                            DatasourceProfile.builder()
                                .datasource("github")
                                .handle("<value>")
                                .build()))
                        .querySuggestions(QuerySuggestionList.builder()
                            .build())
                        .inviteInfo(InviteInfo.builder()
                            .build())
                        .badges(List.of(
                            Badge.builder()
                                .key("deployment_name_new_hire")
                                .displayName("New hire")
                                .iconConfig(IconConfig.builder()
                                    .color("#343CED")
                                    .key("person_icon")
                                    .iconType(IconType.GLYPH)
                                    .name("user")
                                    .build())
                                .build()))
                        .build())
                    .build())
                .build())
            .build(),
            res.getPinResponse().get());
    }

    @Test
    public void testPins_Listpins() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listpins");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        ListpinsRequest req = ListpinsRequest.builder()
                .build();

        ListpinsResponse res = sdk.client().pins().list()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ListPinsResponse.builder()
            .pins(List.of(
                PinDocument.builder()
                    .documentId("<id>")
                    .audienceFilters(List.of(
                        FacetFilter.builder()
                            .fieldName("type")
                            .values(List.of(
                                FacetFilterValue.builder()
                                    .value("Spreadsheet")
                                    .relationType(RelationType.EQUALS)
                                    .build(),
                                FacetFilterValue.builder()
                                    .value("Presentation")
                                    .relationType(RelationType.EQUALS)
                                    .build()))
                            .build()))
                    .attribution(Person.builder()
                        .name("George Clooney")
                        .obfuscatedId("abc123")
                        .relatedDocuments(List.of(
                            RelatedDocuments.builder()
                                .querySuggestion(QuerySuggestion.builder()
                                    .query("app:github type:pull author:mortimer")
                                    .searchProviderInfo(SearchProviderInfo.builder()
                                        .name("Google")
                                        .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                        .build())
                                    .label("Mortimer's PRs")
                                    .datasource("github")
                                    .requestOptions(SearchRequestOptions.builder()
                                        .facetBucketSize(177706L)
                                        .datasourceFilter("JIRA")
                                        .datasourcesFilter(List.of(
                                            "JIRA"))
                                        .queryOverridesFacetFilters(true)
                                        .facetFilters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .facetFilterSets(List.of(
                                            FacetFilterSet.builder()
                                                .filters(List.of(
                                                    FacetFilter.builder()
                                                        .fieldName("type")
                                                        .values(List.of(
                                                            FacetFilterValue.builder()
                                                                .value("Spreadsheet")
                                                                .relationType(RelationType.EQUALS)
                                                                .build(),
                                                            FacetFilterValue.builder()
                                                                .value("Presentation")
                                                                .relationType(RelationType.EQUALS)
                                                                .build()))
                                                        .build()))
                                                .build(),
                                            FacetFilterSet.builder()
                                                .filters(List.of(
                                                    FacetFilter.builder()
                                                        .fieldName("type")
                                                        .values(List.of(
                                                            FacetFilterValue.builder()
                                                                .value("Spreadsheet")
                                                                .relationType(RelationType.EQUALS)
                                                                .build(),
                                                            FacetFilterValue.builder()
                                                                .value("Presentation")
                                                                .relationType(RelationType.EQUALS)
                                                                .build()))
                                                        .build()))
                                                .build(),
                                            FacetFilterSet.builder()
                                                .filters(List.of(
                                                    FacetFilter.builder()
                                                        .fieldName("type")
                                                        .values(List.of(
                                                            FacetFilterValue.builder()
                                                                .value("Spreadsheet")
                                                                .relationType(RelationType.EQUALS)
                                                                .build(),
                                                            FacetFilterValue.builder()
                                                                .value("Presentation")
                                                                .relationType(RelationType.EQUALS)
                                                                .build()))
                                                        .build()))
                                                .build()))
                                        .authTokens(List.of(
                                            AuthToken.builder()
                                                .accessToken("123abc")
                                                .datasource("gmail")
                                                .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                                .tokenType("Bearer")
                                                .authUser("1")
                                                .build()))
                                        .build())
                                    .ranges(List.of(
                                        TextRange.builder()
                                            .startIndex(152837L)
                                            .document(Document.builder()
                                                .metadata(DocumentMetadata.builder()
                                                    .datasource("datasource")
                                                    .objectType("Feature Request")
                                                    .container("container")
                                                    .parentId("JIRA_EN-1337")
                                                    .mimeType("mimeType")
                                                    .documentId("documentId")
                                                    .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                    .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                                    .components(List.of(
                                                        "Backend",
                                                        "Networking"))
                                                    .status("[\"Done\"]")
                                                    .collections(List.of(
                                                        Collection.builder()
                                                            .name("<value>")
                                                            .description("bah since zowie loudly aha although gosh whenever")
                                                            .id(544651L)
                                                            .addedRoles(List.of(
                                                                UserRoleSpecification.builder()
                                                                    .role(UserRole.EDITOR)
                                                                    .build()))
                                                            .removedRoles(List.of(
                                                                UserRoleSpecification.builder()
                                                                    .role(UserRole.EDITOR)
                                                                    .build()))
                                                            .audienceFilters(List.of(
                                                                FacetFilter.builder()
                                                                    .fieldName("type")
                                                                    .values(List.of(
                                                                        FacetFilterValue.builder()
                                                                            .value("Spreadsheet")
                                                                            .relationType(RelationType.EQUALS)
                                                                            .build(),
                                                                        FacetFilterValue.builder()
                                                                            .value("Presentation")
                                                                            .relationType(RelationType.EQUALS)
                                                                            .build()))
                                                                    .build()))
                                                            .items(List.of(
                                                                CollectionItem.builder()
                                                                    .collectionId(60868L)
                                                                    .itemType(CollectionItemItemType.TEXT)
                                                                    .build()))
                                                            .roles(List.of(
                                                                UserRoleSpecification.builder()
                                                                    .role(UserRole.VIEWER)
                                                                    .build(),
                                                                UserRoleSpecification.builder()
                                                                    .role(UserRole.VIEWER)
                                                                    .build(),
                                                                UserRoleSpecification.builder()
                                                                    .role(UserRole.OWNER)
                                                                    .build()))
                                                            .build(),
                                                        Collection.builder()
                                                            .name("<value>")
                                                            .description("via during someplace woot excepting gah only despite")
                                                            .id(933854L)
                                                            .audienceFilters(List.of(
                                                                FacetFilter.builder()
                                                                    .fieldName("type")
                                                                    .values(List.of(
                                                                        FacetFilterValue.builder()
                                                                            .value("Spreadsheet")
                                                                            .relationType(RelationType.EQUALS)
                                                                            .build(),
                                                                        FacetFilterValue.builder()
                                                                            .value("Presentation")
                                                                            .relationType(RelationType.EQUALS)
                                                                            .build()))
                                                                    .build()))
                                                            .build()))
                                                    .interactions(DocumentInteractions.builder()
                                                        .reacts(List.of(
                                                            Reaction.builder()
                                                                .build(),
                                                            Reaction.builder()
                                                                .build(),
                                                            Reaction.builder()
                                                                .build()))
                                                        .shares(List.of(
                                                            Share.builder()
                                                                .numDaysAgo(500063L)
                                                                .build(),
                                                            Share.builder()
                                                                .numDaysAgo(206163L)
                                                                .build(),
                                                            Share.builder()
                                                                .numDaysAgo(310383L)
                                                                .build()))
                                                        .build())
                                                    .verification(Verification.builder()
                                                        .state(State.DEPRECATED)
                                                        .metadata(VerificationMetadata.builder()
                                                            .reminders(List.of(
                                                                Reminder.builder()
                                                                    .assignee(Person.builder()
                                                                        .name("George Clooney")
                                                                        .obfuscatedId("abc123")
                                                                        .build())
                                                                    .remindAt(838038L)
                                                                    .build(),
                                                                Reminder.builder()
                                                                    .assignee(Person.builder()
                                                                        .name("George Clooney")
                                                                        .obfuscatedId("abc123")
                                                                        .build())
                                                                    .remindAt(517221L)
                                                                    .build()))
                                                            .lastReminder(Reminder.builder()
                                                                .assignee(Person.builder()
                                                                    .name("George Clooney")
                                                                    .obfuscatedId("abc123")
                                                                    .build())
                                                                .remindAt(774578L)
                                                                .build())
                                                            .build())
                                                        .build())
                                                    .customData(Map.ofEntries(
                                                        Map.entry("someCustomField", CustomDataValue.builder()
                                                            .build())))
                                                    .build())
                                                .build())
                                            .build()))
                                    .inputDetails(SearchRequestInputDetails.builder()
                                        .hasCopyPaste(true)
                                        .build())
                                    .build())
                                .results(List.of(
                                    SearchResult.builder()
                                        .url("https://example.com/foo/bar")
                                        .title("title")
                                        .nativeAppUrl("slack://foo/bar")
                                        .snippets(List.of(
                                            SearchResultSnippet.builder()
                                                .snippet("snippet")
                                                .mimeType("mimeType")
                                                .build()))
                                        .build()))
                                .build(),
                            RelatedDocuments.builder()
                                .querySuggestion(QuerySuggestion.builder()
                                    .query("app:github type:pull author:mortimer")
                                    .searchProviderInfo(SearchProviderInfo.builder()
                                        .name("Google")
                                        .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                        .build())
                                    .label("Mortimer's PRs")
                                    .datasource("github")
                                    .requestOptions(SearchRequestOptions.builder()
                                        .facetBucketSize(213989L)
                                        .datasourceFilter("JIRA")
                                        .datasourcesFilter(List.of(
                                            "JIRA"))
                                        .queryOverridesFacetFilters(true)
                                        .facetFilters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .facetFilterSets(List.of(
                                            FacetFilterSet.builder()
                                                .filters(List.of(
                                                    FacetFilter.builder()
                                                        .fieldName("type")
                                                        .values(List.of(
                                                            FacetFilterValue.builder()
                                                                .value("Spreadsheet")
                                                                .relationType(RelationType.EQUALS)
                                                                .build(),
                                                            FacetFilterValue.builder()
                                                                .value("Presentation")
                                                                .relationType(RelationType.EQUALS)
                                                                .build()))
                                                        .build()))
                                                .build()))
                                        .authTokens(List.of(
                                            AuthToken.builder()
                                                .accessToken("123abc")
                                                .datasource("gmail")
                                                .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                                .tokenType("Bearer")
                                                .authUser("1")
                                                .build()))
                                        .build())
                                    .inputDetails(SearchRequestInputDetails.builder()
                                        .hasCopyPaste(true)
                                        .build())
                                    .build())
                                .build()))
                        .metadata(PersonMetadata.builder()
                            .type(PersonMetadataType.FULL_TIME)
                            .title("Actor")
                            .department("Movies")
                            .email("george@example.com")
                            .location("Hollywood, CA")
                            .phone("6505551234")
                            .photoUrl("https://example.com/george.jpg")
                            .startDate(LocalDate.parse("2000-01-23"))
                            .datasourceProfile(List.of(
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build()))
                            .querySuggestions(QuerySuggestionList.builder()
                                .suggestions(List.of(
                                    QuerySuggestion.builder()
                                        .query("app:github type:pull author:mortimer")
                                        .label("Mortimer's PRs")
                                        .datasource("github")
                                        .build()))
                                .build())
                            .inviteInfo(InviteInfo.builder()
                                .invites(List.of(
                                    ChannelInviteInfo.builder()
                                        .build(),
                                    ChannelInviteInfo.builder()
                                        .build(),
                                    ChannelInviteInfo.builder()
                                        .build()))
                                .build())
                            .customFields(List.of(
                                CustomFieldData.builder()
                                    .label("<value>")
                                    .values(List.of(
                                        CustomFieldValue.of(CustomFieldValueStr.builder()
                                            .build()),
                                        CustomFieldValue.of(CustomFieldValueStr.builder()
                                            .build())))
                                    .displayable(true)
                                    .build()))
                            .badges(List.of(
                                Badge.builder()
                                    .key("deployment_name_new_hire")
                                    .displayName("New hire")
                                    .iconConfig(IconConfig.builder()
                                        .color("#343CED")
                                        .key("person_icon")
                                        .iconType(IconType.GLYPH)
                                        .name("user")
                                        .build())
                                    .build()))
                            .build())
                        .build())
                    .updatedBy(Person.builder()
                        .name("George Clooney")
                        .obfuscatedId("abc123")
                        .metadata(PersonMetadata.builder()
                            .type(PersonMetadataType.FULL_TIME)
                            .title("Actor")
                            .department("Movies")
                            .email("george@example.com")
                            .location("Hollywood, CA")
                            .phone("6505551234")
                            .photoUrl("https://example.com/george.jpg")
                            .startDate(LocalDate.parse("2000-01-23"))
                            .datasourceProfile(List.of(
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build()))
                            .querySuggestions(QuerySuggestionList.builder()
                                .build())
                            .inviteInfo(InviteInfo.builder()
                                .build())
                            .badges(List.of(
                                Badge.builder()
                                    .key("deployment_name_new_hire")
                                    .displayName("New hire")
                                    .iconConfig(IconConfig.builder()
                                        .color("#343CED")
                                        .key("person_icon")
                                        .iconType(IconType.GLYPH)
                                        .name("user")
                                        .build())
                                    .build()))
                            .build())
                        .build())
                    .build(),
                PinDocument.builder()
                    .documentId("<id>")
                    .audienceFilters(List.of(
                        FacetFilter.builder()
                            .fieldName("type")
                            .values(List.of(
                                FacetFilterValue.builder()
                                    .value("Spreadsheet")
                                    .relationType(RelationType.EQUALS)
                                    .build(),
                                FacetFilterValue.builder()
                                    .value("Presentation")
                                    .relationType(RelationType.EQUALS)
                                    .build()))
                            .build()))
                    .attribution(Person.builder()
                        .name("George Clooney")
                        .obfuscatedId("abc123")
                        .metadata(PersonMetadata.builder()
                            .type(PersonMetadataType.FULL_TIME)
                            .title("Actor")
                            .department("Movies")
                            .email("george@example.com")
                            .location("Hollywood, CA")
                            .phone("6505551234")
                            .photoUrl("https://example.com/george.jpg")
                            .startDate(LocalDate.parse("2000-01-23"))
                            .datasourceProfile(List.of(
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build()))
                            .querySuggestions(QuerySuggestionList.builder()
                                .build())
                            .inviteInfo(InviteInfo.builder()
                                .build())
                            .badges(List.of(
                                Badge.builder()
                                    .key("deployment_name_new_hire")
                                    .displayName("New hire")
                                    .iconConfig(IconConfig.builder()
                                        .color("#343CED")
                                        .key("person_icon")
                                        .iconType(IconType.GLYPH)
                                        .name("user")
                                        .build())
                                    .build()))
                            .build())
                        .build())
                    .updatedBy(Person.builder()
                        .name("George Clooney")
                        .obfuscatedId("abc123")
                        .metadata(PersonMetadata.builder()
                            .type(PersonMetadataType.FULL_TIME)
                            .title("Actor")
                            .department("Movies")
                            .email("george@example.com")
                            .location("Hollywood, CA")
                            .phone("6505551234")
                            .photoUrl("https://example.com/george.jpg")
                            .startDate(LocalDate.parse("2000-01-23"))
                            .datasourceProfile(List.of(
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build()))
                            .querySuggestions(QuerySuggestionList.builder()
                                .build())
                            .inviteInfo(InviteInfo.builder()
                                .build())
                            .badges(List.of(
                                Badge.builder()
                                    .key("deployment_name_new_hire")
                                    .displayName("New hire")
                                    .iconConfig(IconConfig.builder()
                                        .color("#343CED")
                                        .key("person_icon")
                                        .iconType(IconType.GLYPH)
                                        .name("user")
                                        .build())
                                    .build()))
                            .build())
                        .build())
                    .build(),
                PinDocument.builder()
                    .documentId("<id>")
                    .audienceFilters(List.of(
                        FacetFilter.builder()
                            .fieldName("type")
                            .values(List.of(
                                FacetFilterValue.builder()
                                    .value("Spreadsheet")
                                    .relationType(RelationType.EQUALS)
                                    .build(),
                                FacetFilterValue.builder()
                                    .value("Presentation")
                                    .relationType(RelationType.EQUALS)
                                    .build()))
                            .build()))
                    .attribution(Person.builder()
                        .name("George Clooney")
                        .obfuscatedId("abc123")
                        .metadata(PersonMetadata.builder()
                            .type(PersonMetadataType.FULL_TIME)
                            .title("Actor")
                            .department("Movies")
                            .email("george@example.com")
                            .location("Hollywood, CA")
                            .phone("6505551234")
                            .photoUrl("https://example.com/george.jpg")
                            .startDate(LocalDate.parse("2000-01-23"))
                            .datasourceProfile(List.of(
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build()))
                            .querySuggestions(QuerySuggestionList.builder()
                                .build())
                            .inviteInfo(InviteInfo.builder()
                                .build())
                            .badges(List.of(
                                Badge.builder()
                                    .key("deployment_name_new_hire")
                                    .displayName("New hire")
                                    .iconConfig(IconConfig.builder()
                                        .color("#343CED")
                                        .key("person_icon")
                                        .iconType(IconType.GLYPH)
                                        .name("user")
                                        .build())
                                    .build()))
                            .build())
                        .build())
                    .updatedBy(Person.builder()
                        .name("George Clooney")
                        .obfuscatedId("abc123")
                        .metadata(PersonMetadata.builder()
                            .type(PersonMetadataType.FULL_TIME)
                            .title("Actor")
                            .department("Movies")
                            .email("george@example.com")
                            .location("Hollywood, CA")
                            .phone("6505551234")
                            .photoUrl("https://example.com/george.jpg")
                            .startDate(LocalDate.parse("2000-01-23"))
                            .datasourceProfile(List.of(
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build(),
                                DatasourceProfile.builder()
                                    .datasource("github")
                                    .handle("<value>")
                                    .build()))
                            .querySuggestions(QuerySuggestionList.builder()
                                .build())
                            .inviteInfo(InviteInfo.builder()
                                .build())
                            .badges(List.of(
                                Badge.builder()
                                    .key("deployment_name_new_hire")
                                    .displayName("New hire")
                                    .iconConfig(IconConfig.builder()
                                        .color("#343CED")
                                        .key("person_icon")
                                        .iconType(IconType.GLYPH)
                                        .name("user")
                                        .build())
                                    .build()))
                            .build())
                        .build())
                    .build()))
            .build(),
            res.listPinsResponse().get());
    }

    @Test
    public void testPins_Pin() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("pin");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        PinRequest req = PinRequest.builder()
                .audienceFilters(List.of(
                    FacetFilter.builder()
                        .fieldName("type")
                        .values(List.of(
                            FacetFilterValue.builder()
                                .value("Spreadsheet")
                                .relationType(RelationType.EQUALS)
                                .build(),
                            FacetFilterValue.builder()
                                .value("Presentation")
                                .relationType(RelationType.EQUALS)
                                .build()))
                        .build()))
                .build();

        PinResponse res = sdk.client().pins().create()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PinDocument.builder()
            .documentId("<id>")
            .audienceFilters(List.of(
                FacetFilter.builder()
                    .fieldName("type")
                    .values(List.of(
                        FacetFilterValue.builder()
                            .value("Spreadsheet")
                            .relationType(RelationType.EQUALS)
                            .build(),
                        FacetFilterValue.builder()
                            .value("Presentation")
                            .relationType(RelationType.EQUALS)
                            .build()))
                    .build()))
            .attribution(Person.builder()
                .name("George Clooney")
                .obfuscatedId("abc123")
                .relatedDocuments(List.of(
                    RelatedDocuments.builder()
                        .querySuggestion(QuerySuggestion.builder()
                            .query("app:github type:pull author:mortimer")
                            .searchProviderInfo(SearchProviderInfo.builder()
                                .name("Google")
                                .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                .build())
                            .label("Mortimer's PRs")
                            .datasource("github")
                            .requestOptions(SearchRequestOptions.builder()
                                .facetBucketSize(417458L)
                                .datasourceFilter("JIRA")
                                .datasourcesFilter(List.of(
                                    "JIRA"))
                                .queryOverridesFacetFilters(true)
                                .facetFilters(List.of(
                                    FacetFilter.builder()
                                        .fieldName("type")
                                        .values(List.of(
                                            FacetFilterValue.builder()
                                                .value("Spreadsheet")
                                                .relationType(RelationType.EQUALS)
                                                .build(),
                                            FacetFilterValue.builder()
                                                .value("Presentation")
                                                .relationType(RelationType.EQUALS)
                                                .build()))
                                        .build()))
                                .facetFilterSets(List.of(
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build(),
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build()))
                                .authTokens(List.of(
                                    AuthToken.builder()
                                        .accessToken("123abc")
                                        .datasource("gmail")
                                        .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                        .tokenType("Bearer")
                                        .authUser("1")
                                        .build()))
                                .build())
                            .ranges(List.of(
                                TextRange.builder()
                                    .startIndex(69025L)
                                    .document(Document.builder()
                                        .metadata(DocumentMetadata.builder()
                                            .datasource("datasource")
                                            .objectType("Feature Request")
                                            .container("container")
                                            .parentId("JIRA_EN-1337")
                                            .mimeType("mimeType")
                                            .documentId("documentId")
                                            .createTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                            .updateTime(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))
                                            .components(List.of(
                                                "Backend",
                                                "Networking"))
                                            .status("[\"Done\"]")
                                            .collections(List.of(
                                                Collection.builder()
                                                    .name("<value>")
                                                    .description("vice between gee")
                                                    .id(550483L)
                                                    .addedRoles(List.of(
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.VIEWER)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.OWNER)
                                                            .build()))
                                                    .removedRoles(List.of(
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.OWNER)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.EDITOR)
                                                            .build()))
                                                    .audienceFilters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .items(List.of(
                                                        CollectionItem.builder()
                                                            .collectionId(452224L)
                                                            .itemType(CollectionItemItemType.TEXT)
                                                            .build(),
                                                        CollectionItem.builder()
                                                            .collectionId(259772L)
                                                            .itemType(CollectionItemItemType.COLLECTION)
                                                            .build(),
                                                        CollectionItem.builder()
                                                            .collectionId(137324L)
                                                            .itemType(CollectionItemItemType.URL)
                                                            .build()))
                                                    .roles(List.of(
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.EDITOR)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.VIEWER)
                                                            .build(),
                                                        UserRoleSpecification.builder()
                                                            .role(UserRole.ANSWER_MODERATOR)
                                                            .build()))
                                                    .build(),
                                                Collection.builder()
                                                    .name("<value>")
                                                    .description("attend alongside aw blend ha ew")
                                                    .id(497070L)
                                                    .audienceFilters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build(),
                                                Collection.builder()
                                                    .name("<value>")
                                                    .description("embalm simple ouch when pfft ah vainly")
                                                    .id(154150L)
                                                    .audienceFilters(List.of(
                                                        FacetFilter.builder()
                                                            .fieldName("type")
                                                            .values(List.of(
                                                                FacetFilterValue.builder()
                                                                    .value("Spreadsheet")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build(),
                                                                FacetFilterValue.builder()
                                                                    .value("Presentation")
                                                                    .relationType(RelationType.EQUALS)
                                                                    .build()))
                                                            .build()))
                                                    .build()))
                                            .interactions(DocumentInteractions.builder()
                                                .reacts(List.of(
                                                    Reaction.builder()
                                                        .build(),
                                                    Reaction.builder()
                                                        .build(),
                                                    Reaction.builder()
                                                        .build()))
                                                .shares(List.of(
                                                    Share.builder()
                                                        .numDaysAgo(842284L)
                                                        .build(),
                                                    Share.builder()
                                                        .numDaysAgo(466260L)
                                                        .build(),
                                                    Share.builder()
                                                        .numDaysAgo(931588L)
                                                        .build()))
                                                .build())
                                            .verification(Verification.builder()
                                                .state(State.UNVERIFIED)
                                                .metadata(VerificationMetadata.builder()
                                                    .reminders(List.of(
                                                        Reminder.builder()
                                                            .assignee(Person.builder()
                                                                .name("George Clooney")
                                                                .obfuscatedId("abc123")
                                                                .build())
                                                            .remindAt(982866L)
                                                            .build()))
                                                    .lastReminder(Reminder.builder()
                                                        .assignee(Person.builder()
                                                            .name("George Clooney")
                                                            .obfuscatedId("abc123")
                                                            .build())
                                                        .remindAt(482357L)
                                                        .build())
                                                    .build())
                                                .build())
                                            .customData(Map.ofEntries(
                                                Map.entry("someCustomField", CustomDataValue.builder()
                                                    .build())))
                                            .build())
                                        .build())
                                    .build()))
                            .inputDetails(SearchRequestInputDetails.builder()
                                .hasCopyPaste(true)
                                .build())
                            .build())
                        .results(List.of(
                            SearchResult.builder()
                                .url("https://example.com/foo/bar")
                                .title("title")
                                .nativeAppUrl("slack://foo/bar")
                                .snippets(List.of(
                                    SearchResultSnippet.builder()
                                        .snippet("snippet")
                                        .mimeType("mimeType")
                                        .build()))
                                .build()))
                        .build(),
                    RelatedDocuments.builder()
                        .querySuggestion(QuerySuggestion.builder()
                            .query("app:github type:pull author:mortimer")
                            .searchProviderInfo(SearchProviderInfo.builder()
                                .name("Google")
                                .searchLinkUrlTemplate("https://www.google.com/search?q={query}&hl=en")
                                .build())
                            .label("Mortimer's PRs")
                            .datasource("github")
                            .requestOptions(SearchRequestOptions.builder()
                                .facetBucketSize(150565L)
                                .datasourceFilter("JIRA")
                                .datasourcesFilter(List.of(
                                    "JIRA"))
                                .queryOverridesFacetFilters(true)
                                .facetFilters(List.of(
                                    FacetFilter.builder()
                                        .fieldName("type")
                                        .values(List.of(
                                            FacetFilterValue.builder()
                                                .value("Spreadsheet")
                                                .relationType(RelationType.EQUALS)
                                                .build(),
                                            FacetFilterValue.builder()
                                                .value("Presentation")
                                                .relationType(RelationType.EQUALS)
                                                .build()))
                                        .build()))
                                .facetFilterSets(List.of(
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build(),
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build(),
                                    FacetFilterSet.builder()
                                        .filters(List.of(
                                            FacetFilter.builder()
                                                .fieldName("type")
                                                .values(List.of(
                                                    FacetFilterValue.builder()
                                                        .value("Spreadsheet")
                                                        .relationType(RelationType.EQUALS)
                                                        .build(),
                                                    FacetFilterValue.builder()
                                                        .value("Presentation")
                                                        .relationType(RelationType.EQUALS)
                                                        .build()))
                                                .build()))
                                        .build()))
                                .authTokens(List.of(
                                    AuthToken.builder()
                                        .accessToken("123abc")
                                        .datasource("gmail")
                                        .scope("email profile https://www.googleapis.com/auth/gmail.readonly")
                                        .tokenType("Bearer")
                                        .authUser("1")
                                        .build()))
                                .build())
                            .inputDetails(SearchRequestInputDetails.builder()
                                .hasCopyPaste(true)
                                .build())
                            .build())
                        .build()))
                .metadata(PersonMetadata.builder()
                    .type(PersonMetadataType.FULL_TIME)
                    .title("Actor")
                    .department("Movies")
                    .email("george@example.com")
                    .location("Hollywood, CA")
                    .phone("6505551234")
                    .photoUrl("https://example.com/george.jpg")
                    .startDate(LocalDate.parse("2000-01-23"))
                    .datasourceProfile(List.of(
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build(),
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build()))
                    .querySuggestions(QuerySuggestionList.builder()
                        .suggestions(List.of(
                            QuerySuggestion.builder()
                                .query("app:github type:pull author:mortimer")
                                .label("Mortimer's PRs")
                                .datasource("github")
                                .build()))
                        .build())
                    .inviteInfo(InviteInfo.builder()
                        .invites(List.of(
                            ChannelInviteInfo.builder()
                                .build(),
                            ChannelInviteInfo.builder()
                                .build()))
                        .build())
                    .customFields(List.of(
                        CustomFieldData.builder()
                            .label("<value>")
                            .values(List.of())
                            .displayable(true)
                            .build(),
                        CustomFieldData.builder()
                            .label("<value>")
                            .values(List.of())
                            .displayable(true)
                            .build(),
                        CustomFieldData.builder()
                            .label("<value>")
                            .values(List.of())
                            .displayable(true)
                            .build()))
                    .badges(List.of(
                        Badge.builder()
                            .key("deployment_name_new_hire")
                            .displayName("New hire")
                            .iconConfig(IconConfig.builder()
                                .color("#343CED")
                                .key("person_icon")
                                .iconType(IconType.GLYPH)
                                .name("user")
                                .build())
                            .build()))
                    .build())
                .build())
            .updatedBy(Person.builder()
                .name("George Clooney")
                .obfuscatedId("abc123")
                .metadata(PersonMetadata.builder()
                    .type(PersonMetadataType.FULL_TIME)
                    .title("Actor")
                    .department("Movies")
                    .email("george@example.com")
                    .location("Hollywood, CA")
                    .phone("6505551234")
                    .photoUrl("https://example.com/george.jpg")
                    .startDate(LocalDate.parse("2000-01-23"))
                    .datasourceProfile(List.of(
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build(),
                        DatasourceProfile.builder()
                            .datasource("github")
                            .handle("<value>")
                            .build()))
                    .querySuggestions(QuerySuggestionList.builder()
                        .build())
                    .inviteInfo(InviteInfo.builder()
                        .build())
                    .badges(List.of(
                        Badge.builder()
                            .key("deployment_name_new_hire")
                            .displayName("New hire")
                            .iconConfig(IconConfig.builder()
                                .color("#343CED")
                                .key("person_icon")
                                .iconType(IconType.GLYPH)
                                .name("user")
                                .build())
                            .build()))
                    .build())
                .build())
            .build(),
            res.pinDocument().get());
    }

    @Test
    public void testPins_Unpin() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("unpin");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        Unpin req = Unpin.builder()
                .build();

        UnpinResponse res = sdk.client().pins().remove()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }
}