/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.glean.api_client.glean_api_client;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.glean.api_client.glean_api_client.models.components.GetDlpReportResponse;
import com.glean.api_client.glean_api_client.models.components.ListDlpReportsResponse;
import com.glean.api_client.glean_api_client.models.operations.GetpolicyResponse;
import com.glean.api_client.glean_api_client.models.operations.ListpoliciesResponse;
import com.glean.api_client.glean_api_client.utils.Utils;
import java.lang.Exception;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.Test;

public class PoliciesTests {

    @Test
    public void testPolicies_Getpolicy() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getpolicy");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        GetpolicyResponse res = sdk.client().governance().data().policies().retrieve()
                .id("<id>")
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            GetDlpReportResponse.builder()
            .build(),
            res.getDlpReportResponse().get());
    }

    @Test
    public void testPolicies_Getpolicies() throws Exception {
        Assumptions.assumeTrue(false, "incomplete test found please make sure to address the following errors: [`workflow step getpolicies.test referencing operation getpolicies not found in document`]");
    }

    @Test
    public void testPolicies_Createpolicy() throws Exception {
        Assumptions.assumeTrue(false, "incomplete test found please make sure to address the following errors: [`workflow step createpolicy.test referencing operation createpolicy is missing required request body`, `workflow step createpolicy.test contains criterion simple with invalid condition`, `workflow step createpolicy.test does not contain $contentType successCriteria and required for response body assertion`]");
    }

    @Test
    public void testPolicies_Downloadpolicycsv() throws Exception {
        Assumptions.assumeTrue(false, "incomplete test found please make sure to address the following errors: [`workflow step downloadpolicycsv.test contains criterion simple with invalid condition`, `workflow step downloadpolicycsv.test does not contain $contentType successCriteria and required for response body assertion`]");
    }

    @Test
    public void testPolicies_Listpolicies() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listpolicies");
        Glean sdk = Glean.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .apiToken("<YOUR_BEARER_TOKEN_HERE>")
            .build();

        ListpoliciesResponse res = sdk.client().governance().data().policies().list()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ListDlpReportsResponse.builder()
            .build(),
            res.listDlpReportsResponse().get());
    }
}